# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['MediaArgs', 'Media']

@pulumi.input_type
class MediaArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 os_family: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Media resource.
        :param pulumi.Input[str] path: The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
               http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
               and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
               also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
        :param pulumi.Input[str] name: Name of the media. @EXAMPLE "CentOS mirror"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] operatingsystem_ids: IDs of the operating systems associated with this media.
        :param pulumi.Input[str] os_family: Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
               `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        """
        pulumi.set(__self__, "path", path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operatingsystem_ids is not None:
            pulumi.set(__self__, "operatingsystem_ids", operatingsystem_ids)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
        http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
        and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
        also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the media. @EXAMPLE "CentOS mirror"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingsystemIds")
    def operatingsystem_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the operating systems associated with this media.
        """
        return pulumi.get(self, "operatingsystem_ids")

    @operatingsystem_ids.setter
    def operatingsystem_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "operatingsystem_ids", value)

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
        `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        """
        return pulumi.get(self, "os_family")

    @os_family.setter
    def os_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_family", value)


@pulumi.input_type
class _MediaState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 os_family: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Media resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY Remote installation media.
        :param pulumi.Input[str] name: Name of the media. @EXAMPLE "CentOS mirror"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] operatingsystem_ids: IDs of the operating systems associated with this media.
        :param pulumi.Input[str] os_family: Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
               `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        :param pulumi.Input[str] path: The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
               http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
               and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
               also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operatingsystem_ids is not None:
            pulumi.set(__self__, "operatingsystem_ids", operatingsystem_ids)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY Remote installation media.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the media. @EXAMPLE "CentOS mirror"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingsystemIds")
    def operatingsystem_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the operating systems associated with this media.
        """
        return pulumi.get(self, "operatingsystem_ids")

    @operatingsystem_ids.setter
    def operatingsystem_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "operatingsystem_ids", value)

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
        `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        """
        return pulumi.get(self, "os_family")

    @os_family.setter
    def os_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_family", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
        http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
        and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
        also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


class Media(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 os_family: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Media resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Name of the media. @EXAMPLE "CentOS mirror"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] operatingsystem_ids: IDs of the operating systems associated with this media.
        :param pulumi.Input[str] os_family: Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
               `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        :param pulumi.Input[str] path: The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
               http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
               and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
               also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Media resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MediaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 os_family: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaArgs.__new__(MediaArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["operatingsystem_ids"] = operatingsystem_ids
            __props__.__dict__["os_family"] = os_family
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            __props__.__dict__["__meta_"] = None
        super(Media, __self__).__init__(
            'foreman:index/media:Media',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            os_family: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None) -> 'Media':
        """
        Get an existing Media resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY Remote installation media.
        :param pulumi.Input[str] name: Name of the media. @EXAMPLE "CentOS mirror"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] operatingsystem_ids: IDs of the operating systems associated with this media.
        :param pulumi.Input[str] os_family: Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
               `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        :param pulumi.Input[str] path: The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
               http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
               and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
               also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaState.__new__(_MediaState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["name"] = name
        __props__.__dict__["operatingsystem_ids"] = operatingsystem_ids
        __props__.__dict__["os_family"] = os_family
        __props__.__dict__["path"] = path
        return Media(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY Remote installation media.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the media. @EXAMPLE "CentOS mirror"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingsystemIds")
    def operatingsystem_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        IDs of the operating systems associated with this media.
        """
        return pulumi.get(self, "operatingsystem_ids")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> pulumi.Output[Optional[str]]:
        """
        Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
        `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
        http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
        and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
        also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
        """
        return pulumi.get(self, "path")

