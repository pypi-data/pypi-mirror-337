import datetime
import logging

logger = logging.getLogger(__name__)

def save_readme_files(
    args, 
    readme_content, 
    reasoning_content, 
    analyzed_chunks, 
    expected_chunks, 
    analysis_iteration
):
    """
    Handle the final writing of README and reasoning files to disk.
    """
    if not readme_content or readme_content.strip() == "":
        logger.error("Failed to generate README content")
        current_date = datetime.datetime.now().strftime("%Y-%m-%d")
        readme_content = f"""# Project Documentation

DocDog attempted to generate documentation but was unable to produce meaningful content.
Please check the logs for details or try running DocDog again.

Analysis stats:
- Chunks analyzed: {len(analyzed_chunks)}/{len(expected_chunks)}
- Analysis iterations: {analysis_iteration}/{args.max_iterations}
"""
    
    current_date = datetime.datetime.now().strftime("%Y-%m-%d")
    final_readme_content = f"{readme_content}\n\n---\n*Generated by DocDog on {current_date}*"
    
    with open(args.output, "w", encoding="utf-8") as f:
        f.write(final_readme_content)
    logger.info(f"README written to {args.output}")
    
    if args.reasoning and reasoning_content:
        final_reasoning_content = f"# Reasoning Behind README Generation\n\n{reasoning_content}\n\n---\n*Generated by DocDog on {current_date}*"
        with open("reasoning.md", "w", encoding="utf-8") as f:
            f.write(final_reasoning_content)
        logger.info("Reasoning written to reasoning.md")