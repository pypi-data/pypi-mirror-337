# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 3.16.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateModelDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'outcome_type': 'str',
        'feature_store': 'str',
        'description': 'str',
        'status': 'str',
        'project_id': 'str',
        'children_last_updated_at': 'datetime',
        'children_last_updated_by': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'outcome_type': 'outcomeType',
        'feature_store': 'featureStore',
        'description': 'description',
        'status': 'status',
        'project_id': 'projectId',
        'children_last_updated_at': 'childrenLastUpdatedAt',
        'children_last_updated_by': 'childrenLastUpdatedBy'
    }

    def __init__(self, name=None, type=None, outcome_type=None, feature_store=None, description=None, status=None, project_id=None, children_last_updated_at=None, children_last_updated_by=None):  # noqa: E501
        """UpdateModelDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._outcome_type = None
        self._feature_store = None
        self._description = None
        self._status = None
        self._project_id = None
        self._children_last_updated_at = None
        self._children_last_updated_by = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if outcome_type is not None:
            self.outcome_type = outcome_type
        if feature_store is not None:
            self.feature_store = feature_store
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if project_id is not None:
            self.project_id = project_id
        if children_last_updated_at is not None:
            self.children_last_updated_at = children_last_updated_at
        if children_last_updated_by is not None:
            self.children_last_updated_by = children_last_updated_by

    @property
    def name(self):
        """Gets the name of this UpdateModelDto.  # noqa: E501


        :return: The name of this UpdateModelDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateModelDto.


        :param name: The name of this UpdateModelDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this UpdateModelDto.  # noqa: E501


        :return: The type of this UpdateModelDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateModelDto.


        :param type: The type of this UpdateModelDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["risk", "impactability"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def outcome_type(self):
        """Gets the outcome_type of this UpdateModelDto.  # noqa: E501


        :return: The outcome_type of this UpdateModelDto.  # noqa: E501
        :rtype: str
        """
        return self._outcome_type

    @outcome_type.setter
    def outcome_type(self, outcome_type):
        """Sets the outcome_type of this UpdateModelDto.


        :param outcome_type: The outcome_type of this UpdateModelDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["regression", "occurrence"]  # noqa: E501
        if outcome_type not in allowed_values:
            raise ValueError(
                "Invalid value for `outcome_type` ({0}), must be one of {1}"  # noqa: E501
                .format(outcome_type, allowed_values)
            )

        self._outcome_type = outcome_type

    @property
    def feature_store(self):
        """Gets the feature_store of this UpdateModelDto.  # noqa: E501


        :return: The feature_store of this UpdateModelDto.  # noqa: E501
        :rtype: str
        """
        return self._feature_store

    @feature_store.setter
    def feature_store(self, feature_store):
        """Sets the feature_store of this UpdateModelDto.


        :param feature_store: The feature_store of this UpdateModelDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["curia_data_lake", "byod"]  # noqa: E501
        if feature_store not in allowed_values:
            raise ValueError(
                "Invalid value for `feature_store` ({0}), must be one of {1}"  # noqa: E501
                .format(feature_store, allowed_values)
            )

        self._feature_store = feature_store

    @property
    def description(self):
        """Gets the description of this UpdateModelDto.  # noqa: E501


        :return: The description of this UpdateModelDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateModelDto.


        :param description: The description of this UpdateModelDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this UpdateModelDto.  # noqa: E501


        :return: The status of this UpdateModelDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateModelDto.


        :param status: The status of this UpdateModelDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def project_id(self):
        """Gets the project_id of this UpdateModelDto.  # noqa: E501


        :return: The project_id of this UpdateModelDto.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this UpdateModelDto.


        :param project_id: The project_id of this UpdateModelDto.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def children_last_updated_at(self):
        """Gets the children_last_updated_at of this UpdateModelDto.  # noqa: E501


        :return: The children_last_updated_at of this UpdateModelDto.  # noqa: E501
        :rtype: datetime
        """
        return self._children_last_updated_at

    @children_last_updated_at.setter
    def children_last_updated_at(self, children_last_updated_at):
        """Sets the children_last_updated_at of this UpdateModelDto.


        :param children_last_updated_at: The children_last_updated_at of this UpdateModelDto.  # noqa: E501
        :type: datetime
        """

        self._children_last_updated_at = children_last_updated_at

    @property
    def children_last_updated_by(self):
        """Gets the children_last_updated_by of this UpdateModelDto.  # noqa: E501


        :return: The children_last_updated_by of this UpdateModelDto.  # noqa: E501
        :rtype: str
        """
        return self._children_last_updated_by

    @children_last_updated_by.setter
    def children_last_updated_by(self, children_last_updated_by):
        """Sets the children_last_updated_by of this UpdateModelDto.


        :param children_last_updated_by: The children_last_updated_by of this UpdateModelDto.  # noqa: E501
        :type: str
        """

        self._children_last_updated_by = children_last_updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateModelDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateModelDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
