# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 3.16.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelJobConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stage': 'str',
        'job_type': 'str',
        'analysis_method': 'str',
        'model_job_id': 'str',
        'client_id': 'str',
        'cohort_window_count': 'float',
        'train_model_job_id': 'str',
        'container_config': 'ContainerConfig',
        'pipeline_config': 'PipelineConfig',
        'require_twelve_month_evidence_period': 'bool'
    }

    attribute_map = {
        'stage': 'stage',
        'job_type': 'job_type',
        'analysis_method': 'analysis_method',
        'model_job_id': 'model_job_id',
        'client_id': 'client_id',
        'cohort_window_count': 'cohort_window_count',
        'train_model_job_id': 'train_model_job_id',
        'container_config': 'container_config',
        'pipeline_config': 'pipeline_config',
        'require_twelve_month_evidence_period': 'require_twelve_month_evidence_period'
    }

    def __init__(self, stage=None, job_type=None, analysis_method=None, model_job_id=None, client_id=None, cohort_window_count=None, train_model_job_id=None, container_config=None, pipeline_config=None, require_twelve_month_evidence_period=None):  # noqa: E501
        """ModelJobConfig - a model defined in Swagger"""  # noqa: E501
        self._stage = None
        self._job_type = None
        self._analysis_method = None
        self._model_job_id = None
        self._client_id = None
        self._cohort_window_count = None
        self._train_model_job_id = None
        self._container_config = None
        self._pipeline_config = None
        self._require_twelve_month_evidence_period = None
        self.discriminator = None
        if stage is not None:
            self.stage = stage
        if job_type is not None:
            self.job_type = job_type
        if analysis_method is not None:
            self.analysis_method = analysis_method
        if model_job_id is not None:
            self.model_job_id = model_job_id
        if client_id is not None:
            self.client_id = client_id
        if cohort_window_count is not None:
            self.cohort_window_count = cohort_window_count
        if train_model_job_id is not None:
            self.train_model_job_id = train_model_job_id
        if container_config is not None:
            self.container_config = container_config
        if pipeline_config is not None:
            self.pipeline_config = pipeline_config
        if require_twelve_month_evidence_period is not None:
            self.require_twelve_month_evidence_period = require_twelve_month_evidence_period

    @property
    def stage(self):
        """Gets the stage of this ModelJobConfig.  # noqa: E501


        :return: The stage of this ModelJobConfig.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this ModelJobConfig.


        :param stage: The stage of this ModelJobConfig.  # noqa: E501
        :type: str
        """

        self._stage = stage

    @property
    def job_type(self):
        """Gets the job_type of this ModelJobConfig.  # noqa: E501


        :return: The job_type of this ModelJobConfig.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this ModelJobConfig.


        :param job_type: The job_type of this ModelJobConfig.  # noqa: E501
        :type: str
        """

        self._job_type = job_type

    @property
    def analysis_method(self):
        """Gets the analysis_method of this ModelJobConfig.  # noqa: E501


        :return: The analysis_method of this ModelJobConfig.  # noqa: E501
        :rtype: str
        """
        return self._analysis_method

    @analysis_method.setter
    def analysis_method(self, analysis_method):
        """Sets the analysis_method of this ModelJobConfig.


        :param analysis_method: The analysis_method of this ModelJobConfig.  # noqa: E501
        :type: str
        """

        self._analysis_method = analysis_method

    @property
    def model_job_id(self):
        """Gets the model_job_id of this ModelJobConfig.  # noqa: E501


        :return: The model_job_id of this ModelJobConfig.  # noqa: E501
        :rtype: str
        """
        return self._model_job_id

    @model_job_id.setter
    def model_job_id(self, model_job_id):
        """Sets the model_job_id of this ModelJobConfig.


        :param model_job_id: The model_job_id of this ModelJobConfig.  # noqa: E501
        :type: str
        """

        self._model_job_id = model_job_id

    @property
    def client_id(self):
        """Gets the client_id of this ModelJobConfig.  # noqa: E501


        :return: The client_id of this ModelJobConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ModelJobConfig.


        :param client_id: The client_id of this ModelJobConfig.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def cohort_window_count(self):
        """Gets the cohort_window_count of this ModelJobConfig.  # noqa: E501


        :return: The cohort_window_count of this ModelJobConfig.  # noqa: E501
        :rtype: float
        """
        return self._cohort_window_count

    @cohort_window_count.setter
    def cohort_window_count(self, cohort_window_count):
        """Sets the cohort_window_count of this ModelJobConfig.


        :param cohort_window_count: The cohort_window_count of this ModelJobConfig.  # noqa: E501
        :type: float
        """

        self._cohort_window_count = cohort_window_count

    @property
    def train_model_job_id(self):
        """Gets the train_model_job_id of this ModelJobConfig.  # noqa: E501


        :return: The train_model_job_id of this ModelJobConfig.  # noqa: E501
        :rtype: str
        """
        return self._train_model_job_id

    @train_model_job_id.setter
    def train_model_job_id(self, train_model_job_id):
        """Sets the train_model_job_id of this ModelJobConfig.


        :param train_model_job_id: The train_model_job_id of this ModelJobConfig.  # noqa: E501
        :type: str
        """

        self._train_model_job_id = train_model_job_id

    @property
    def container_config(self):
        """Gets the container_config of this ModelJobConfig.  # noqa: E501


        :return: The container_config of this ModelJobConfig.  # noqa: E501
        :rtype: ContainerConfig
        """
        return self._container_config

    @container_config.setter
    def container_config(self, container_config):
        """Sets the container_config of this ModelJobConfig.


        :param container_config: The container_config of this ModelJobConfig.  # noqa: E501
        :type: ContainerConfig
        """

        self._container_config = container_config

    @property
    def pipeline_config(self):
        """Gets the pipeline_config of this ModelJobConfig.  # noqa: E501


        :return: The pipeline_config of this ModelJobConfig.  # noqa: E501
        :rtype: PipelineConfig
        """
        return self._pipeline_config

    @pipeline_config.setter
    def pipeline_config(self, pipeline_config):
        """Sets the pipeline_config of this ModelJobConfig.


        :param pipeline_config: The pipeline_config of this ModelJobConfig.  # noqa: E501
        :type: PipelineConfig
        """

        self._pipeline_config = pipeline_config

    @property
    def require_twelve_month_evidence_period(self):
        """Gets the require_twelve_month_evidence_period of this ModelJobConfig.  # noqa: E501


        :return: The require_twelve_month_evidence_period of this ModelJobConfig.  # noqa: E501
        :rtype: bool
        """
        return self._require_twelve_month_evidence_period

    @require_twelve_month_evidence_period.setter
    def require_twelve_month_evidence_period(self, require_twelve_month_evidence_period):
        """Sets the require_twelve_month_evidence_period of this ModelJobConfig.


        :param require_twelve_month_evidence_period: The require_twelve_month_evidence_period of this ModelJobConfig.  # noqa: E501
        :type: bool
        """

        self._require_twelve_month_evidence_period = require_twelve_month_evidence_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelJobConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelJobConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
