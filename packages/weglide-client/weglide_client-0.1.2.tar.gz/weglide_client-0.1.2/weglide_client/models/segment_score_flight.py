# coding: utf-8

"""
    WeGlide

    Quantifying airsports

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from weglide_client.models.segment_flight import SegmentFlight
from typing import Optional, Set
from typing_extensions import Self

class SegmentScoreFlight(BaseModel):
    """
    SegmentScoreFlight
    """ # noqa: E501
    id: StrictInt
    segment: SegmentFlight
    points: Union[StrictFloat, StrictInt]
    raw_speed: Union[StrictFloat, StrictInt]
    corrected_speed: Union[StrictFloat, StrictInt]
    start_time: datetime
    end_time: datetime
    start_alt: StrictInt
    end_alt: StrictInt
    upside_down: StrictBool
    direction: StrictInt
    rank: Optional[StrictInt] = None
    personal_rank: Optional[StrictInt] = None
    min_alt: StrictInt
    max_alt: StrictInt
    wind_speed: Optional[Union[StrictFloat, StrictInt]] = None
    wind_direction: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "segment", "points", "raw_speed", "corrected_speed", "start_time", "end_time", "start_alt", "end_alt", "upside_down", "direction", "rank", "personal_rank", "min_alt", "max_alt", "wind_speed", "wind_direction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SegmentScoreFlight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of segment
        if self.segment:
            _dict['segment'] = self.segment.to_dict()
        # set to None if rank (nullable) is None
        # and model_fields_set contains the field
        if self.rank is None and "rank" in self.model_fields_set:
            _dict['rank'] = None

        # set to None if personal_rank (nullable) is None
        # and model_fields_set contains the field
        if self.personal_rank is None and "personal_rank" in self.model_fields_set:
            _dict['personal_rank'] = None

        # set to None if wind_speed (nullable) is None
        # and model_fields_set contains the field
        if self.wind_speed is None and "wind_speed" in self.model_fields_set:
            _dict['wind_speed'] = None

        # set to None if wind_direction (nullable) is None
        # and model_fields_set contains the field
        if self.wind_direction is None and "wind_direction" in self.model_fields_set:
            _dict['wind_direction'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SegmentScoreFlight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "segment": SegmentFlight.from_dict(obj["segment"]) if obj.get("segment") is not None else None,
            "points": obj.get("points"),
            "raw_speed": obj.get("raw_speed"),
            "corrected_speed": obj.get("corrected_speed"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "start_alt": obj.get("start_alt"),
            "end_alt": obj.get("end_alt"),
            "upside_down": obj.get("upside_down"),
            "direction": obj.get("direction"),
            "rank": obj.get("rank"),
            "personal_rank": obj.get("personal_rank"),
            "min_alt": obj.get("min_alt"),
            "max_alt": obj.get("max_alt"),
            "wind_speed": obj.get("wind_speed"),
            "wind_direction": obj.get("wind_direction")
        })
        return _obj


