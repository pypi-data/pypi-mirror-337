# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMediaResult',
    'AwaitableGetMediaResult',
    'get_media',
    'get_media_output',
]

@pulumi.output_type
class GetMediaResult:
    """
    A collection of values returned by getMedia.
    """
    def __init__(__self__, id=None, name=None, operatingsystem_ids=None, os_family=None, path=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operatingsystem_ids and not isinstance(operatingsystem_ids, list):
            raise TypeError("Expected argument 'operatingsystem_ids' to be a list")
        pulumi.set(__self__, "operatingsystem_ids", operatingsystem_ids)
        if os_family and not isinstance(os_family, str):
            raise TypeError("Expected argument 'os_family' to be a str")
        pulumi.set(__self__, "os_family", os_family)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingsystemIds")
    def operatingsystem_ids(self) -> Sequence[int]:
        return pulumi.get(self, "operatingsystem_ids")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")


class AwaitableGetMediaResult(GetMediaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMediaResult(
            id=self.id,
            name=self.name,
            operatingsystem_ids=self.operatingsystem_ids,
            os_family=self.os_family,
            path=self.path)


def get_media(name: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMediaResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getMedia:getMedia', __args__, opts=opts, typ=GetMediaResult).value

    return AwaitableGetMediaResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        operatingsystem_ids=pulumi.get(__ret__, 'operatingsystem_ids'),
        os_family=pulumi.get(__ret__, 'os_family'),
        path=pulumi.get(__ret__, 'path'))
def get_media_output(name: Optional[pulumi.Input[str]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMediaResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getMedia:getMedia', __args__, opts=opts, typ=GetMediaResult)
    return __ret__.apply(lambda __response__: GetMediaResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        operatingsystem_ids=pulumi.get(__response__, 'operatingsystem_ids'),
        os_family=pulumi.get(__response__, 'os_family'),
        path=pulumi.get(__response__, 'path')))
