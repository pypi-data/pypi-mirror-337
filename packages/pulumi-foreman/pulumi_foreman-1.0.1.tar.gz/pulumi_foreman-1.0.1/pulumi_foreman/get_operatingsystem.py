# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetOperatingsystemResult',
    'AwaitableGetOperatingsystemResult',
    'get_operatingsystem',
    'get_operatingsystem_output',
]

@pulumi.output_type
class GetOperatingsystemResult:
    """
    A collection of values returned by getOperatingsystem.
    """
    def __init__(__self__, architectures=None, description=None, family=None, id=None, major=None, media=None, minor=None, name=None, parameters=None, partitiontables=None, password_hash=None, provisioning_templates=None, release_name=None, title=None):
        if architectures and not isinstance(architectures, list):
            raise TypeError("Expected argument 'architectures' to be a list")
        pulumi.set(__self__, "architectures", architectures)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if family and not isinstance(family, str):
            raise TypeError("Expected argument 'family' to be a str")
        pulumi.set(__self__, "family", family)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if major and not isinstance(major, str):
            raise TypeError("Expected argument 'major' to be a str")
        pulumi.set(__self__, "major", major)
        if media and not isinstance(media, list):
            raise TypeError("Expected argument 'media' to be a list")
        pulumi.set(__self__, "media", media)
        if minor and not isinstance(minor, str):
            raise TypeError("Expected argument 'minor' to be a str")
        pulumi.set(__self__, "minor", minor)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parameters and not isinstance(parameters, dict):
            raise TypeError("Expected argument 'parameters' to be a dict")
        pulumi.set(__self__, "parameters", parameters)
        if partitiontables and not isinstance(partitiontables, list):
            raise TypeError("Expected argument 'partitiontables' to be a list")
        pulumi.set(__self__, "partitiontables", partitiontables)
        if password_hash and not isinstance(password_hash, str):
            raise TypeError("Expected argument 'password_hash' to be a str")
        pulumi.set(__self__, "password_hash", password_hash)
        if provisioning_templates and not isinstance(provisioning_templates, list):
            raise TypeError("Expected argument 'provisioning_templates' to be a list")
        pulumi.set(__self__, "provisioning_templates", provisioning_templates)
        if release_name and not isinstance(release_name, str):
            raise TypeError("Expected argument 'release_name' to be a str")
        pulumi.set(__self__, "release_name", release_name)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def architectures(self) -> Sequence[int]:
        return pulumi.get(self, "architectures")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def family(self) -> str:
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def major(self) -> str:
        return pulumi.get(self, "major")

    @property
    @pulumi.getter
    def media(self) -> Sequence[int]:
        return pulumi.get(self, "media")

    @property
    @pulumi.getter
    def minor(self) -> str:
        return pulumi.get(self, "minor")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Mapping[str, str]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def partitiontables(self) -> Sequence[int]:
        return pulumi.get(self, "partitiontables")

    @property
    @pulumi.getter(name="passwordHash")
    def password_hash(self) -> str:
        return pulumi.get(self, "password_hash")

    @property
    @pulumi.getter(name="provisioningTemplates")
    def provisioning_templates(self) -> Sequence[int]:
        return pulumi.get(self, "provisioning_templates")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> str:
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")


class AwaitableGetOperatingsystemResult(GetOperatingsystemResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOperatingsystemResult(
            architectures=self.architectures,
            description=self.description,
            family=self.family,
            id=self.id,
            major=self.major,
            media=self.media,
            minor=self.minor,
            name=self.name,
            parameters=self.parameters,
            partitiontables=self.partitiontables,
            password_hash=self.password_hash,
            provisioning_templates=self.provisioning_templates,
            release_name=self.release_name,
            title=self.title)


def get_operatingsystem(title: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOperatingsystemResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['title'] = title
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getOperatingsystem:getOperatingsystem', __args__, opts=opts, typ=GetOperatingsystemResult).value

    return AwaitableGetOperatingsystemResult(
        architectures=pulumi.get(__ret__, 'architectures'),
        description=pulumi.get(__ret__, 'description'),
        family=pulumi.get(__ret__, 'family'),
        id=pulumi.get(__ret__, 'id'),
        major=pulumi.get(__ret__, 'major'),
        media=pulumi.get(__ret__, 'media'),
        minor=pulumi.get(__ret__, 'minor'),
        name=pulumi.get(__ret__, 'name'),
        parameters=pulumi.get(__ret__, 'parameters'),
        partitiontables=pulumi.get(__ret__, 'partitiontables'),
        password_hash=pulumi.get(__ret__, 'password_hash'),
        provisioning_templates=pulumi.get(__ret__, 'provisioning_templates'),
        release_name=pulumi.get(__ret__, 'release_name'),
        title=pulumi.get(__ret__, 'title'))
def get_operatingsystem_output(title: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOperatingsystemResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['title'] = title
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getOperatingsystem:getOperatingsystem', __args__, opts=opts, typ=GetOperatingsystemResult)
    return __ret__.apply(lambda __response__: GetOperatingsystemResult(
        architectures=pulumi.get(__response__, 'architectures'),
        description=pulumi.get(__response__, 'description'),
        family=pulumi.get(__response__, 'family'),
        id=pulumi.get(__response__, 'id'),
        major=pulumi.get(__response__, 'major'),
        media=pulumi.get(__response__, 'media'),
        minor=pulumi.get(__response__, 'minor'),
        name=pulumi.get(__response__, 'name'),
        parameters=pulumi.get(__response__, 'parameters'),
        partitiontables=pulumi.get(__response__, 'partitiontables'),
        password_hash=pulumi.get(__response__, 'password_hash'),
        provisioning_templates=pulumi.get(__response__, 'provisioning_templates'),
        release_name=pulumi.get(__response__, 'release_name'),
        title=pulumi.get(__response__, 'title')))
