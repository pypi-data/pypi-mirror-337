import os
os.environ['DATA_ROOT'] = '/work_uncached/sarandi/data'
import torch
import numpy as np
import smplfitter.pt
import smplfitter.tf
import smplfitter.np
import tensorflow as tf

def test_smpl():
    import numpy as np

    rots = np.array(
        [
            [-0.2998608, -0.9836695, -0.22383998],
            [0.38106656, 0.07226906, -1.1360204],
            [-0.61942333, -2.3423102, 1.7903274],
            [0.6375229, 0.10896486, 0.10695166],
            [-0.02330915, 3.342317, -0.4800805],
            [0.42143953, 1.1445171, -0.42258897],
            [0.7063001, -0.7139209, 1.2776904],
            [0.62863266, -0.01313356, -1.0089844],
            [-0.4268824, -0.27957132, 0.24558091],
            [0.55019844, -0.40715662, -0.38941893],
            [-1.0769964, -0.88081634, -1.1908157],
            [0.34880775, -0.89077, -0.3329146],
            [0.27872324, 0.47037643, 0.99883217],
            [0.1432318, 1.1869217, -0.38373157],
            [0.09474352, -0.62083644, -1.551528],
            [-0.8025107, -0.19783589, -0.18501784],
            [-1.5224149, 0.06361245, 1.194361],
            [-0.80312276, -1.1394854, 0.8392763],
            [-1.4884635, -0.44261244, -0.09638675],
            [-1.8435351, -0.9200846, -2.2253158],
            [0.69821006, 1.85872, -1.3796982],
            [0.98684627, 1.371694, -1.3532882],
            [-0.5118337, 0.7969513, -2.0941234],
            [-0.5394533, 0.3568366, -1.1549444],
        ],
        dtype=np.float32,
    ).reshape(1, 72)

    betas = np.array(
        [
            -0.04120533,
            1.1012676,
            0.71386796,
            0.8242652,
            -0.3062762,
            -0.69390315,
            -0.9883716,
            0.42342174,
            0.95629245,
            2.3988903,
        ],
        dtype=np.float32,
    ).reshape(1, 10)

    verts_expect = np.array(
        [
            [-0.31561506, -0.19573829, -0.2278698],
            [-0.2737751, -0.0806943, -0.10260256],
            [-0.08436064, -0.07903833, 0.06549202],
            [0.00748491, -0.34520006, -0.02251317],
            [-0.02975872, -0.07991007, 0.06968483],
            [-0.08751179, -0.3728845, 0.08325039],
            [0.00532196, -0.22488916, 0.14269876],
            [-0.5989288, 0.20601535, -0.22419791],
            [-0.5614402, 0.22583655, -0.15215985],
            [-0.6074522, 0.19423944, -0.1382547],
            [-0.20354049, 0.08411495, 0.00822184],
            [-0.37547755, -0.75920177, -0.5582831],
            [-0.20452714, -0.2085776, -0.15184362],
            [-0.24877605, -0.02453116, -0.1693495],
            [-0.16942836, 0.01383219, -0.17315069],
            [-0.40145808, -0.20406085, 0.11072192],
            [-0.19426356, -0.12822372, -0.07858283],
            [-0.21444616, 0.11291359, -0.28694904],
            [-0.03094178, 0.1304345, -0.287278],
            [0.03339618, 0.09186503, -0.23215306],
            [-0.06823993, 0.05207816, -0.18791145],
            [0.03933272, -0.04883602, -0.07643933],
            [-0.58592105, -0.22426295, 0.47878864],
        ],
        dtype=np.float32,
    )

    joints_expect = np.array(
        [
            [
                [-0.0035567, -0.22578421, 0.02178152],
                [0.01122593, -0.3164693, 0.08350053],
                [-0.05886902, -0.30809784, -0.02239355],
                [0.04461994, -0.133554, -0.00669834],
                [-0.13336053, -0.49748594, -0.22066739],
                [-0.41264176, -0.26420552, 0.13970822],
                [0.01156533, 0.00226186, 0.01874427],
                [-0.4080433, -0.67771566, -0.45722306],
                [-0.6379535, -0.23917902, 0.47514957],
                [-0.03438119, -0.01422367, -0.013392],
                [-0.4003926, -0.7719722, -0.55142283],
                [-0.7369364, -0.2853257, 0.3993117],
                [-0.23733345, -0.06359008, -0.08271106],
                [-0.17442417, -0.03042907, 0.02239548],
                [-0.12635353, -0.02636155, -0.12550034],
                [-0.23877588, -0.15176964, -0.10665655],
                [-0.22756623, 0.04699896, 0.03991608],
                [-0.2231345, -0.03916815, -0.11162155],
                [-0.4122128, 0.19188526, -0.08030701],
                [-0.23223686, 0.14388451, -0.28560317],
                [-0.60504794, 0.2155827, -0.23542781],
                [0.01797867, 0.12724313, -0.2603541],
                [-0.5859867, 0.24753429, -0.1613993],
                [-0.0052809, 0.08635106, -0.19448888],
            ]
        ],
        dtype=np.float32,
    )


    # pt
    model = smplfitter.pt.BodyModel('smpl', 'neutral')
    res = model(pose_rotvecs=torch.from_numpy(rots), shape_betas=torch.from_numpy(betas))
    verts = res['vertices'].cpu().detach().numpy()
    joints = res['joints'].cpu().detach().numpy()

    assert verts.shape == (1, 6890, 3)
    assert joints.shape == (1, 24, 3)

    assert np.allclose(verts[:, ::300], verts_expect, atol=1e-7)
    assert np.allclose(joints, joints_expect, atol=1e-7)

    # tf
    model = smplfitter.tf.BodyModel('smpl', 'neutral')
    res = model(pose_rotvecs=rots, shape_betas=betas)
    verts = res['vertices'].numpy()
    joints = res['joints'].numpy()

    assert verts.shape == (1, 6890, 3)
    assert joints.shape == (1, 24, 3)
    assert np.allclose(verts[:, ::300], verts_expect, atol=1e-7)
    assert np.allclose(joints, joints_expect, atol=1e-7)

    # np
    model = smplfitter.np.BodyModel('smpl', 'neutral')
    res = model(pose_rotvecs=rots, shape_betas=betas)
    verts = res['vertices']
    joints = res['joints']
    assert verts.shape == (1, 6890, 3)
    assert joints.shape == (1, 24, 3)
    assert np.allclose(verts[:, ::300], verts_expect, atol=1e-7)
    assert np.allclose(joints, joints_expect, atol=1e-7)