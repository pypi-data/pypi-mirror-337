# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'TenantProperties',
    'User',
]

@pulumi.output_type
class TenantProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbDatabase":
            suggest = "db_database"
        elif key == "dbHost":
            suggest = "db_host"
        elif key == "dbPort":
            suggest = "db_port"
        elif key == "requireUser":
            suggest = "require_user"
        elif key == "allowList":
            suggest = "allow_list"
        elif key == "authQuery":
            suggest = "auth_query"
        elif key == "enforceSsl":
            suggest = "enforce_ssl"
        elif key == "externalId":
            suggest = "external_id"
        elif key == "insertedAt":
            suggest = "inserted_at"
        elif key == "ipVersion":
            suggest = "ip_version"
        elif key == "sniHostname":
            suggest = "sni_hostname"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "upstreamSsl":
            suggest = "upstream_ssl"
        elif key == "upstreamVerify":
            suggest = "upstream_verify"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TenantProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TenantProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TenantProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_database: str,
                 db_host: str,
                 db_port: int,
                 require_user: Optional[bool] = None,
                 users: Sequence['outputs.User'],
                 allow_list: Optional[Sequence[str]] = None,
                 auth_query: Optional[str] = None,
                 enforce_ssl: Optional[bool] = None,
                 external_id: Optional[str] = None,
                 id: Optional[str] = None,
                 inserted_at: Optional[str] = None,
                 ip_version: Optional[str] = None,
                 sni_hostname: Optional[str] = None,
                 updated_at: Optional[str] = None,
                 upstream_ssl: Optional[bool] = None,
                 upstream_verify: Optional[str] = None):
        """
        :param str db_database: Database name
        :param str db_host: Database host
        :param int db_port: Database port
        :param Sequence[str] allow_list: List of CIDR addresses
        :param str auth_query: SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
        :param str external_id: External ID
        :param str ip_version: auto
        :param str sni_hostname: your.domain.com
        :param str upstream_verify: none
        """
        pulumi.set(__self__, "db_database", db_database)
        pulumi.set(__self__, "db_host", db_host)
        pulumi.set(__self__, "db_port", db_port)
        if require_user is None:
            require_user = False
        pulumi.set(__self__, "require_user", require_user)
        pulumi.set(__self__, "users", users)
        if allow_list is not None:
            pulumi.set(__self__, "allow_list", allow_list)
        if auth_query is not None:
            pulumi.set(__self__, "auth_query", auth_query)
        if enforce_ssl is None:
            enforce_ssl = False
        if enforce_ssl is not None:
            pulumi.set(__self__, "enforce_ssl", enforce_ssl)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inserted_at is not None:
            pulumi.set(__self__, "inserted_at", inserted_at)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if sni_hostname is not None:
            pulumi.set(__self__, "sni_hostname", sni_hostname)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if upstream_ssl is None:
            upstream_ssl = True
        if upstream_ssl is not None:
            pulumi.set(__self__, "upstream_ssl", upstream_ssl)
        if upstream_verify is not None:
            pulumi.set(__self__, "upstream_verify", upstream_verify)

    @property
    @pulumi.getter(name="dbDatabase")
    def db_database(self) -> str:
        """
        Database name
        """
        return pulumi.get(self, "db_database")

    @property
    @pulumi.getter(name="dbHost")
    def db_host(self) -> str:
        """
        Database host
        """
        return pulumi.get(self, "db_host")

    @property
    @pulumi.getter(name="dbPort")
    def db_port(self) -> int:
        """
        Database port
        """
        return pulumi.get(self, "db_port")

    @property
    @pulumi.getter(name="requireUser")
    def require_user(self) -> bool:
        return pulumi.get(self, "require_user")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.User']:
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="allowList")
    def allow_list(self) -> Optional[Sequence[str]]:
        """
        List of CIDR addresses
        """
        return pulumi.get(self, "allow_list")

    @property
    @pulumi.getter(name="authQuery")
    def auth_query(self) -> Optional[str]:
        """
        SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
        """
        return pulumi.get(self, "auth_query")

    @property
    @pulumi.getter(name="enforceSsl")
    def enforce_ssl(self) -> Optional[bool]:
        return pulumi.get(self, "enforce_ssl")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        """
        External ID
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="insertedAt")
    def inserted_at(self) -> Optional[str]:
        return pulumi.get(self, "inserted_at")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        """
        auto
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="sniHostname")
    def sni_hostname(self) -> Optional[str]:
        """
        your.domain.com
        """
        return pulumi.get(self, "sni_hostname")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="upstreamSsl")
    def upstream_ssl(self) -> Optional[bool]:
        return pulumi.get(self, "upstream_ssl")

    @property
    @pulumi.getter(name="upstreamVerify")
    def upstream_verify(self) -> Optional[str]:
        """
        none
        """
        return pulumi.get(self, "upstream_verify")


@pulumi.output_type
class User(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbPassword":
            suggest = "db_password"
        elif key == "dbUser":
            suggest = "db_user"
        elif key == "poolSize":
            suggest = "pool_size"
        elif key == "dbUserAlias":
            suggest = "db_user_alias"
        elif key == "insertedAt":
            suggest = "inserted_at"
        elif key == "isManager":
            suggest = "is_manager"
        elif key == "maxClients":
            suggest = "max_clients"
        elif key == "modeType":
            suggest = "mode_type"
        elif key == "poolCheckoutTimeout":
            suggest = "pool_checkout_timeout"
        elif key == "tenantExternalId":
            suggest = "tenant_external_id"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in User. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        User.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        User.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_password: str,
                 db_user: str,
                 pool_size: int,
                 db_user_alias: Optional[str] = None,
                 id: Optional[str] = None,
                 inserted_at: Optional[str] = None,
                 is_manager: Optional[bool] = None,
                 max_clients: Optional[int] = None,
                 mode_type: Optional[str] = None,
                 pool_checkout_timeout: Optional[int] = None,
                 tenant_external_id: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str db_password: Database password
        :param str db_user: Database user
        :param int pool_size: Pool size
        :param str db_user_alias: Database user alias
        :param bool is_manager: The users who can be used for internal needs
        :param int max_clients: Max clients count
        :param str mode_type: Pooling mode type
        :param int pool_checkout_timeout: Pool checkout timeout
        :param str tenant_external_id: External Tenant ID
        """
        pulumi.set(__self__, "db_password", db_password)
        pulumi.set(__self__, "db_user", db_user)
        pulumi.set(__self__, "pool_size", pool_size)
        if db_user_alias is not None:
            pulumi.set(__self__, "db_user_alias", db_user_alias)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inserted_at is not None:
            pulumi.set(__self__, "inserted_at", inserted_at)
        if is_manager is not None:
            pulumi.set(__self__, "is_manager", is_manager)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if mode_type is not None:
            pulumi.set(__self__, "mode_type", mode_type)
        if pool_checkout_timeout is not None:
            pulumi.set(__self__, "pool_checkout_timeout", pool_checkout_timeout)
        if tenant_external_id is not None:
            pulumi.set(__self__, "tenant_external_id", tenant_external_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="dbPassword")
    def db_password(self) -> str:
        """
        Database password
        """
        return pulumi.get(self, "db_password")

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> str:
        """
        Database user
        """
        return pulumi.get(self, "db_user")

    @property
    @pulumi.getter(name="poolSize")
    def pool_size(self) -> int:
        """
        Pool size
        """
        return pulumi.get(self, "pool_size")

    @property
    @pulumi.getter(name="dbUserAlias")
    def db_user_alias(self) -> Optional[str]:
        """
        Database user alias
        """
        return pulumi.get(self, "db_user_alias")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="insertedAt")
    def inserted_at(self) -> Optional[str]:
        return pulumi.get(self, "inserted_at")

    @property
    @pulumi.getter(name="isManager")
    def is_manager(self) -> Optional[bool]:
        """
        The users who can be used for internal needs
        """
        return pulumi.get(self, "is_manager")

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[int]:
        """
        Max clients count
        """
        return pulumi.get(self, "max_clients")

    @property
    @pulumi.getter(name="modeType")
    def mode_type(self) -> Optional[str]:
        """
        Pooling mode type
        """
        return pulumi.get(self, "mode_type")

    @property
    @pulumi.getter(name="poolCheckoutTimeout")
    def pool_checkout_timeout(self) -> Optional[int]:
        """
        Pool checkout timeout
        """
        return pulumi.get(self, "pool_checkout_timeout")

    @property
    @pulumi.getter(name="tenantExternalId")
    def tenant_external_id(self) -> Optional[str]:
        """
        External Tenant ID
        """
        return pulumi.get(self, "tenant_external_id")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


