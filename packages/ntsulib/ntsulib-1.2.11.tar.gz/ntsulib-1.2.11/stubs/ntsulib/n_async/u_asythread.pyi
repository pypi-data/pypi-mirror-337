from _typeshed import Incomplete
from enum import Enum

class asythread_status(Enum):
    unstart: int
    running: int
    finish: int

class n_asyerror(Exception):
    message: Incomplete
    line_number: Incomplete
    def __init__(self, message) -> None: ...

class n_asyncThreadPool:
    max_workers: Incomplete
    def __init__(self, max_workers: int | None = None) -> None: ...
    @property
    def getStatus(self) -> asythread_status: ...
    def put(self, func, *args, **kwargs) -> None: ...
    def start(self) -> list | None: ...
    @classmethod
    def single_submit(cls, func, *args, **kwargs) -> any: ...
    def clear(self) -> None: ...
    def map(self, func, *args) -> list: ...
