# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from corvic_generated.chat.v1 import service_pb2 as corvic_dot_chat_dot_v1_dot_service__pb2


class ThreadServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateThread = channel.unary_unary(
                '/corvic.chat.v1.ThreadService/CreateThread',
                request_serializer=corvic_dot_chat_dot_v1_dot_service__pb2.CreateThreadRequest.SerializeToString,
                response_deserializer=corvic_dot_chat_dot_v1_dot_service__pb2.CreateThreadResponse.FromString,
                )
        self.DeleteThread = channel.unary_unary(
                '/corvic.chat.v1.ThreadService/DeleteThread',
                request_serializer=corvic_dot_chat_dot_v1_dot_service__pb2.DeleteThreadRequest.SerializeToString,
                response_deserializer=corvic_dot_chat_dot_v1_dot_service__pb2.DeleteThreadResponse.FromString,
                )
        self.ListThreads = channel.unary_stream(
                '/corvic.chat.v1.ThreadService/ListThreads',
                request_serializer=corvic_dot_chat_dot_v1_dot_service__pb2.ListThreadsRequest.SerializeToString,
                response_deserializer=corvic_dot_chat_dot_v1_dot_service__pb2.ListThreadsResponse.FromString,
                )
        self.AppendMessage = channel.unary_unary(
                '/corvic.chat.v1.ThreadService/AppendMessage',
                request_serializer=corvic_dot_chat_dot_v1_dot_service__pb2.AppendMessageRequest.SerializeToString,
                response_deserializer=corvic_dot_chat_dot_v1_dot_service__pb2.AppendMessageResponse.FromString,
                )
        self.GetMessages = channel.unary_stream(
                '/corvic.chat.v1.ThreadService/GetMessages',
                request_serializer=corvic_dot_chat_dot_v1_dot_service__pb2.GetMessagesRequest.SerializeToString,
                response_deserializer=corvic_dot_chat_dot_v1_dot_service__pb2.GetMessagesResponse.FromString,
                )


class ThreadServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteThread(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListThreads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ThreadServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateThread': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateThread,
                    request_deserializer=corvic_dot_chat_dot_v1_dot_service__pb2.CreateThreadRequest.FromString,
                    response_serializer=corvic_dot_chat_dot_v1_dot_service__pb2.CreateThreadResponse.SerializeToString,
            ),
            'DeleteThread': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteThread,
                    request_deserializer=corvic_dot_chat_dot_v1_dot_service__pb2.DeleteThreadRequest.FromString,
                    response_serializer=corvic_dot_chat_dot_v1_dot_service__pb2.DeleteThreadResponse.SerializeToString,
            ),
            'ListThreads': grpc.unary_stream_rpc_method_handler(
                    servicer.ListThreads,
                    request_deserializer=corvic_dot_chat_dot_v1_dot_service__pb2.ListThreadsRequest.FromString,
                    response_serializer=corvic_dot_chat_dot_v1_dot_service__pb2.ListThreadsResponse.SerializeToString,
            ),
            'AppendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendMessage,
                    request_deserializer=corvic_dot_chat_dot_v1_dot_service__pb2.AppendMessageRequest.FromString,
                    response_serializer=corvic_dot_chat_dot_v1_dot_service__pb2.AppendMessageResponse.SerializeToString,
            ),
            'GetMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.GetMessages,
                    request_deserializer=corvic_dot_chat_dot_v1_dot_service__pb2.GetMessagesRequest.FromString,
                    response_serializer=corvic_dot_chat_dot_v1_dot_service__pb2.GetMessagesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'corvic.chat.v1.ThreadService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ThreadService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.chat.v1.ThreadService/CreateThread',
            corvic_dot_chat_dot_v1_dot_service__pb2.CreateThreadRequest.SerializeToString,
            corvic_dot_chat_dot_v1_dot_service__pb2.CreateThreadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.chat.v1.ThreadService/DeleteThread',
            corvic_dot_chat_dot_v1_dot_service__pb2.DeleteThreadRequest.SerializeToString,
            corvic_dot_chat_dot_v1_dot_service__pb2.DeleteThreadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/corvic.chat.v1.ThreadService/ListThreads',
            corvic_dot_chat_dot_v1_dot_service__pb2.ListThreadsRequest.SerializeToString,
            corvic_dot_chat_dot_v1_dot_service__pb2.ListThreadsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/corvic.chat.v1.ThreadService/AppendMessage',
            corvic_dot_chat_dot_v1_dot_service__pb2.AppendMessageRequest.SerializeToString,
            corvic_dot_chat_dot_v1_dot_service__pb2.AppendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/corvic.chat.v1.ThreadService/GetMessages',
            corvic_dot_chat_dot_v1_dot_service__pb2.GetMessagesRequest.SerializeToString,
            corvic_dot_chat_dot_v1_dot_service__pb2.GetMessagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
