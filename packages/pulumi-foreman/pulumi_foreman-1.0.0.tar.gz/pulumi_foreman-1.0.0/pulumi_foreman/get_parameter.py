# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetParameterResult',
    'AwaitableGetParameterResult',
    'get_parameter',
    'get_parameter_output',
]

@pulumi.output_type
class GetParameterResult:
    """
    A collection of values returned by getParameter.
    """
    def __init__(__self__, domain_id=None, host_id=None, hostgroup_id=None, id=None, name=None, operatingsystem_id=None, subnet_id=None, value=None):
        if domain_id and not isinstance(domain_id, int):
            raise TypeError("Expected argument 'domain_id' to be a int")
        pulumi.set(__self__, "domain_id", domain_id)
        if host_id and not isinstance(host_id, int):
            raise TypeError("Expected argument 'host_id' to be a int")
        pulumi.set(__self__, "host_id", host_id)
        if hostgroup_id and not isinstance(hostgroup_id, int):
            raise TypeError("Expected argument 'hostgroup_id' to be a int")
        pulumi.set(__self__, "hostgroup_id", hostgroup_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operatingsystem_id and not isinstance(operatingsystem_id, int):
            raise TypeError("Expected argument 'operatingsystem_id' to be a int")
        pulumi.set(__self__, "operatingsystem_id", operatingsystem_id)
        if subnet_id and not isinstance(subnet_id, int):
            raise TypeError("Expected argument 'subnet_id' to be a int")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if value and not isinstance(value, str):
            raise TypeError("Expected argument 'value' to be a str")
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> int:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> int:
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter(name="hostgroupId")
    def hostgroup_id(self) -> int:
        return pulumi.get(self, "hostgroup_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> int:
        return pulumi.get(self, "operatingsystem_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> int:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


class AwaitableGetParameterResult(GetParameterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetParameterResult(
            domain_id=self.domain_id,
            host_id=self.host_id,
            hostgroup_id=self.hostgroup_id,
            id=self.id,
            name=self.name,
            operatingsystem_id=self.operatingsystem_id,
            subnet_id=self.subnet_id,
            value=self.value)


def get_parameter(name: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetParameterResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getParameter:getParameter', __args__, opts=opts, typ=GetParameterResult).value

    return AwaitableGetParameterResult(
        domain_id=pulumi.get(__ret__, 'domain_id'),
        host_id=pulumi.get(__ret__, 'host_id'),
        hostgroup_id=pulumi.get(__ret__, 'hostgroup_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        operatingsystem_id=pulumi.get(__ret__, 'operatingsystem_id'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        value=pulumi.get(__ret__, 'value'))
def get_parameter_output(name: Optional[pulumi.Input[str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetParameterResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getParameter:getParameter', __args__, opts=opts, typ=GetParameterResult)
    return __ret__.apply(lambda __response__: GetParameterResult(
        domain_id=pulumi.get(__response__, 'domain_id'),
        host_id=pulumi.get(__response__, 'host_id'),
        hostgroup_id=pulumi.get(__response__, 'hostgroup_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        operatingsystem_id=pulumi.get(__response__, 'operatingsystem_id'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        value=pulumi.get(__response__, 'value')))
