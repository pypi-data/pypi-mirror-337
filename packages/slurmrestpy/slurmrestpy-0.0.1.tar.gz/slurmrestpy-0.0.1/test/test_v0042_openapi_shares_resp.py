# coding: utf-8

"""
Slurm REST API

API to access and control Slurm

The version of the OpenAPI document: Slurm-24.11.1&openapi/slurmdbd&openapi/slurmctld
Contact: sales@schedmd.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from slurmrestpy.models.v0042_openapi_shares_resp import V0042OpenapiSharesResp


class TestV0042OpenapiSharesResp(unittest.TestCase):
    """V0042OpenapiSharesResp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V0042OpenapiSharesResp:
        """Test V0042OpenapiSharesResp
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `V0042OpenapiSharesResp`
        """
        model = V0042OpenapiSharesResp()
        if include_optional:
            return V0042OpenapiSharesResp(
                shares = slurmrestpy.models.v0/0/42_shares_resp_msg.v0.0.42_shares_resp_msg(
                    shares = [
                        slurmrestpy.models.v0/0/42_assoc_shares_obj_wrap.v0.0.42_assoc_shares_obj_wrap(
                            id = 56,
                            cluster = '',
                            name = '',
                            parent = '',
                            partition = '',
                            shares_normalized = slurmrestpy.models.v0/0/42_float64_no_val_struct.v0.0.42_float64_no_val_struct(
                                set = True,
                                infinite = True,
                                number = 1.337, ),
                            tres = slurmrestpy.models.v0_0_42_assoc_shares_obj_wrap_tres.v0_0_42_assoc_shares_obj_wrap_tres(
                                run_seconds = [
                                    slurmrestpy.models.v0/0/42_shares_uint64_tres.v0.0.42_shares_uint64_tres(
                                        name = '',
                                        value = slurmrestpy.models.v0/0/42_uint64_no_val_struct.v0.0.42_uint64_no_val_struct(
                                            set = True,
                                            infinite = True,
                                            number = 56, ), )
                                    ],
                                group_minutes = [
                                    slurmrestpy.models.v0/0/42_shares_uint64_tres.v0.0.42_shares_uint64_tres(
                                        name = '', )
                                    ],
                                usage = [
                                    slurmrestpy.models.v0/0/42_shares_float128_tres.v0.0.42_shares_float128_tres(
                                        name = '', )
                                    ], ),
                            effective_usage = slurmrestpy.models.v0/0/42_float64_no_val_struct.v0.0.42_float64_no_val_struct(
                                set = True,
                                infinite = True,
                                number = 1.337, ),
                            usage_normalized = ,
                            usage = 56,
                            fairshare = slurmrestpy.models.v0_0_42_assoc_shares_obj_wrap_fairshare.v0_0_42_assoc_shares_obj_wrap_fairshare(
                                factor = ,
                                level = , ),
                            type = [
                                'USER'
                                ], )
                        ],
                    total_shares = 56, ),
                meta = slurmrestpy.models.v0/0/42_openapi_meta.v0.0.42_openapi_meta(
                    plugin = slurmrestpy.models.v0_0_42_openapi_meta_plugin.v0_0_42_openapi_meta_plugin(
                        type = '',
                        name = '',
                        data_parser = '',
                        accounting_storage = '', ),
                    client = slurmrestpy.models.v0_0_42_openapi_meta_client.v0_0_42_openapi_meta_client(
                        source = '',
                        user = '',
                        group = '', ),
                    command = [
                        ''
                        ],
                    slurm = slurmrestpy.models.v0_0_42_openapi_meta_slurm.v0_0_42_openapi_meta_slurm(
                        version = slurmrestpy.models.v0_0_42_openapi_meta_slurm_version.v0_0_42_openapi_meta_slurm_version(
                            major = '',
                            micro = '',
                            minor = '', ),
                        release = '',
                        cluster = '', ), ),
                errors = [
                    slurmrestpy.models.v0/0/42_openapi_error.v0.0.42_openapi_error(
                        description = '',
                        error_number = 56,
                        error = '',
                        source = '', )
                    ],
                warnings = [
                    slurmrestpy.models.v0/0/42_openapi_warning.v0.0.42_openapi_warning(
                        description = '',
                        source = '', )
                    ]
            )
        else:
            return V0042OpenapiSharesResp(
                shares = slurmrestpy.models.v0/0/42_shares_resp_msg.v0.0.42_shares_resp_msg(
                    shares = [
                        slurmrestpy.models.v0/0/42_assoc_shares_obj_wrap.v0.0.42_assoc_shares_obj_wrap(
                            id = 56,
                            cluster = '',
                            name = '',
                            parent = '',
                            partition = '',
                            shares_normalized = slurmrestpy.models.v0/0/42_float64_no_val_struct.v0.0.42_float64_no_val_struct(
                                set = True,
                                infinite = True,
                                number = 1.337, ),
                            tres = slurmrestpy.models.v0_0_42_assoc_shares_obj_wrap_tres.v0_0_42_assoc_shares_obj_wrap_tres(
                                run_seconds = [
                                    slurmrestpy.models.v0/0/42_shares_uint64_tres.v0.0.42_shares_uint64_tres(
                                        name = '',
                                        value = slurmrestpy.models.v0/0/42_uint64_no_val_struct.v0.0.42_uint64_no_val_struct(
                                            set = True,
                                            infinite = True,
                                            number = 56, ), )
                                    ],
                                group_minutes = [
                                    slurmrestpy.models.v0/0/42_shares_uint64_tres.v0.0.42_shares_uint64_tres(
                                        name = '', )
                                    ],
                                usage = [
                                    slurmrestpy.models.v0/0/42_shares_float128_tres.v0.0.42_shares_float128_tres(
                                        name = '', )
                                    ], ),
                            effective_usage = slurmrestpy.models.v0/0/42_float64_no_val_struct.v0.0.42_float64_no_val_struct(
                                set = True,
                                infinite = True,
                                number = 1.337, ),
                            usage_normalized = ,
                            usage = 56,
                            fairshare = slurmrestpy.models.v0_0_42_assoc_shares_obj_wrap_fairshare.v0_0_42_assoc_shares_obj_wrap_fairshare(
                                factor = ,
                                level = , ),
                            type = [
                                'USER'
                                ], )
                        ],
                    total_shares = 56, ),
        )
        """

    def testV0042OpenapiSharesResp(self):
        """Test V0042OpenapiSharesResp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
