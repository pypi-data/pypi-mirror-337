# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetLoadbalancersResult',
    'AwaitableGetLoadbalancersResult',
    'get_loadbalancers',
    'get_loadbalancers_output',
]

@pulumi.output_type
class GetLoadbalancersResult:
    """
    A collection of values returned by getLoadbalancers.
    """
    def __init__(__self__, description=None, enterprise_project_id=None, id=None, ipv4_subnet_id=None, ipv6_network_id=None, l4_flavor_id=None, l7_flavor_id=None, loadbalancer_id=None, loadbalancers=None, name=None, region=None, type=None, vpc_id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv4_subnet_id and not isinstance(ipv4_subnet_id, str):
            raise TypeError("Expected argument 'ipv4_subnet_id' to be a str")
        pulumi.set(__self__, "ipv4_subnet_id", ipv4_subnet_id)
        if ipv6_network_id and not isinstance(ipv6_network_id, str):
            raise TypeError("Expected argument 'ipv6_network_id' to be a str")
        pulumi.set(__self__, "ipv6_network_id", ipv6_network_id)
        if l4_flavor_id and not isinstance(l4_flavor_id, str):
            raise TypeError("Expected argument 'l4_flavor_id' to be a str")
        pulumi.set(__self__, "l4_flavor_id", l4_flavor_id)
        if l7_flavor_id and not isinstance(l7_flavor_id, str):
            raise TypeError("Expected argument 'l7_flavor_id' to be a str")
        pulumi.set(__self__, "l7_flavor_id", l7_flavor_id)
        if loadbalancer_id and not isinstance(loadbalancer_id, str):
            raise TypeError("Expected argument 'loadbalancer_id' to be a str")
        pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        if loadbalancers and not isinstance(loadbalancers, list):
            raise TypeError("Expected argument 'loadbalancers' to be a list")
        pulumi.set(__self__, "loadbalancers", loadbalancers)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of load balancer.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[str]:
        """
        The enterprise project ID.
        """
        return pulumi.get(self, "enterprise_project_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv4SubnetId")
    def ipv4_subnet_id(self) -> Optional[str]:
        """
        The  ID of the IPv4 subnet where the load balancer resides.
        """
        return pulumi.get(self, "ipv4_subnet_id")

    @property
    @pulumi.getter(name="ipv6NetworkId")
    def ipv6_network_id(self) -> Optional[str]:
        """
        The ID of the IPv6 subnet where the load balancer resides.
        """
        return pulumi.get(self, "ipv6_network_id")

    @property
    @pulumi.getter(name="l4FlavorId")
    def l4_flavor_id(self) -> Optional[str]:
        """
        The ID of a flavor at Layer 4.
        """
        return pulumi.get(self, "l4_flavor_id")

    @property
    @pulumi.getter(name="l7FlavorId")
    def l7_flavor_id(self) -> Optional[str]:
        """
        The ID of a flavor at Layer 7.
        """
        return pulumi.get(self, "l7_flavor_id")

    @property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> Optional[str]:
        return pulumi.get(self, "loadbalancer_id")

    @property
    @pulumi.getter
    def loadbalancers(self) -> Sequence['outputs.GetLoadbalancersLoadbalancerResult']:
        """
        The List of load balancers.
        The loadbalancers structure is documented below.
        """
        return pulumi.get(self, "loadbalancers")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The load balancer name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Whether the load balancer is a dedicated load balancer.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        The ID of the VPC where the load balancer resides.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetLoadbalancersResult(GetLoadbalancersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLoadbalancersResult(
            description=self.description,
            enterprise_project_id=self.enterprise_project_id,
            id=self.id,
            ipv4_subnet_id=self.ipv4_subnet_id,
            ipv6_network_id=self.ipv6_network_id,
            l4_flavor_id=self.l4_flavor_id,
            l7_flavor_id=self.l7_flavor_id,
            loadbalancer_id=self.loadbalancer_id,
            loadbalancers=self.loadbalancers,
            name=self.name,
            region=self.region,
            type=self.type,
            vpc_id=self.vpc_id)


def get_loadbalancers(description: Optional[str] = None,
                      enterprise_project_id: Optional[str] = None,
                      ipv4_subnet_id: Optional[str] = None,
                      ipv6_network_id: Optional[str] = None,
                      l4_flavor_id: Optional[str] = None,
                      l7_flavor_id: Optional[str] = None,
                      loadbalancer_id: Optional[str] = None,
                      name: Optional[str] = None,
                      region: Optional[str] = None,
                      type: Optional[str] = None,
                      vpc_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLoadbalancersResult:
    """
    Use this data source to get the list of ELB load balancers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    loadbalancer_name = config.require_object("loadbalancerName")
    test = huaweicloud.DedicatedElb.get_loadbalancers(name=loadbalancer_name)
    ```


    :param str description: Specifies the description of the ELB load balancer.
    :param str enterprise_project_id: Specifies the enterprise project ID.
    :param str ipv4_subnet_id: Specifies the ID of the IPv4 subnet where the load balancer resides.
    :param str ipv6_network_id: Specifies the ID of the port bound to the IPv6 address of the load balancer.
    :param str l4_flavor_id: Specifies the ID of a flavor at Layer 4.
    :param str l7_flavor_id: Specifies the ID of a flavor at Layer 7.
    :param str loadbalancer_id: Specifies the ID of the ELB load balancer.
    :param str name: Specifies the name of the ELB load balancer.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str type: Specifies whether the load balancer is a dedicated load balancer, Value options:
           **dedicated**, **share**.
    :param str vpc_id: Specifies the ID of the VPC where the load balancer resides.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['ipv4SubnetId'] = ipv4_subnet_id
    __args__['ipv6NetworkId'] = ipv6_network_id
    __args__['l4FlavorId'] = l4_flavor_id
    __args__['l7FlavorId'] = l7_flavor_id
    __args__['loadbalancerId'] = loadbalancer_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['type'] = type
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('huaweicloud:DedicatedElb/getLoadbalancers:getLoadbalancers', __args__, opts=opts, typ=GetLoadbalancersResult).value

    return AwaitableGetLoadbalancersResult(
        description=__ret__.description,
        enterprise_project_id=__ret__.enterprise_project_id,
        id=__ret__.id,
        ipv4_subnet_id=__ret__.ipv4_subnet_id,
        ipv6_network_id=__ret__.ipv6_network_id,
        l4_flavor_id=__ret__.l4_flavor_id,
        l7_flavor_id=__ret__.l7_flavor_id,
        loadbalancer_id=__ret__.loadbalancer_id,
        loadbalancers=__ret__.loadbalancers,
        name=__ret__.name,
        region=__ret__.region,
        type=__ret__.type,
        vpc_id=__ret__.vpc_id)


@_utilities.lift_output_func(get_loadbalancers)
def get_loadbalancers_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                             enterprise_project_id: Optional[pulumi.Input[Optional[str]]] = None,
                             ipv4_subnet_id: Optional[pulumi.Input[Optional[str]]] = None,
                             ipv6_network_id: Optional[pulumi.Input[Optional[str]]] = None,
                             l4_flavor_id: Optional[pulumi.Input[Optional[str]]] = None,
                             l7_flavor_id: Optional[pulumi.Input[Optional[str]]] = None,
                             loadbalancer_id: Optional[pulumi.Input[Optional[str]]] = None,
                             name: Optional[pulumi.Input[Optional[str]]] = None,
                             region: Optional[pulumi.Input[Optional[str]]] = None,
                             type: Optional[pulumi.Input[Optional[str]]] = None,
                             vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLoadbalancersResult]:
    """
    Use this data source to get the list of ELB load balancers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_huaweicloud as huaweicloud

    config = pulumi.Config()
    loadbalancer_name = config.require_object("loadbalancerName")
    test = huaweicloud.DedicatedElb.get_loadbalancers(name=loadbalancer_name)
    ```


    :param str description: Specifies the description of the ELB load balancer.
    :param str enterprise_project_id: Specifies the enterprise project ID.
    :param str ipv4_subnet_id: Specifies the ID of the IPv4 subnet where the load balancer resides.
    :param str ipv6_network_id: Specifies the ID of the port bound to the IPv6 address of the load balancer.
    :param str l4_flavor_id: Specifies the ID of a flavor at Layer 4.
    :param str l7_flavor_id: Specifies the ID of a flavor at Layer 7.
    :param str loadbalancer_id: Specifies the ID of the ELB load balancer.
    :param str name: Specifies the name of the ELB load balancer.
    :param str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param str type: Specifies whether the load balancer is a dedicated load balancer, Value options:
           **dedicated**, **share**.
    :param str vpc_id: Specifies the ID of the VPC where the load balancer resides.
    """
    ...
