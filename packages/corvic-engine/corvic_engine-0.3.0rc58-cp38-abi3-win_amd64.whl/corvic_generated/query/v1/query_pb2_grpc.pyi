"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import corvic_generated.query.v1.query_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class QueryServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Query: grpc.UnaryStreamMultiCallable[
        corvic_generated.query.v1.query_pb2.QueryRequest,
        corvic_generated.query.v1.query_pb2.QueryResponse,
    ]

class QueryServiceAsyncStub:
    Query: grpc.aio.UnaryStreamMultiCallable[
        corvic_generated.query.v1.query_pb2.QueryRequest,
        corvic_generated.query.v1.query_pb2.QueryResponse,
    ]

class QueryServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Query(
        self,
        request: corvic_generated.query.v1.query_pb2.QueryRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[corvic_generated.query.v1.query_pb2.QueryResponse], collections.abc.AsyncIterator[corvic_generated.query.v1.query_pb2.QueryResponse]]: ...

def add_QueryServiceServicer_to_server(servicer: QueryServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
