[project] # package metadata
################################
# PYTHON PACKAGE CONFIGURATION #
################################
name = "matsengrp_rich_example"
version = "0.1.9"
dependencies = ["rich"]                               
requires-python = "<=3.12, >=3.9"
scripts = { rich-example-main = "matsengrp_rich_example:main" } 

[build-system] # build system configuration
requires = ["hatchling"]
build-backend = "hatchling.build"



[tool.pixi.workspace] # "workspace" configuration 
################################
# PIXI PACKAGE CONFIGURATION ###
################################
channels = [
  "https://prefix.dev/pixi-build-backends",
  "https://prefix.dev/conda-forge",
]
# platforms = ["win-64", "linux-64", "osx-arm64", "osx-64"]
platforms = ["linux-64"]
preview = ["pixi-build"]

[tool.pixi.dependencies] # dependencies for your "default" environment
# Source code for our package - to install it into out env
matsengrp_rich_example = { path = "." }
# Hatch is required, yet again, because I want hatch exposed
# in my default environment for building the pypi package
hatch = "*" 

[tool.pixi.tasks] # commands that you want to use without prefixing "$ pixi run"
start = "rich-example-main"

# when installing build software as conda package, these should be
# host dependencies, because they are only built at run time.
[tool.pixi.package.host-dependencies] # dependencies needed during build of python package
hatchling = "*"
python = "<=3.12, >=3.9"

[tool.pixi.package.build] # build configuration for *pixi* package
# This is where you can specify how to build your package, 
# here we use a backend that converts a python (wheel) package into a conda package.
backend = { name = "pixi-build-python", version = "0.1.*" }

[tool.pixi.package.run-dependencies] # specify conda packages that you want during runtime, these override pypi dependencies
rich = "13.9.*"
