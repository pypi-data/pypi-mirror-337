# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'ComputeprofileComputeAttribute',
    'HostInterfacesAttribute',
    'JobtemplateTemplateInput',
    'KatelloContentViewFilter',
    'KatelloContentViewFilterRule',
    'ProvisioningtemplateTemplateCombinationsAttribute',
    'GetComputeprofileComputeAttributeResult',
    'GetJobtemplateTemplateInputResult',
    'GetKatelloContentViewFilterResult',
    'GetKatelloContentViewFilterRuleResult',
    'GetProvisioningtemplateTemplateCombinationsAttributeResult',
]

@pulumi.output_type
class ComputeprofileComputeAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "computeResourceId":
            suggest = "compute_resource_id"
        elif key == "vmAttrs":
            suggest = "vm_attrs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeprofileComputeAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeprofileComputeAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeprofileComputeAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compute_resource_id: int,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 vm_attrs: Optional[Mapping[str, str]] = None):
        """
        :param int compute_resource_id: ID of the compute resource
        :param int id: ID of the compute_attribute
        :param str name: Auto-generated name of the compute attribute
        :param Mapping[str, str] vm_attrs: VM attributes as JSON
        """
        pulumi.set(__self__, "compute_resource_id", compute_resource_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vm_attrs is not None:
            pulumi.set(__self__, "vm_attrs", vm_attrs)

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> int:
        """
        ID of the compute resource
        """
        return pulumi.get(self, "compute_resource_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID of the compute_attribute
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Auto-generated name of the compute attribute
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="vmAttrs")
    def vm_attrs(self) -> Optional[Mapping[str, str]]:
        """
        VM attributes as JSON
        """
        return pulumi.get(self, "vm_attrs")


@pulumi.output_type
class HostInterfacesAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachedDevices":
            suggest = "attached_devices"
        elif key == "attachedTo":
            suggest = "attached_to"
        elif key == "bmcProvider":
            suggest = "bmc_provider"
        elif key == "computeAttributes":
            suggest = "compute_attributes"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostInterfacesAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostInterfacesAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostInterfacesAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attached_devices: Optional[str] = None,
                 attached_to: Optional[str] = None,
                 bmc_provider: Optional[str] = None,
                 compute_attributes: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None,
                 identifier: Optional[str] = None,
                 ip: Optional[str] = None,
                 mac: Optional[str] = None,
                 managed: Optional[bool] = None,
                 name: Optional[str] = None,
                 password: Optional[str] = None,
                 primary: Optional[bool] = None,
                 provision: Optional[bool] = None,
                 subnet_id: Optional[int] = None,
                 type: Optional[str] = None,
                 username: Optional[str] = None,
                 virtual: Optional[bool] = None):
        """
        :param str attached_devices: Identifiers of attached interfaces, e.g. 'eth1', 'eth2' as comma-separated list
        :param str attached_to: Identifier of the interface to which this interface belongs.
        :param str bmc_provider: Provider used for BMC/IMPI functionality. Values include: `"IPMI"`
        :param Mapping[str, str] compute_attributes: Hypervisor specific interface options
        :param int id: Unique identifier for the interface.
        :param str identifier: Identifier of this interface local to the host.
        :param str ip: IP address associated with the interface.
        :param str mac: MAC address associated with the interface.
        :param bool managed: Whether or not this interface is managed by Foreman.
        :param str name: Name of the interface
        :param str password: Associated password used for BMC/IPMI functionality.
        :param bool primary: Whether or not this is the primary interface.
        :param bool provision: Whether or not this interface is used to provision the host.
        :param int subnet_id: ID of the subnet to associate with this interface.
        :param str type: The type of interface. Values include: `"interface"`, `"bmc"`, `"bond"`, `"bridge"`.
        :param str username: Username used for BMC/IPMI functionality.
        :param bool virtual: Whether or not this is a virtual interface.
        """
        if attached_devices is not None:
            pulumi.set(__self__, "attached_devices", attached_devices)
        if attached_to is not None:
            pulumi.set(__self__, "attached_to", attached_to)
        if bmc_provider is not None:
            pulumi.set(__self__, "bmc_provider", bmc_provider)
        if compute_attributes is not None:
            pulumi.set(__self__, "compute_attributes", compute_attributes)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if provision is not None:
            pulumi.set(__self__, "provision", provision)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if virtual is not None:
            pulumi.set(__self__, "virtual", virtual)

    @property
    @pulumi.getter(name="attachedDevices")
    def attached_devices(self) -> Optional[str]:
        """
        Identifiers of attached interfaces, e.g. 'eth1', 'eth2' as comma-separated list
        """
        return pulumi.get(self, "attached_devices")

    @property
    @pulumi.getter(name="attachedTo")
    def attached_to(self) -> Optional[str]:
        """
        Identifier of the interface to which this interface belongs.
        """
        return pulumi.get(self, "attached_to")

    @property
    @pulumi.getter(name="bmcProvider")
    def bmc_provider(self) -> Optional[str]:
        """
        Provider used for BMC/IMPI functionality. Values include: `"IPMI"`
        """
        return pulumi.get(self, "bmc_provider")

    @property
    @pulumi.getter(name="computeAttributes")
    def compute_attributes(self) -> Optional[Mapping[str, str]]:
        """
        Hypervisor specific interface options
        """
        return pulumi.get(self, "compute_attributes")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique identifier for the interface.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        Identifier of this interface local to the host.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IP address associated with the interface.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        """
        MAC address associated with the interface.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def managed(self) -> Optional[bool]:
        """
        Whether or not this interface is managed by Foreman.
        """
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the interface
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Associated password used for BMC/IPMI functionality.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        Whether or not this is the primary interface.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def provision(self) -> Optional[bool]:
        """
        Whether or not this interface is used to provision the host.
        """
        return pulumi.get(self, "provision")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[int]:
        """
        ID of the subnet to associate with this interface.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of interface. Values include: `"interface"`, `"bmc"`, `"bond"`, `"bridge"`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username used for BMC/IPMI functionality.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def virtual(self) -> Optional[bool]:
        """
        Whether or not this is a virtual interface.
        """
        return pulumi.get(self, "virtual")


@pulumi.output_type
class JobtemplateTemplateInput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "factName":
            suggest = "fact_name"
        elif key == "hiddenValue":
            suggest = "hidden_value"
        elif key == "inputType":
            suggest = "input_type"
        elif key == "puppetClassName":
            suggest = "puppet_class_name"
        elif key == "puppetParameterName":
            suggest = "puppet_parameter_name"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "templateId":
            suggest = "template_id"
        elif key == "valueType":
            suggest = "value_type"
        elif key == "variableName":
            suggest = "variable_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobtemplateTemplateInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobtemplateTemplateInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobtemplateTemplateInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: str,
                 name: str,
                 __meta_: Optional[bool] = None,
                 advanced: Optional[bool] = None,
                 description: Optional[str] = None,
                 fact_name: Optional[str] = None,
                 hidden_value: Optional[bool] = None,
                 id: Optional[str] = None,
                 input_type: Optional[str] = None,
                 puppet_class_name: Optional[str] = None,
                 puppet_parameter_name: Optional[str] = None,
                 required: Optional[bool] = None,
                 resource_type: Optional[str] = None,
                 template_id: Optional[int] = None,
                 value_type: Optional[str] = None,
                 variable_name: Optional[str] = None):
        """
        :param str name: The name of the template input
        :param bool __meta_: @SUMMARY Foreman representation of a template input.
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fact_name is not None:
            pulumi.set(__self__, "fact_name", fact_name)
        if hidden_value is not None:
            pulumi.set(__self__, "hidden_value", hidden_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_type is not None:
            pulumi.set(__self__, "input_type", input_type)
        if puppet_class_name is not None:
            pulumi.set(__self__, "puppet_class_name", puppet_class_name)
        if puppet_parameter_name is not None:
            pulumi.set(__self__, "puppet_parameter_name", puppet_parameter_name)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the template input
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[bool]:
        """
        @SUMMARY Foreman representation of a template input.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="factName")
    def fact_name(self) -> Optional[str]:
        return pulumi.get(self, "fact_name")

    @property
    @pulumi.getter(name="hiddenValue")
    def hidden_value(self) -> Optional[bool]:
        return pulumi.get(self, "hidden_value")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> Optional[str]:
        return pulumi.get(self, "input_type")

    @property
    @pulumi.getter(name="puppetClassName")
    def puppet_class_name(self) -> Optional[str]:
        return pulumi.get(self, "puppet_class_name")

    @property
    @pulumi.getter(name="puppetParameterName")
    def puppet_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "puppet_parameter_name")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[int]:
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[str]:
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class KatelloContentViewFilter(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 inclusion: Optional[bool] = None,
                 rules: Optional[Sequence['outputs.KatelloContentViewFilterRule']] = None):
        """
        :param str type: Type of this filter, e.g. DEB or RPM
        :param bool inclusion: specifies if content should be included or excluded, default: inclusion=false
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inclusion is not None:
            pulumi.set(__self__, "inclusion", inclusion)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of this filter, e.g. DEB or RPM
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def inclusion(self) -> Optional[bool]:
        """
        specifies if content should be included or excluded, default: inclusion=false
        """
        return pulumi.get(self, "inclusion")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.KatelloContentViewFilterRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class KatelloContentViewFilterRule(dict):
    def __init__(__self__, *,
                 name: str,
                 architecture: Optional[str] = None,
                 id: Optional[int] = None):
        """
        :param str name: Filter pattern of this filter @EXAMPLE apt*
        """
        pulumi.set(__self__, "name", name)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Filter pattern of this filter @EXAMPLE apt*
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def architecture(self) -> Optional[str]:
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ProvisioningtemplateTemplateCombinationsAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentId":
            suggest = "environment_id"
        elif key == "hostgroupId":
            suggest = "hostgroup_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisioningtemplateTemplateCombinationsAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisioningtemplateTemplateCombinationsAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisioningtemplateTemplateCombinationsAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_id: Optional[int] = None,
                 hostgroup_id: Optional[int] = None,
                 id: Optional[int] = None):
        """
        :param int environment_id: The environment ID for this template combination.
        :param int hostgroup_id: The hostgroup ID for this template combination.
        :param int id: Template combination unique identifier.
        """
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if hostgroup_id is not None:
            pulumi.set(__self__, "hostgroup_id", hostgroup_id)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[int]:
        """
        The environment ID for this template combination.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter(name="hostgroupId")
    def hostgroup_id(self) -> Optional[int]:
        """
        The hostgroup ID for this template combination.
        """
        return pulumi.get(self, "hostgroup_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Template combination unique identifier.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetComputeprofileComputeAttributeResult(dict):
    def __init__(__self__, *,
                 compute_resource_id: int,
                 id: int,
                 name: str,
                 vm_attrs: Mapping[str, str]):
        """
        :param int compute_resource_id: ID of the compute resource
        :param int id: ID of the compute_attribute
        :param str name: Auto-generated name of the compute attribute
        :param Mapping[str, str] vm_attrs: VM attributes as JSON
        """
        pulumi.set(__self__, "compute_resource_id", compute_resource_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vm_attrs", vm_attrs)

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> int:
        """
        ID of the compute resource
        """
        return pulumi.get(self, "compute_resource_id")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID of the compute_attribute
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Auto-generated name of the compute attribute
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="vmAttrs")
    def vm_attrs(self) -> Mapping[str, str]:
        """
        VM attributes as JSON
        """
        return pulumi.get(self, "vm_attrs")


@pulumi.output_type
class GetJobtemplateTemplateInputResult(dict):
    def __init__(__self__, *,
                 __meta_: bool,
                 advanced: bool,
                 default: str,
                 description: str,
                 fact_name: str,
                 hidden_value: bool,
                 id: str,
                 input_type: str,
                 name: str,
                 puppet_class_name: str,
                 puppet_parameter_name: str,
                 required: bool,
                 resource_type: str,
                 template_id: int,
                 value_type: str,
                 variable_name: str):
        """
        :param bool __meta_: @SUMMARY Foreman representation of a template input.
        :param str name: The name of the template input
        """
        pulumi.set(__self__, "__meta_", __meta_)
        pulumi.set(__self__, "advanced", advanced)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "fact_name", fact_name)
        pulumi.set(__self__, "hidden_value", hidden_value)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "input_type", input_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "puppet_class_name", puppet_class_name)
        pulumi.set(__self__, "puppet_parameter_name", puppet_parameter_name)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "template_id", template_id)
        pulumi.set(__self__, "value_type", value_type)
        pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def __meta_(self) -> bool:
        """
        @SUMMARY Foreman representation of a template input.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter
    def advanced(self) -> bool:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="factName")
    def fact_name(self) -> str:
        return pulumi.get(self, "fact_name")

    @property
    @pulumi.getter(name="hiddenValue")
    def hidden_value(self) -> bool:
        return pulumi.get(self, "hidden_value")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> str:
        return pulumi.get(self, "input_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the template input
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="puppetClassName")
    def puppet_class_name(self) -> str:
        return pulumi.get(self, "puppet_class_name")

    @property
    @pulumi.getter(name="puppetParameterName")
    def puppet_parameter_name(self) -> str:
        return pulumi.get(self, "puppet_parameter_name")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> int:
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> str:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class GetKatelloContentViewFilterResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: int,
                 inclusion: bool,
                 name: str,
                 rules: Sequence['outputs.GetKatelloContentViewFilterRuleResult'],
                 type: str):
        """
        :param bool inclusion: specifies if content should be included or excluded, default: inclusion=false
        :param str type: Type of this filter, e.g. DEB or RPM
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inclusion", inclusion)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def inclusion(self) -> bool:
        """
        specifies if content should be included or excluded, default: inclusion=false
        """
        return pulumi.get(self, "inclusion")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetKatelloContentViewFilterRuleResult']:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of this filter, e.g. DEB or RPM
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetKatelloContentViewFilterRuleResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 id: int,
                 name: str):
        """
        :param str name: Filter pattern of this filter @EXAMPLE apt*
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Filter pattern of this filter @EXAMPLE apt*
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetProvisioningtemplateTemplateCombinationsAttributeResult(dict):
    def __init__(__self__, *,
                 environment_id: int,
                 hostgroup_id: int,
                 id: int):
        """
        :param int environment_id: The environment ID for this template combination.
        :param int hostgroup_id: The hostgroup ID for this template combination.
        :param int id: Template combination unique identifier.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "hostgroup_id", hostgroup_id)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> int:
        """
        The environment ID for this template combination.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter(name="hostgroupId")
    def hostgroup_id(self) -> int:
        """
        The hostgroup ID for this template combination.
        """
        return pulumi.get(self, "hostgroup_id")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Template combination unique identifier.
        """
        return pulumi.get(self, "id")


