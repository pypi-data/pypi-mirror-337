Metadata-Version: 2.4
Name: saft_data_mgmt
Version: 0.2.9
Summary: A package for managing financial data, specifically made for algorithmic traders.
Author-email: Travis Swiger <admin@stoneagefinancialtechnology.com>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [2025] [Stone Age Financial Technologies]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Homepage, https://github.com/S-A-F-T-Organization/DataManagement
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Office/Business :: Financial
Classifier: Topic :: Database
Classifier: Development Status :: 3 - Alpha
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: SQLAlchemy>=1.4
Requires-Dist: PyYAML
Requires-Dist: ib_insync
Requires-Dist: python-dotenv>=0.21.1
Requires-Dist: twine>=4.0.2
Requires-Dist: build>=1.1.1
Provides-Extra: dev
Requires-Dist: twine>=4.0.2; extra == "dev"
Requires-Dist: build; extra == "dev"
Dynamic: license-file

# DataManagement

## Table of Contents

- [Overview](#overview)
- [Integrations](#integrations)
  - [Database Integrations](#database-integrations)
  - [Brokerage and Datasource Integrations](#brokerage-and-datasource-integrations)
- [Installation Instructions](#installation-instructions)
- [CLI Tool](#cli-tool)
  - [Usage Instructions](#usage-instructions)
  - [Example Usage](#example-usage)
- [Contribution Guidelines](#contribution-guidelines)
  - [Development Process](#development-process)
  - [Pull Request Process](#pull-request-process)
  - [Code Style and Standards](#code-style-and-standards)
    - [Python Style Guide](#python-style-guide)
    - [SQL Style Guide](#sql-style-guide)
  - [Testing Guidelines](#testing-guidelines)
  - [Documentation Requirements](#documentation-requirements)
  - [Version Control Guidelines](#version-control-guidelines)
  - [Release Process](#release-process)
- [Project Structure](#project-structure)
- [SQL Tables and Database Overview](#sql-tables-and-database-overview)
- [Models Overview](#models-overview)
- [Utils Overview](#utils-overview)
- [Module Scripts](#module-scripts)

## Overview

This is our core repository for managing financial data, designed to support algorithmic trading strategies. It provides tools for:

*   **Data Storage:** Efficient storage of historical market data and portfolio data.
*   **ETL Processes:** Extracting, transforming, and loading data from various sources (brokerages, APIs, etc.) into a usable format.
*   **Data Warehousing:** Structuring portfolio data for analysis and reporting.
*   **Database Agnostic Design:** Ensuring compatibility with different database engines and designs.
*   **CLI Tool:** A command-line interface for setting up and configuring the database.

## Integrations

### Database Integrations

*   SQLite (currently supported)
*   PostgreSQL (future support)

### Brokerage and Datasource Integrations

*   Interactive Brokers (IBKR)
*   yfinance (future support)

## Installation Instructions

1.  **Prerequisites:**
    *   Python 3.7 or higher
    *   pip (Python package installer)
    *   SQLite3 or PostgreSQL (future support)

2.  **Install the package using pip:**

    ```bash
    pip install saft_data_mgmt
    ```
## CLI Tool
This is a CLI tool that allows for easy setup of our normalized database. By answering a few questions in the command line, a database is setup according to your needs.
### Usage Instructions
1.  **Run the CLI Tool:**

    After installing the package, you can use the command-line tool to set up your database. Open your terminal and run:

    ```bash
    setup-saft-db
    ```

    or

    ```bash
    python -m saft_data_mgmt.setup_saft_db
    ```

2.  **Follow the Prompts:**

    The CLI tool will guide you through a series of questions to configure your database. These questions include:

    *   Database dialect (e.g., SQLite)
    *   Database path
    *   Database name
    *   Whether to implement market data and portfolio data schemas
    *   Additional options for market data (e.g., storing historical prices as integers)

3.  **Configure Database:**

    Answer the questions according to your needs. The tool will then set up the database with the specified configurations.

    **Note:** There is a known error with the undo functionality, so using `CTRL + Z` will not undo an answer and go to the previous question

### Example Usage

Here's an example of how to use the CLI tool to set up a SQLite database:

```bash
setup-saft-db
```
You will then be prompted with the following questions:
```bash
1. What SQL dialect will you be using? (current support: sqlite): sqlite
2. What is the path you would like to host this database at? (not including DB name): /path/to/your/db
3. What would you like to name this database? (should end in .db): saft.db
4. Would you like to implement our `market_data` schema? [Y/N]: Y
5. Would you like to implement our `portfolio_data` schema? [Y/N]: N
6. Would you like to store historical security prices as integers? [Y/N]: Y
7. Of the following, which securities do you plan to track? [Stocks, ETFs, Forex, Futures, All] (comma-separated): Stocks, ETFs
```

## Contribution Guidelines

This project is a work in progress, but we love your input! We want to make contributing to SAFT Data Management as easy possible, whether it's:

- Reporting a bug
- Discussing the current state of the code
- Submitting a fix
- Proposing new features
- Becoming a maintainer

### Development Process

We use GitHub to host code, to track issues and feature requests, as well as accept pull requests.

1. Fork the repo and create your branch from `main`.
2. If you've added code that should be tested, add tests.
3. If you've changed APIs, update the documentation.
4. Ensure the test suite passes.
5. Make sure your code lints.
6. Issue a pull request

### Pull Request Process

1. Update the README.md with details of changes to the interface, if applicable.
2. Update the version numbers in any examples files and the README.md to the new version that this Pull Request would represent.
3. The PR will be merged once you have the sign-off of two other developers.

### Any contributions you make will be under the Apache 2.0 Software License

In short, when you submit code changes, your submissions are understood to be under the same [Apache 2.0 License](http://choosealicense.com/licenses/apache-2.0/) that covers the project. Feel free to contact the maintainers if that's a concern.

### Report bugs using GitHub's [issue tracker](https://github.com/S-A-F-T-Organization/DataManagement/issues)

We use GitHub issues to track public bugs. Report a bug by [opening a new issue](https://github.com/S-A-F-T-Organization/DataManagement/issues/new).

### Write bug reports with detail, background, and sample code

**Great Bug Reports** tend to have:

- A quick summary and/or background
- Steps to reproduce
  - Be specific!
  - Give sample code if you can.
- What you expected would happen
- What actually happens
- Notes (possibly including why you think this might be happening, or stuff you tried that didn't work)

### Code Style and Standards

#### Python Style Guide

We follow [PEP 8](https://www.python.org/dev/peps/pep-0008/) with some modifications:

- Line length limit: 115 characters
- Use spaces for indentation (4 spaces)
- Use docstrings for all public modules, functions, classes, and methods
- Use type hints for function arguments and return values

Example:
```python
def calculate_return(price: float, cost_basis: float) -> float:
    """Calculate the return on investment.

    Args:
        price (float): Current price of the security
        cost_basis (float): Original purchase price

    Returns:
        float: The percentage return on investment
    """
    return (price - cost_basis) / cost_basis * 100
```

#### SQL Style Guide

- Use UPPERCASE for SQL keywords
- Use PascalCase for table names
- Use snake_case for column names
- Include appropriate comments for complex queries
- Each column on a new line for readability

Example:
```sql
CREATE TABLE IF NOT EXISTS security_prices (
    security_id INTEGER,
    price_timestamp INTEGER,
    close_price INTEGER,
    PRIMARY KEY (security_id, price_timestamp),
    FOREIGN KEY (security_id) 
        REFERENCES securities_info(security_id)
);
```

### Testing Guidelines

1. **Unit Tests Required:**
   - All new features must include unit tests
   - Bug fixes must include tests that would have caught the bug
   - Use of unittest library

2. **Running Tests:**
```bash
# Run all tests
python -m unittest
```

3. **Test Structure:**
   - Use descriptive test names
   - Follow the Arrange-Act-Assert pattern
   - Mock external dependencies

### Documentation Requirements

1. **Code Documentation:**
   - All public APIs must have docstrings
   - Include type hints
   - Document exceptions that may be raised

2. **Project Documentation:**
   - Update README.md for interface changes
   - Maintain documentation in /docs directory
   - Include examples for new features

### Version Control Guidelines

1. **Branching Strategy:**
   - `main`: stable, production-ready code
   - `dev`: integration branch for features
   - `NameDev`: Replace with either your name or username as your personal dev branch

2. **Commit Messages:**
   - Use present tense
   - First line is summary (50 chars or less)
   - Reference issues and pull requests

Example:
```
Add historical price integer conversion

- Implement price to integer conversion utility
- Add tests for conversion edge cases
- Update documentation with new feature

Fixes #123
```

### Release Process

1. Version numbers follow [SemVer](http://semver.org/)
2. Create a release branch from dev
3. Update version numbers
4. Update CHANGELOG.md
5. Create pull request to main
6. Tag the release
7. Deploy to PyPI

## Project Structure
```
DataManagement/ 
├── LICENSE
├── MANIFEST.in
├── README.md
├── setup.py
├── saft_data_mgmt/
│ ├── init.py
│ ├── main.py # Enables python -m saft_data_mgmt
│ ├── setup_saft_db.py # Main CLI module
│ ├── Utils/
│ │ ├── init.py
│ │ ├── cli_checks.py
│ │ ├── cli_tool.py
│ │ ├── config_info.py
│ │ ├── db_from_config.py
│ │ ├── db_strategies.py
│ │ └── helpers.py
│ ├── SQLTables/
│ │ ├── Core/
│ │ ├── HistoricalPrices/
│ │ ├── PortfolioDB/
│ │ └── PortfolioWarehouse/ 
├── tests/
```

### SQL Tables and Database Overview

### Models Overview

### Utils Overview

### Module Scripts
