# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'TenantPropertiesArgs',
    'TenantPropertiesArgsDict',
    'UserArgs',
    'UserArgsDict',
]

MYPY = False

if not MYPY:
    class TenantPropertiesArgsDict(TypedDict):
        db_database: pulumi.Input[str]
        """
        Database name
        """
        db_host: pulumi.Input[str]
        """
        Database host
        """
        db_port: pulumi.Input[int]
        """
        Database port
        """
        require_user: pulumi.Input[bool]
        users: pulumi.Input[Sequence[pulumi.Input['UserArgsDict']]]
        allow_list: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of CIDR addresses
        """
        auth_query: NotRequired[pulumi.Input[str]]
        """
        SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
        """
        enforce_ssl: NotRequired[pulumi.Input[bool]]
        external_id: NotRequired[pulumi.Input[str]]
        """
        External ID
        """
        id: NotRequired[pulumi.Input[str]]
        inserted_at: NotRequired[pulumi.Input[str]]
        ip_version: NotRequired[pulumi.Input[str]]
        """
        auto
        """
        sni_hostname: NotRequired[pulumi.Input[str]]
        """
        your.domain.com
        """
        updated_at: NotRequired[pulumi.Input[str]]
        upstream_ssl: NotRequired[pulumi.Input[bool]]
        upstream_verify: NotRequired[pulumi.Input[str]]
        """
        none
        """
elif False:
    TenantPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TenantPropertiesArgs:
    def __init__(__self__, *,
                 db_database: pulumi.Input[str],
                 db_host: pulumi.Input[str],
                 db_port: pulumi.Input[int],
                 require_user: Optional[pulumi.Input[bool]] = None,
                 users: pulumi.Input[Sequence[pulumi.Input['UserArgs']]],
                 allow_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 auth_query: Optional[pulumi.Input[str]] = None,
                 enforce_ssl: Optional[pulumi.Input[bool]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 inserted_at: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 sni_hostname: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 upstream_ssl: Optional[pulumi.Input[bool]] = None,
                 upstream_verify: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] db_database: Database name
        :param pulumi.Input[str] db_host: Database host
        :param pulumi.Input[int] db_port: Database port
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_list: List of CIDR addresses
        :param pulumi.Input[str] auth_query: SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
        :param pulumi.Input[str] external_id: External ID
        :param pulumi.Input[str] ip_version: auto
        :param pulumi.Input[str] sni_hostname: your.domain.com
        :param pulumi.Input[str] upstream_verify: none
        """
        pulumi.set(__self__, "db_database", db_database)
        pulumi.set(__self__, "db_host", db_host)
        pulumi.set(__self__, "db_port", db_port)
        if require_user is None:
            require_user = False
        pulumi.set(__self__, "require_user", require_user)
        pulumi.set(__self__, "users", users)
        if allow_list is not None:
            pulumi.set(__self__, "allow_list", allow_list)
        if auth_query is not None:
            pulumi.set(__self__, "auth_query", auth_query)
        if enforce_ssl is None:
            enforce_ssl = False
        if enforce_ssl is not None:
            pulumi.set(__self__, "enforce_ssl", enforce_ssl)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inserted_at is not None:
            pulumi.set(__self__, "inserted_at", inserted_at)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if sni_hostname is not None:
            pulumi.set(__self__, "sni_hostname", sni_hostname)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if upstream_ssl is None:
            upstream_ssl = True
        if upstream_ssl is not None:
            pulumi.set(__self__, "upstream_ssl", upstream_ssl)
        if upstream_verify is not None:
            pulumi.set(__self__, "upstream_verify", upstream_verify)

    @property
    @pulumi.getter(name="dbDatabase")
    def db_database(self) -> pulumi.Input[str]:
        """
        Database name
        """
        return pulumi.get(self, "db_database")

    @db_database.setter
    def db_database(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_database", value)

    @property
    @pulumi.getter(name="dbHost")
    def db_host(self) -> pulumi.Input[str]:
        """
        Database host
        """
        return pulumi.get(self, "db_host")

    @db_host.setter
    def db_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_host", value)

    @property
    @pulumi.getter(name="dbPort")
    def db_port(self) -> pulumi.Input[int]:
        """
        Database port
        """
        return pulumi.get(self, "db_port")

    @db_port.setter
    def db_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "db_port", value)

    @property
    @pulumi.getter(name="requireUser")
    def require_user(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "require_user")

    @require_user.setter
    def require_user(self, value: pulumi.Input[bool]):
        pulumi.set(self, "require_user", value)

    @property
    @pulumi.getter
    def users(self) -> pulumi.Input[Sequence[pulumi.Input['UserArgs']]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: pulumi.Input[Sequence[pulumi.Input['UserArgs']]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="allowList")
    def allow_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of CIDR addresses
        """
        return pulumi.get(self, "allow_list")

    @allow_list.setter
    def allow_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_list", value)

    @property
    @pulumi.getter(name="authQuery")
    def auth_query(self) -> Optional[pulumi.Input[str]]:
        """
        SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
        """
        return pulumi.get(self, "auth_query")

    @auth_query.setter
    def auth_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_query", value)

    @property
    @pulumi.getter(name="enforceSsl")
    def enforce_ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce_ssl")

    @enforce_ssl.setter
    def enforce_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce_ssl", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        External ID
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="insertedAt")
    def inserted_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inserted_at")

    @inserted_at.setter
    def inserted_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inserted_at", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        auto
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="sniHostname")
    def sni_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        your.domain.com
        """
        return pulumi.get(self, "sni_hostname")

    @sni_hostname.setter
    def sni_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_hostname", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="upstreamSsl")
    def upstream_ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upstream_ssl")

    @upstream_ssl.setter
    def upstream_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upstream_ssl", value)

    @property
    @pulumi.getter(name="upstreamVerify")
    def upstream_verify(self) -> Optional[pulumi.Input[str]]:
        """
        none
        """
        return pulumi.get(self, "upstream_verify")

    @upstream_verify.setter
    def upstream_verify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_verify", value)


if not MYPY:
    class UserArgsDict(TypedDict):
        db_password: pulumi.Input[str]
        """
        Database password
        """
        db_user: pulumi.Input[str]
        """
        Database user
        """
        pool_size: pulumi.Input[int]
        """
        Pool size
        """
        db_user_alias: NotRequired[pulumi.Input[str]]
        """
        Database user alias
        """
        id: NotRequired[pulumi.Input[str]]
        inserted_at: NotRequired[pulumi.Input[str]]
        is_manager: NotRequired[pulumi.Input[bool]]
        """
        The users who can be used for internal needs
        """
        max_clients: NotRequired[pulumi.Input[int]]
        """
        Max clients count
        """
        mode_type: NotRequired[pulumi.Input[str]]
        """
        Pooling mode type
        """
        pool_checkout_timeout: NotRequired[pulumi.Input[int]]
        """
        Pool checkout timeout
        """
        tenant_external_id: NotRequired[pulumi.Input[str]]
        """
        External Tenant ID
        """
        updated_at: NotRequired[pulumi.Input[str]]
elif False:
    UserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 db_password: pulumi.Input[str],
                 db_user: pulumi.Input[str],
                 pool_size: pulumi.Input[int],
                 db_user_alias: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 inserted_at: Optional[pulumi.Input[str]] = None,
                 is_manager: Optional[pulumi.Input[bool]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 mode_type: Optional[pulumi.Input[str]] = None,
                 pool_checkout_timeout: Optional[pulumi.Input[int]] = None,
                 tenant_external_id: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] db_password: Database password
        :param pulumi.Input[str] db_user: Database user
        :param pulumi.Input[int] pool_size: Pool size
        :param pulumi.Input[str] db_user_alias: Database user alias
        :param pulumi.Input[bool] is_manager: The users who can be used for internal needs
        :param pulumi.Input[int] max_clients: Max clients count
        :param pulumi.Input[str] mode_type: Pooling mode type
        :param pulumi.Input[int] pool_checkout_timeout: Pool checkout timeout
        :param pulumi.Input[str] tenant_external_id: External Tenant ID
        """
        pulumi.set(__self__, "db_password", db_password)
        pulumi.set(__self__, "db_user", db_user)
        pulumi.set(__self__, "pool_size", pool_size)
        if db_user_alias is not None:
            pulumi.set(__self__, "db_user_alias", db_user_alias)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inserted_at is not None:
            pulumi.set(__self__, "inserted_at", inserted_at)
        if is_manager is not None:
            pulumi.set(__self__, "is_manager", is_manager)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if mode_type is not None:
            pulumi.set(__self__, "mode_type", mode_type)
        if pool_checkout_timeout is not None:
            pulumi.set(__self__, "pool_checkout_timeout", pool_checkout_timeout)
        if tenant_external_id is not None:
            pulumi.set(__self__, "tenant_external_id", tenant_external_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="dbPassword")
    def db_password(self) -> pulumi.Input[str]:
        """
        Database password
        """
        return pulumi.get(self, "db_password")

    @db_password.setter
    def db_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_password", value)

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> pulumi.Input[str]:
        """
        Database user
        """
        return pulumi.get(self, "db_user")

    @db_user.setter
    def db_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_user", value)

    @property
    @pulumi.getter(name="poolSize")
    def pool_size(self) -> pulumi.Input[int]:
        """
        Pool size
        """
        return pulumi.get(self, "pool_size")

    @pool_size.setter
    def pool_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "pool_size", value)

    @property
    @pulumi.getter(name="dbUserAlias")
    def db_user_alias(self) -> Optional[pulumi.Input[str]]:
        """
        Database user alias
        """
        return pulumi.get(self, "db_user_alias")

    @db_user_alias.setter
    def db_user_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_user_alias", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="insertedAt")
    def inserted_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inserted_at")

    @inserted_at.setter
    def inserted_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inserted_at", value)

    @property
    @pulumi.getter(name="isManager")
    def is_manager(self) -> Optional[pulumi.Input[bool]]:
        """
        The users who can be used for internal needs
        """
        return pulumi.get(self, "is_manager")

    @is_manager.setter
    def is_manager(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_manager", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        """
        Max clients count
        """
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="modeType")
    def mode_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pooling mode type
        """
        return pulumi.get(self, "mode_type")

    @mode_type.setter
    def mode_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_type", value)

    @property
    @pulumi.getter(name="poolCheckoutTimeout")
    def pool_checkout_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Pool checkout timeout
        """
        return pulumi.get(self, "pool_checkout_timeout")

    @pool_checkout_timeout.setter
    def pool_checkout_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pool_checkout_timeout", value)

    @property
    @pulumi.getter(name="tenantExternalId")
    def tenant_external_id(self) -> Optional[pulumi.Input[str]]:
        """
        External Tenant ID
        """
        return pulumi.get(self, "tenant_external_id")

    @tenant_external_id.setter
    def tenant_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_external_id", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


