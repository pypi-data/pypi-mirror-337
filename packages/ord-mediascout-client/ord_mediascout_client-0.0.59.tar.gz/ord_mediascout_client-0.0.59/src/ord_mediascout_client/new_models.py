# generated by datamodel-codegen:
#   filename:  https://demo.mediascout.ru/swagger/v3/swagger.json
#   timestamp: 2025-03-21T10:53:29+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Extra, Field


class Status(Enum):
    Creating = 'Creating'
    MediaDownloadError = 'MediaDownloadError'
    Created = 'Created'
    RegistrationRequired = 'RegistrationRequired'
    Registering = 'Registering'
    Active = 'Active'
    RegistrationError = 'RegistrationError'
    DeletionRequired = 'DeletionRequired'
    Deleting = 'Deleting'
    DeletionError = 'DeletionError'
    Deleted = 'Deleted'


class AdvertisementStatusResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    status: Status = Field(
        ...,
        description='Статус рекламного элемента<p>Members:</p><ul><li><i>Creating</i> - Идет загрузка в ОРД (элемент фида создан, но медиа-данные еще не загружены)</li><li><i>MediaDownloadError</i> - Не удалось скачать медифайл для элемента фида (пока используется только для элементов фидов)</li><li><i>Created</i> - Создан в БД (наша валидация пройдена). Пока не используется, сущность сразу переходит в статус [Ожидает регистрации].</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>Active</i> - Активный</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР</li><li><i>Deleting</i> - Идет удаление, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )


class Type(Enum):
    CPM = 'CPM'
    CPC = 'CPC'
    CPA = 'CPA'
    Other = 'Other'


class Form(Enum):
    Banner = 'Banner'
    Text = 'Text'
    TextGraphic = 'TextGraphic'
    Video = 'Video'
    Audio = 'Audio'
    AudioBroadcast = 'AudioBroadcast'
    VideoBroadcast = 'VideoBroadcast'
    TextVideoBlock = 'TextVideoBlock'
    TextAudioBlock = 'TextAudioBlock'
    TextAudioVideoBlock = 'TextAudioVideoBlock'
    TextGraphicVideoBlock = 'TextGraphicVideoBlock'
    TextGraphicAudioBlock = 'TextGraphicAudioBlock'
    TextGraphicAudioVideoBlock = 'TextGraphicAudioVideoBlock'
    BannerHtml5 = 'BannerHtml5'


class CidContractResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    finalContractId: str = Field(
        ..., description='Идентификатор или Cid доходного договора', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    contractorId: Optional[str] = Field(
        None, description='Id контрагента-исполнителя по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    clientId: Optional[str] = Field(
        None, description='Id контрагента-заказчика по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    number: Optional[str] = Field(None, description='Номер (наименование) договора')
    id: str = Field(..., description='Id изначального Cid-договора', example='5951f043-55c3-4456-8c17-3e0d4793dae1')
    cid: str = Field(
        ..., description='Cid (идентификатор в ЕРИР) договора', example='5951f043-55c3-4456-8c17-3e0d4793dae1'
    )


class CreateMode(Enum):
    DirectClient = 'DirectClient'
    InitialContractClient = 'InitialContractClient'


class LegalForm(Enum):
    JuridicalPerson = 'JuridicalPerson'
    IndividualEntrepreneur = 'IndividualEntrepreneur'
    PhysicalPerson = 'PhysicalPerson'
    InternationalJuridicalPerson = 'InternationalJuridicalPerson'
    InternationalPhysicalPerson = 'InternationalPhysicalPerson'


class Status2(Enum):
    Created = 'Created'
    RegistrationRequired = 'RegistrationRequired'
    Registering = 'Registering'
    Active = 'Active'
    RegistrationError = 'RegistrationError'
    Blocked = 'Blocked'


class ContractCidResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    cid: str = Field(..., description='Cid (идентификатор в ЕРИР) договора')


class CreateCidContractRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    finalContractId: str = Field(
        ..., description='Идентификатор или Cid доходного договора', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    contractorId: Optional[str] = Field(
        None, description='Id контрагента-исполнителя по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    clientId: Optional[str] = Field(
        None, description='Id контрагента-заказчика по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    number: Optional[str] = Field(None, description='Номер (наименование) договора')
    cid: str = Field(
        ..., description='Cid (идентификатор в ЕРИР) договора', example='5951f043-55c3-4456-8c17-3e0d4793dae1'
    )


class CreateClientRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    createMode: Optional[CreateMode] = Field(
        None,
        description='Тип отношения заказчика к агентству<p>Members:</p><ul><li><i>DirectClient</i> - Прямой клиент для заданного агентства (т.е. может быть заказчиком по конечным договорам с этим агентством)</li><li><i>InitialContractClient</i> - Клиент, создаваемый в качестве заказчика или исполнителя у создаваемого изначального договора</li></ul>',
    )
    legalForm: LegalForm = Field(
        ...,
        description='Юридическая форма заказчика<p>Members:</p><ul><li><i>JuridicalPerson</i> - Юрлицо РФ</li><li><i>IndividualEntrepreneur</i> - Индивидуальный предприниматель РФ</li><li><i>PhysicalPerson</i> - Физлицо РФ или самозанятый</li><li><i>InternationalJuridicalPerson</i> - Иностранное юрлицо</li><li><i>InternationalPhysicalPerson</i> - Иностранное физлицо</li></ul>',
    )
    inn: str = Field(
        ...,
        description='Для РФ-контрагентов - ИНН. Для иностранных физ.и юр.лиц - номер налогоплательщика либо его аналог в стране регистрации',
        example='1234567890',
    )
    name: str = Field(..., description='Наименование контрагента', example='Наименование контрагента')
    mobilePhone: Optional[str] = Field(None, description='Номер мобильного телефона', example='79999999999')
    epayNumber: Optional[str] = Field(None, description='Номер электронного средства платежа')
    regNumber: Optional[str] = Field(None, description='Регистрационный номер либо его аналог')
    oksmNumber: Optional[str] = Field(None, description='Код страны регистрации юр. лица в соответствии с ОКСМ')


class FileType(Enum):
    Image = 'Image'
    Video = 'Video'
    Audio = 'Audio'
    Zip = 'Zip'
    Other = 'Other'


class CreateCreativeMediaDataItem(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    fileName: str = Field(
        ..., description='Имя файла\r\n<p style="color: blue">Поле обязательно для заполнения</p>', example='file.txt'
    )
    fileType: FileType = Field(
        ...,
        description='Тип файла медиаданных креатива\r\n<p style="color: blue">Поле обязательно для заполнения</p><p>Members:</p><ul><li><i>Image</i> - Изображение</li><li><i>Video</i> - Видео</li><li><i>Audio</i> - Аудио</li><li><i>Zip</i> - Архив</li><li><i>Other</i> - Иное</li></ul>',
        example='image',
    )
    fileContentBase64: Optional[str] = Field(
        None,
        description='Содержимое файла в кодировке Base64\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно, если не заполнено поле `srcUrl`</p>',
    )
    srcUrl: Optional[str] = Field(
        None,
        description='URL, откуда можно скачать файл. URL должен быть доступен без авторизации\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно, если не заполнено поле `fileContentBase64`</p>',
        example='https://example.com',
    )
    description: Optional[str] = Field(
        None,
        description='Описание изображения креатива (Данное поле будет игнорироваться с 01.04.2025 и будет удалено 01.07.2025)\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example='Описание',
    )
    isArchive: bool = Field(
        ...,
        description='Признак того, что это архив\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )


class CreateCreativeTextDataItem(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    textData: str = Field(
        ...,
        description='Текстовые данные креатива\r\n<p style="color: blue">Поле обязательно для заполнения</p>',
        example='Некий текст',
    )


class CreateDelayedFeedElement(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    nativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id элемента фида')
    description: str = Field(..., description='Общее описание объекта рекламирования')
    advertiserUrls: List[str] = Field(
        ..., description='Целевые ссылки (сайты рекламодателя, на который осуществляется переход по клику на рекламе)'
    )
    mediaData: Optional[List[CreateCreativeMediaDataItem]] = Field(
        None, description='Медиаданные элемента фида (массив)'
    )
    textData: Optional[List[CreateCreativeTextDataItem]] = Field(
        None, description='Текстовые медиаданные элемента фида (массив)'
    )
    feedId: Optional[str] = Field(
        None,
        description='Id фида (не заполняется, если фид еще только предстоит создать)\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Должно быть заполнено либо это поле, либо `FeedNativeCustomerId`, но не одновременно</p>',
    )
    feedNativeCustomerId: Optional[str] = Field(
        None,
        description='Пользовательский Id фида\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Должно быть заполнено либо это поле, либо `FeedId`, но не одновременно</p>',
    )
    feedName: Optional[str] = Field(
        None,
        description='Наименование фида для его создания, а если фид уже существует, и имеет другое наименование, оно будет заменено этим значением',
    )


class CreateDelayedFeedElementsBulkRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    feedElements: List[CreateDelayedFeedElement]


class CreateFeedElement(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    nativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id элемента фида')
    description: str = Field(..., description='Общее описание объекта рекламирования')
    advertiserUrls: List[str] = Field(
        ..., description='Целевые ссылки (сайты рекламодателя, на который осуществляется переход по клику на рекламе)'
    )
    mediaData: Optional[List[CreateCreativeMediaDataItem]] = Field(
        None, description='Медиаданные элемента фида (массив)'
    )
    textData: Optional[List[CreateCreativeTextDataItem]] = Field(
        None, description='Текстовые медиаданные элемента фида (массив)'
    )


class CreateFeedElementsRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    feedId: Optional[str] = Field(None, description='Id фида')
    feedNativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id фида')
    feedName: Optional[str] = Field(
        None,
        description='Наименование фида для его создания, а если фид уже существует, и имеет другое наименование, оно будет заменено этим значением',
    )
    feedElements: List[CreateFeedElement] = Field(
        ..., description='Список элементов, содержащих индивидуальную информацию для каждого элемента фида'
    )


class SubjectType(Enum):
    Distribution = 'Distribution'
    OrgDistribution = 'OrgDistribution'
    Representation = 'Representation'
    Mediation = 'Mediation'
    Other = 'Other'


class ActionType(Enum):
    Contracting = 'Contracting'
    Distribution = 'Distribution'
    CommercialRepresentation = 'CommercialRepresentation'
    Other = 'Other'


class Type3(Enum):
    ServiceAgreement = 'ServiceAgreement'
    MediationContract = 'MediationContract'
    AdditionalAgreement = 'AdditionalAgreement'


class CreateFinalContractRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None,
        description='Номер договора, без начального символа № и т.п. Допускается null, в таком случае считаем, что договор без номера',
        example='Тест',
    )
    date: date = Field(..., description='Дата заключения договора', example='2023-04-01')
    expirationDate: Optional[date] = Field(
        None, description='Дата окончания срока действия договора', example='2023-05-01'
    )
    amount: Optional[float] = Field(None, description='Стоимость услуг по договору в руб.', example=100)
    isAgentActingForPublisher: Optional[bool] = Field(
        None, description='Направление денежных средств в сторону заказчика', example=True
    )
    subjectType: Optional[SubjectType] = Field(
        None,
        description='Значение из справочника "Сведения о предмете договора"<p>Members:</p><ul><li><i>Distribution</i> - Договор на распространение рекламы</li><li><i>OrgDistribution</i> - Договор на организацию распространения рекламы</li><li><i>Representation</i> - Представительство</li><li><i>Mediation</i> - Посредничество</li><li><i>Other</i> - Иное</li></ul>',
    )
    actionType: Optional[ActionType] = Field(
        None,
        description='Значение из справочника "Типы взаимодействия сторон посреднического договора"<p>Members:</p><ul><li><i>Contracting</i> - Заключение договоров</li><li><i>Distribution</i> - Действия в целях распространения рекламы</li><li><i>CommercialRepresentation</i> - Коммерческое представительство</li><li><i>Other</i> - Иное</li></ul>',
    )
    parentMainContractId: Optional[str] = Field(
        None, description='Id основного договора для доп.соглашения', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    type: Type3 = Field(
        ...,
        description='Значение из справочника "Типы договоров"<p>Members:</p><ul><li><i>ServiceAgreement</i> - Договор оказания услуг</li><li><i>MediationContract</i> - Посреднический договор</li><li><i>AdditionalAgreement</i> - Дополнительное соглашение к основному договору</li></ul>',
    )
    clientId: str = Field(
        ..., description='Id контрагента-заказчика по доходному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    partnerId: Optional[str] = Field(None, description='Id партнера', example='CLhOO5UT6sIk-fIRu-QEsEuQ')


class CreateInitialContractRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None,
        description='Номер договора, без начального символа № и т.п. Допускается null, в таком случае считаем, что договор без номера',
        example='Тест',
    )
    date: date = Field(..., description='Дата заключения договора', example='2023-04-01')
    expirationDate: Optional[date] = Field(
        None, description='Дата окончания срока действия договора', example='2023-05-01'
    )
    amount: Optional[float] = Field(None, description='Стоимость услуг по договору в руб.', example=100)
    isAgentActingForPublisher: Optional[bool] = Field(
        None, description='Направление денежных средств в сторону заказчика', example=True
    )
    subjectType: Optional[SubjectType] = Field(
        None,
        description='Значение из справочника "Сведения о предмете договора"<p>Members:</p><ul><li><i>Distribution</i> - Договор на распространение рекламы</li><li><i>OrgDistribution</i> - Договор на организацию распространения рекламы</li><li><i>Representation</i> - Представительство</li><li><i>Mediation</i> - Посредничество</li><li><i>Other</i> - Иное</li></ul>',
    )
    actionType: Optional[ActionType] = Field(
        None,
        description='Значение из справочника "Типы взаимодействия сторон посреднического договора"<p>Members:</p><ul><li><i>Contracting</i> - Заключение договоров</li><li><i>Distribution</i> - Действия в целях распространения рекламы</li><li><i>CommercialRepresentation</i> - Коммерческое представительство</li><li><i>Other</i> - Иное</li></ul>',
    )
    parentMainContractId: Optional[str] = Field(
        None, description='Id основного договора для доп.соглашения', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    type: Type3 = Field(
        ...,
        description='Значение из справочника "Типы договоров"<p>Members:</p><ul><li><i>ServiceAgreement</i> - Договор оказания услуг</li><li><i>MediationContract</i> - Посреднический договор</li><li><i>AdditionalAgreement</i> - Дополнительное соглашение к основному договору</li></ul>',
    )
    contractorId: str = Field(
        ..., description='Id контрагента-исполнителя по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    clientId: str = Field(
        ..., description='Id контрагента-заказчика по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    finalContractId: str = Field(..., description='Id или Cid доходного договора', example='CT0N4ufC76TEu1xBEIwJ3CaA')


class ContractorRole(Enum):
    Rr = 'Rr'
    Ors = 'Ors'
    Rd = 'Rd'
    Ra = 'Ra'


class ClientRole(Enum):
    Rr = 'Rr'
    Ors = 'Ors'
    Rd = 'Rd'
    Ra = 'Ra'


class Type5(Enum):
    Invoice = 'Invoice'
    IntermediaryReport = 'IntermediaryReport'
    Undefined = 'Undefined'


class ContractorRole1(Enum):
    Rr = 'Rr'
    Ors = 'Ors'
    Rd = 'Rd'
    Ra = 'Ra'
    Psr = 'Psr'


class ClientRole1(Enum):
    Rr = 'Rr'
    Ors = 'Ors'
    Rd = 'Rd'
    Ra = 'Ra'
    Psr = 'Psr'


class CreateInvoiceResponseV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Идентификатор акта')


class Type6(Enum):
    ServiceAgreement = 'ServiceAgreement'
    MediationContract = 'MediationContract'
    AdditionalAgreement = 'AdditionalAgreement'


class CreateOuterContractRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None,
        description='Номер договора, без начального символа № и т.п. Допускается null, в таком случае считаем, что договор без номера',
        example='Тест',
    )
    date: date = Field(..., description='Дата заключения договора', example='2023-04-01')
    expirationDate: Optional[date] = Field(
        None, description='Дата окончания срока действия договора', example='2023-05-01'
    )
    amount: Optional[float] = Field(None, description='Стоимость услуг по договору в руб.', example=100)
    isAgentActingForPublisher: Optional[bool] = Field(
        None, description='Направление денежных средств в сторону заказчика', example=True
    )
    subjectType: Optional[SubjectType] = Field(
        None,
        description='Значение из справочника "Сведения о предмете договора"<p>Members:</p><ul><li><i>Distribution</i> - Договор на распространение рекламы</li><li><i>OrgDistribution</i> - Договор на организацию распространения рекламы</li><li><i>Representation</i> - Представительство</li><li><i>Mediation</i> - Посредничество</li><li><i>Other</i> - Иное</li></ul>',
    )
    actionType: Optional[ActionType] = Field(
        None,
        description='Значение из справочника "Типы взаимодействия сторон посреднического договора"<p>Members:</p><ul><li><i>Contracting</i> - Заключение договоров</li><li><i>Distribution</i> - Действия в целях распространения рекламы</li><li><i>CommercialRepresentation</i> - Коммерческое представительство</li><li><i>Other</i> - Иное</li></ul>',
    )
    parentMainContractId: Optional[str] = Field(
        None, description='Id основного договора для доп.соглашения', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    type: Type6 = Field(
        ...,
        description='Значение из справочника "Типы договоров"<p>Members:</p><ul><li><i>ServiceAgreement</i> - Договор оказания услуг</li><li><i>MediationContract</i> - Посреднический договор</li><li><i>AdditionalAgreement</i> - Дополнительное соглашение к основному договору</li></ul>',
    )
    contractorId: str = Field(
        ..., description='Id контрагента-исполнителя по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    partnerId: Optional[str] = Field(None, description='Id партнера', example='CLhOO5UT6sIk-fIRu-QEsEuQ')
    isRegReport: bool = Field(
        ...,
        description='Признак того, что исполнитель по договору (Агентство, к которому относится договор) должен регистрировать креативы и предоставлять разаллокацию по ним в актах',
    )


class Type7(Enum):
    Site = 'Site'
    Application = 'Application'


class CreatePlatformRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    name: str = Field(..., description='Наименование площадки', example='Тестовая площадка')
    type: Type7 = Field(
        ...,
        description='Тип площадки<p>Members:</p><ul><li><i>Site</i> - Сайт</li><li><i>Application</i> - Приложение</li></ul>',
    )
    url: Optional[str] = Field(None, description='Url площадки', example='https://example.com')
    isOwner: bool = Field(..., description='Признак принадлежности агентству')


class CreatedCidContractResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    finalContractId: str = Field(
        ..., description='Идентификатор или Cid доходного договора', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    contractorId: Optional[str] = Field(
        None, description='Id контрагента-исполнителя по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    clientId: Optional[str] = Field(
        None, description='Id контрагента-заказчика по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    number: Optional[str] = Field(None, description='Номер (наименование) договора')
    id: str = Field(..., description='Id изначального Cid-договора', example='5951f043-55c3-4456-8c17-3e0d4793dae1')
    cid: str = Field(
        ..., description='Cid (идентификатор в ЕРИР) договора', example='5951f043-55c3-4456-8c17-3e0d4793dae1'
    )


class Type8(Enum):
    ServiceAgreement = 'ServiceAgreement'
    MediationContract = 'MediationContract'
    AdditionalAgreement = 'AdditionalAgreement'
    SelfPromotionContract = 'SelfPromotionContract'
    EcidContract = 'EcidContract'


class Status3(Enum):
    Created = 'Created'
    RegistrationRequired = 'RegistrationRequired'
    Registering = 'Registering'
    Active = 'Active'
    RegistrationError = 'RegistrationError'
    Testing = 'Testing'
    DeletionRequired = 'DeletionRequired'
    Deleting = 'Deleting'
    DeletionError = 'DeletionError'
    Deleted = 'Deleted'


class CreatedFinalContractResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None,
        description='Номер договора, без начального символа № и т.п. Допускается null, в таком случае считаем, что договор без номера',
        example='Тест',
    )
    date: date = Field(..., description='Дата заключения договора', example='2023-04-01')
    expirationDate: Optional[date] = Field(
        None, description='Дата окончания срока действия договора', example='2023-05-01'
    )
    amount: Optional[float] = Field(None, description='Стоимость услуг по договору в руб.', example=100)
    isAgentActingForPublisher: Optional[bool] = Field(
        None, description='Направление денежных средств в сторону заказчика', example=True
    )
    subjectType: Optional[SubjectType] = Field(
        None,
        description='Значение из справочника "Сведения о предмете договора"<p>Members:</p><ul><li><i>Distribution</i> - Договор на распространение рекламы</li><li><i>OrgDistribution</i> - Договор на организацию распространения рекламы</li><li><i>Representation</i> - Представительство</li><li><i>Mediation</i> - Посредничество</li><li><i>Other</i> - Иное</li></ul>',
    )
    actionType: Optional[ActionType] = Field(
        None,
        description='Значение из справочника "Типы взаимодействия сторон посреднического договора"<p>Members:</p><ul><li><i>Contracting</i> - Заключение договоров</li><li><i>Distribution</i> - Действия в целях распространения рекламы</li><li><i>CommercialRepresentation</i> - Коммерческое представительство</li><li><i>Other</i> - Иное</li></ul>',
    )
    parentMainContractId: Optional[str] = Field(
        None, description='Id основного договора для доп.соглашения', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    id: str = Field(..., description='Id доходного договора в ОРД', example='CT0N4ufC76TEu1xBEIwJ3CaA')
    type: Type8 = Field(
        ...,
        description='Значение из справочника "Типы договоров"<p>Members:</p><ul><li><i>ServiceAgreement</i> - Договор оказания услуг</li><li><i>MediationContract</i> - Посреднический договор</li><li><i>AdditionalAgreement</i> - Дополнительное соглашение к основному договору</li><li><i>SelfPromotionContract</i> - Самореклама</li><li><i>EcidContract</i> - Договор, про который мы знаем только его ecid; не может быть родительским договором, дополнительным соглашением и т.д.; не регистрируется в ЕРИР</li></ul>',
    )
    status: Status3 = Field(
        ...,
        description='Статус доходного договора в ОРД<p>Members:</p><ul><li><i>Created</i> - Создан в БД (наша валидация пройдена). Пока не используется, сущность сразу переходит в статус [Ожидает регистрации].</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>Active</i> - Активный</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li><li><i>Testing</i> - Тестирование - для тестирования массовой загрузки креативов на продовом контуре</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР</li><li><i>Deleting</i> - Идет удаление, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    clientId: str = Field(
        ..., description='Id контрагента-заказчика по доходному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    partnerId: Optional[str] = Field(None, description='Id партнера', example='CLhOO5UT6sIk-fIRu-QEsEuQ')
    contractorId: str = Field(..., description='Id исполнителя', example='CLhOO5UT6sIk-fIRu-QEsEuQ')
    contractorInn: str = Field(..., description='ИНН исполнителя', example='7722643959')
    contractorName: str = Field(..., description='Наименование исполнителя', example='ООО "Ромашка"')


class CreatedInitialContractResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None,
        description='Номер договора, без начального символа № и т.п. Допускается null, в таком случае считаем, что договор без номера',
        example='Тест',
    )
    date: date = Field(..., description='Дата заключения договора', example='2023-04-01')
    expirationDate: Optional[date] = Field(
        None, description='Дата окончания срока действия договора', example='2023-05-01'
    )
    amount: Optional[float] = Field(None, description='Стоимость услуг по договору в руб.', example=100)
    isAgentActingForPublisher: Optional[bool] = Field(
        None, description='Направление денежных средств в сторону заказчика', example=True
    )
    subjectType: Optional[SubjectType] = Field(
        None,
        description='Значение из справочника "Сведения о предмете договора"<p>Members:</p><ul><li><i>Distribution</i> - Договор на распространение рекламы</li><li><i>OrgDistribution</i> - Договор на организацию распространения рекламы</li><li><i>Representation</i> - Представительство</li><li><i>Mediation</i> - Посредничество</li><li><i>Other</i> - Иное</li></ul>',
    )
    actionType: Optional[ActionType] = Field(
        None,
        description='Значение из справочника "Типы взаимодействия сторон посреднического договора"<p>Members:</p><ul><li><i>Contracting</i> - Заключение договоров</li><li><i>Distribution</i> - Действия в целях распространения рекламы</li><li><i>CommercialRepresentation</i> - Коммерческое представительство</li><li><i>Other</i> - Иное</li></ul>',
    )
    parentMainContractId: Optional[str] = Field(
        None, description='Id основного договора для доп.соглашения', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    id: str = Field(..., description='Id изначального договора в ОРД', example='CT0N4ufC76TEu1xBEIwJ3CaA')
    type: Type8 = Field(
        ...,
        description='Значение из справочника "Типы договоров"<p>Members:</p><ul><li><i>ServiceAgreement</i> - Договор оказания услуг</li><li><i>MediationContract</i> - Посреднический договор</li><li><i>AdditionalAgreement</i> - Дополнительное соглашение к основному договору</li><li><i>SelfPromotionContract</i> - Самореклама</li><li><i>EcidContract</i> - Договор, про который мы знаем только его ecid; не может быть родительским договором, дополнительным соглашением и т.д.; не регистрируется в ЕРИР</li></ul>',
    )
    status: Status3 = Field(
        ...,
        description='Статус изначального договора в ОРД<p>Members:</p><ul><li><i>Created</i> - Создан в БД (наша валидация пройдена). Пока не используется, сущность сразу переходит в статус [Ожидает регистрации].</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>Active</i> - Активный</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li><li><i>Testing</i> - Тестирование - для тестирования массовой загрузки креативов на продовом контуре</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР</li><li><i>Deleting</i> - Идет удаление, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    contractorId: str = Field(
        ..., description='Id контрагента-исполнителя по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    clientId: str = Field(
        ..., description='Id контрагента-заказчика по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    finalContractId: str = Field(..., description='Id или Cid доходного договора', example='CT0N4ufC76TEu1xBEIwJ3CaA')
    contractorInn: str = Field(..., description='ИНН исполнителя', example='7722643959')
    contractorName: str = Field(..., description='Наименование исполнителя', example='ООО «Ромашка»')
    clientInn: str = Field(..., description='ИНН заказчика', example='7722643959')
    clientName: str = Field(..., description='Наименование заказчика', example='ООО «Ромашка»')


class CreatedOuterContractResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None,
        description='Номер договора, без начального символа № и т.п. Допускается null, в таком случае считаем, что договор без номера',
        example='Тест',
    )
    date: date = Field(..., description='Дата заключения договора', example='2023-04-01')
    expirationDate: Optional[date] = Field(
        None, description='Дата окончания срока действия договора', example='2023-05-01'
    )
    amount: Optional[float] = Field(None, description='Стоимость услуг по договору в руб.', example=100)
    isAgentActingForPublisher: Optional[bool] = Field(
        None, description='Направление денежных средств в сторону заказчика', example=True
    )
    subjectType: Optional[SubjectType] = Field(
        None,
        description='Значение из справочника "Сведения о предмете договора"<p>Members:</p><ul><li><i>Distribution</i> - Договор на распространение рекламы</li><li><i>OrgDistribution</i> - Договор на организацию распространения рекламы</li><li><i>Representation</i> - Представительство</li><li><i>Mediation</i> - Посредничество</li><li><i>Other</i> - Иное</li></ul>',
    )
    actionType: Optional[ActionType] = Field(
        None,
        description='Значение из справочника "Типы взаимодействия сторон посреднического договора"<p>Members:</p><ul><li><i>Contracting</i> - Заключение договоров</li><li><i>Distribution</i> - Действия в целях распространения рекламы</li><li><i>CommercialRepresentation</i> - Коммерческое представительство</li><li><i>Other</i> - Иное</li></ul>',
    )
    parentMainContractId: Optional[str] = Field(
        None, description='Id основного договора для доп.соглашения', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    id: str = Field(..., description='Id договора в ОРД', example='CT0N4ufC76TEu1xBEIwJ3CaA')
    type: Type8 = Field(
        ...,
        description='Значение из справочника "Типы договоров"<p>Members:</p><ul><li><i>ServiceAgreement</i> - Договор оказания услуг</li><li><i>MediationContract</i> - Посреднический договор</li><li><i>AdditionalAgreement</i> - Дополнительное соглашение к основному договору</li><li><i>SelfPromotionContract</i> - Самореклама</li><li><i>EcidContract</i> - Договор, про который мы знаем только его ecid; не может быть родительским договором, дополнительным соглашением и т.д.; не регистрируется в ЕРИР</li></ul>',
    )
    status: Status3 = Field(
        ...,
        description='Статус договора в ОРД<p>Members:</p><ul><li><i>Created</i> - Создан в БД (наша валидация пройдена). Пока не используется, сущность сразу переходит в статус [Ожидает регистрации].</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>Active</i> - Активный</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li><li><i>Testing</i> - Тестирование - для тестирования массовой загрузки креативов на продовом контуре</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР</li><li><i>Deleting</i> - Идет удаление, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    contractorId: str = Field(
        ..., description='Id контрагента-исполнителя по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    partnerId: Optional[str] = Field(None, description='Id партнера', example='CLhOO5UT6sIk-fIRu-QEsEuQ')
    isRegReport: bool = Field(
        ...,
        description='Признак того, что исполнитель по договору (Агентство, к которому относится договор) должен регистрировать креативы и предоставлять разаллокацию по ним в актах',
    )


class Status6(Enum):
    Creating = 'Creating'
    MediaDownloadError = 'MediaDownloadError'
    Created = 'Created'
    RegistrationRequired = 'RegistrationRequired'
    Registering = 'Registering'
    Active = 'Active'
    RegistrationError = 'RegistrationError'
    DeletionRequired = 'DeletionRequired'
    Deleting = 'Deleting'
    DeletionError = 'DeletionError'
    Deleted = 'Deleted'


class CreativeBaseStatusResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    status: Status6 = Field(
        ...,
        description='Статус рекламного элемента<p>Members:</p><ul><li><i>Creating</i> - Идет загрузка в ОРД (элемент фида создан, но медиа-данные еще не загружены)</li><li><i>MediaDownloadError</i> - Не удалось скачать медифайл для элемента фида (пока используется только для элементов фидов)</li><li><i>Created</i> - Создан в БД (наша валидация пройдена). Пока не используется, сущность сразу переходит в статус [Ожидает регистрации].</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>Active</i> - Активный</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР</li><li><i>Deleting</i> - Идет удаление, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    erid: str = Field(..., description='Маркер рекламного элемента')


class Type11(Enum):
    CPM = 'CPM'
    CPC = 'CPC'
    CPA = 'CPA'
    Other = 'Other'


class CreativeMediaDataItem(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Идентификатор медиаданных')
    fileName: str = Field(..., description='Имя файла', example='file.txt')
    fileType: Optional[FileType] = Field(
        None,
        description='Тип файла медиаданных креатива<p>Members:</p><ul><li><i>Image</i> - Изображение</li><li><i>Video</i> - Видео</li><li><i>Audio</i> - Аудио</li><li><i>Zip</i> - Архив</li><li><i>Other</i> - Иное</li></ul>',
        example='image',
    )
    description: Optional[str] = Field(
        None, description='Описание изображения креатива (Данное поле будет удалено 01.07.2025)', example='Описание'
    )


class CreativeTextDataItemWebApiDto(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Идентификатор медиаданных')
    textData: str = Field(..., description='Текстовые данные креатива')


class DelayedAdvertisementMedia(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    srcUrl: str = Field(..., description='Путь до внешнего файла')
    fileName: str = Field(..., description='Имя файла')
    mediaDownloadError: Optional[str] = Field(None, description='Ошибка загруки внешнего файла')


class Status8(Enum):
    Pending = 'Pending'
    ReadyToDownload = 'ReadyToDownload'
    Downloading = 'Downloading'
    Downloaded = 'Downloaded'
    RegistrationRequired = 'RegistrationRequired'
    Registering = 'Registering'
    Active = 'Active'
    RegistrationError = 'RegistrationError'
    DeletionRequired = 'DeletionRequired'
    Deleting = 'Deleting'
    DeletionError = 'DeletionError'
    Deleted = 'Deleted'
    WaitingForRetry = 'WaitingForRetry'
    Duplicate = 'Duplicate'
    Failed = 'Failed'


class EditCidContractRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    finalContractId: str = Field(
        ..., description='Идентификатор или Cid доходного договора', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    contractorId: Optional[str] = Field(
        None, description='Id контрагента-исполнителя по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    clientId: Optional[str] = Field(
        None, description='Id контрагента-заказчика по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    number: Optional[str] = Field(None, description='Номер (наименование) договора')


class ActionType6(Enum):
    Add = 'Add'
    Edit = 'Edit'
    Delete = 'Delete'


class EditCreativeMediaDataItem(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        description='Идентификатор текстовых медиаданных\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Обязательно для `ActionType` = `Edit` или `Delete`</p>',
    )
    actionType: Optional[ActionType6] = Field(
        None,
        description='Тип действия над медиаданными\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Если не заполнено, будет установлено значение `Add`</p><p>Members:</p><ul><li><i>Add</i> - Добавление</li><li><i>Edit</i> - Редактирование</li><li><i>Delete</i> - Удаление</li></ul>',
    )
    fileName: Optional[str] = Field(
        None,
        description='Имя файла\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Обязательно для `ActionType` = `Add`</p>',
        example='file.txt',
    )
    fileType: Optional[FileType] = Field(
        None,
        description='Тип файла медиаданных креатива\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Обязательно для `ActionType` = `Add` или `Edit`</p><p>Members:</p><ul><li><i>Image</i> - Изображение</li><li><i>Video</i> - Видео</li><li><i>Audio</i> - Аудио</li><li><i>Zip</i> - Архив</li><li><i>Other</i> - Иное</li></ul>',
        example='image',
    )
    fileContentBase64: Optional[str] = Field(
        None,
        description='Содержимое файла в кодировке Base64\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно, если не заполнено поле `srcUrl` и `ActionType` = `Add`</p>',
    )
    srcUrl: Optional[str] = Field(
        None,
        description='URL, откуда можно скачать файл. URL должен быть доступен без авторизации\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно, если не заполнено поле `fileContentBase64` и `ActionType` = `Add`</p>',
        example='https://example.com',
    )
    description: Optional[str] = Field(
        None,
        description='Описание изображения креатива (Данное поле будет игнорироваться с 01.04.2025 и будет удалено 01.07.2025)\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example='Описание',
    )
    isArchive: bool = Field(
        ...,
        description='Признак того, что это архив\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`. Имеет смысл только для `ActionType` = `Add`</p>',
    )


class Form6(Enum):
    Banner = 'Banner'
    Text = 'Text'
    TextGraphic = 'TextGraphic'
    Video = 'Video'
    Audio = 'Audio'
    AudioBroadcast = 'AudioBroadcast'
    VideoBroadcast = 'VideoBroadcast'
    Other = 'Other'
    TextVideoBlock = 'TextVideoBlock'
    TextAudioBlock = 'TextAudioBlock'
    TextAudioVideoBlock = 'TextAudioVideoBlock'
    TextGraphicVideoBlock = 'TextGraphicVideoBlock'
    TextGraphicAudioBlock = 'TextGraphicAudioBlock'
    TextGraphicAudioVideoBlock = 'TextGraphicAudioVideoBlock'
    BannerHtml5 = 'BannerHtml5'


class EditCreativeTextDataItem(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        description='Идентификатор текстовых медиаданных\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Обязательно для `ActionType` = `Edit` или `Delete`</p>',
    )
    actionType: Optional[ActionType6] = Field(
        None,
        description='Тип действия над медиаданными\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Если не заполнено, будет установлено значение `Add`</p><p>Members:</p><ul><li><i>Add</i> - Добавление</li><li><i>Edit</i> - Редактирование</li><li><i>Delete</i> - Удаление</li></ul>',
    )
    textData: Optional[str] = Field(
        None,
        description='Текстовые данные креатива\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Обязательно для `ActionType` = `Add` или `Edit`</p>',
        example='Некий текст',
    )


class EditDelayedFeedElement(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: Optional[str] = Field(None, description='Id элемента фида')
    nativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id элемента фида')
    description: str = Field(..., description='Общее описание объекта рекламирования')
    advertiserUrls: List[str] = Field(
        ..., description='Целевые ссылки (сайты рекламодателя, на который осуществляется переход по клику на рекламе)'
    )
    overwriteExistingCreativeMedia: bool = Field(
        ...,
        description='Перезаписать все предыдущие медиаданные элемента фида (файловые и текстовые). Токен останется прежним, существующие медиаданные удалятся, переданные медиаданые запишутся.\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    mediaData: Optional[List[EditCreativeMediaDataItem]] = Field(None, description='Медиаданные элемента фида (массив)')
    textData: Optional[List[EditCreativeTextDataItem]] = Field(
        None, description='Текстовые медиаданные элемента фида (массив)'
    )
    feedId: Optional[str] = Field(
        None,
        description='Id фида (не заполняется, если фид еще только предстоит создать)\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Должно быть заполнено либо это поле, либо `FeedNativeCustomerId`, но не одновременно</p>',
    )
    feedNativeCustomerId: Optional[str] = Field(
        None,
        description='Пользовательский Id фида\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Должно быть заполнено либо это поле, либо `FeedId`, но не одновременно</p>',
    )
    feedName: Optional[str] = Field(None, description='Наименование фида')


class EditDelayedFeedElementsBulkRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    feedElements: List[EditDelayedFeedElement]


class EditFeedElementWebApiDto(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: Optional[str] = Field(None, description='Id элемента фида')
    nativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id элемента фида')
    description: str = Field(..., description='Общее описание объекта рекламирования')
    advertiserUrls: List[str] = Field(
        ..., description='Целевые ссылки (сайты рекламодателя, на который осуществляется переход по клику на рекламе)'
    )
    overwriteExistingCreativeMedia: bool = Field(
        ...,
        description='Перезаписать все предыдущие медиаданные элемента фида (файловые и текстовые). Токен останется прежним, существующие медиаданные удалятся, переданные медиаданые запишутся.\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    mediaData: Optional[List[EditCreativeMediaDataItem]] = Field(None, description='Медиаданные элемента фида (массив)')
    textData: Optional[List[EditCreativeTextDataItem]] = Field(
        None, description='Текстовые медиаданные элемента фида (массив)'
    )


class EditFeedElementsRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    feedId: Optional[str] = Field(None, description='Id фида')
    feedNativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id фида')
    feedName: Optional[str] = Field(
        None,
        description='Наименование фида для его создания, а если фид уже существует, и имеет другое наименование, оно будет заменено этим значением',
    )
    feedElements: List[EditFeedElementWebApiDto] = Field(
        ..., description='Список элементов, содержащих индивидуальную информацию для каждого элемента фида'
    )


class ActionType8(Enum):
    Contracting = 'Contracting'
    Distribution = 'Distribution'
    CommercialRepresentation = 'CommercialRepresentation'
    Other = 'Other'


class Type14(Enum):
    ServiceAgreement = 'ServiceAgreement'
    MediationContract = 'MediationContract'
    AdditionalAgreement = 'AdditionalAgreement'


class EditFinalContractRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None,
        description='Номер договора, без начального символа № и т.п. Допускается null, в таком случае считаем, что договор без номера',
        example='Тест',
    )
    date: date = Field(..., description='Дата заключения договора', example='2023-04-01')
    expirationDate: Optional[date] = Field(
        None, description='Дата окончания срока действия договора', example='2023-05-01'
    )
    amount: Optional[float] = Field(None, description='Стоимость услуг по договору в руб.', example=100)
    isAgentActingForPublisher: Optional[bool] = Field(
        None, description='Направление денежных средств в сторону заказчика', example=True
    )
    subjectType: Optional[SubjectType] = Field(
        None,
        description='Значение из справочника "Сведения о предмете договора"<p>Members:</p><ul><li><i>Distribution</i> - Договор на распространение рекламы</li><li><i>OrgDistribution</i> - Договор на организацию распространения рекламы</li><li><i>Representation</i> - Представительство</li><li><i>Mediation</i> - Посредничество</li><li><i>Other</i> - Иное</li></ul>',
    )
    actionType: Optional[ActionType8] = Field(
        None,
        description='Значение из справочника "Типы взаимодействия сторон посреднического договора"<p>Members:</p><ul><li><i>Contracting</i> - Заключение договоров</li><li><i>Distribution</i> - Действия в целях распространения рекламы</li><li><i>CommercialRepresentation</i> - Коммерческое представительство</li><li><i>Other</i> - Иное</li></ul>',
    )
    parentMainContractId: Optional[str] = Field(
        None, description='Id основного договора для доп.соглашения', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    type: Type14 = Field(
        ...,
        description='Значение из справочника "Типы договоров"<p>Members:</p><ul><li><i>ServiceAgreement</i> - Договор оказания услуг</li><li><i>MediationContract</i> - Посреднический договор</li><li><i>AdditionalAgreement</i> - Дополнительное соглашение к основному договору</li></ul>',
    )
    clientId: str = Field(
        ..., description='Id контрагента-заказчика по доходному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    partnerId: Optional[str] = Field(None, description='Id партнера', example='CLhOO5UT6sIk-fIRu-QEsEuQ')


class EditInitialContractRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None,
        description='Номер договора, без начального символа № и т.п. Допускается null, в таком случае считаем, что договор без номера',
        example='Тест',
    )
    date: date = Field(..., description='Дата заключения договора', example='2023-04-01')
    expirationDate: Optional[date] = Field(
        None, description='Дата окончания срока действия договора', example='2023-05-01'
    )
    amount: Optional[float] = Field(None, description='Стоимость услуг по договору в руб.', example=100)
    isAgentActingForPublisher: Optional[bool] = Field(
        None, description='Направление денежных средств в сторону заказчика', example=True
    )
    subjectType: Optional[SubjectType] = Field(
        None,
        description='Значение из справочника "Сведения о предмете договора"<p>Members:</p><ul><li><i>Distribution</i> - Договор на распространение рекламы</li><li><i>OrgDistribution</i> - Договор на организацию распространения рекламы</li><li><i>Representation</i> - Представительство</li><li><i>Mediation</i> - Посредничество</li><li><i>Other</i> - Иное</li></ul>',
    )
    actionType: Optional[ActionType8] = Field(
        None,
        description='Значение из справочника "Типы взаимодействия сторон посреднического договора"<p>Members:</p><ul><li><i>Contracting</i> - Заключение договоров</li><li><i>Distribution</i> - Действия в целях распространения рекламы</li><li><i>CommercialRepresentation</i> - Коммерческое представительство</li><li><i>Other</i> - Иное</li></ul>',
    )
    parentMainContractId: Optional[str] = Field(
        None, description='Id основного договора для доп.соглашения', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    type: Type14 = Field(
        ...,
        description='Значение из справочника "Типы договоров"<p>Members:</p><ul><li><i>ServiceAgreement</i> - Договор оказания услуг</li><li><i>MediationContract</i> - Посреднический договор</li><li><i>AdditionalAgreement</i> - Дополнительное соглашение к основному договору</li></ul>',
    )
    contractorId: str = Field(
        ..., description='Id контрагента-исполнителя по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    clientId: str = Field(
        ..., description='Id контрагента-заказчика по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    finalContractId: str = Field(..., description='Id или Cid доходного договора', example='CT0N4ufC76TEu1xBEIwJ3CaA')


class ContractorRole2(Enum):
    Rr = 'Rr'
    Ors = 'Ors'
    Rd = 'Rd'
    Ra = 'Ra'


class ClientRole2(Enum):
    Rr = 'Rr'
    Ors = 'Ors'
    Rd = 'Rd'
    Ra = 'Ra'


class EditInvoiceRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None, description='Номер акта. Допускается null, в таком случае считаем, что акт без номера', example='Тест'
    )
    date: date = Field(..., description='Дата акта', example='2022-12-31')
    contractorRole: ContractorRole2 = Field(
        ...,
        description='Роль исполнителя в акте<p>Members:</p><ul><li><i>Rr</i> - Рекламораспространитель</li><li><i>Ors</i> - Оператор рекламной системы</li><li><i>Rd</i> - Рекламодатель</li><li><i>Ra</i> - Рекламное агентство</li></ul>',
        example='Ra',
    )
    clientRole: ClientRole2 = Field(
        ...,
        description='Роль заказчика в акте<p>Members:</p><ul><li><i>Rr</i> - Рекламораспространитель</li><li><i>Ors</i> - Оператор рекламной системы</li><li><i>Rd</i> - Рекламодатель</li><li><i>Ra</i> - Рекламное агентство</li></ul>',
        example='Rd',
    )
    amount: float = Field(..., description='Общая стоимость по акту в руб.', example=100)
    startDate: date = Field(..., description='Дата начала оказания услуг по акту', example='2022-12-01')
    endDate: date = Field(..., description='Дата окончания оказания услуг по акту (включительно)', example='2022-12-31')
    finalContractId: str = Field(..., description='Id доходного договора в ОРД', example='CT3at_SU7y3ECdCb-AfHV3sA')


class ContractorRole3(Enum):
    Rr = 'Rr'
    Ors = 'Ors'
    Rd = 'Rd'
    Ra = 'Ra'
    Psr = 'Psr'


class ClientRole3(Enum):
    Rr = 'Rr'
    Ors = 'Ors'
    Rd = 'Rd'
    Ra = 'Ra'
    Psr = 'Psr'


class EditOuterContractRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None,
        description='Номер договора, без начального символа № и т.п. Допускается null, в таком случае считаем, что договор без номера',
        example='Тест',
    )
    date: date = Field(..., description='Дата заключения договора', example='2023-04-01')
    expirationDate: Optional[date] = Field(
        None, description='Дата окончания срока действия договора', example='2023-05-01'
    )
    amount: Optional[float] = Field(None, description='Стоимость услуг по договору в руб.', example=100)
    isAgentActingForPublisher: Optional[bool] = Field(
        None, description='Направление денежных средств в сторону заказчика', example=True
    )
    subjectType: Optional[SubjectType] = Field(
        None,
        description='Значение из справочника "Сведения о предмете договора"<p>Members:</p><ul><li><i>Distribution</i> - Договор на распространение рекламы</li><li><i>OrgDistribution</i> - Договор на организацию распространения рекламы</li><li><i>Representation</i> - Представительство</li><li><i>Mediation</i> - Посредничество</li><li><i>Other</i> - Иное</li></ul>',
    )
    actionType: Optional[ActionType8] = Field(
        None,
        description='Значение из справочника "Типы взаимодействия сторон посреднического договора"<p>Members:</p><ul><li><i>Contracting</i> - Заключение договоров</li><li><i>Distribution</i> - Действия в целях распространения рекламы</li><li><i>CommercialRepresentation</i> - Коммерческое представительство</li><li><i>Other</i> - Иное</li></ul>',
    )
    parentMainContractId: Optional[str] = Field(
        None, description='Id основного договора для доп.соглашения', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    type: Type14 = Field(
        ...,
        description='Значение из справочника "Типы договоров"<p>Members:</p><ul><li><i>ServiceAgreement</i> - Договор оказания услуг</li><li><i>MediationContract</i> - Посреднический договор</li><li><i>AdditionalAgreement</i> - Дополнительное соглашение к основному договору</li></ul>',
    )
    contractorId: str = Field(
        ..., description='Id контрагента-исполнителя по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    partnerId: Optional[str] = Field(None, description='Id партнера', example='CLhOO5UT6sIk-fIRu-QEsEuQ')
    isRegReport: bool = Field(
        ...,
        description='Признак того, что исполнитель по договору (Агентство, к которому относится договор) должен регистрировать креативы и предоставлять разаллокацию по ним в актах',
    )


class Type17(Enum):
    Site = 'Site'
    Application = 'Application'


class EditPlatformRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    name: str = Field(..., description='Наименование площадки', example='Тестовая площадка')
    type: Type17 = Field(
        ...,
        description='Тип площадки<p>Members:</p><ul><li><i>Site</i> - Сайт</li><li><i>Application</i> - Приложение</li></ul>',
    )
    url: Optional[str] = Field(None, description='Url площадки', example='https://example.com')
    isOwner: bool = Field(..., description='Признак принадлежности агентству')


class EntityIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Идентификатор акта', example='INUFNs1ibfg0erF1PNpTOAyg')


class Stage(Enum):
    EntityHeader = 'EntityHeader'
    First = 'First'
    Second = 'Second'


class ErirValidationError(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    stage: Stage = Field(
        ...,
        description='Тип запроса ЕРИР-интеграции<p>Members:</p><ul><li><i>EntityHeader</i> - Отправлена заголовочная информация (например шапка акта)</li><li><i>First</i> - Первоначальный быстрый запрос, проверяются лишь атрибуты сущности</li><li><i>Second</i> - Запрос на получение уточненных результатов логической проверки</li></ul>',
    )
    code: str = Field(..., description='Код ошибки от ЕРИР', example='I_82')
    message: str = Field(
        ..., description='Подробный текст ошибки от ЕРИР', example='В разаллокации присутствует более одного договора'
    )
    responseDt: datetime = Field(..., description='Дата-время ответа, полученного от ЕРИР')


class Status9(Enum):
    Creating = 'Creating'
    MediaDownloadError = 'MediaDownloadError'
    Created = 'Created'
    RegistrationRequired = 'RegistrationRequired'
    Registering = 'Registering'
    Active = 'Active'
    RegistrationError = 'RegistrationError'
    DeletionRequired = 'DeletionRequired'
    Deleting = 'Deleting'
    DeletionError = 'DeletionError'
    Deleted = 'Deleted'


class FeedElementResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Id элемента фида')
    feedId: str = Field(..., description='Id фида')
    feedName: str = Field(..., description='Наименование фида')
    status: Status9 = Field(
        ...,
        description='Статус<p>Members:</p><ul><li><i>Creating</i> - Идет загрузка в ОРД (элемент фида создан, но медиа-данные еще не загружены)</li><li><i>MediaDownloadError</i> - Не удалось скачать медифайл для элемента фида (пока используется только для элементов фидов)</li><li><i>Created</i> - Создан в БД (наша валидация пройдена). Пока не используется, сущность сразу переходит в статус [Ожидает регистрации].</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>Active</i> - Активный</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР</li><li><i>Deleting</i> - Идет удаление, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    description: str = Field(..., description='Общее описание объекта рекламирования')
    advertiserUrls: List[str] = Field(
        ..., description='Целевые ссылки (сайты рекламодателя, на который осуществляется переход по клику на рекламе)'
    )
    nativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id элемента фида')
    feedNativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id фида')
    erirValidationError: Optional[ErirValidationError] = None
    mediaData: List[CreativeMediaDataItem] = Field(..., description='Файловые медиаданные элемента фида')
    textData: List[CreativeTextDataItemWebApiDto] = Field(..., description='Текстовые медиаданные элемента фида')


class FiasResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Идентификатор адресного объекта')
    parentId: Optional[str] = Field(None, description='Идентификатор родительского объекта')
    objectGuid: UUID = Field(
        ...,
        description='Глобальный уникальный идентификатор адресного объекта типа UUID',
        example='3fa85f64-5717-4562-b3fc-2c963f66afa6',
    )
    name: str = Field(..., description='Краткое наименование типа объекта', example='город')
    fullName: str = Field(..., description='Полное наименование адресного объекта', example='Нижний Новгород')


class Type18(Enum):
    ServiceAgreement = 'ServiceAgreement'
    MediationContract = 'MediationContract'
    AdditionalAgreement = 'AdditionalAgreement'
    SelfPromotionContract = 'SelfPromotionContract'
    EcidContract = 'EcidContract'


class Status10(Enum):
    Created = 'Created'
    RegistrationRequired = 'RegistrationRequired'
    Registering = 'Registering'
    Active = 'Active'
    RegistrationError = 'RegistrationError'
    Testing = 'Testing'
    DeletionRequired = 'DeletionRequired'
    Deleting = 'Deleting'
    DeletionError = 'DeletionError'
    Deleted = 'Deleted'


class FinalContractResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None,
        description='Номер договора, без начального символа № и т.п. Допускается null, в таком случае считаем, что договор без номера',
        example='Тест',
    )
    date: date = Field(..., description='Дата заключения договора', example='2023-04-01')
    expirationDate: Optional[date] = Field(
        None, description='Дата окончания срока действия договора', example='2023-05-01'
    )
    amount: Optional[float] = Field(None, description='Стоимость услуг по договору в руб.', example=100)
    isAgentActingForPublisher: Optional[bool] = Field(
        None, description='Направление денежных средств в сторону заказчика', example=True
    )
    subjectType: Optional[SubjectType] = Field(
        None,
        description='Значение из справочника "Сведения о предмете договора"<p>Members:</p><ul><li><i>Distribution</i> - Договор на распространение рекламы</li><li><i>OrgDistribution</i> - Договор на организацию распространения рекламы</li><li><i>Representation</i> - Представительство</li><li><i>Mediation</i> - Посредничество</li><li><i>Other</i> - Иное</li></ul>',
    )
    actionType: Optional[ActionType8] = Field(
        None,
        description='Значение из справочника "Типы взаимодействия сторон посреднического договора"<p>Members:</p><ul><li><i>Contracting</i> - Заключение договоров</li><li><i>Distribution</i> - Действия в целях распространения рекламы</li><li><i>CommercialRepresentation</i> - Коммерческое представительство</li><li><i>Other</i> - Иное</li></ul>',
    )
    parentMainContractId: Optional[str] = Field(
        None, description='Id основного договора для доп.соглашения', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    id: str = Field(..., description='Id доходного договора в ОРД', example='CT0N4ufC76TEu1xBEIwJ3CaA')
    type: Type18 = Field(
        ...,
        description='Значение из справочника "Типы договоров"<p>Members:</p><ul><li><i>ServiceAgreement</i> - Договор оказания услуг</li><li><i>MediationContract</i> - Посреднический договор</li><li><i>AdditionalAgreement</i> - Дополнительное соглашение к основному договору</li><li><i>SelfPromotionContract</i> - Самореклама</li><li><i>EcidContract</i> - Договор, про который мы знаем только его ecid; не может быть родительским договором, дополнительным соглашением и т.д.; не регистрируется в ЕРИР</li></ul>',
    )
    status: Status10 = Field(
        ...,
        description='Статус доходного договора в ОРД<p>Members:</p><ul><li><i>Created</i> - Создан в БД (наша валидация пройдена). Пока не используется, сущность сразу переходит в статус [Ожидает регистрации].</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>Active</i> - Активный</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li><li><i>Testing</i> - Тестирование - для тестирования массовой загрузки креативов на продовом контуре</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР</li><li><i>Deleting</i> - Идет удаление, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    clientId: str = Field(
        ..., description='Id контрагента-заказчика по доходному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    partnerId: Optional[str] = Field(None, description='Id партнера', example='CLhOO5UT6sIk-fIRu-QEsEuQ')
    contractorId: str = Field(..., description='Id исполнителя', example='CLhOO5UT6sIk-fIRu-QEsEuQ')
    contractorInn: str = Field(..., description='ИНН исполнителя', example='7722643959')
    contractorName: str = Field(..., description='Наименование исполнителя', example='ООО "Ромашка"')
    cid: Optional[str] = Field(
        None, description='Cid доходного договора', example='763acd99-687b-46cd-8f40-45eced77413c'
    )
    erirValidationError: Optional[ErirValidationError] = None


class InitialContractResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None,
        description='Номер договора, без начального символа № и т.п. Допускается null, в таком случае считаем, что договор без номера',
        example='Тест',
    )
    date: date = Field(..., description='Дата заключения договора', example='2023-04-01')
    expirationDate: Optional[date] = Field(
        None, description='Дата окончания срока действия договора', example='2023-05-01'
    )
    amount: Optional[float] = Field(None, description='Стоимость услуг по договору в руб.', example=100)
    isAgentActingForPublisher: Optional[bool] = Field(
        None, description='Направление денежных средств в сторону заказчика', example=True
    )
    subjectType: Optional[SubjectType] = Field(
        None,
        description='Значение из справочника "Сведения о предмете договора"<p>Members:</p><ul><li><i>Distribution</i> - Договор на распространение рекламы</li><li><i>OrgDistribution</i> - Договор на организацию распространения рекламы</li><li><i>Representation</i> - Представительство</li><li><i>Mediation</i> - Посредничество</li><li><i>Other</i> - Иное</li></ul>',
    )
    actionType: Optional[ActionType8] = Field(
        None,
        description='Значение из справочника "Типы взаимодействия сторон посреднического договора"<p>Members:</p><ul><li><i>Contracting</i> - Заключение договоров</li><li><i>Distribution</i> - Действия в целях распространения рекламы</li><li><i>CommercialRepresentation</i> - Коммерческое представительство</li><li><i>Other</i> - Иное</li></ul>',
    )
    parentMainContractId: Optional[str] = Field(
        None, description='Id основного договора для доп.соглашения', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    id: str = Field(..., description='Id изначального договора в ОРД', example='CT0N4ufC76TEu1xBEIwJ3CaA')
    type: Type18 = Field(
        ...,
        description='Значение из справочника "Типы договоров"<p>Members:</p><ul><li><i>ServiceAgreement</i> - Договор оказания услуг</li><li><i>MediationContract</i> - Посреднический договор</li><li><i>AdditionalAgreement</i> - Дополнительное соглашение к основному договору</li><li><i>SelfPromotionContract</i> - Самореклама</li><li><i>EcidContract</i> - Договор, про который мы знаем только его ecid; не может быть родительским договором, дополнительным соглашением и т.д.; не регистрируется в ЕРИР</li></ul>',
    )
    status: Status10 = Field(
        ...,
        description='Статус изначального договора в ОРД<p>Members:</p><ul><li><i>Created</i> - Создан в БД (наша валидация пройдена). Пока не используется, сущность сразу переходит в статус [Ожидает регистрации].</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>Active</i> - Активный</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li><li><i>Testing</i> - Тестирование - для тестирования массовой загрузки креативов на продовом контуре</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР</li><li><i>Deleting</i> - Идет удаление, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    contractorId: str = Field(
        ..., description='Id контрагента-исполнителя по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    clientId: str = Field(
        ..., description='Id контрагента-заказчика по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    finalContractId: str = Field(..., description='Id или Cid доходного договора', example='CT0N4ufC76TEu1xBEIwJ3CaA')
    contractorInn: str = Field(..., description='ИНН исполнителя', example='7722643959')
    contractorName: str = Field(..., description='Наименование исполнителя', example='ООО «Ромашка»')
    clientInn: str = Field(..., description='ИНН заказчика', example='7722643959')
    clientName: str = Field(..., description='Наименование заказчика', example='ООО «Ромашка»')
    cid: Optional[str] = Field(
        None, description='Cid изначального договора', example='763acd99-687b-46cd-8f40-45eced77413c'
    )
    erirValidationError: Optional[ErirValidationError] = None


class InvoiceAmountV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    amountExcludingVat: float = Field(..., description='Сумма без НДС по акту в рублях')
    vatRate: float = Field(..., description='Ставка НДС')
    vat: float = Field(..., description='Сумма НДС')
    amountIncludingVat: float = Field(..., description='Сумма с НДС по акту в рублях')


class InvoiceCommissionV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    amountExcludingVat: float = Field(..., description='Сумма без НДС вознаграждения посредника в рубля')
    vatRate: float = Field(..., description='Ставка НДС')
    vat: float = Field(..., description='Сумма НДС')
    amountIncludingVat: float = Field(..., description='Сумма с НДС вознаграждения посредника в рубля')
    intermediaryReportNumber: Optional[str] = Field(
        None,
        description='Номер акта вознаграждения посредника\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
    )
    intermediaryReportDate: Optional[date] = Field(
        None,
        description='Дата акта вознаграждения посредника\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Обязательно к заполнению, если заполнено поле `IntermediaryReportNumber`</p>',
    )


class InvoiceInitialContractAmountV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    amountExcludingVat: float = Field(
        ..., description='Сумма без НДС по изначальному договору разаллокации акта в рублях'
    )
    vatRate: float = Field(..., description='Ставка НДС')
    vat: float = Field(..., description='Сумма НДС')
    amountIncludingVat: float = Field(
        ..., description='Сумма с НДС по изначальному договору разаллокации акта в рублях'
    )


class InvoiceInitialContractItem(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    initialContractId: str = Field(
        ..., description='Id или Cid изначального договора', example='CT7ae_PK9R0hCdAb-NfHH2fN'
    )
    amount: float = Field(
        ..., description='Стоимость услуг по изначальному договору в составе акта в руб.', example=1500
    )


class InvoiceInitialContractItemV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    initialContractId: str = Field(
        ..., description='Id или Cid изначального договора', example='CT7ae_PK9R0hCdAb-NfHH2fN'
    )
    amount: InvoiceInitialContractAmountV31


class Type20(Enum):
    Invoice = 'Invoice'
    IntermediaryReport = 'IntermediaryReport'
    Undefined = 'Undefined'


class Status12(Enum):
    Creating = 'Creating'
    Created = 'Created'
    RegistrationRequired = 'RegistrationRequired'
    Transferring = 'Transferring'
    Registering = 'Registering'
    Active = 'Active'
    RegistrationError = 'RegistrationError'
    DeletionPreparing = 'DeletionPreparing'
    DeletionRequired = 'DeletionRequired'
    DeletionTransferring = 'DeletionTransferring'
    Deleting = 'Deleting'
    DeletionError = 'DeletionError'
    Deleted = 'Deleted'


class InvoiceItemV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None, description='Номер акта. Допускается null, в таком случае считаем, что акт без номера', example='Тест'
    )
    date: date = Field(..., description='Дата акта', example='2022-12-31')
    contractorRole: ContractorRole3 = Field(
        ...,
        description='Роль исполнителя в акте<p>Members:</p><ul><li><i>Rr</i> - Рекламораспространитель</li><li><i>Ors</i> - Оператор рекламной системы</li><li><i>Rd</i> - Рекламодатель</li><li><i>Ra</i> - Рекламное агентство</li><li><i>Psr</i> - Посредник</li></ul>',
        example='Ra',
    )
    clientRole: ClientRole3 = Field(
        ...,
        description='Роль заказчика в акте<p>Members:</p><ul><li><i>Rr</i> - Рекламораспространитель</li><li><i>Ors</i> - Оператор рекламной системы</li><li><i>Rd</i> - Рекламодатель</li><li><i>Ra</i> - Рекламное агентство</li><li><i>Psr</i> - Посредник</li></ul>',
        example='Rd',
    )
    services: InvoiceAmountV31
    commission: Optional[InvoiceCommissionV31] = None
    startDate: date = Field(..., description='Дата начала оказания услуг по акту', example='2022-12-01')
    endDate: date = Field(..., description='Дата окончания оказания услуг по акту (включительно)', example='2022-12-31')
    finalContractId: str = Field(..., description='Id доходного договора в ОРД', example='CT3at_SU7y3ECdCb-AfHV3sA')
    id: str = Field(..., description='Идентификатор акта', example='INUFNs1ibfg0erF1PNpTOAyg')
    type: Type20 = Field(
        ...,
        description='Тип акта<p>Members:</p><ul><li><i>Invoice</i> - Акт выполненных работ, акт выставлен на договор оказания услуг</li><li><i>IntermediaryReport</i> - Отчет посредника, акт выставлен на посреднический договор</li><li><i>Undefined</i> - Не задано</li></ul>',
    )
    status: Status12 = Field(
        ...,
        description='Статус акта в ОРД<p>Members:</p><ul><li><i>Creating</i> - Идет загрузка в ОРД (технический статус)</li><li><i>Created</i> - Черновик (загрузка в ОРД завершена), нужно послать в ЕРИР</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Transferring</i> - Идет передача в ЕРИР, после чего передача шапки акта, разаллокации и статистики</li><li><i>Registering</i> - Идет регистрация, удаленные креативы и статистика переданы, также передана остальная информация по акту, быстрый контроль ЕРИР пройден, через сутки ждем уточненного ответа</li><li><i>Active</i> - Активный, зарегистрирован в ЕРИР</li><li><i>RegistrationError</i> - Ошибка регистрации в ЕРИР (любого этапа)</li><li><i>DeletionPreparing</i> - Переносятся все креативы и статистику из акта в deleted-сущности</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР (готов к удалению в ЕРИР)</li><li><i>DeletionTransferring</i> - Идет передача в ЕРИР удаленных креативов и строк, после чего передача шапки акта</li><li><i>Deleting</i> - Быстрый контроль всего ЕРИР пройден, через сутки ждем уточненного ответа, не осталось ли зависимых сущностей</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    erirValidationError: Optional[ErirValidationError] = None


class ContractorRole5(Enum):
    Rr = 'Rr'
    Ors = 'Ors'
    Rd = 'Rd'
    Ra = 'Ra'


class ClientRole5(Enum):
    Rr = 'Rr'
    Ors = 'Ors'
    Rd = 'Rd'
    Ra = 'Ra'


class InvoiceResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None, description='Номер акта. Допускается null, в таком случае считаем, что акт без номера', example='Тест'
    )
    date: date = Field(..., description='Дата акта', example='2022-12-31')
    contractorRole: ContractorRole5 = Field(
        ...,
        description='Роль исполнителя в акте<p>Members:</p><ul><li><i>Rr</i> - Рекламораспространитель</li><li><i>Ors</i> - Оператор рекламной системы</li><li><i>Rd</i> - Рекламодатель</li><li><i>Ra</i> - Рекламное агентство</li></ul>',
        example='Ra',
    )
    clientRole: ClientRole5 = Field(
        ...,
        description='Роль заказчика в акте<p>Members:</p><ul><li><i>Rr</i> - Рекламораспространитель</li><li><i>Ors</i> - Оператор рекламной системы</li><li><i>Rd</i> - Рекламодатель</li><li><i>Ra</i> - Рекламное агентство</li></ul>',
        example='Rd',
    )
    amount: float = Field(..., description='Общая стоимость по акту в руб.', example=100)
    startDate: date = Field(..., description='Дата начала оказания услуг по акту', example='2022-12-01')
    endDate: date = Field(..., description='Дата окончания оказания услуг по акту (включительно)', example='2022-12-31')
    finalContractId: str = Field(..., description='Id доходного договора в ОРД', example='CT3at_SU7y3ECdCb-AfHV3sA')
    id: str = Field(..., description='Идентификатор акта', example='INUFNs1ibfg0erF1PNpTOAyg')
    status: Status12 = Field(
        ...,
        description='Статус акта в ОРД<p>Members:</p><ul><li><i>Creating</i> - Идет загрузка в ОРД (технический статус)</li><li><i>Created</i> - Черновик (загрузка в ОРД завершена), нужно послать в ЕРИР</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Transferring</i> - Идет передача в ЕРИР, после чего передача шапки акта, разаллокации и статистики</li><li><i>Registering</i> - Идет регистрация, удаленные креативы и статистика переданы, также передана остальная информация по акту, быстрый контроль ЕРИР пройден, через сутки ждем уточненного ответа</li><li><i>Active</i> - Активный, зарегистрирован в ЕРИР</li><li><i>RegistrationError</i> - Ошибка регистрации в ЕРИР (любого этапа)</li><li><i>DeletionPreparing</i> - Переносятся все креативы и статистику из акта в deleted-сущности</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР (готов к удалению в ЕРИР)</li><li><i>DeletionTransferring</i> - Идет передача в ЕРИР удаленных креативов и строк, после чего передача шапки акта</li><li><i>Deleting</i> - Быстрый контроль всего ЕРИР пройден, через сутки ждем уточненного ответа, не осталось ли зависимых сущностей</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    erirValidationError: Optional[ErirValidationError] = None


class PlatformType(Enum):
    Site = 'Site'
    Application = 'Application'
    InformationSystem = 'InformationSystem'


class Type21(Enum):
    CPM = 'CPM'
    CPC = 'CPC'
    CPA = 'CPA'
    Other = 'Other'


class InvoiceStatisticsByPlatformsItem(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    erid: str = Field(..., description='Маркер креатива', example='Pb3MmBtzsrbL19RgOqsipS1ANueaCUzJSdpiY5g')
    platformUrl: Optional[str] = Field(None, description='URL площадки', example='https://example.ru')
    platformName: Optional[str] = Field(None, description='Наименование площадки', example='test')
    platformType: Optional[PlatformType] = Field(
        None,
        description='Значение из справочника "Типы площадок"<p>Members:</p><ul><li><i>Site</i> - Сайт</li><li><i>Application</i> - Приложение</li><li><i>InformationSystem</i> - Информационная система, не поддерживается начиная с ЕРИР v.5</li></ul>',
        example='Site',
    )
    platformOwnedByAgency: Optional[bool] = Field(None, description='Принадлежит ли площадка агентству', example=False)
    type: Optional[Type21] = Field(
        None,
        description='Тип рекламной кампании\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Обязательно к заполнению, если аналогичное поле `Type` не заполнено на уровне креатива</p><p>Members:</p><ul><li><i>CPM</i> - Cost Per Millennium, оплата за тысячу показов</li><li><i>CPC</i> - Cost Per Click, оплата за клик баннера</li><li><i>CPA</i> - Cost Per Action, оплата за совершенное целевое действие</li><li><i>Other</i> - Иное</li></ul>',
        example='CPM',
    )
    impsPlan: int = Field(..., description='Количество показов по акту', example=100)
    impsFact: int = Field(..., description='Количество показов фактическое', example=100)
    startDatePlan: date = Field(..., description='Дата начала показов по акту', example='2022-12-01')
    startDateFact: date = Field(..., description='Дата начала показов фактическая', example='2022-12-01')
    endDatePlan: date = Field(..., description='Дата окончания показов по акту', example='2022-12-31')
    endDateFact: date = Field(..., description='Дата окончания показов фактическая', example='2022-12-31')
    amount: float = Field(..., description='Стоимость услуг по показу креатива на данной площадке в руб.', example=100)
    price: float = Field(..., description='Стоимость единицы оказания услуг на данной площадке в руб.', example=10)
    initialContractId: str = Field(
        ..., description='Id или Cid изначального договора', example='CT7ae_PK9R0hCdAb-NfHH2fN'
    )


class PlatformType1(Enum):
    Site = 'Site'
    Application = 'Application'


class InvoiceSummaryResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Id акта в ОРД', example='INUFNs1ibfg0erF1PNpTOAyg')
    status: Status12 = Field(
        ...,
        description='Статус акта в ОРД<p>Members:</p><ul><li><i>Creating</i> - Идет загрузка в ОРД (технический статус)</li><li><i>Created</i> - Черновик (загрузка в ОРД завершена), нужно послать в ЕРИР</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Transferring</i> - Идет передача в ЕРИР, после чего передача шапки акта, разаллокации и статистики</li><li><i>Registering</i> - Идет регистрация, удаленные креативы и статистика переданы, также передана остальная информация по акту, быстрый контроль ЕРИР пройден, через сутки ждем уточненного ответа</li><li><i>Active</i> - Активный, зарегистрирован в ЕРИР</li><li><i>RegistrationError</i> - Ошибка регистрации в ЕРИР (любого этапа)</li><li><i>DeletionPreparing</i> - Переносятся все креативы и статистику из акта в deleted-сущности</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР (готов к удалению в ЕРИР)</li><li><i>DeletionTransferring</i> - Идет передача в ЕРИР удаленных креативов и строк, после чего передача шапки акта</li><li><i>Deleting</i> - Быстрый контроль всего ЕРИР пройден, через сутки ждем уточненного ответа, не осталось ли зависимых сущностей</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    amount: float = Field(..., description='Общая стоимость по акту в руб.', example=100)
    initialContractsCount: int = Field(..., description='Кол-во изначальных договоров в акте', example=12)
    initialContractsAmount: float = Field(
        ..., description='Сумма стоимостей услуг по всем изначальным договорам в составе акта в руб.', example=1000
    )
    creativesCount: int = Field(..., description='Кол-во креативов в акте', example=50)
    platformsCount: int = Field(..., description='Кол-во уникальных площадок в акте', example=500)
    impsFactCount: int = Field(..., description='Общее число фактических показов', example=1500)
    impsPlanCount: int = Field(..., description='Общее число показов по акту', example=1400)
    impsAmount: float = Field(..., description='Общая стоимость показов по акту', example=2000)


class Type23(Enum):
    Invoice = 'Invoice'
    IntermediaryReport = 'IntermediaryReport'
    Undefined = 'Undefined'


class InvoiceSummaryResponseV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Id акта в ОРД', example='INUFNs1ibfg0erF1PNpTOAyg')
    type: Type23 = Field(
        ...,
        description='Тип акта<p>Members:</p><ul><li><i>Invoice</i> - Акт выполненных работ, акт выставлен на договор оказания услуг</li><li><i>IntermediaryReport</i> - Отчет посредника, акт выставлен на посреднический договор</li><li><i>Undefined</i> - Не задано</li></ul>',
    )
    status: Status12 = Field(
        ...,
        description='Статус акта в ОРД<p>Members:</p><ul><li><i>Creating</i> - Идет загрузка в ОРД (технический статус)</li><li><i>Created</i> - Черновик (загрузка в ОРД завершена), нужно послать в ЕРИР</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Transferring</i> - Идет передача в ЕРИР, после чего передача шапки акта, разаллокации и статистики</li><li><i>Registering</i> - Идет регистрация, удаленные креативы и статистика переданы, также передана остальная информация по акту, быстрый контроль ЕРИР пройден, через сутки ждем уточненного ответа</li><li><i>Active</i> - Активный, зарегистрирован в ЕРИР</li><li><i>RegistrationError</i> - Ошибка регистрации в ЕРИР (любого этапа)</li><li><i>DeletionPreparing</i> - Переносятся все креативы и статистику из акта в deleted-сущности</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР (готов к удалению в ЕРИР)</li><li><i>DeletionTransferring</i> - Идет передача в ЕРИР удаленных креативов и строк, после чего передача шапки акта</li><li><i>Deleting</i> - Быстрый контроль всего ЕРИР пройден, через сутки ждем уточненного ответа, не осталось ли зависимых сущностей</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    services: InvoiceAmountV31
    commission: Optional[InvoiceCommissionV31] = None
    initialContractsCount: int = Field(..., description='Кол-во изначальных договоров в акте', example=12)
    initialContractsAmount: float = Field(
        ..., description='Сумма стоимостей услуг по всем изначальным договорам в составе акта в руб.', example=1000
    )
    creativesCount: int = Field(..., description='Кол-во креативов в акте', example=50)
    platformsCount: int = Field(..., description='Кол-во уникальных площадок в акте', example=500)
    impsFactCount: int = Field(..., description='Общее число фактических показов', example=1500)
    impsPlanCount: int = Field(..., description='Общее число показов по акту', example=1400)
    impsAmountIncludingVat: float = Field(..., description='Общая стоимость показов по акту с НДС', example=2000)


class PlatformType2(Enum):
    Site = 'Site'
    Application = 'Application'
    InformationSystem = 'InformationSystem'


class Type24(Enum):
    CPM = 'CPM'
    CPC = 'CPC'
    CPA = 'CPA'
    Other = 'Other'


class InvoicelessStatisticsByPlatforms(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    erid: str = Field(..., description='Маркер креатива', example='Pb3MmBtzsrbL19RgOqsipS1ANueaCUzJSdpiY5g')
    platformUrl: Optional[str] = Field(None, description='URL площадки', example='https://example.ru')
    platformName: Optional[str] = Field(None, description='Наименование площадки', example='test')
    platformType: Optional[PlatformType2] = Field(
        None,
        description='Значение из справочника "Типы площадок"<p>Members:</p><ul><li><i>Site</i> - Сайт</li><li><i>Application</i> - Приложение</li><li><i>InformationSystem</i> - Информационная система, не поддерживается начиная с ЕРИР v.5</li></ul>',
        example='Site',
    )
    platformOwnedByAgency: Optional[bool] = Field(None, description='Принадлежит ли площадка агентству', example=False)
    type: Optional[Type24] = Field(
        None,
        description='Тип рекламной кампании\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Обязательно к заполнению, если аналогичное поле `Type` не заполнено на уровне креатива</p><p>Members:</p><ul><li><i>CPM</i> - Cost Per Millennium, оплата за тысячу показов</li><li><i>CPC</i> - Cost Per Click, оплата за клик баннера</li><li><i>CPA</i> - Cost Per Action, оплата за совершенное целевое действие</li><li><i>Other</i> - Иное</li></ul>',
        example='CPM',
    )
    impsPlan: int = Field(..., description='Количество показов по акту', example=100)
    impsFact: int = Field(..., description='Количество показов фактическое', example=100)
    startDatePlan: date = Field(..., description='Дата начала показов по акту', example='2022-12-01')
    startDateFact: date = Field(..., description='Дата начала показов фактическая', example='2022-12-01')
    endDatePlan: date = Field(..., description='Дата окончания показов по акту', example='2022-12-31')
    endDateFact: date = Field(..., description='Дата окончания показов фактическая', example='2022-12-31')
    amount: float = Field(..., description='Стоимость услуг по показу креатива на данной площадке в руб.', example=100)
    price: float = Field(..., description='Стоимость единицы оказания услуг на данной площадке в руб.', example=10)


class PlatformType3(Enum):
    Site = 'Site'
    Application = 'Application'


class Status16(Enum):
    Creating = 'Creating'
    RegistrationRequired = 'RegistrationRequired'
    Registering = 'Registering'
    Active = 'Active'
    RegistrationError = 'RegistrationError'


class InvoicelessStatisticsItemV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Id акта в ОРД')
    status: Status16 = Field(
        ...,
        description='Статус периода в ОРД<p>Members:</p><ul><li><i>Creating</i> - Идет загрузка в ОРД (технический статус)</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа, включая ответ по креативам и статистике</li><li><i>Active</i> - Активный, зарегистрирован в ЕРИР</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li></ul>',
    )
    erirValidationError: Optional[ErirValidationError] = None
    year: int = Field(..., description='Год периода')
    month: int = Field(..., description='Месяц периода')
    amountIncludingVat: float = Field(..., description='Сумма с НДС услуг по показам креатива')
    creativesCount: int = Field(..., description='Кол-во креативов в акте')
    platformsCount: int = Field(..., description='Кол-во уникальных площадок в акте')
    impsFactCount: int = Field(..., description='Общее число фактических показов')
    impsPlanCount: int = Field(..., description='Общее число показов по акту')


class InvoicelessStatisticsResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Id акта в ОРД')
    status: Status16 = Field(
        ...,
        description='Статус периода в ОРД<p>Members:</p><ul><li><i>Creating</i> - Идет загрузка в ОРД (технический статус)</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа, включая ответ по креативам и статистике</li><li><i>Active</i> - Активный, зарегистрирован в ЕРИР</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li></ul>',
    )
    erirValidationError: Optional[ErirValidationError] = None
    year: int = Field(..., description='Год периода')
    month: int = Field(..., description='Месяц периода')
    amount: float = Field(..., description='Общая стоимость по акту в руб.')
    creativesCount: int = Field(..., description='Кол-во креативов в акте')
    platformsCount: int = Field(..., description='Кол-во уникальных площадок в акте')
    impsFactCount: int = Field(..., description='Общее число фактических показов')
    impsPlanCount: int = Field(..., description='Общее число показов по акту')


class KktuResponseItem(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    code: str = Field(..., description='Код', example='4.1.1')
    parentCode: Optional[str] = Field(None, description='Код родительского элемента', example='4.1')
    level: int = Field(..., description='Уровень', example=3)
    name: str = Field(..., description='Наименование', example='Средства для мытья посуды')


class Type26(Enum):
    ServiceAgreement = 'ServiceAgreement'
    MediationContract = 'MediationContract'
    AdditionalAgreement = 'AdditionalAgreement'
    SelfPromotionContract = 'SelfPromotionContract'
    EcidContract = 'EcidContract'


class Status18(Enum):
    Created = 'Created'
    RegistrationRequired = 'RegistrationRequired'
    Registering = 'Registering'
    Active = 'Active'
    RegistrationError = 'RegistrationError'
    Testing = 'Testing'
    DeletionRequired = 'DeletionRequired'
    Deleting = 'Deleting'
    DeletionError = 'DeletionError'
    Deleted = 'Deleted'


class OuterContractResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None,
        description='Номер договора, без начального символа № и т.п. Допускается null, в таком случае считаем, что договор без номера',
        example='Тест',
    )
    date: date = Field(..., description='Дата заключения договора', example='2023-04-01')
    expirationDate: Optional[date] = Field(
        None, description='Дата окончания срока действия договора', example='2023-05-01'
    )
    amount: Optional[float] = Field(None, description='Стоимость услуг по договору в руб.', example=100)
    isAgentActingForPublisher: Optional[bool] = Field(
        None, description='Направление денежных средств в сторону заказчика', example=True
    )
    subjectType: Optional[SubjectType] = Field(
        None,
        description='Значение из справочника "Сведения о предмете договора"<p>Members:</p><ul><li><i>Distribution</i> - Договор на распространение рекламы</li><li><i>OrgDistribution</i> - Договор на организацию распространения рекламы</li><li><i>Representation</i> - Представительство</li><li><i>Mediation</i> - Посредничество</li><li><i>Other</i> - Иное</li></ul>',
    )
    actionType: Optional[ActionType8] = Field(
        None,
        description='Значение из справочника "Типы взаимодействия сторон посреднического договора"<p>Members:</p><ul><li><i>Contracting</i> - Заключение договоров</li><li><i>Distribution</i> - Действия в целях распространения рекламы</li><li><i>CommercialRepresentation</i> - Коммерческое представительство</li><li><i>Other</i> - Иное</li></ul>',
    )
    parentMainContractId: Optional[str] = Field(
        None, description='Id основного договора для доп.соглашения', example='CT0N4ufC76TEu1xBEIwJ3CaA'
    )
    id: str = Field(..., description='Id договора в ОРД', example='CT0N4ufC76TEu1xBEIwJ3CaA')
    type: Type26 = Field(
        ...,
        description='Значение из справочника "Типы договоров"<p>Members:</p><ul><li><i>ServiceAgreement</i> - Договор оказания услуг</li><li><i>MediationContract</i> - Посреднический договор</li><li><i>AdditionalAgreement</i> - Дополнительное соглашение к основному договору</li><li><i>SelfPromotionContract</i> - Самореклама</li><li><i>EcidContract</i> - Договор, про который мы знаем только его ecid; не может быть родительским договором, дополнительным соглашением и т.д.; не регистрируется в ЕРИР</li></ul>',
    )
    status: Status18 = Field(
        ...,
        description='Статус договора в ОРД<p>Members:</p><ul><li><i>Created</i> - Создан в БД (наша валидация пройдена). Пока не используется, сущность сразу переходит в статус [Ожидает регистрации].</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>Active</i> - Активный</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li><li><i>Testing</i> - Тестирование - для тестирования массовой загрузки креативов на продовом контуре</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР</li><li><i>Deleting</i> - Идет удаление, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    contractorId: str = Field(
        ..., description='Id контрагента-исполнителя по изначальному договору', example='CLhOO5UT6sIk-fIRu-QEsEuQ'
    )
    partnerId: Optional[str] = Field(None, description='Id партнера', example='CLhOO5UT6sIk-fIRu-QEsEuQ')
    isRegReport: bool = Field(
        ...,
        description='Признак того, что исполнитель по договору (Агентство, к которому относится договор) должен регистрировать креативы и предоставлять разаллокацию по ним в актах',
    )
    cid: Optional[str] = Field(
        None, description='Cid расходного договора', example='763acd99-687b-46cd-8f40-45eced77413c'
    )
    erirValidationError: Optional[ErirValidationError] = None


class PartialClearInvoiceInitialContractsRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    initialContracts: List[str] = Field(
        ...,
        description='Список Id или Cid изначальных договоров.',
        example=['CTRl8rP7sBCU6KfyeCWdYBcw', 'CTZOB4HKDab0yLLDvJ45OKUg'],
    )


class Type27(Enum):
    CPM = 'CPM'
    CPC = 'CPC'
    CPA = 'CPA'
    Other = 'Other'


class PartialClearInvoiceStatisticsItem(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    erid: str = Field(..., description='Маркер креатива', example='2SDnjegvUsB')
    platformUrl: str = Field(..., description='URL площадки', example='https://example.com')
    type: Optional[Type27] = Field(
        None,
        description='Тип рекламной кампании\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Обязательно к заполнению, если аналогичное поле `Type` не заполнено на уровне креатива</p><p>Members:</p><ul><li><i>CPM</i> - Cost Per Millennium, оплата за тысячу показов</li><li><i>CPC</i> - Cost Per Click, оплата за клик баннера</li><li><i>CPA</i> - Cost Per Action, оплата за совершенное целевое действие</li><li><i>Other</i> - Иное</li></ul>',
        example='CPM',
    )
    startDatePlan: date = Field(..., description='Дата начала показов по акту', example='2024-05-22')
    startDateFact: date = Field(..., description='Дата начала показов фактическая', example='2024-05-22')
    endDatePlan: date = Field(..., description='Дата окончания показов по акту', example='2024-05-22')
    endDateFact: date = Field(..., description='Дата окончания показов фактическая', example='2024-05-22')
    initialContractId: str = Field(
        ..., description='Id или Cid изначального договора', example='CTRl8rP7sBCU6KfyeCWdYBcw'
    )


class PartialClearInvoiceStatisticsRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    statistics: List[PartialClearInvoiceStatisticsItem] = Field(..., description='Строки статистики для удаления')


class PartialClearInvoicelessStatisticsItem(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    erid: str = Field(..., description='Маркер креатива', example='2SDnjegvUsB')
    platformUrl: str = Field(..., description='URL площадки', example='https://example.com')
    type: Optional[Type27] = Field(
        None,
        description='Тип рекламной кампании\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Обязательно к заполнению, если аналогичное поле `Type` не заполнено на уровне креатива</p><p>Members:</p><ul><li><i>CPM</i> - Cost Per Millennium, оплата за тысячу показов</li><li><i>CPC</i> - Cost Per Click, оплата за клик баннера</li><li><i>CPA</i> - Cost Per Action, оплата за совершенное целевое действие</li><li><i>Other</i> - Иное</li></ul>',
        example='CPM',
    )
    startDatePlan: date = Field(..., description='Дата начала показов по акту', example='2024-05-22')
    startDateFact: date = Field(..., description='Дата начала показов фактическая', example='2024-05-22')
    endDatePlan: date = Field(..., description='Дата окончания показов по акту', example='2024-05-22')
    endDateFact: date = Field(..., description='Дата окончания показов фактическая', example='2024-05-22')


class PartialClearInvoicelessStatisticsRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    statistics: Optional[List[PartialClearInvoicelessStatisticsItem]] = Field(None, description='Строки статистики')


class Type29(Enum):
    Site = 'Site'
    Application = 'Application'


class PlatformResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    name: str = Field(..., description='Наименование площадки', example='Тестовая площадка')
    type: Type29 = Field(
        ...,
        description='Тип площадки<p>Members:</p><ul><li><i>Site</i> - Сайт</li><li><i>Application</i> - Приложение</li></ul>',
    )
    url: Optional[str] = Field(None, description='Url площадки', example='https://example.com')
    isOwner: bool = Field(..., description='Признак принадлежности агентству')
    id: str = Field(..., description='Идентификатор площадки', example='PLCqwqXBhLMk6eTsIQoUT48A')


class PlatformStatisticsAmountV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    amountExcludingVat: float = Field(..., description='Сумма без НДС по строке статистики в рублях')
    vatRate: float = Field(..., description='Ставка НДС')
    vat: float = Field(..., description='Сумма НДС')
    amountIncludingVat: float = Field(..., description='Сумма с НДС по строке статистики в рублях')


class ProblemDetails(BaseModel):
    type: Optional[str] = Field(
        None,
        description='Ссылка URI [RFC3986], идентифицирующая\r\n                тип ошибки. Данная спецификация рекомендует, чтобы при\r\n                ссылке на него предоставлялась документация по\r\n                типу ошибки. Когда\r\n                этот элемент отсутствует, его значение предполагается равным\r\n                «about:blank».',
    )
    title: Optional[str] = Field(
        None,
        description='Краткое описание типа ошибки. Оно НЕ ДОЛЖНО меняться от случая к случаю\r\n                ошибки, за исключением целей локализации (например, при использовании\r\n                проактивного согласования содержимого',
    )
    status: Optional[int] = Field(
        None, description='Код состояния HTTP сгенерированный сервером для данного случая возникновения ошибки.'
    )
    detail: Optional[str] = Field(None, description='Детальное описание ошибки')
    instance: Optional[str] = Field(
        None, description='Ссылка URI, идентифицирующая конкретное\r\nвозникновение ошибки.'
    )


class RegionResponseItem(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Код', example='16')
    federalDistrictShortName: str = Field(
        ..., description='Сокращенное наименование федерального округа', example='ПФО'
    )
    federalDistrictFullName: str = Field(
        ..., description='Полное наименование федерального округа', example='Приволжский федеральный округ'
    )
    name: str = Field(..., description='Наименование', example='Республика Татарстан')


class Type30(Enum):
    CPM = 'CPM'
    CPC = 'CPC'
    CPA = 'CPA'
    Other = 'Other'


class Form7(Enum):
    Banner = 'Banner'
    Text = 'Text'
    TextGraphic = 'TextGraphic'
    Video = 'Video'
    Audio = 'Audio'
    AudioBroadcast = 'AudioBroadcast'
    VideoBroadcast = 'VideoBroadcast'
    TextVideoBlock = 'TextVideoBlock'
    TextAudioBlock = 'TextAudioBlock'
    TextAudioVideoBlock = 'TextAudioVideoBlock'
    TextGraphicVideoBlock = 'TextGraphicVideoBlock'
    TextGraphicAudioBlock = 'TextGraphicAudioBlock'
    TextGraphicAudioVideoBlock = 'TextGraphicAudioVideoBlock'
    BannerHtml5 = 'BannerHtml5'


class SupplementInvoiceRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    initialContractsData: Optional[List[InvoiceInitialContractItem]] = Field(
        None, description='Данные по изначальным договорам для добавления к акту (массив)'
    )
    statisticsByPlatforms: Optional[List[InvoiceStatisticsByPlatformsItem]] = Field(
        None, description='Статистика по площадкам для добавления к акту (массив)'
    )


class Type31(Enum):
    Geo = 'Geo'
    Sex = 'Sex'
    Age = 'Age'


class TargetAudienceParam(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    type: Type31 = Field(
        ...,
        description='Тип параметра: регион, пол, возраст<p>Members:</p><ul><li><i>Geo</i> - Код региона</li><li><i>Sex</i> - Пол</li><li><i>Age</i> - Возраст</li></ul>',
    )
    values: List[str] = Field(
        ...,
        description='Коллекция значений\n<ul><li>Для типа "geo":\r\n<ul><li>Максимальная длина: 2</li><li>Длина строки 2, может содержать цифры 0-9</li><li>В элементах массива передаются коды регионов. Если массив пустой, то геотаргетинг направлен на всю Россию</li></ul></li><li>Для типа "sex":\n<ul><li>male - мужчины</li><li>female - женщины</li></ul>\r\nЕсли таргетинг на аудиторию не зависящую от пола, то параметр не передается.\r\n</li><li>Для типа "age":\n<ul><li>"<минимальный возраст>:<максимальный возраст>".</li><li>Например, "25:45" - означает, что реклама таргетируется на аудиторию от 25 до 45 лет.</li></ul>\r\nЕсли таргетинг на любой возраст, то параметр не передается\r\n</li></ul>',
    )


class Severity(Enum):
    Error = 'Error'
    Warning = 'Warning'
    Info = 'Info'


class ValidationFailure(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    propertyName: Optional[str] = None
    errorMessage: Optional[str] = None
    attemptedValue: Optional[Any] = None
    customState: Optional[Any] = None
    severity: Severity
    errorCode: Optional[str] = None
    formattedMessagePlaceholderValues: Optional[Dict[str, Any]] = None


class AdvertisingContainerResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    feedId: Optional[str] = Field(None, description='Id фида')
    feedNativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id фида')
    finalContractId: str = Field(..., description='Id доходного договора')
    initialContractId: Optional[str] = Field(
        None,
        description='Id или Cid изначального договора. В случае, если контейнер добавляется только к доходному договору, должно быть NULL.',
    )
    cobrandingContractIds: Optional[List[str]] = Field(
        None,
        description='Id или Cid совместных договоров\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно, если `IsCobranding`=`true`</p>',
    )
    name: str = Field(..., description='Наименование контейнера')
    nativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id контейнера')
    type: Optional[Type] = Field(
        None,
        description='Тип рекламной кампании\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Обязательно, если не будет заполняться аналогичное поле `Type` при регистрации статистики показов контейнера</p><p>Members:</p><ul><li><i>CPM</i> - Cost Per Millennium, оплата за тысячу показов</li><li><i>CPC</i> - Cost Per Click, оплата за клик баннера</li><li><i>CPA</i> - Cost Per Action, оплата за совершенное целевое действие</li><li><i>Other</i> - Иное</li></ul>',
    )
    form: Form = Field(
        ...,
        description='Форма распространения рекламы<p>Members:</p><ul><li><i>Banner</i> - Баннер</li><li><i>Text</i> - Текстовый блок</li><li><i>TextGraphic</i> - Текстово-графический блок</li><li><i>Video</i> - Видеоролик</li><li><i>Audio</i> - Аудиозапись</li><li><i>AudioBroadcast</i> - Аудиотрансляции в прямом эфире</li><li><i>VideoBroadcast</i> - Видеотрансляции в прямом эфире</li><li><i>TextVideoBlock</i> - Текстовый блок с видео</li><li><i>TextAudioBlock</i> - Текстовый блок с аудио</li><li><i>TextAudioVideoBlock</i> - Текстовый блок с аудио и видео</li><li><i>TextGraphicVideoBlock</i> - Текстово-графический блок с видео</li><li><i>TextGraphicAudioBlock</i> - Текстово-графический блок с аудио</li><li><i>TextGraphicAudioVideoBlock</i> - Текстово-графический блок с аудио и видео</li><li><i>BannerHtml5</i> - HTML5-баннер</li></ul>',
    )
    targetAudienceParams: Optional[List[TargetAudienceParam]] = Field(
        None, description='Параметры целевой аудитории рекламы'
    )
    description: Optional[str] = Field(
        None,
        description='Общее описание объекта рекламирования\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно для кода ККТУ `30.15.1`</p>',
    )
    isNative: bool = Field(
        ...,
        description='Признак нативной рекламы (Данное поле будет игнорироваться с 01.04.2025 и будет удалено 01.07.2025)',
    )
    isSocialQuota: bool = Field(
        ...,
        description='Признак социальной рекламы по квоте\r\n           <p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isSocial: bool = Field(..., description='Признак социальной рекламы')
    isCobranding: bool = Field(
        ...,
        description='Признак совместной рекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    kktuCodes: List[str] = Field(
        ...,
        description='Список кодов ККТУ. Возможные значения кодов ККТУ можно получить через метод `/webapi/v3/dictionaries/kktu`.\r\nДопускаются только коды 3 уровня - "X.X.X"\r\n<p style="color: blue">Поле обязательно для заполнения</p>',
        example=['30.1.2', '12.2.3'],
    )
    id: str = Field(..., description='Id контейнера')
    erid: str = Field(..., description='Erid контейнера')
    status: Status = Field(
        ...,
        description='Статус контейнера<p>Members:</p><ul><li><i>Creating</i> - Идет загрузка в ОРД (элемент фида создан, но медиа-данные еще не загружены)</li><li><i>MediaDownloadError</i> - Не удалось скачать медифайл для элемента фида (пока используется только для элементов фидов)</li><li><i>Created</i> - Создан в БД (наша валидация пройдена). Пока не используется, сущность сразу переходит в статус [Ожидает регистрации].</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>Active</i> - Активный</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР</li><li><i>Deleting</i> - Идет удаление, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    feedName: Optional[str] = Field(None, description='Наименование фида')
    erirValidationError: Optional[ErirValidationError] = None


class BadRequestResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    errorType: str = Field(..., description='Тип ошибки', example='Unauthorized')
    traceId: Optional[str] = Field(
        None,
        description='Идентификатор запроса. Значение атрибута TraceId необходимо использовать при взаимодействии с техподдержкой ОРД Медиаскаут. Данное поле содержит в себе идентификатор логов текущего процесса',
        example='00-982607166a542147b435be3a847ddd71-fc75498eb9f09d48-00',
    )
    errorItems: List[ValidationFailure] = Field(..., description='Список ошибок', example=['Unauthorized'])


class ClientResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    createMode: Optional[CreateMode] = Field(
        None,
        description='Тип отношения заказчика к агентству<p>Members:</p><ul><li><i>DirectClient</i> - Прямой клиент для заданного агентства (т.е. может быть заказчиком по конечным договорам с этим агентством)</li><li><i>InitialContractClient</i> - Клиент, создаваемый в качестве заказчика или исполнителя у создаваемого изначального договора</li></ul>',
    )
    legalForm: LegalForm = Field(
        ...,
        description='Юридическая форма заказчика<p>Members:</p><ul><li><i>JuridicalPerson</i> - Юрлицо РФ</li><li><i>IndividualEntrepreneur</i> - Индивидуальный предприниматель РФ</li><li><i>PhysicalPerson</i> - Физлицо РФ или самозанятый</li><li><i>InternationalJuridicalPerson</i> - Иностранное юрлицо</li><li><i>InternationalPhysicalPerson</i> - Иностранное физлицо</li></ul>',
    )
    inn: str = Field(
        ...,
        description='Для РФ-контрагентов - ИНН. Для иностранных физ.и юр.лиц - номер налогоплательщика либо его аналог в стране регистрации',
        example='1234567890',
    )
    name: str = Field(..., description='Наименование контрагента', example='Наименование контрагента')
    mobilePhone: Optional[str] = Field(None, description='Номер мобильного телефона', example='79999999999')
    epayNumber: Optional[str] = Field(None, description='Номер электронного средства платежа')
    regNumber: Optional[str] = Field(None, description='Регистрационный номер либо его аналог')
    oksmNumber: Optional[str] = Field(None, description='Код страны регистрации юр. лица в соответствии с ОКСМ')
    id: str = Field(..., description='Id контрагента в ОРД', example='CLfFpx6Ee4qkawO6JwEDJqFQ')
    status: Status2 = Field(
        ...,
        description='Статус контрагента в ОРД<p>Members:</p><ul><li><i>Created</i> - Создан в БД (наша валидация пройдена). Пока не используется, сущность сразу переходит в статус [Ожидает регистрации].</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>Active</i> - Активный (оба этапа ЕРИР-регистрации завершены успешно)</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li><li><i>Blocked</i> - Заблокирован (применимо только к TopLevelAgency)</li></ul>',
    )
    erirValidationError: Optional[ErirValidationError] = None


class CreateAdvertisingContainerRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    feedId: Optional[str] = Field(None, description='Id фида')
    feedNativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id фида')
    finalContractId: str = Field(..., description='Id доходного договора')
    initialContractId: Optional[str] = Field(
        None,
        description='Id или Cid изначального договора. В случае, если контейнер добавляется только к доходному договору, должно быть NULL.',
    )
    cobrandingContractIds: Optional[List[str]] = Field(
        None,
        description='Id или Cid совместных договоров\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно, если `IsCobranding`=`true`</p>',
    )
    name: str = Field(..., description='Наименование контейнера')
    nativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id контейнера')
    type: Optional[Type] = Field(
        None,
        description='Тип рекламной кампании\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Обязательно, если не будет заполняться аналогичное поле `Type` при регистрации статистики показов контейнера</p><p>Members:</p><ul><li><i>CPM</i> - Cost Per Millennium, оплата за тысячу показов</li><li><i>CPC</i> - Cost Per Click, оплата за клик баннера</li><li><i>CPA</i> - Cost Per Action, оплата за совершенное целевое действие</li><li><i>Other</i> - Иное</li></ul>',
    )
    form: Form = Field(
        ...,
        description='Форма распространения рекламы<p>Members:</p><ul><li><i>Banner</i> - Баннер</li><li><i>Text</i> - Текстовый блок</li><li><i>TextGraphic</i> - Текстово-графический блок</li><li><i>Video</i> - Видеоролик</li><li><i>Audio</i> - Аудиозапись</li><li><i>AudioBroadcast</i> - Аудиотрансляции в прямом эфире</li><li><i>VideoBroadcast</i> - Видеотрансляции в прямом эфире</li><li><i>TextVideoBlock</i> - Текстовый блок с видео</li><li><i>TextAudioBlock</i> - Текстовый блок с аудио</li><li><i>TextAudioVideoBlock</i> - Текстовый блок с аудио и видео</li><li><i>TextGraphicVideoBlock</i> - Текстово-графический блок с видео</li><li><i>TextGraphicAudioBlock</i> - Текстово-графический блок с аудио</li><li><i>TextGraphicAudioVideoBlock</i> - Текстово-графический блок с аудио и видео</li><li><i>BannerHtml5</i> - HTML5-баннер</li></ul>',
    )
    targetAudienceParams: Optional[List[TargetAudienceParam]] = Field(
        None, description='Параметры целевой аудитории рекламы'
    )
    description: Optional[str] = Field(
        None,
        description='Общее описание объекта рекламирования\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно для кода ККТУ `30.15.1`</p>',
    )
    isNative: bool = Field(
        ...,
        description='Признак нативной рекламы (Данное поле будет игнорироваться с 01.04.2025 и будет удалено 01.07.2025)',
    )
    isSocialQuota: bool = Field(
        ...,
        description='Признак социальной рекламы по квоте\r\n           <p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isSocial: bool = Field(..., description='Признак социальной рекламы')
    isCobranding: bool = Field(
        ...,
        description='Признак совместной рекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    kktuCodes: List[str] = Field(
        ...,
        description='Список кодов ККТУ. Возможные значения кодов ККТУ можно получить через метод `/webapi/v3/dictionaries/kktu`.\r\nДопускаются только коды 3 уровня - "X.X.X"\r\n<p style="color: blue">Поле обязательно для заполнения</p>',
        example=['30.1.2', '12.2.3'],
    )


class CreateCreativeRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    nativeCustomerId: Optional[str] = Field(
        None,
        description='Id креатива в системе клиента\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
    )
    creativeGroupId: Optional[str] = Field(
        None,
        description='Id группы креативов\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example='CG3oAF-jsLEkGx83pCs9-FPQ',
    )
    creativeGroupName: Optional[str] = Field(
        None,
        description='Имя группы креативов\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно при создании новой группы креативов</p>',
        example='ТестоваяГруппа',
    )
    creativeGroupStartDate: Optional[date] = Field(
        None,
        description='Дата начала рекламной кампании\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example='2023-01-01',
    )
    creativeGroupEndDate: Optional[date] = Field(
        None,
        description='Дата окончания рекламной кампании\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example='2023-30-01',
    )
    finalContractId: Optional[str] = Field(
        None,
        description='Id доходного договора в ОРД\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Для креатива саморекламы не должно заполняться</p>',
        example='CT6WFbMXPGcE2lx5Ffm-npAg',
    )
    initialContractId: Optional[str] = Field(
        None,
        description='Id или Cid изначального договора. Если креатив создается на доходный договор, то нужно указать InitialContractId = FinalContractId\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Для креатива саморекламы не должно заполняться</p>',
        example='AAADgMygKIOkyGuPfl83W1ow',
    )
    cobrandingContractIds: Optional[List[str]] = Field(
        None,
        description='Id или Cid совместных договоров\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно, если `IsCobranding`=`true`</p>',
    )
    isSelfPromotion: bool = Field(
        ...,
        description='Является креативом саморекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    type: Optional[Type] = Field(
        None,
        description='Тип рекламной кампании\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Обязательно, если не будет заполняться аналогичное поле `Type` при регистрации статистики показов креатива</p><p>Members:</p><ul><li><i>CPM</i> - Cost Per Millennium, оплата за тысячу показов</li><li><i>CPC</i> - Cost Per Click, оплата за клик баннера</li><li><i>CPA</i> - Cost Per Action, оплата за совершенное целевое действие</li><li><i>Other</i> - Иное</li></ul>',
    )
    form: Form = Field(
        ...,
        description='Форма распространения рекламы\r\n<p style="color: blue">Поле обязательно для заполнения</p><p>Members:</p><ul><li><i>Banner</i> - Баннер</li><li><i>Text</i> - Текстовый блок</li><li><i>TextGraphic</i> - Текстово-графический блок</li><li><i>Video</i> - Видеоролик</li><li><i>Audio</i> - Аудиозапись</li><li><i>AudioBroadcast</i> - Аудиотрансляции в прямом эфире</li><li><i>VideoBroadcast</i> - Видеотрансляции в прямом эфире</li><li><i>TextVideoBlock</i> - Текстовый блок с видео</li><li><i>TextAudioBlock</i> - Текстовый блок с аудио</li><li><i>TextAudioVideoBlock</i> - Текстовый блок с аудио и видео</li><li><i>TextGraphicVideoBlock</i> - Текстово-графический блок с видео</li><li><i>TextGraphicAudioBlock</i> - Текстово-графический блок с аудио</li><li><i>TextGraphicAudioVideoBlock</i> - Текстово-графический блок с аудио и видео</li><li><i>BannerHtml5</i> - HTML5-баннер</li></ul>',
    )
    advertiserUrl: Optional[str] = Field(
        None,
        description='Целевая ссылка (сайт рекламодателя, на который осуществляется переход с креатива). Поле не используется с 15.10.2024, заменено на массив `advertiserUrls`. Будет удалено 01.07.2025',
    )
    advertiserUrls: Optional[List[str]] = Field(
        None,
        description='Целевые ссылки (массив)\n\r\nПроверка URL:\r\n<ul><li>Проверить протокол http, https</li></ul><p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example=['http://test.ru'],
    )
    description: Optional[str] = Field(
        None,
        description='Общее описание объекта рекламирования\r\n<ul><li>Минимальная длина: 1</li><li>Максимальная длина: 1000</li><li>Длина строки от 1 до 1000, может содержать цифры и буквы, а также все спец символы</li><li>В начале и в конце не должно быть пробела и переноса на другую строку</li></ul><p style="color: blue">Поле условно-обязательно для заполнения. Обязательно для кода ККТУ `30.15.1`</p>',
        example='Описание креатива 4H67RLFG',
    )
    targetAudienceParams: Optional[List[TargetAudienceParam]] = Field(
        None,
        description='Параметры целевой аудитории рекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
    )
    isNative: bool = Field(
        ...,
        description='Признак нативной рекламы (Данное поле будет игнорироваться с 01.04.2025 и будет удалено 01.07.2025)\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isSocialQuota: bool = Field(
        ...,
        description='Признак социальной рекламы по квоте\r\n           <p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isSocial: bool = Field(
        ...,
        description='Признак социальной рекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isCobranding: bool = Field(
        ...,
        description='Признак совместной рекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    kktuCodes: List[str] = Field(
        ...,
        description='Список кодов ККТУ. Возможные значения кодов ККТУ можно получить через метод `/webapi/v3/dictionaries/kktu`.\r\nДопускаются только коды 3 уровня - "X.X.X".\r\nВ настоящий момент список не может содержать более одного значения. Указание нескольких значений станет доступно после введения функционала кобрендинга\r\n<p style="color: blue">Поле обязательно для заполнения</p>',
        example=['30.1.2'],
    )
    mediaData: Optional[List[CreateCreativeMediaDataItem]] = Field(
        None,
        description='Медиаданные креатива (массив)\n\r\nДолжен быть добавлен хотя бы один элемент при значениях поля form:\r\n<ul><li>TextGraphic</li><li>TextVideoBlock</li><li>TextAudioBlock</li><li>TextAudioVideoBlock</li><li>TextGraphicVideoBlock</li><li>TextGraphicAudioBlock</li><li>TextGraphicAudioVideoBlock</li><li>Banner</li><li>BannerHtml5</li><li>Video</li><li>Audio</li><li>AudioBroadcast</li><li>VideoBroadcast</li></ul><p style="color: blue">Поле условно-обязательно для заполнения</p>',
    )
    textData: Optional[List[CreateCreativeTextDataItem]] = Field(
        None,
        description='Текстовые медиаданные креатива (массив)\n\r\nДолжен быть добавлен хотя бы один элемент при значениях поля form:\r\n<ul><li>Text</li><li>TextGraphic</li><li>TextVideoBlock</li><li>TextAudioBlock</li><li>TextAudioVideoBlock</li><li>TextGraphicVideoBlock</li><li>TextGraphicAudioBlock</li><li>TextGraphicAudioVideoBlock</li></ul><p style="color: blue">Поле условно-обязательно для заполнения</p>',
    )


class CreateInvoiceRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None, description='Номер акта. Допускается null, в таком случае считаем, что акт без номера', example='Тест'
    )
    date: date = Field(..., description='Дата акта', example='2022-12-31')
    contractorRole: ContractorRole = Field(
        ...,
        description='Роль исполнителя в акте<p>Members:</p><ul><li><i>Rr</i> - Рекламораспространитель</li><li><i>Ors</i> - Оператор рекламной системы</li><li><i>Rd</i> - Рекламодатель</li><li><i>Ra</i> - Рекламное агентство</li></ul>',
        example='Ra',
    )
    clientRole: ClientRole = Field(
        ...,
        description='Роль заказчика в акте<p>Members:</p><ul><li><i>Rr</i> - Рекламораспространитель</li><li><i>Ors</i> - Оператор рекламной системы</li><li><i>Rd</i> - Рекламодатель</li><li><i>Ra</i> - Рекламное агентство</li></ul>',
        example='Rd',
    )
    amount: float = Field(..., description='Общая стоимость по акту в руб.', example=100)
    startDate: date = Field(..., description='Дата начала оказания услуг по акту', example='2022-12-01')
    endDate: date = Field(..., description='Дата окончания оказания услуг по акту (включительно)', example='2022-12-31')
    finalContractId: str = Field(..., description='Id доходного договора в ОРД', example='CT3at_SU7y3ECdCb-AfHV3sA')
    initialContractsData: Optional[List[InvoiceInitialContractItem]] = Field(
        None, description='Данные по изначальным договорам (массив)'
    )
    statisticsByPlatforms: Optional[List[InvoiceStatisticsByPlatformsItem]] = Field(
        None, description='Статистика по площадкам (массив)'
    )


class CreateInvoicelessStatisticsRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    statistics: Optional[List[InvoicelessStatisticsByPlatforms]] = Field(
        None, description='Статистика по площадкам (массив)'
    )


class CreatedCreativeResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Id креатива')
    nativeCustomerId: Optional[str] = Field(None, description='Id креатива в системе клиента')
    erid: str = Field(..., description='Erid креатива')
    creativeGroupId: str = Field(..., description='Id группы креативов')
    creativeGroupName: str = Field(..., description='Наименование группы креативов')
    mediaData: List[CreativeMediaDataItem] = Field(..., description='Файловые медиаданные креатива')
    textData: List[CreativeTextDataItemWebApiDto] = Field(..., description='Текстовые медиаданные креатива')


class CreativeGroupResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    creativeGroupId: str = Field(
        ..., description='Id группы креативов\r\n<p style="color: blue">Поле обязательно для заполнения</p>'
    )
    finalContractId: Optional[str] = Field(
        None,
        description='Id конечного договора, к которому привязана группа креативов\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Для креатива саморекламы не должно заполняться</p>',
    )
    initialContractId: Optional[str] = Field(
        None,
        description='Id или Cid изначального договора, к которому относится группа креативов\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Для креатива саморекламы не должно заполняться</p>',
    )
    cobrandingContractIds: Optional[List[str]] = Field(
        None,
        description='Id или Cid совместных договоров\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно, если `IsCobranding`=`true`</p>',
    )
    isSelfPromotion: bool = Field(
        ...,
        description='Креативы относятся к саморекламе\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    creativeGroupName: str = Field(
        ..., description='Наименование\r\n<p style="color: blue">Поле обязательно для заполнения</p>'
    )
    startDate: Optional[date] = Field(
        None, description='Дата начала рекламной кампании\r\n<p style="color: blue">Поле обязательно для заполнения</p>'
    )
    endDate: Optional[date] = Field(
        None,
        description='Дата окончания рекламной кампании\r\n<p style="color: blue">Поле обязательно для заполнения</p>',
    )
    type: Optional[Type11] = Field(
        None,
        description='Тип рекламной кампании\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Обязательно, если не будет заполняться аналогичное поле `Type` при регистрации статистики показов креативов</p><p>Members:</p><ul><li><i>CPM</i> - Cost Per Millennium, оплата за тысячу показов</li><li><i>CPC</i> - Cost Per Click, оплата за клик баннера</li><li><i>CPA</i> - Cost Per Action, оплата за совершенное целевое действие</li><li><i>Other</i> - Иное</li></ul>',
    )
    form: Form = Field(
        ...,
        description='Форма распространения рекламы\r\n<p style="color: blue">Поле обязательно для заполнения</p><p>Members:</p><ul><li><i>Banner</i> - Баннер</li><li><i>Text</i> - Текстовый блок</li><li><i>TextGraphic</i> - Текстово-графический блок</li><li><i>Video</i> - Видеоролик</li><li><i>Audio</i> - Аудиозапись</li><li><i>AudioBroadcast</i> - Аудиотрансляции в прямом эфире</li><li><i>VideoBroadcast</i> - Видеотрансляции в прямом эфире</li><li><i>TextVideoBlock</i> - Текстовый блок с видео</li><li><i>TextAudioBlock</i> - Текстовый блок с аудио</li><li><i>TextAudioVideoBlock</i> - Текстовый блок с аудио и видео</li><li><i>TextGraphicVideoBlock</i> - Текстово-графический блок с видео</li><li><i>TextGraphicAudioBlock</i> - Текстово-графический блок с аудио</li><li><i>TextGraphicAudioVideoBlock</i> - Текстово-графический блок с аудио и видео</li><li><i>BannerHtml5</i> - HTML5-баннер</li></ul>',
    )
    isSocial: bool = Field(
        ...,
        description='Признак социальной рекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isNative: bool = Field(
        ...,
        description='Признак нативной рекламы (Данное поле будет игнорироваться с 01.04.2025 и будет удалено 01.07.2025)\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isSocialQuota: bool = Field(
        ...,
        description='Признак социальной рекламы по квоте\r\n           <p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isCobranding: bool = Field(
        ...,
        description='Признак совместной рекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    kktuCodes: List[str] = Field(
        ..., description='Список кодов ККТУ\r\n<p style="color: blue">Поле обязательно для заполнения</p>'
    )
    targetAudienceParams: Optional[List[TargetAudienceParam]] = Field(
        None, description='Параметры целевой аудитории\r\n<p style="color: blue">Поле обязательно для заполнения</p>'
    )
    description: Optional[str] = Field(
        None,
        description='Общее описание объекта рекламирования\r\n<ul><li>Минимальная длина: 1</li><li>Максимальная длина: 1000</li><li>Длина строки от 1 до 1000, может содержать цифры и буквы, а также все спец символы</li><li>В начале и в конце не должно быть пробела и переноса на другую строку</li></ul><p style="color: blue">Поле условно-обязательно для заполнения. Обязательно для кода ККТУ `30.15.1`</p>',
    )


class CreativeResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Id креатива в ОРД')
    erid: str = Field(
        ...,
        description='Маркер креатива для добавления в кликовые ссылки. Формируется в момент регистрации креатива в ЕРИР, в дальнейшем передаётся Агентствам',
    )
    status: Status6 = Field(
        ...,
        description='Статус креатива<p>Members:</p><ul><li><i>Creating</i> - Идет загрузка в ОРД (элемент фида создан, но медиа-данные еще не загружены)</li><li><i>MediaDownloadError</i> - Не удалось скачать медифайл для элемента фида (пока используется только для элементов фидов)</li><li><i>Created</i> - Создан в БД (наша валидация пройдена). Пока не используется, сущность сразу переходит в статус [Ожидает регистрации].</li><li><i>RegistrationRequired</i> - Ожидает регистрации в ЕРИР</li><li><i>Registering</i> - Идет регистрация, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>Active</i> - Активный</li><li><i>RegistrationError</i> - Ошибка регистрации ЕРИР (любого этапа)</li><li><i>DeletionRequired</i> - Ожидает удаления в ЕРИР</li><li><i>Deleting</i> - Идет удаление, быстрый контроль ЕРИР пройден, ждем уточненного ответа</li><li><i>DeletionError</i> - Ошибка удаления в ЕРИР (любого этапа)</li><li><i>Deleted</i> - Удален в ЕРИР</li></ul>',
    )
    nativeCustomerId: Optional[str] = Field(
        None,
        description='Id креатива в системе клиента\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
    )
    creativeGroupId: Optional[str] = Field(
        None,
        description='Id группы креативов\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example='CG3oAF-jsLEkGx83pCs9-FPQ',
    )
    creativeGroupName: Optional[str] = Field(
        None,
        description='Имя группы креативов\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно при создании новой группы креативов</p>',
        example='ТестоваяГруппа',
    )
    creativeGroupStartDate: Optional[date] = Field(
        None,
        description='Дата начала рекламной кампании\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example='2023-01-01',
    )
    creativeGroupEndDate: Optional[date] = Field(
        None,
        description='Дата окончания рекламной кампании\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example='2023-30-01',
    )
    finalContractId: Optional[str] = Field(
        None,
        description='Id доходного договора в ОРД\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Для креатива саморекламы не должно заполняться</p>',
        example='CT6WFbMXPGcE2lx5Ffm-npAg',
    )
    initialContractId: Optional[str] = Field(
        None,
        description='Id или Cid изначального договора. Если креатив создается на доходный договор, то нужно указать InitialContractId = FinalContractId\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Для креатива саморекламы не должно заполняться</p>',
        example='AAADgMygKIOkyGuPfl83W1ow',
    )
    cobrandingContractIds: Optional[List[str]] = Field(
        None,
        description='Id или Cid совместных договоров\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно, если `IsCobranding`=`true`</p>',
    )
    isSelfPromotion: bool = Field(
        ...,
        description='Является креативом саморекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    type: Optional[Type11] = Field(
        None,
        description='Тип рекламной кампании\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Обязательно, если не будет заполняться аналогичное поле `Type` при регистрации статистики показов креатива</p><p>Members:</p><ul><li><i>CPM</i> - Cost Per Millennium, оплата за тысячу показов</li><li><i>CPC</i> - Cost Per Click, оплата за клик баннера</li><li><i>CPA</i> - Cost Per Action, оплата за совершенное целевое действие</li><li><i>Other</i> - Иное</li></ul>',
    )
    form: Form = Field(
        ...,
        description='Форма распространения рекламы\r\n<p style="color: blue">Поле обязательно для заполнения</p><p>Members:</p><ul><li><i>Banner</i> - Баннер</li><li><i>Text</i> - Текстовый блок</li><li><i>TextGraphic</i> - Текстово-графический блок</li><li><i>Video</i> - Видеоролик</li><li><i>Audio</i> - Аудиозапись</li><li><i>AudioBroadcast</i> - Аудиотрансляции в прямом эфире</li><li><i>VideoBroadcast</i> - Видеотрансляции в прямом эфире</li><li><i>TextVideoBlock</i> - Текстовый блок с видео</li><li><i>TextAudioBlock</i> - Текстовый блок с аудио</li><li><i>TextAudioVideoBlock</i> - Текстовый блок с аудио и видео</li><li><i>TextGraphicVideoBlock</i> - Текстово-графический блок с видео</li><li><i>TextGraphicAudioBlock</i> - Текстово-графический блок с аудио</li><li><i>TextGraphicAudioVideoBlock</i> - Текстово-графический блок с аудио и видео</li><li><i>BannerHtml5</i> - HTML5-баннер</li></ul>',
    )
    advertiserUrl: Optional[str] = Field(
        None,
        description='Целевая ссылка (сайт рекламодателя, на который осуществляется переход с креатива). Поле не используется с 15.10.2024, заменено на массив `advertiserUrls`. Будет удалено 01.07.2025',
    )
    advertiserUrls: Optional[List[str]] = Field(
        None,
        description='Целевые ссылки (массив)\n\r\nПроверка URL:\r\n<ul><li>Проверить протокол http, https</li></ul><p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example=['http://test.ru'],
    )
    description: str = Field(
        ...,
        description='Общее описание объекта рекламирования\r\n<ul><li>Минимальная длина: 1</li><li>Максимальная длина: 1000</li><li>Длина строки от 1 до 1000, может содержать цифры и буквы, а также все спец символы</li><li>В начале и в конце не должно быть пробела и переноса на другую строку</li></ul><p style="color: blue">Поле обязательно для заполнения</p>',
        example='Описание креатива 4H67RLFG',
    )
    targetAudienceParams: Optional[List[TargetAudienceParam]] = Field(
        None,
        description='Параметры целевой аудитории рекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
    )
    isNative: bool = Field(
        ...,
        description='Признак нативной рекламы (Данное поле будет игнорироваться с 01.04.2025 и будет удалено 01.07.2025)\r\n           <p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isSocialQuota: bool = Field(
        ...,
        description='Признак социальной рекламы по квоте\r\n           <p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isSocial: bool = Field(
        ...,
        description='Признак социальной рекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isCobranding: bool = Field(
        ...,
        description='Признак совместной рекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    kktuCodes: List[str] = Field(
        ..., description='Список кодов ККТУ\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>'
    )
    erirValidationError: Optional[ErirValidationError] = None
    mediaData: List[CreativeMediaDataItem] = Field(..., description='Файловые медиаданные креатива')
    textData: List[CreativeTextDataItemWebApiDto] = Field(..., description='Текстовые медиаданные креатива')


class DelayedFeedElement(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    feedElementId: Optional[str] = Field(None, description='Id созданного элемента фида')
    feedElementNativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id элемента фида')
    feedId: Optional[str] = Field(None, description='Id фида')
    feedNativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id фида')
    erirValidationError: Optional[ErirValidationError] = None
    status: Status8 = Field(..., description='Статус заявки')
    failedDownloadAttemptCount: Optional[int] = Field(None, description='Количество неудачных попыток скачивания')
    feedElementCreatingErrors: List[str] = Field(
        ..., description='Ошибки создания элемента фида (ФЛК, неверные идентификаторы договора и пр)'
    )
    feedElementMedias: List[DelayedAdvertisementMedia] = Field(
        ..., description='Медиа-файлы, необходимые для создания элемента фида'
    )


class DelayedFeedElementsBatchInfoResponse(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    feedElements: List[DelayedFeedElement] = Field(
        ..., description='Список заявок на отложенное создание элементов фидов'
    )


class EditAdvertisingContainerRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    feedId: Optional[str] = Field(None, description='Id фида')
    feedNativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id фида')
    finalContractId: str = Field(..., description='Id доходного договора')
    initialContractId: Optional[str] = Field(
        None,
        description='Id или Cid изначального договора. В случае, если контейнер добавляется только к доходному договору, должно быть NULL.',
    )
    cobrandingContractIds: Optional[List[str]] = Field(
        None,
        description='Id или Cid совместных договоров\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно, если `IsCobranding`=`true`</p>',
    )
    name: str = Field(..., description='Наименование контейнера')
    nativeCustomerId: Optional[str] = Field(None, description='Пользовательский Id контейнера')
    type: Optional[Type11] = Field(
        None,
        description='Тип рекламной кампании\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Обязательно, если не будет заполняться аналогичное поле `Type` при регистрации статистики показов контейнера</p><p>Members:</p><ul><li><i>CPM</i> - Cost Per Millennium, оплата за тысячу показов</li><li><i>CPC</i> - Cost Per Click, оплата за клик баннера</li><li><i>CPA</i> - Cost Per Action, оплата за совершенное целевое действие</li><li><i>Other</i> - Иное</li></ul>',
    )
    form: Form = Field(
        ...,
        description='Форма распространения рекламы<p>Members:</p><ul><li><i>Banner</i> - Баннер</li><li><i>Text</i> - Текстовый блок</li><li><i>TextGraphic</i> - Текстово-графический блок</li><li><i>Video</i> - Видеоролик</li><li><i>Audio</i> - Аудиозапись</li><li><i>AudioBroadcast</i> - Аудиотрансляции в прямом эфире</li><li><i>VideoBroadcast</i> - Видеотрансляции в прямом эфире</li><li><i>TextVideoBlock</i> - Текстовый блок с видео</li><li><i>TextAudioBlock</i> - Текстовый блок с аудио</li><li><i>TextAudioVideoBlock</i> - Текстовый блок с аудио и видео</li><li><i>TextGraphicVideoBlock</i> - Текстово-графический блок с видео</li><li><i>TextGraphicAudioBlock</i> - Текстово-графический блок с аудио</li><li><i>TextGraphicAudioVideoBlock</i> - Текстово-графический блок с аудио и видео</li><li><i>BannerHtml5</i> - HTML5-баннер</li></ul>',
    )
    targetAudienceParams: Optional[List[TargetAudienceParam]] = Field(
        None, description='Параметры целевой аудитории рекламы'
    )
    description: Optional[str] = Field(
        None,
        description='Общее описание объекта рекламирования\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно для кода ККТУ `30.15.1`</p>',
    )
    isNative: bool = Field(
        ...,
        description='Признак нативной рекламы (Данное поле будет игнорироваться с 01.04.2025 и будет удалено 01.07.2025)',
    )
    isSocialQuota: bool = Field(
        ...,
        description='Признак социальной рекламы по квоте\r\n           <p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isSocial: bool = Field(..., description='Признак социальной рекламы')
    isCobranding: bool = Field(
        ...,
        description='Признак совместной рекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    kktuCodes: List[str] = Field(
        ...,
        description='Список кодов ККТУ. Возможные значения кодов ККТУ можно получить через метод `/webapi/v3/dictionaries/kktu`.\r\nДопускаются только коды 3 уровня - "X.X.X"\r\n<p style="color: blue">Поле обязательно для заполнения</p>',
        example=['30.1.2', '12.2.3'],
    )
    id: Optional[str] = Field(None, description='Id контейнера')
    erid: Optional[str] = Field(None, description='Erid контейнера')


class EditCreativeRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        description='Id креатива. Должно быть заполнено либо Id креатива, либо NativeCustomerId, либо Erid\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Не должно заполняться одновременно с полями `NativeCustomerId`, `Erid`</p>',
        example='CR5pxRa__aRkSgUqt0JeNkoA',
    )
    nativeCustomerId: Optional[str] = Field(
        None,
        description='Id креатива в системе клиента\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Не должно заполняться одновременно с полями `Id`, `Erid`</p>',
    )
    erid: Optional[str] = Field(
        None,
        description='Erid креатива\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Не должно заполняться одновременно с полями `Id`, `NativeCustomerId`</p>',
        example='2SDnjcX1BkW',
    )
    creativeGroupId: Optional[str] = Field(
        None,
        description='Id группы креативов, если пусто, значит - создаем новую группу креативов, иначе добавляем в существующую. При этом группа остается текущая или все поля новой группы обязаны совпадать с текущей\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
    )
    creativeGroupName: Optional[str] = Field(
        None,
        description='Наименование создаваемой группы креативов, заполняется только если CreativeGroupId = NULL\r\n<p style="color: blue">Поле условно-обязательно для заполнения</p>',
        example='ТестоваяГруппа',
    )
    creativeGroupStartDate: Optional[date] = Field(
        None,
        description='Дата начала рекламной кампании\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example='2023-01-01',
    )
    creativeGroupEndDate: Optional[date] = Field(
        None,
        description='Дата окончания рекламной кампании\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example='2023-30-01',
    )
    form: Optional[Form6] = Field(
        None,
        description='Форма распространения рекламы\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Необходимо указать при переносе в новую группу креативов</p><p>Members:</p><ul><li><i>Banner</i> - Баннер</li><li><i>Text</i> - Текстовый блок</li><li><i>TextGraphic</i> - Текстово-графический блок</li><li><i>Video</i> - Видеоролик</li><li><i>Audio</i> - Аудиозапись</li><li><i>AudioBroadcast</i> - Аудиотрансляции в прямом эфире</li><li><i>VideoBroadcast</i> - Видеотрансляции в прямом эфире</li><li><i>Other</i> - Иное - не поддерживается начиная с ЕРИР v.5</li><li><i>TextVideoBlock</i> - Текстовый блок с видео</li><li><i>TextAudioBlock</i> - Текстовый блок с аудио</li><li><i>TextAudioVideoBlock</i> - Текстовый блок с аудио и видео</li><li><i>TextGraphicVideoBlock</i> - Текстово-графический блок с видео</li><li><i>TextGraphicAudioBlock</i> - Текстово-графический блок с аудио</li><li><i>TextGraphicAudioVideoBlock</i> - Текстово-графический блок с аудио и видео</li><li><i>BannerHtml5</i> - HTML5-баннер</li></ul>',
    )
    advertiserUrls: List[str] = Field(
        ...,
        description='Целевые ссылки (сайты рекламодателя, на который осуществляется переход с креатива)\r\nПроверка URL:\r\n<ul><li>Проверить протокол http, https</li></ul><p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example=['http://test1.ru', 'http://test2.ru'],
    )
    description: Optional[str] = Field(
        None,
        description='Общее описание объекта рекламирования\r\n<ul><li>Минимальная длина: 1</li><li>Максимальная длина: 1000</li><li>Длина строки от 1 до 1000, может содержать цифры и буквы, а также все спец символы</li><li>В начале и в конце не должно быть пробела и переноса на другую строку</li></ul><p style="color: blue">Поле условно-обязательно для заполнения. Обязательно для кода ККТУ `30.15.1`</p>',
        example='Описание креатива 4H67RLFG',
    )
    kktuCodes: List[str] = Field(
        ...,
        description='Список кодов ККТУ. Возможные значения кодов ККТУ можно получить через метод `/webapi/v3/dictionaries/kktu`.\r\nДопускаются только коды 3 уровня - "X.X.X".\r\nВ настоящий момент список не может содержать более одного значения. Указание нескольких значений станет доступно после введения функционала кобрендинга\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Условия обязательности:\r\n<ul><li>Креатив переносится в новую бронь</li></ul></p>',
        example=['30.1.2'],
    )
    overwriteExistingCreativeMedia: bool = Field(
        ...,
        description='Перезаписать все предыдущие медиаданные креатива (файловые и текстовые). Токен останется прежним, существующие медиаданные удалятся, переданные медиаданые запишутся.\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    mediaData: Optional[List[EditCreativeMediaDataItem]] = Field(
        None,
        description='Медиаданные креатива (массив)\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
    )
    textData: Optional[List[EditCreativeTextDataItem]] = Field(
        None,
        description='Текстовые медиаданные креатива (массив)\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
    )


class EditInvoiceRequestV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    number: Optional[str] = Field(
        None, description='Номер акта. Допускается null, в таком случае считаем, что акт без номера', example='Тест'
    )
    date: date = Field(..., description='Дата акта', example='2022-12-31')
    contractorRole: ContractorRole3 = Field(
        ...,
        description='Роль исполнителя в акте<p>Members:</p><ul><li><i>Rr</i> - Рекламораспространитель</li><li><i>Ors</i> - Оператор рекламной системы</li><li><i>Rd</i> - Рекламодатель</li><li><i>Ra</i> - Рекламное агентство</li><li><i>Psr</i> - Посредник</li></ul>',
        example='Ra',
    )
    clientRole: ClientRole3 = Field(
        ...,
        description='Роль заказчика в акте<p>Members:</p><ul><li><i>Rr</i> - Рекламораспространитель</li><li><i>Ors</i> - Оператор рекламной системы</li><li><i>Rd</i> - Рекламодатель</li><li><i>Ra</i> - Рекламное агентство</li><li><i>Psr</i> - Посредник</li></ul>',
        example='Rd',
    )
    services: InvoiceAmountV31
    commission: Optional[InvoiceCommissionV31] = None
    startDate: date = Field(..., description='Дата начала оказания услуг по акту', example='2022-12-01')
    endDate: date = Field(..., description='Дата окончания оказания услуг по акту (включительно)', example='2022-12-31')
    finalContractId: str = Field(..., description='Id доходного договора в ОРД', example='CT3at_SU7y3ECdCb-AfHV3sA')


class EditInvoiceStatisticsRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    initialContractsData: List[InvoiceInitialContractItem] = Field(
        ..., description='Данные по изначальным договорам (массив)'
    )
    statisticsByPlatforms: Optional[List[InvoiceStatisticsByPlatformsItem]] = Field(
        None, description='Статистика по площадкам (массив)'
    )


class InvoiceStatisticsByPlatformsItemV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    erid: str = Field(..., description='Маркер креатива', example='Pb3MmBtzsrbL19RgOqsipS1ANueaCUzJSdpiY5g')
    platformUrl: Optional[str] = Field(None, description='URL площадки', example='https://example.ru')
    platformName: str = Field(..., description='Наименование площадки', example='test')
    platformType: PlatformType1 = Field(
        ...,
        description='Значение из справочника "Типы площадок"<p>Members:</p><ul><li><i>Site</i> - Сайт</li><li><i>Application</i> - Приложение</li></ul>',
        example='Site',
    )
    platformOwnedByAgency: bool = Field(..., description='Принадлежит ли площадка агентству', example=False)
    type: Optional[Type21] = Field(
        None,
        description='Тип рекламной кампании\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Обязательно к заполнению, если аналогичное поле `Type` не заполнено на уровне креатива</p><p>Members:</p><ul><li><i>CPM</i> - Cost Per Millennium, оплата за тысячу показов</li><li><i>CPC</i> - Cost Per Click, оплата за клик баннера</li><li><i>CPA</i> - Cost Per Action, оплата за совершенное целевое действие</li><li><i>Other</i> - Иное</li></ul>',
        example='CPM',
    )
    impsPlan: int = Field(..., description='Количество показов по акту', example=100)
    impsFact: int = Field(..., description='Количество показов фактическое', example=100)
    startDatePlan: date = Field(..., description='Дата начала показов по акту', example='2022-12-01')
    startDateFact: date = Field(..., description='Дата начала показов фактическая', example='2022-12-01')
    endDatePlan: date = Field(..., description='Дата окончания показов по акту', example='2022-12-31')
    endDateFact: date = Field(..., description='Дата окончания показов фактическая', example='2022-12-31')
    amount: PlatformStatisticsAmountV31
    price: float = Field(..., description='Стоимость единицы оказания услуг на данной площадке в руб.', example=10)
    initialContractId: str = Field(
        ..., description='Id или Cid изначального договора', example='CT7ae_PK9R0hCdAb-NfHH2fN'
    )


class InvoicelessStatisticsByPlatformsItemV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    erid: str = Field(..., description='Маркер креатива', example='Pb3MmBtzsrbL19RgOqsipS1ANueaCUzJSdpiY5g')
    platformUrl: Optional[str] = Field(None, description='URL площадки', example='https://example.ru')
    platformName: str = Field(..., description='Наименование площадки', example='test')
    platformType: PlatformType3 = Field(
        ...,
        description='Значение из справочника "Типы площадок"<p>Members:</p><ul><li><i>Site</i> - Сайт</li><li><i>Application</i> - Приложение</li></ul>',
        example='Site',
    )
    platformOwnedByAgency: bool = Field(..., description='Принадлежит ли площадка агентству', example=False)
    type: Optional[Type24] = Field(
        None,
        description='Тип рекламной кампании\r\n<p style="color: lightblue">Поле условно-обязательно для заполнения. Обязательно к заполнению, если аналогичное поле `Type` не заполнено на уровне креатива</p><p>Members:</p><ul><li><i>CPM</i> - Cost Per Millennium, оплата за тысячу показов</li><li><i>CPC</i> - Cost Per Click, оплата за клик баннера</li><li><i>CPA</i> - Cost Per Action, оплата за совершенное целевое действие</li><li><i>Other</i> - Иное</li></ul>',
        example='CPM',
    )
    impsPlan: int = Field(..., description='Количество показов по акту', example=100)
    impsFact: int = Field(..., description='Количество показов фактическое', example=100)
    startDatePlan: date = Field(..., description='Дата начала показов по акту', example='2022-12-01')
    startDateFact: date = Field(..., description='Дата начала показов фактическая', example='2022-12-01')
    endDatePlan: date = Field(..., description='Дата окончания показов по акту', example='2022-12-31')
    endDateFact: date = Field(..., description='Дата окончания показов фактическая', example='2022-12-31')
    amount: PlatformStatisticsAmountV31
    price: float = Field(..., description='Стоимость единицы оказания услуг на данной площадке в руб.', example=10)


class PartialClearInvoiceRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    initialContracts: Optional[List[str]] = Field(
        None,
        description='Список Id или Cid изначальных договоров из разаллокации для удаления',
        example=['CTRl8rP7sBCU6KfyeCWdYBcw', 'CTZOB4HKDab0yLLDvJ45OKUg'],
    )
    statisticsByPlatforms: Optional[List[PartialClearInvoiceStatisticsItem]] = Field(
        None, description='Список строк статистики для удаления'
    )


class SimpleEditCreativeRequest(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: Optional[str] = Field(
        None,
        description='Id креатива\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Не должно заполняться одновременно с полями `NativeCustomerId`, `Erid`</p>',
        example='CR5pxRa__aRkSgUqt0JeNkoA',
    )
    nativeCustomerId: Optional[str] = Field(
        None,
        description='Id креатива в системе клиента\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Не должно заполняться одновременно с полями `Id`, `Erid`</p>',
    )
    erid: Optional[str] = Field(
        None,
        description='Erid креатива\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Не должно заполняться одновременно с полями `Id`, `NativeCustomerId`</p>',
        example='2SDnjcX1BkW',
    )
    creativeGroupName: Optional[str] = Field(
        None,
        description='Имя группы креативов\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example='ТестоваяГруппа',
    )
    startDate: Optional[date] = Field(
        None, description='Дата начала рекламной кампании\r\n<p style="color: blue">Поле обязательно для заполнения</p>'
    )
    endDate: Optional[date] = Field(
        None,
        description='Дата окончания рекламной кампании\r\n<p style="color: blue">Поле обязательно для заполнения</p>',
    )
    finalContractId: Optional[str] = Field(
        None,
        description='Id доходного договора в ОРД\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Для креатива саморекламы не должно заполняться</p>',
        example='CTRl8rP7sBCU6KfyeCWdYBcw',
    )
    initialContractId: Optional[str] = Field(
        None,
        description='Id или Cid изначального договора. Если креатив создается на доходный договор, то нужно указать InitialContractId = FinalContractId.\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Для креатива саморекламы не должно заполняться</p>',
        example='CTRl8rP7sBCU6KfyeCWdYBcw',
    )
    cobrandingContractIds: Optional[List[str]] = Field(
        None,
        description='Id или Cid совместных договоров\r\n<p style="color: blue">Поле условно-обязательно для заполнения. Обязательно, если `IsCobranding`=`true`</p>',
    )
    isSelfPromotion: bool = Field(
        ...,
        description='Креативы относятся к саморекламе\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    type: Optional[Type30] = Field(
        None,
        description='Тип рекламной кампании\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Обязательно, если не будет заполняться аналогичное поле `Type` при регистрации статистики показов креативов</p><p>Members:</p><ul><li><i>CPM</i> - Cost Per Millennium, оплата за тысячу показов</li><li><i>CPC</i> - Cost Per Click, оплата за клик баннера</li><li><i>CPA</i> - Cost Per Action, оплата за совершенное целевое действие</li><li><i>Other</i> - Иное</li></ul>',
    )
    form: Form7 = Field(
        ...,
        description='Форма распространения рекламы\r\n<p style="color: blue">Поле обязательно для заполнения</p><p>Members:</p><ul><li><i>Banner</i> - Баннер</li><li><i>Text</i> - Текстовый блок</li><li><i>TextGraphic</i> - Текстово-графический блок</li><li><i>Video</i> - Видеоролик</li><li><i>Audio</i> - Аудиозапись</li><li><i>AudioBroadcast</i> - Аудиотрансляции в прямом эфире</li><li><i>VideoBroadcast</i> - Видеотрансляции в прямом эфире</li><li><i>TextVideoBlock</i> - Текстовый блок с видео</li><li><i>TextAudioBlock</i> - Текстовый блок с аудио</li><li><i>TextAudioVideoBlock</i> - Текстовый блок с аудио и видео</li><li><i>TextGraphicVideoBlock</i> - Текстово-графический блок с видео</li><li><i>TextGraphicAudioBlock</i> - Текстово-графический блок с аудио</li><li><i>TextGraphicAudioVideoBlock</i> - Текстово-графический блок с аудио и видео</li><li><i>BannerHtml5</i> - HTML5-баннер</li></ul>',
    )
    advertiserUrls: Optional[List[str]] = Field(
        None,
        description='Целевые ссылки (массив)\r\nПроверка URL:\r\n<ul><li>Проверить протокол http, https</li></ul><p style="color: lightblue">Поле не обязательно для заполнения</p>',
        example=['http://test1.ru', 'http://test2.ru'],
    )
    description: Optional[str] = Field(
        None,
        description='Общее описание объекта рекламирования\r\n<ul><li>Минимальная длина: 1</li><li>Максимальная длина: 1000</li><li>Длина строки от 1 до 1000, может содержать цифры и буквы, а также все спец символы</li><li>В начале и в конце не должно быть пробела и переноса на другую строку</li></ul><p style="color: blue">Поле условно-обязательно для заполнения. Обязательно для кода ККТУ `30.15.1`</p>',
        example='Описание',
    )
    targetAudienceParams: Optional[List[TargetAudienceParam]] = Field(
        None,
        description='Параметры целевой аудитории\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
    )
    isNative: bool = Field(
        ...,
        description='Признак нативной рекламы (Данное поле будет игнорироваться с 01.04.2025 и будет удалено 01.07.2025)\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isSocialQuota: bool = Field(
        ...,
        description='Признак социальной рекламы по квоте\r\n           <p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isSocial: bool = Field(
        ...,
        description='Признак социальной рекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    isCobranding: bool = Field(
        ...,
        description='Признак совместной рекламы\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    kktuCodes: List[str] = Field(
        ...,
        description='Список кодов ККТУ. Возможные значения кодов ККТУ можно получить через метод `/webapi/v3/dictionaries/kktu`.\r\nДопускаются только коды 3 уровня - "X.X.X".\r\nВ настоящий момент список не может содержать более одного значения. Указание нескольких значений станет доступно после введения функционала кобрендинга\r\n<p style="color: blue">Поле обязательно для заполнения</p>',
        example=['30.1.2'],
    )
    overwriteExistingCreativeMedia: bool = Field(
        ...,
        description='Перезаписать все предыдущие медиаданные креатива (файловые и текстовые). Токен останется прежним, существующие медиаданные удалятся, переданные медиаданые запишутся.\r\n<p style="color: lightblue">Поле не обязательно для заполнения. Если не заполнено, устанавливается значение `false`</p>',
    )
    mediaData: Optional[List[EditCreativeMediaDataItem]] = Field(
        None,
        description='Медиаданные креатива (массив)\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
    )
    textData: Optional[List[EditCreativeTextDataItem]] = Field(
        None,
        description='Текстовые медиаданные креатива (массив)\r\n<p style="color: lightblue">Поле не обязательно для заполнения</p>',
    )


class SupplementInvoiceRequestV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    invoiceId: str = Field(..., description='Id акта в ОРД')
    initialContractsData: Optional[List[InvoiceInitialContractItemV31]] = Field(
        None, description='Данные по изначальным договорам для добавления к акту (массив)'
    )
    statisticsByPlatforms: Optional[List[InvoiceStatisticsByPlatformsItemV31]] = Field(
        None, description='Статистика по площадкам для добавления к акту (массив)'
    )


class CreateInvoiceRequestV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    type: Type5 = Field(
        ...,
        description='Тип акта<p>Members:</p><ul><li><i>Invoice</i> - Акт выполненных работ, акт выставлен на договор оказания услуг</li><li><i>IntermediaryReport</i> - Отчет посредника, акт выставлен на посреднический договор</li><li><i>Undefined</i> - Не задано</li></ul>',
        example='Invoice',
    )
    number: Optional[str] = Field(
        None, description='Номер акта. Допускается null, в таком случае считаем, что акт без номера', example='Тест'
    )
    date: date = Field(..., description='Дата акта', example='2022-12-31')
    contractorRole: ContractorRole1 = Field(
        ...,
        description='Роль исполнителя в акте<p>Members:</p><ul><li><i>Rr</i> - Рекламораспространитель</li><li><i>Ors</i> - Оператор рекламной системы</li><li><i>Rd</i> - Рекламодатель</li><li><i>Ra</i> - Рекламное агентство</li><li><i>Psr</i> - Посредник</li></ul>',
        example='Ra',
    )
    clientRole: ClientRole1 = Field(
        ...,
        description='Роль заказчика в акте<p>Members:</p><ul><li><i>Rr</i> - Рекламораспространитель</li><li><i>Ors</i> - Оператор рекламной системы</li><li><i>Rd</i> - Рекламодатель</li><li><i>Ra</i> - Рекламное агентство</li><li><i>Psr</i> - Посредник</li></ul>',
        example='Rd',
    )
    services: InvoiceAmountV31
    commission: Optional[InvoiceCommissionV31] = None
    startDate: date = Field(..., description='Дата начала оказания услуг по акту', example='2022-12-01')
    endDate: date = Field(..., description='Дата окончания оказания услуг по акту (включительно)', example='2022-12-31')
    finalContractId: str = Field(..., description='Id доходного договора в ОРД', example='CT3at_SU7y3ECdCb-AfHV3sA')
    initialContractsData: Optional[List[InvoiceInitialContractItemV31]] = Field(
        None, description='Данные по изначальным договорам (массив)'
    )
    statisticsByPlatforms: Optional[List[InvoiceStatisticsByPlatformsItemV31]] = Field(
        None, description='Статистика по площадкам (массив)'
    )


class CreateInvoicelessStatisticsRequestV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    statistics: Optional[List[InvoicelessStatisticsByPlatformsItemV31]] = Field(
        None, description='Статистика по площадкам (массив)'
    )


class EditInvoiceStatisticsRequestV31(BaseModel):
    class Config:
        extra = Extra.forbid
        alias_generator = capitalize
        allow_population_by_field_name = True

    id: str = Field(..., description='Идентификатор акта')
    initialContractsData: List[InvoiceInitialContractItemV31] = Field(
        ..., description='Данные по изначальным договорам (массив)'
    )
    statisticsByPlatforms: Optional[List[InvoiceStatisticsByPlatformsItemV31]] = Field(
        None, description='Статистика по площадкам (массив)'
    )
