# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TenantArgs', 'Tenant']

@pulumi.input_type
class TenantArgs:
    def __init__(__self__, *,
                 tenant: pulumi.Input['TenantPropertiesArgs'],
                 external_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Tenant resource.
        :param pulumi.Input[str] external_id: External ID of the tenant
        """
        pulumi.set(__self__, "tenant", tenant)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)

    @property
    @pulumi.getter
    def tenant(self) -> pulumi.Input['TenantPropertiesArgs']:
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: pulumi.Input['TenantPropertiesArgs']):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        External ID of the tenant
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)


class Tenant(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 tenant: Optional[pulumi.Input[Union['TenantPropertiesArgs', 'TenantPropertiesArgsDict']]] = None,
                 __props__=None):
        """
        Create a Tenant resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] external_id: External ID of the tenant
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TenantArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Tenant resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TenantArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TenantArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 tenant: Optional[pulumi.Input[Union['TenantPropertiesArgs', 'TenantPropertiesArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TenantArgs.__new__(TenantArgs)

            __props__.__dict__["external_id"] = external_id
            if tenant is None and not opts.urn:
                raise TypeError("Missing required property 'tenant'")
            __props__.__dict__["tenant"] = tenant
            __props__.__dict__["auth_query"] = None
            __props__.__dict__["db_database"] = None
            __props__.__dict__["db_host"] = None
            __props__.__dict__["db_port"] = None
            __props__.__dict__["enforce_ssl"] = None
            __props__.__dict__["inserted_at"] = None
            __props__.__dict__["ip_version"] = None
            __props__.__dict__["require_user"] = None
            __props__.__dict__["sni_hostname"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["upstream_ssl"] = None
            __props__.__dict__["upstream_verify"] = None
            __props__.__dict__["users"] = None
        super(Tenant, __self__).__init__(
            'supavisor-native:tenants:Tenant',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Tenant':
        """
        Get an existing Tenant resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TenantArgs.__new__(TenantArgs)

        __props__.__dict__["auth_query"] = None
        __props__.__dict__["db_database"] = None
        __props__.__dict__["db_host"] = None
        __props__.__dict__["db_port"] = None
        __props__.__dict__["enforce_ssl"] = None
        __props__.__dict__["external_id"] = None
        __props__.__dict__["inserted_at"] = None
        __props__.__dict__["ip_version"] = None
        __props__.__dict__["require_user"] = None
        __props__.__dict__["sni_hostname"] = None
        __props__.__dict__["tenant"] = None
        __props__.__dict__["updated_at"] = None
        __props__.__dict__["upstream_ssl"] = None
        __props__.__dict__["upstream_verify"] = None
        __props__.__dict__["users"] = None
        return Tenant(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authQuery")
    def auth_query(self) -> pulumi.Output[Optional[str]]:
        """
        SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1
        """
        return pulumi.get(self, "auth_query")

    @property
    @pulumi.getter(name="dbDatabase")
    def db_database(self) -> pulumi.Output[str]:
        """
        Database name
        """
        return pulumi.get(self, "db_database")

    @property
    @pulumi.getter(name="dbHost")
    def db_host(self) -> pulumi.Output[str]:
        """
        Database host
        """
        return pulumi.get(self, "db_host")

    @property
    @pulumi.getter(name="dbPort")
    def db_port(self) -> pulumi.Output[int]:
        """
        Database port
        """
        return pulumi.get(self, "db_port")

    @property
    @pulumi.getter(name="enforceSsl")
    def enforce_ssl(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enforce_ssl")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Output[Optional[str]]:
        """
        External ID
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="insertedAt")
    def inserted_at(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "inserted_at")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[Optional[str]]:
        """
        auto
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="requireUser")
    def require_user(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "require_user")

    @property
    @pulumi.getter(name="sniHostname")
    def sni_hostname(self) -> pulumi.Output[Optional[str]]:
        """
        your.domain.com
        """
        return pulumi.get(self, "sni_hostname")

    @property
    @pulumi.getter
    def tenant(self) -> pulumi.Output['outputs.TenantProperties']:
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="upstreamSsl")
    def upstream_ssl(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "upstream_ssl")

    @property
    @pulumi.getter(name="upstreamVerify")
    def upstream_verify(self) -> pulumi.Output[Optional[str]]:
        """
        none
        """
        return pulumi.get(self, "upstream_verify")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Sequence['outputs.User']]:
        return pulumi.get(self, "users")

