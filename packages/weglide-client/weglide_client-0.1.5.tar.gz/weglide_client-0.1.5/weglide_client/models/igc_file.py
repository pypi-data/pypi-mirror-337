# coding: utf-8

"""
    WeGlide

    Quantifying airsports

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IGCFile(BaseModel):
    """
    IGCFile
    """ # noqa: E501
    id: StrictInt
    file: StrictStr
    valid: StrictInt
    errors: Optional[List[Any]] = None
    user_id: StrictInt
    pilot_name: Optional[StrictStr] = None
    copilot_name: Optional[StrictStr] = None
    pressure_max_alt: Optional[StrictInt] = None
    gps_max_alt: Optional[StrictInt] = None
    alt_source: Optional[StrictStr] = None
    extension_types: Optional[List[StrictStr]] = None
    time_zone_offset: Optional[StrictInt] = None
    created: Optional[datetime] = None
    modified: Optional[datetime] = None
    md5: StrictStr
    fr_manuf_id: Optional[StrictStr] = None
    fr_uniq_id: Optional[StrictStr] = None
    fr_manuf_name: Optional[StrictStr] = None
    fr_name: Optional[StrictStr] = None
    fr_firmware_version: Optional[StrictStr] = None
    fr_hardware_version: Optional[StrictStr] = None
    fr_gps_model: Optional[StrictStr] = None
    fr_gps_channels: Optional[StrictInt] = None
    fr_pressure_sensor: Optional[StrictStr] = None
    fr_interval: Optional[StrictInt] = None
    registration: Optional[StrictStr] = None
    competition_id: Optional[StrictStr] = None
    aircraft_name: Optional[StrictStr] = None
    competition_class: Optional[StrictStr] = None
    fix_accuracy: Optional[StrictInt] = None
    date_utc: date
    date_local: Optional[date] = None
    __properties: ClassVar[List[str]] = ["id", "file", "valid", "errors", "user_id", "pilot_name", "copilot_name", "pressure_max_alt", "gps_max_alt", "alt_source", "extension_types", "time_zone_offset", "created", "modified", "md5", "fr_manuf_id", "fr_uniq_id", "fr_manuf_name", "fr_name", "fr_firmware_version", "fr_hardware_version", "fr_gps_model", "fr_gps_channels", "fr_pressure_sensor", "fr_interval", "registration", "competition_id", "aircraft_name", "competition_class", "fix_accuracy", "date_utc", "date_local"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IGCFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if errors (nullable) is None
        # and model_fields_set contains the field
        if self.errors is None and "errors" in self.model_fields_set:
            _dict['errors'] = None

        # set to None if pilot_name (nullable) is None
        # and model_fields_set contains the field
        if self.pilot_name is None and "pilot_name" in self.model_fields_set:
            _dict['pilot_name'] = None

        # set to None if copilot_name (nullable) is None
        # and model_fields_set contains the field
        if self.copilot_name is None and "copilot_name" in self.model_fields_set:
            _dict['copilot_name'] = None

        # set to None if pressure_max_alt (nullable) is None
        # and model_fields_set contains the field
        if self.pressure_max_alt is None and "pressure_max_alt" in self.model_fields_set:
            _dict['pressure_max_alt'] = None

        # set to None if gps_max_alt (nullable) is None
        # and model_fields_set contains the field
        if self.gps_max_alt is None and "gps_max_alt" in self.model_fields_set:
            _dict['gps_max_alt'] = None

        # set to None if alt_source (nullable) is None
        # and model_fields_set contains the field
        if self.alt_source is None and "alt_source" in self.model_fields_set:
            _dict['alt_source'] = None

        # set to None if extension_types (nullable) is None
        # and model_fields_set contains the field
        if self.extension_types is None and "extension_types" in self.model_fields_set:
            _dict['extension_types'] = None

        # set to None if time_zone_offset (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone_offset is None and "time_zone_offset" in self.model_fields_set:
            _dict['time_zone_offset'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if modified (nullable) is None
        # and model_fields_set contains the field
        if self.modified is None and "modified" in self.model_fields_set:
            _dict['modified'] = None

        # set to None if fr_manuf_id (nullable) is None
        # and model_fields_set contains the field
        if self.fr_manuf_id is None and "fr_manuf_id" in self.model_fields_set:
            _dict['fr_manuf_id'] = None

        # set to None if fr_uniq_id (nullable) is None
        # and model_fields_set contains the field
        if self.fr_uniq_id is None and "fr_uniq_id" in self.model_fields_set:
            _dict['fr_uniq_id'] = None

        # set to None if fr_manuf_name (nullable) is None
        # and model_fields_set contains the field
        if self.fr_manuf_name is None and "fr_manuf_name" in self.model_fields_set:
            _dict['fr_manuf_name'] = None

        # set to None if fr_name (nullable) is None
        # and model_fields_set contains the field
        if self.fr_name is None and "fr_name" in self.model_fields_set:
            _dict['fr_name'] = None

        # set to None if fr_firmware_version (nullable) is None
        # and model_fields_set contains the field
        if self.fr_firmware_version is None and "fr_firmware_version" in self.model_fields_set:
            _dict['fr_firmware_version'] = None

        # set to None if fr_hardware_version (nullable) is None
        # and model_fields_set contains the field
        if self.fr_hardware_version is None and "fr_hardware_version" in self.model_fields_set:
            _dict['fr_hardware_version'] = None

        # set to None if fr_gps_model (nullable) is None
        # and model_fields_set contains the field
        if self.fr_gps_model is None and "fr_gps_model" in self.model_fields_set:
            _dict['fr_gps_model'] = None

        # set to None if fr_gps_channels (nullable) is None
        # and model_fields_set contains the field
        if self.fr_gps_channels is None and "fr_gps_channels" in self.model_fields_set:
            _dict['fr_gps_channels'] = None

        # set to None if fr_pressure_sensor (nullable) is None
        # and model_fields_set contains the field
        if self.fr_pressure_sensor is None and "fr_pressure_sensor" in self.model_fields_set:
            _dict['fr_pressure_sensor'] = None

        # set to None if fr_interval (nullable) is None
        # and model_fields_set contains the field
        if self.fr_interval is None and "fr_interval" in self.model_fields_set:
            _dict['fr_interval'] = None

        # set to None if registration (nullable) is None
        # and model_fields_set contains the field
        if self.registration is None and "registration" in self.model_fields_set:
            _dict['registration'] = None

        # set to None if competition_id (nullable) is None
        # and model_fields_set contains the field
        if self.competition_id is None and "competition_id" in self.model_fields_set:
            _dict['competition_id'] = None

        # set to None if aircraft_name (nullable) is None
        # and model_fields_set contains the field
        if self.aircraft_name is None and "aircraft_name" in self.model_fields_set:
            _dict['aircraft_name'] = None

        # set to None if competition_class (nullable) is None
        # and model_fields_set contains the field
        if self.competition_class is None and "competition_class" in self.model_fields_set:
            _dict['competition_class'] = None

        # set to None if fix_accuracy (nullable) is None
        # and model_fields_set contains the field
        if self.fix_accuracy is None and "fix_accuracy" in self.model_fields_set:
            _dict['fix_accuracy'] = None

        # set to None if date_local (nullable) is None
        # and model_fields_set contains the field
        if self.date_local is None and "date_local" in self.model_fields_set:
            _dict['date_local'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IGCFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "file": obj.get("file"),
            "valid": obj.get("valid"),
            "errors": obj.get("errors"),
            "user_id": obj.get("user_id"),
            "pilot_name": obj.get("pilot_name"),
            "copilot_name": obj.get("copilot_name"),
            "pressure_max_alt": obj.get("pressure_max_alt"),
            "gps_max_alt": obj.get("gps_max_alt"),
            "alt_source": obj.get("alt_source"),
            "extension_types": obj.get("extension_types"),
            "time_zone_offset": obj.get("time_zone_offset"),
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "md5": obj.get("md5"),
            "fr_manuf_id": obj.get("fr_manuf_id"),
            "fr_uniq_id": obj.get("fr_uniq_id"),
            "fr_manuf_name": obj.get("fr_manuf_name"),
            "fr_name": obj.get("fr_name"),
            "fr_firmware_version": obj.get("fr_firmware_version"),
            "fr_hardware_version": obj.get("fr_hardware_version"),
            "fr_gps_model": obj.get("fr_gps_model"),
            "fr_gps_channels": obj.get("fr_gps_channels"),
            "fr_pressure_sensor": obj.get("fr_pressure_sensor"),
            "fr_interval": obj.get("fr_interval"),
            "registration": obj.get("registration"),
            "competition_id": obj.get("competition_id"),
            "aircraft_name": obj.get("aircraft_name"),
            "competition_class": obj.get("competition_class"),
            "fix_accuracy": obj.get("fix_accuracy"),
            "date_utc": obj.get("date_utc"),
            "date_local": obj.get("date_local")
        })
        return _obj


