# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 3.16.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TectonFeatureResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'last_updated_by': 'str',
        'created_by': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'archived_at': 'datetime',
        'version': 'float',
        'feature_view': 'TectonFeatureJoinedFeatureViewResponseDto',
        'feature_table': 'TectonFeatureJoinedFeatureTableResponseDto',
        'model_populations': 'list[TectonFeatureJoinedModelPopulationResponseDto]',
        'name': 'str',
        'column_name': 'str',
        'description': 'str',
        'feature_view_id': 'str',
        'feature_table_id': 'str',
        'metadata': 'object',
        'synced_at': 'datetime',
        'organization_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'last_updated_by': 'lastUpdatedBy',
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'archived_at': 'archivedAt',
        'version': 'version',
        'feature_view': 'featureView',
        'feature_table': 'featureTable',
        'model_populations': 'modelPopulations',
        'name': 'name',
        'column_name': 'columnName',
        'description': 'description',
        'feature_view_id': 'featureViewId',
        'feature_table_id': 'featureTableId',
        'metadata': 'metadata',
        'synced_at': 'syncedAt',
        'organization_id': 'organizationId'
    }

    def __init__(self, id=None, last_updated_by=None, created_by=None, created_at=None, updated_at=None, archived_at=None, version=None, feature_view=None, feature_table=None, model_populations=None, name=None, column_name=None, description=None, feature_view_id=None, feature_table_id=None, metadata=None, synced_at=None, organization_id=None):  # noqa: E501
        """TectonFeatureResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._last_updated_by = None
        self._created_by = None
        self._created_at = None
        self._updated_at = None
        self._archived_at = None
        self._version = None
        self._feature_view = None
        self._feature_table = None
        self._model_populations = None
        self._name = None
        self._column_name = None
        self._description = None
        self._feature_view_id = None
        self._feature_table_id = None
        self._metadata = None
        self._synced_at = None
        self._organization_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if archived_at is not None:
            self.archived_at = archived_at
        if version is not None:
            self.version = version
        if feature_view is not None:
            self.feature_view = feature_view
        if feature_table is not None:
            self.feature_table = feature_table
        if model_populations is not None:
            self.model_populations = model_populations
        self.name = name
        self.column_name = column_name
        if description is not None:
            self.description = description
        if feature_view_id is not None:
            self.feature_view_id = feature_view_id
        if feature_table_id is not None:
            self.feature_table_id = feature_table_id
        if metadata is not None:
            self.metadata = metadata
        if synced_at is not None:
            self.synced_at = synced_at
        self.organization_id = organization_id

    @property
    def id(self):
        """Gets the id of this TectonFeatureResponseDto.  # noqa: E501


        :return: The id of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TectonFeatureResponseDto.


        :param id: The id of this TectonFeatureResponseDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this TectonFeatureResponseDto.  # noqa: E501


        :return: The last_updated_by of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this TectonFeatureResponseDto.


        :param last_updated_by: The last_updated_by of this TectonFeatureResponseDto.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def created_by(self):
        """Gets the created_by of this TectonFeatureResponseDto.  # noqa: E501


        :return: The created_by of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TectonFeatureResponseDto.


        :param created_by: The created_by of this TectonFeatureResponseDto.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this TectonFeatureResponseDto.  # noqa: E501


        :return: The created_at of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TectonFeatureResponseDto.


        :param created_at: The created_at of this TectonFeatureResponseDto.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TectonFeatureResponseDto.  # noqa: E501


        :return: The updated_at of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TectonFeatureResponseDto.


        :param updated_at: The updated_at of this TectonFeatureResponseDto.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def archived_at(self):
        """Gets the archived_at of this TectonFeatureResponseDto.  # noqa: E501


        :return: The archived_at of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this TectonFeatureResponseDto.


        :param archived_at: The archived_at of this TectonFeatureResponseDto.  # noqa: E501
        :type: datetime
        """

        self._archived_at = archived_at

    @property
    def version(self):
        """Gets the version of this TectonFeatureResponseDto.  # noqa: E501


        :return: The version of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TectonFeatureResponseDto.


        :param version: The version of this TectonFeatureResponseDto.  # noqa: E501
        :type: float
        """

        self._version = version

    @property
    def feature_view(self):
        """Gets the feature_view of this TectonFeatureResponseDto.  # noqa: E501


        :return: The feature_view of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: TectonFeatureJoinedFeatureViewResponseDto
        """
        return self._feature_view

    @feature_view.setter
    def feature_view(self, feature_view):
        """Sets the feature_view of this TectonFeatureResponseDto.


        :param feature_view: The feature_view of this TectonFeatureResponseDto.  # noqa: E501
        :type: TectonFeatureJoinedFeatureViewResponseDto
        """

        self._feature_view = feature_view

    @property
    def feature_table(self):
        """Gets the feature_table of this TectonFeatureResponseDto.  # noqa: E501


        :return: The feature_table of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: TectonFeatureJoinedFeatureTableResponseDto
        """
        return self._feature_table

    @feature_table.setter
    def feature_table(self, feature_table):
        """Sets the feature_table of this TectonFeatureResponseDto.


        :param feature_table: The feature_table of this TectonFeatureResponseDto.  # noqa: E501
        :type: TectonFeatureJoinedFeatureTableResponseDto
        """

        self._feature_table = feature_table

    @property
    def model_populations(self):
        """Gets the model_populations of this TectonFeatureResponseDto.  # noqa: E501


        :return: The model_populations of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: list[TectonFeatureJoinedModelPopulationResponseDto]
        """
        return self._model_populations

    @model_populations.setter
    def model_populations(self, model_populations):
        """Sets the model_populations of this TectonFeatureResponseDto.


        :param model_populations: The model_populations of this TectonFeatureResponseDto.  # noqa: E501
        :type: list[TectonFeatureJoinedModelPopulationResponseDto]
        """

        self._model_populations = model_populations

    @property
    def name(self):
        """Gets the name of this TectonFeatureResponseDto.  # noqa: E501


        :return: The name of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TectonFeatureResponseDto.


        :param name: The name of this TectonFeatureResponseDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def column_name(self):
        """Gets the column_name of this TectonFeatureResponseDto.  # noqa: E501


        :return: The column_name of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this TectonFeatureResponseDto.


        :param column_name: The column_name of this TectonFeatureResponseDto.  # noqa: E501
        :type: str
        """
        if column_name is None:
            raise ValueError("Invalid value for `column_name`, must not be `None`")  # noqa: E501

        self._column_name = column_name

    @property
    def description(self):
        """Gets the description of this TectonFeatureResponseDto.  # noqa: E501


        :return: The description of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TectonFeatureResponseDto.


        :param description: The description of this TectonFeatureResponseDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def feature_view_id(self):
        """Gets the feature_view_id of this TectonFeatureResponseDto.  # noqa: E501


        :return: The feature_view_id of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._feature_view_id

    @feature_view_id.setter
    def feature_view_id(self, feature_view_id):
        """Sets the feature_view_id of this TectonFeatureResponseDto.


        :param feature_view_id: The feature_view_id of this TectonFeatureResponseDto.  # noqa: E501
        :type: str
        """

        self._feature_view_id = feature_view_id

    @property
    def feature_table_id(self):
        """Gets the feature_table_id of this TectonFeatureResponseDto.  # noqa: E501


        :return: The feature_table_id of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._feature_table_id

    @feature_table_id.setter
    def feature_table_id(self, feature_table_id):
        """Sets the feature_table_id of this TectonFeatureResponseDto.


        :param feature_table_id: The feature_table_id of this TectonFeatureResponseDto.  # noqa: E501
        :type: str
        """

        self._feature_table_id = feature_table_id

    @property
    def metadata(self):
        """Gets the metadata of this TectonFeatureResponseDto.  # noqa: E501


        :return: The metadata of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TectonFeatureResponseDto.


        :param metadata: The metadata of this TectonFeatureResponseDto.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def synced_at(self):
        """Gets the synced_at of this TectonFeatureResponseDto.  # noqa: E501


        :return: The synced_at of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._synced_at

    @synced_at.setter
    def synced_at(self, synced_at):
        """Sets the synced_at of this TectonFeatureResponseDto.


        :param synced_at: The synced_at of this TectonFeatureResponseDto.  # noqa: E501
        :type: datetime
        """

        self._synced_at = synced_at

    @property
    def organization_id(self):
        """Gets the organization_id of this TectonFeatureResponseDto.  # noqa: E501


        :return: The organization_id of this TectonFeatureResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this TectonFeatureResponseDto.


        :param organization_id: The organization_id of this TectonFeatureResponseDto.  # noqa: E501
        :type: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TectonFeatureResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TectonFeatureResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
