#!/usr/bin/env python3
"""
Script para executar opera√ß√µes do ContextManager diretamente.
Permite listar, obter, criar, atualizar ou excluir contextos armazenados.
"""

import os
import sys
import json
import argparse
from pathlib import Path
from core.core.logger import get_logger, log_execution

# Adicionar o diret√≥rio base ao path para permitir importa√ß√µes
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(BASE_DIR))

# Importar o gerenciador de contexto
from apps.agent_manager.agents import ContextManager

# Configurar logger
logger = get_logger(__name__)

# Mascaramento b√°sico de dados sens√≠veis para logs
try:
    from core.core.utils import mask_sensitive_data, get_env_status
    has_utils = True
except ImportError:
    has_utils = False
    def mask_sensitive_data(data, mask_str='***'):
        if isinstance(data, str) and any(s in data.lower() for s in ['token', 'key', 'secret', 'password']):
            if len(data) > 10:
                return f"{data[:4]}{'*' * 12}{data[-4:] if len(data) > 8 else ''}"
            return mask_str
        return data

@log_execution
def parse_arguments():
    """
    Analisa os argumentos da linha de comando.
    
    Returns:
        argparse.Namespace: Argumentos da linha de comando
    """
    parser = argparse.ArgumentParser(
        description="Executa opera√ß√µes do ContextManager",
        formatter_class=argparse.RawTextHelpFormatter
    )
    
    parser.add_argument(
        "operation",
        choices=["listar", "obter", "criar", "atualizar", "excluir", "limpar"],
        help="""Opera√ß√£o a ser executada:
        - listar: Lista contextos (op√ß√µes: --limit, --type)
        - obter: Obt√©m um contexto (requer: --context_id)
        - criar: Cria um contexto (requer: --data_file, op√ß√µes: --type)
        - atualizar: Atualiza um contexto (requer: --context_id, --data_file, op√ß√µes: --merge)
        - excluir: Exclui um contexto (requer: --context_id)
        - limpar: Remove contextos antigos (op√ß√µes: --days)"""
    )
    
    parser.add_argument(
        "--context_id",
        help="ID do contexto para opera√ß√µes que exigem identifica√ß√£o espec√≠fica"
    )
    
    parser.add_argument(
        "--data_file",
        help="Arquivo JSON com dados para criar ou atualizar contexto"
    )
    
    parser.add_argument(
        "--type",
        help="Tipo de contexto para filtrar (listar) ou definir (criar)"
    )
    
    parser.add_argument(
        "--limit",
        type=int,
        default=10,
        help="Limite de contextos a listar (padr√£o: 10)"
    )
    
    parser.add_argument(
        "--days",
        type=int,
        default=7,
        help="Dias para considerar contextos antigos na opera√ß√£o 'limpar' (padr√£o: 7)"
    )
    
    parser.add_argument(
        "--merge",
        action="store_true",
        help="Mesclar dados ao atualizar (ao inv√©s de substituir completamente)"
    )
    
    parser.add_argument(
        "--output",
        help="Arquivo de sa√≠da para o resultado (opcional)"
    )
    
    parser.add_argument(
        "--context_dir",
        default="agent_context",
        help="Diret√≥rio para armazenar/acessar arquivos de contexto (padr√£o: agent_context)"
    )
    
    return parser.parse_args()

def main():
    """
    Fun√ß√£o principal de execu√ß√£o do script.
    """
    try:
        # Analisar argumentos
        args = parse_arguments()
        logger.info(f"Opera√ß√£o: {args.operation}")
        
        # Verificar e criar diret√≥rio de contexto se necess√°rio
        context_dir = Path(args.context_dir)
        if not context_dir.exists():
            context_dir.mkdir(parents=True, exist_ok=True)
            logger.info(f"Diret√≥rio de contexto criado: {context_dir}")
        
        # Inicializar gerenciador de contexto com diret√≥rio personalizado
        manager = ContextManager(base_dir=str(context_dir))
        
        # Executar opera√ß√£o solicitada
        result = None
        
        if args.operation == "listar":
            # Opera√ß√£o: listar contextos
            logger.info(f"Listando contextos (limite: {args.limit}, tipo: {args.type})")
            contexts = manager.list_contexts(context_type=args.type, limit=args.limit)
            
            # Exibir resultado
            print(f"\nüìã Contextos encontrados: {len(contexts)}")
            for i, ctx in enumerate(contexts):
                print(f"- ID: {ctx.get('id')}")
                print(f"  Tipo: {ctx.get('type')}")
                print(f"  Criado em: {ctx.get('created_at')}")
                if ctx.get('updated_at'):
                    print(f"  Atualizado em: {ctx.get('updated_at')}")
                print()
                
            result = contexts
            
        elif args.operation == "obter":
            # Opera√ß√£o: obter contexto espec√≠fico
            if not args.context_id:
                logger.error("ID de contexto n√£o fornecido para opera√ß√£o 'obter'")
                print("‚ùå Erro: √â necess√°rio fornecer --context_id para obter um contexto espec√≠fico")
                return 1
                
            logger.info(f"Obtendo contexto: {args.context_id}")
            context = manager.get_context(args.context_id)
            
            if not context:
                logger.warning(f"Contexto n√£o encontrado: {args.context_id}")
                print(f"‚ö†Ô∏è Contexto n√£o encontrado: {args.context_id}")
                return 1
                
            # Exibir resultado
            print(f"\nüìÑ Contexto: {args.context_id}")
            print(json.dumps(context, indent=2, ensure_ascii=False))
            result = context
            
        elif args.operation == "criar":
            # Opera√ß√£o: criar novo contexto
            if not args.data_file:
                logger.error("Arquivo de dados n√£o fornecido para opera√ß√£o 'criar'")
                print("‚ùå Erro: √â necess√°rio fornecer --data_file para criar um contexto")
                return 1
                
            if not os.path.isfile(args.data_file):
                logger.error(f"Arquivo de dados n√£o encontrado: {args.data_file}")
                print(f"‚ùå Erro: Arquivo n√£o encontrado: {args.data_file}")
                return 1
                
            logger.info(f"Criando contexto a partir de: {args.data_file}")
            
            # Ler arquivo de dados
            with open(args.data_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            # Criar contexto
            context_type = args.type or "default"
            context_id = manager.create_context(data, context_type=context_type)
            
            # Exibir resultado
            print(f"\n‚úÖ Contexto criado com sucesso!")
            print(f"üìù ID: {context_id}")
            print(f"üìù Tipo: {context_type}")
            
            result = {"id": context_id, "type": context_type}
            
        elif args.operation == "atualizar":
            # Opera√ß√£o: atualizar contexto existente
            if not args.context_id or not args.data_file:
                logger.error("ID de contexto ou arquivo de dados n√£o fornecido para opera√ß√£o 'atualizar'")
                print("‚ùå Erro: √â necess√°rio fornecer --context_id e --data_file para atualizar um contexto")
                return 1
                
            if not os.path.isfile(args.data_file):
                logger.error(f"Arquivo de dados n√£o encontrado: {args.data_file}")
                print(f"‚ùå Erro: Arquivo n√£o encontrado: {args.data_file}")
                return 1
                
            logger.info(f"Atualizando contexto {args.context_id} a partir de: {args.data_file}")
            
            # Ler arquivo de dados
            with open(args.data_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            # Atualizar contexto
            merge = args.merge
            success = manager.update_context(args.context_id, data, merge=merge)
            
            if not success:
                logger.warning(f"Falha ao atualizar contexto: {args.context_id}")
                print(f"‚ùå Erro: N√£o foi poss√≠vel atualizar o contexto {args.context_id}")
                return 1
                
            # Exibir resultado
            print(f"\n‚úÖ Contexto atualizado com sucesso!")
            print(f"üìù ID: {args.context_id}")
            print(f"üìù Modo: {'Mesclado' if merge else 'Substitu√≠do'}")
            
            result = {"id": args.context_id, "updated": True, "merge": merge}
            
        elif args.operation == "excluir":
            # Opera√ß√£o: excluir contexto
            if not args.context_id:
                logger.error("ID de contexto n√£o fornecido para opera√ß√£o 'excluir'")
                print("‚ùå Erro: √â necess√°rio fornecer --context_id para excluir um contexto")
                return 1
                
            logger.info(f"Excluindo contexto: {args.context_id}")
            
            # Excluir contexto
            success = manager.delete_context(args.context_id)
            
            if not success:
                logger.warning(f"Falha ao excluir contexto: {args.context_id}")
                print(f"‚ùå Erro: N√£o foi poss√≠vel excluir o contexto {args.context_id}")
                return 1
                
            # Exibir resultado
            print(f"\n‚úÖ Contexto exclu√≠do com sucesso!")
            print(f"üìù ID: {args.context_id}")
            
            result = {"id": args.context_id, "deleted": True}
            
        elif args.operation == "limpar":
            # Opera√ß√£o: limpar contextos antigos
            days = args.days
            logger.info(f"Limpando contextos mais antigos que {days} dias")
            
            # Limpar contextos
            removed = manager.clean_old_contexts(days=days)
            
            # Exibir resultado
            print(f"\nüßπ Limpeza conclu√≠da!")
            print(f"üìù Contextos removidos: {removed}")
            
            result = {"removed_count": removed, "days": days}
        
        # Salvar resultado se solicitado
        if args.output and result:
            with open(args.output, 'w', encoding='utf-8') as f:
                json.dump(result, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ Resultado salvo em: {args.output}")
        
        # Retorno bem-sucedido
        return 0
        
    except KeyboardInterrupt:
        logger.warning("Processo interrompido pelo usu√°rio")
        print("\n‚ö†Ô∏è  Processo interrompido pelo usu√°rio")
        return 130
        
    except Exception as e:
        logger.error(f"Erro ao executar opera√ß√£o: {str(e)}", exc_info=True)
        print(f"\n‚ùå Erro: {str(e)}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 