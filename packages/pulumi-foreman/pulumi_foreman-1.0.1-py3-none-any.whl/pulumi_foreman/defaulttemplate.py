# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DefaulttemplateArgs', 'Defaulttemplate']

@pulumi.input_type
class DefaulttemplateArgs:
    def __init__(__self__, *,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 provisioningtemplate_id: Optional[pulumi.Input[int]] = None,
                 templatekind_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Defaulttemplate resource.
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system to assign this Default Template to
        :param pulumi.Input[int] provisioningtemplate_id: Id of the Provisioning Template
        :param pulumi.Input[int] templatekind_id: Template Kind Id to define the Default Template
        """
        if operatingsystem_id is not None:
            pulumi.set(__self__, "operatingsystem_id", operatingsystem_id)
        if provisioningtemplate_id is not None:
            pulumi.set(__self__, "provisioningtemplate_id", provisioningtemplate_id)
        if templatekind_id is not None:
            pulumi.set(__self__, "templatekind_id", templatekind_id)

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the operating system to assign this Default Template to
        """
        return pulumi.get(self, "operatingsystem_id")

    @operatingsystem_id.setter
    def operatingsystem_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "operatingsystem_id", value)

    @property
    @pulumi.getter(name="provisioningtemplateId")
    def provisioningtemplate_id(self) -> Optional[pulumi.Input[int]]:
        """
        Id of the Provisioning Template
        """
        return pulumi.get(self, "provisioningtemplate_id")

    @provisioningtemplate_id.setter
    def provisioningtemplate_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "provisioningtemplate_id", value)

    @property
    @pulumi.getter(name="templatekindId")
    def templatekind_id(self) -> Optional[pulumi.Input[int]]:
        """
        Template Kind Id to define the Default Template
        """
        return pulumi.get(self, "templatekind_id")

    @templatekind_id.setter
    def templatekind_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "templatekind_id", value)


@pulumi.input_type
class _DefaulttemplateState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 provisioningtemplate_id: Optional[pulumi.Input[int]] = None,
                 templatekind_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Defaulttemplate resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY Foreman representation of default Template. Default Templates serve as an identification string that defines
               autonomy, authority, or control for a portion of a network.
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system to assign this Default Template to
        :param pulumi.Input[int] provisioningtemplate_id: Id of the Provisioning Template
        :param pulumi.Input[int] templatekind_id: Template Kind Id to define the Default Template
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if operatingsystem_id is not None:
            pulumi.set(__self__, "operatingsystem_id", operatingsystem_id)
        if provisioningtemplate_id is not None:
            pulumi.set(__self__, "provisioningtemplate_id", provisioningtemplate_id)
        if templatekind_id is not None:
            pulumi.set(__self__, "templatekind_id", templatekind_id)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY Foreman representation of default Template. Default Templates serve as an identification string that defines
        autonomy, authority, or control for a portion of a network.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the operating system to assign this Default Template to
        """
        return pulumi.get(self, "operatingsystem_id")

    @operatingsystem_id.setter
    def operatingsystem_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "operatingsystem_id", value)

    @property
    @pulumi.getter(name="provisioningtemplateId")
    def provisioningtemplate_id(self) -> Optional[pulumi.Input[int]]:
        """
        Id of the Provisioning Template
        """
        return pulumi.get(self, "provisioningtemplate_id")

    @provisioningtemplate_id.setter
    def provisioningtemplate_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "provisioningtemplate_id", value)

    @property
    @pulumi.getter(name="templatekindId")
    def templatekind_id(self) -> Optional[pulumi.Input[int]]:
        """
        Template Kind Id to define the Default Template
        """
        return pulumi.get(self, "templatekind_id")

    @templatekind_id.setter
    def templatekind_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "templatekind_id", value)


class Defaulttemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 provisioningtemplate_id: Optional[pulumi.Input[int]] = None,
                 templatekind_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Defaulttemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system to assign this Default Template to
        :param pulumi.Input[int] provisioningtemplate_id: Id of the Provisioning Template
        :param pulumi.Input[int] templatekind_id: Template Kind Id to define the Default Template
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DefaulttemplateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Defaulttemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DefaulttemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DefaulttemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 provisioningtemplate_id: Optional[pulumi.Input[int]] = None,
                 templatekind_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DefaulttemplateArgs.__new__(DefaulttemplateArgs)

            __props__.__dict__["operatingsystem_id"] = operatingsystem_id
            __props__.__dict__["provisioningtemplate_id"] = provisioningtemplate_id
            __props__.__dict__["templatekind_id"] = templatekind_id
            __props__.__dict__["__meta_"] = None
        super(Defaulttemplate, __self__).__init__(
            'foreman:index/defaulttemplate:Defaulttemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            operatingsystem_id: Optional[pulumi.Input[int]] = None,
            provisioningtemplate_id: Optional[pulumi.Input[int]] = None,
            templatekind_id: Optional[pulumi.Input[int]] = None) -> 'Defaulttemplate':
        """
        Get an existing Defaulttemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY Foreman representation of default Template. Default Templates serve as an identification string that defines
               autonomy, authority, or control for a portion of a network.
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system to assign this Default Template to
        :param pulumi.Input[int] provisioningtemplate_id: Id of the Provisioning Template
        :param pulumi.Input[int] templatekind_id: Template Kind Id to define the Default Template
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DefaulttemplateState.__new__(_DefaulttemplateState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["operatingsystem_id"] = operatingsystem_id
        __props__.__dict__["provisioningtemplate_id"] = provisioningtemplate_id
        __props__.__dict__["templatekind_id"] = templatekind_id
        return Defaulttemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY Foreman representation of default Template. Default Templates serve as an identification string that defines
        autonomy, authority, or control for a portion of a network.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> pulumi.Output[Optional[int]]:
        """
        ID of the operating system to assign this Default Template to
        """
        return pulumi.get(self, "operatingsystem_id")

    @property
    @pulumi.getter(name="provisioningtemplateId")
    def provisioningtemplate_id(self) -> pulumi.Output[Optional[int]]:
        """
        Id of the Provisioning Template
        """
        return pulumi.get(self, "provisioningtemplate_id")

    @property
    @pulumi.getter(name="templatekindId")
    def templatekind_id(self) -> pulumi.Output[Optional[int]]:
        """
        Template Kind Id to define the Default Template
        """
        return pulumi.get(self, "templatekind_id")

