# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KatelloContentViewArgs', 'KatelloContentView']

@pulumi.input_type
class KatelloContentViewArgs:
    def __init__(__self__, *,
                 auto_publish: Optional[pulumi.Input[bool]] = None,
                 component_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 composite: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['KatelloContentViewFilterArgs']]]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[int]] = None,
                 repository_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 solve_dependencies: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a KatelloContentView resource.
        :param pulumi.Input[bool] auto_publish: Relevant for Composite Content Views: 'Automatically publish a new version of the composite content view whenever one of
               its content views is published. Autopublish will only happen for component views that use the 'Always use latest
               version' option.'
        :param pulumi.Input[Sequence[pulumi.Input[int]]] component_ids: Relevant for CCVs: list of CV version IDs. @EXAMPLE [1, 4]
        :param pulumi.Input[bool] composite: Is this Content View a Composite CV? @EXAMPLE false
        :param pulumi.Input[str] description: Description for the (composite) content view
        :param pulumi.Input[Sequence[pulumi.Input['KatelloContentViewFilterArgs']]] filters: Content view filters and their rules.
        :param pulumi.Input[str] label: Label for the (composite) content view. Cannot be changed after creation. By default set to the name, with underscores
               as spaces replacement. @EXAMPLE
        :param pulumi.Input[str] name: Name of the (composite) content view. @EXAMPLE "My new CV"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] repository_ids: List of repository IDs. @EXAMPLE [1, 4, 5]
        :param pulumi.Input[bool] solve_dependencies: Relevant for Content Views: 'This will solve RPM and module stream dependencies on every publish of this content view.
               Dependency solving significantly increases publish time (publishes can take over three times as long) and filters will
               be ignored when adding packages to solve dependencies. Also, certain scenarios involving errata may still cause
               dependency errors.'
        """
        if auto_publish is not None:
            pulumi.set(__self__, "auto_publish", auto_publish)
        if component_ids is not None:
            pulumi.set(__self__, "component_ids", component_ids)
        if composite is not None:
            pulumi.set(__self__, "composite", composite)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if repository_ids is not None:
            pulumi.set(__self__, "repository_ids", repository_ids)
        if solve_dependencies is not None:
            pulumi.set(__self__, "solve_dependencies", solve_dependencies)

    @property
    @pulumi.getter(name="autoPublish")
    def auto_publish(self) -> Optional[pulumi.Input[bool]]:
        """
        Relevant for Composite Content Views: 'Automatically publish a new version of the composite content view whenever one of
        its content views is published. Autopublish will only happen for component views that use the 'Always use latest
        version' option.'
        """
        return pulumi.get(self, "auto_publish")

    @auto_publish.setter
    def auto_publish(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_publish", value)

    @property
    @pulumi.getter(name="componentIds")
    def component_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Relevant for CCVs: list of CV version IDs. @EXAMPLE [1, 4]
        """
        return pulumi.get(self, "component_ids")

    @component_ids.setter
    def component_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "component_ids", value)

    @property
    @pulumi.getter
    def composite(self) -> Optional[pulumi.Input[bool]]:
        """
        Is this Content View a Composite CV? @EXAMPLE false
        """
        return pulumi.get(self, "composite")

    @composite.setter
    def composite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "composite", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the (composite) content view
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KatelloContentViewFilterArgs']]]]:
        """
        Content view filters and their rules.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KatelloContentViewFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the (composite) content view. Cannot be changed after creation. By default set to the name, with underscores
        as spaces replacement. @EXAMPLE
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the (composite) content view. @EXAMPLE "My new CV"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="repositoryIds")
    def repository_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of repository IDs. @EXAMPLE [1, 4, 5]
        """
        return pulumi.get(self, "repository_ids")

    @repository_ids.setter
    def repository_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "repository_ids", value)

    @property
    @pulumi.getter(name="solveDependencies")
    def solve_dependencies(self) -> Optional[pulumi.Input[bool]]:
        """
        Relevant for Content Views: 'This will solve RPM and module stream dependencies on every publish of this content view.
        Dependency solving significantly increases publish time (publishes can take over three times as long) and filters will
        be ignored when adding packages to solve dependencies. Also, certain scenarios involving errata may still cause
        dependency errors.'
        """
        return pulumi.get(self, "solve_dependencies")

    @solve_dependencies.setter
    def solve_dependencies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "solve_dependencies", value)


@pulumi.input_type
class _KatelloContentViewState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 auto_publish: Optional[pulumi.Input[bool]] = None,
                 component_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 composite: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filtered: Optional[pulumi.Input[bool]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['KatelloContentViewFilterArgs']]]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 latest_version_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[int]] = None,
                 repository_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 solve_dependencies: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering KatelloContentView resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY (Composite) Content Views create an abstract view on a collection of repositories and allow versioning of these
               views. Additional fine tuning can be done with package filters.
        :param pulumi.Input[bool] auto_publish: Relevant for Composite Content Views: 'Automatically publish a new version of the composite content view whenever one of
               its content views is published. Autopublish will only happen for component views that use the 'Always use latest
               version' option.'
        :param pulumi.Input[Sequence[pulumi.Input[int]]] component_ids: Relevant for CCVs: list of CV version IDs. @EXAMPLE [1, 4]
        :param pulumi.Input[bool] composite: Is this Content View a Composite CV? @EXAMPLE false
        :param pulumi.Input[str] description: Description for the (composite) content view
        :param pulumi.Input[Sequence[pulumi.Input['KatelloContentViewFilterArgs']]] filters: Content view filters and their rules.
        :param pulumi.Input[str] label: Label for the (composite) content view. Cannot be changed after creation. By default set to the name, with underscores
               as spaces replacement. @EXAMPLE
        :param pulumi.Input[int] latest_version_id: Holds the ID of the latest published version of a Content View to be used as reference in CCVs
        :param pulumi.Input[str] name: Name of the (composite) content view. @EXAMPLE "My new CV"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] repository_ids: List of repository IDs. @EXAMPLE [1, 4, 5]
        :param pulumi.Input[bool] solve_dependencies: Relevant for Content Views: 'This will solve RPM and module stream dependencies on every publish of this content view.
               Dependency solving significantly increases publish time (publishes can take over three times as long) and filters will
               be ignored when adding packages to solve dependencies. Also, certain scenarios involving errata may still cause
               dependency errors.'
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if auto_publish is not None:
            pulumi.set(__self__, "auto_publish", auto_publish)
        if component_ids is not None:
            pulumi.set(__self__, "component_ids", component_ids)
        if composite is not None:
            pulumi.set(__self__, "composite", composite)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filtered is not None:
            pulumi.set(__self__, "filtered", filtered)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if latest_version_id is not None:
            pulumi.set(__self__, "latest_version_id", latest_version_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if repository_ids is not None:
            pulumi.set(__self__, "repository_ids", repository_ids)
        if solve_dependencies is not None:
            pulumi.set(__self__, "solve_dependencies", solve_dependencies)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY (Composite) Content Views create an abstract view on a collection of repositories and allow versioning of these
        views. Additional fine tuning can be done with package filters.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter(name="autoPublish")
    def auto_publish(self) -> Optional[pulumi.Input[bool]]:
        """
        Relevant for Composite Content Views: 'Automatically publish a new version of the composite content view whenever one of
        its content views is published. Autopublish will only happen for component views that use the 'Always use latest
        version' option.'
        """
        return pulumi.get(self, "auto_publish")

    @auto_publish.setter
    def auto_publish(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_publish", value)

    @property
    @pulumi.getter(name="componentIds")
    def component_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Relevant for CCVs: list of CV version IDs. @EXAMPLE [1, 4]
        """
        return pulumi.get(self, "component_ids")

    @component_ids.setter
    def component_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "component_ids", value)

    @property
    @pulumi.getter
    def composite(self) -> Optional[pulumi.Input[bool]]:
        """
        Is this Content View a Composite CV? @EXAMPLE false
        """
        return pulumi.get(self, "composite")

    @composite.setter
    def composite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "composite", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the (composite) content view
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def filtered(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "filtered")

    @filtered.setter
    def filtered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "filtered", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KatelloContentViewFilterArgs']]]]:
        """
        Content view filters and their rules.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KatelloContentViewFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the (composite) content view. Cannot be changed after creation. By default set to the name, with underscores
        as spaces replacement. @EXAMPLE
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="latestVersionId")
    def latest_version_id(self) -> Optional[pulumi.Input[int]]:
        """
        Holds the ID of the latest published version of a Content View to be used as reference in CCVs
        """
        return pulumi.get(self, "latest_version_id")

    @latest_version_id.setter
    def latest_version_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latest_version_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the (composite) content view. @EXAMPLE "My new CV"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="repositoryIds")
    def repository_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of repository IDs. @EXAMPLE [1, 4, 5]
        """
        return pulumi.get(self, "repository_ids")

    @repository_ids.setter
    def repository_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "repository_ids", value)

    @property
    @pulumi.getter(name="solveDependencies")
    def solve_dependencies(self) -> Optional[pulumi.Input[bool]]:
        """
        Relevant for Content Views: 'This will solve RPM and module stream dependencies on every publish of this content view.
        Dependency solving significantly increases publish time (publishes can take over three times as long) and filters will
        be ignored when adding packages to solve dependencies. Also, certain scenarios involving errata may still cause
        dependency errors.'
        """
        return pulumi.get(self, "solve_dependencies")

    @solve_dependencies.setter
    def solve_dependencies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "solve_dependencies", value)


class KatelloContentView(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_publish: Optional[pulumi.Input[bool]] = None,
                 component_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 composite: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KatelloContentViewFilterArgs', 'KatelloContentViewFilterArgsDict']]]]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[int]] = None,
                 repository_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 solve_dependencies: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a KatelloContentView resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_publish: Relevant for Composite Content Views: 'Automatically publish a new version of the composite content view whenever one of
               its content views is published. Autopublish will only happen for component views that use the 'Always use latest
               version' option.'
        :param pulumi.Input[Sequence[pulumi.Input[int]]] component_ids: Relevant for CCVs: list of CV version IDs. @EXAMPLE [1, 4]
        :param pulumi.Input[bool] composite: Is this Content View a Composite CV? @EXAMPLE false
        :param pulumi.Input[str] description: Description for the (composite) content view
        :param pulumi.Input[Sequence[pulumi.Input[Union['KatelloContentViewFilterArgs', 'KatelloContentViewFilterArgsDict']]]] filters: Content view filters and their rules.
        :param pulumi.Input[str] label: Label for the (composite) content view. Cannot be changed after creation. By default set to the name, with underscores
               as spaces replacement. @EXAMPLE
        :param pulumi.Input[str] name: Name of the (composite) content view. @EXAMPLE "My new CV"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] repository_ids: List of repository IDs. @EXAMPLE [1, 4, 5]
        :param pulumi.Input[bool] solve_dependencies: Relevant for Content Views: 'This will solve RPM and module stream dependencies on every publish of this content view.
               Dependency solving significantly increases publish time (publishes can take over three times as long) and filters will
               be ignored when adding packages to solve dependencies. Also, certain scenarios involving errata may still cause
               dependency errors.'
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[KatelloContentViewArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a KatelloContentView resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KatelloContentViewArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KatelloContentViewArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_publish: Optional[pulumi.Input[bool]] = None,
                 component_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 composite: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KatelloContentViewFilterArgs', 'KatelloContentViewFilterArgsDict']]]]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[int]] = None,
                 repository_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 solve_dependencies: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KatelloContentViewArgs.__new__(KatelloContentViewArgs)

            __props__.__dict__["auto_publish"] = auto_publish
            __props__.__dict__["component_ids"] = component_ids
            __props__.__dict__["composite"] = composite
            __props__.__dict__["description"] = description
            __props__.__dict__["filters"] = filters
            __props__.__dict__["label"] = label
            __props__.__dict__["name"] = name
            __props__.__dict__["organization_id"] = organization_id
            __props__.__dict__["repository_ids"] = repository_ids
            __props__.__dict__["solve_dependencies"] = solve_dependencies
            __props__.__dict__["__meta_"] = None
            __props__.__dict__["filtered"] = None
            __props__.__dict__["latest_version_id"] = None
        super(KatelloContentView, __self__).__init__(
            'foreman:index/katelloContentView:KatelloContentView',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            auto_publish: Optional[pulumi.Input[bool]] = None,
            component_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            composite: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            filtered: Optional[pulumi.Input[bool]] = None,
            filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KatelloContentViewFilterArgs', 'KatelloContentViewFilterArgsDict']]]]] = None,
            label: Optional[pulumi.Input[str]] = None,
            latest_version_id: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization_id: Optional[pulumi.Input[int]] = None,
            repository_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            solve_dependencies: Optional[pulumi.Input[bool]] = None) -> 'KatelloContentView':
        """
        Get an existing KatelloContentView resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY (Composite) Content Views create an abstract view on a collection of repositories and allow versioning of these
               views. Additional fine tuning can be done with package filters.
        :param pulumi.Input[bool] auto_publish: Relevant for Composite Content Views: 'Automatically publish a new version of the composite content view whenever one of
               its content views is published. Autopublish will only happen for component views that use the 'Always use latest
               version' option.'
        :param pulumi.Input[Sequence[pulumi.Input[int]]] component_ids: Relevant for CCVs: list of CV version IDs. @EXAMPLE [1, 4]
        :param pulumi.Input[bool] composite: Is this Content View a Composite CV? @EXAMPLE false
        :param pulumi.Input[str] description: Description for the (composite) content view
        :param pulumi.Input[Sequence[pulumi.Input[Union['KatelloContentViewFilterArgs', 'KatelloContentViewFilterArgsDict']]]] filters: Content view filters and their rules.
        :param pulumi.Input[str] label: Label for the (composite) content view. Cannot be changed after creation. By default set to the name, with underscores
               as spaces replacement. @EXAMPLE
        :param pulumi.Input[int] latest_version_id: Holds the ID of the latest published version of a Content View to be used as reference in CCVs
        :param pulumi.Input[str] name: Name of the (composite) content view. @EXAMPLE "My new CV"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] repository_ids: List of repository IDs. @EXAMPLE [1, 4, 5]
        :param pulumi.Input[bool] solve_dependencies: Relevant for Content Views: 'This will solve RPM and module stream dependencies on every publish of this content view.
               Dependency solving significantly increases publish time (publishes can take over three times as long) and filters will
               be ignored when adding packages to solve dependencies. Also, certain scenarios involving errata may still cause
               dependency errors.'
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KatelloContentViewState.__new__(_KatelloContentViewState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["auto_publish"] = auto_publish
        __props__.__dict__["component_ids"] = component_ids
        __props__.__dict__["composite"] = composite
        __props__.__dict__["description"] = description
        __props__.__dict__["filtered"] = filtered
        __props__.__dict__["filters"] = filters
        __props__.__dict__["label"] = label
        __props__.__dict__["latest_version_id"] = latest_version_id
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["repository_ids"] = repository_ids
        __props__.__dict__["solve_dependencies"] = solve_dependencies
        return KatelloContentView(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY (Composite) Content Views create an abstract view on a collection of repositories and allow versioning of these
        views. Additional fine tuning can be done with package filters.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter(name="autoPublish")
    def auto_publish(self) -> pulumi.Output[Optional[bool]]:
        """
        Relevant for Composite Content Views: 'Automatically publish a new version of the composite content view whenever one of
        its content views is published. Autopublish will only happen for component views that use the 'Always use latest
        version' option.'
        """
        return pulumi.get(self, "auto_publish")

    @property
    @pulumi.getter(name="componentIds")
    def component_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Relevant for CCVs: list of CV version IDs. @EXAMPLE [1, 4]
        """
        return pulumi.get(self, "component_ids")

    @property
    @pulumi.getter
    def composite(self) -> pulumi.Output[Optional[bool]]:
        """
        Is this Content View a Composite CV? @EXAMPLE false
        """
        return pulumi.get(self, "composite")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description for the (composite) content view
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filtered(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "filtered")

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Output[Optional[Sequence['outputs.KatelloContentViewFilter']]]:
        """
        Content view filters and their rules.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def label(self) -> pulumi.Output[str]:
        """
        Label for the (composite) content view. Cannot be changed after creation. By default set to the name, with underscores
        as spaces replacement. @EXAMPLE
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="latestVersionId")
    def latest_version_id(self) -> pulumi.Output[int]:
        """
        Holds the ID of the latest published version of a Content View to be used as reference in CCVs
        """
        return pulumi.get(self, "latest_version_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the (composite) content view. @EXAMPLE "My new CV"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="repositoryIds")
    def repository_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        List of repository IDs. @EXAMPLE [1, 4, 5]
        """
        return pulumi.get(self, "repository_ids")

    @property
    @pulumi.getter(name="solveDependencies")
    def solve_dependencies(self) -> pulumi.Output[Optional[bool]]:
        """
        Relevant for Content Views: 'This will solve RPM and module stream dependencies on every publish of this content view.
        Dependency solving significantly increases publish time (publishes can take over three times as long) and filters will
        be ignored when adding packages to solve dependencies. Also, certain scenarios involving errata may still cause
        dependency errors.'
        """
        return pulumi.get(self, "solve_dependencies")

