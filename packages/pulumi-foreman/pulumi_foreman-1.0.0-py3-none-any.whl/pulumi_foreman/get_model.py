# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetModelResult',
    'AwaitableGetModelResult',
    'get_model',
    'get_model_output',
]

@pulumi.output_type
class GetModelResult:
    """
    A collection of values returned by getModel.
    """
    def __init__(__self__, hardware_model=None, id=None, info=None, name=None, vendor_class=None):
        if hardware_model and not isinstance(hardware_model, str):
            raise TypeError("Expected argument 'hardware_model' to be a str")
        pulumi.set(__self__, "hardware_model", hardware_model)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if info and not isinstance(info, str):
            raise TypeError("Expected argument 'info' to be a str")
        pulumi.set(__self__, "info", info)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if vendor_class and not isinstance(vendor_class, str):
            raise TypeError("Expected argument 'vendor_class' to be a str")
        pulumi.set(__self__, "vendor_class", vendor_class)

    @property
    @pulumi.getter(name="hardwareModel")
    def hardware_model(self) -> str:
        return pulumi.get(self, "hardware_model")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def info(self) -> str:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="vendorClass")
    def vendor_class(self) -> str:
        return pulumi.get(self, "vendor_class")


class AwaitableGetModelResult(GetModelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetModelResult(
            hardware_model=self.hardware_model,
            id=self.id,
            info=self.info,
            name=self.name,
            vendor_class=self.vendor_class)


def get_model(name: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetModelResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getModel:getModel', __args__, opts=opts, typ=GetModelResult).value

    return AwaitableGetModelResult(
        hardware_model=pulumi.get(__ret__, 'hardware_model'),
        id=pulumi.get(__ret__, 'id'),
        info=pulumi.get(__ret__, 'info'),
        name=pulumi.get(__ret__, 'name'),
        vendor_class=pulumi.get(__ret__, 'vendor_class'))
def get_model_output(name: Optional[pulumi.Input[str]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetModelResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getModel:getModel', __args__, opts=opts, typ=GetModelResult)
    return __ret__.apply(lambda __response__: GetModelResult(
        hardware_model=pulumi.get(__response__, 'hardware_model'),
        id=pulumi.get(__response__, 'id'),
        info=pulumi.get(__response__, 'info'),
        name=pulumi.get(__response__, 'name'),
        vendor_class=pulumi.get(__response__, 'vendor_class')))
