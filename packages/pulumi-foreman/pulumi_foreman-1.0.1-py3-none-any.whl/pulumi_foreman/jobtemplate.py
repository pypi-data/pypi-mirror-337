# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['JobtemplateArgs', 'Jobtemplate']

@pulumi.input_type
class JobtemplateArgs:
    def __init__(__self__, *,
                 job_category: pulumi.Input[str],
                 template: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 description_format: Optional[pulumi.Input[str]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 snippet: Optional[pulumi.Input[bool]] = None,
                 template_inputs: Optional[pulumi.Input[Sequence[pulumi.Input['JobtemplateTemplateInputArgs']]]] = None):
        """
        The set of arguments for constructing a Jobtemplate resource.
        :param pulumi.Input[str] template: The template content itself
        :param pulumi.Input[str] name: The name of the job template
        """
        pulumi.set(__self__, "job_category", job_category)
        pulumi.set(__self__, "template", template)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_format is not None:
            pulumi.set(__self__, "description_format", description_format)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)
        if template_inputs is not None:
            pulumi.set(__self__, "template_inputs", template_inputs)

    @property
    @pulumi.getter(name="jobCategory")
    def job_category(self) -> pulumi.Input[str]:
        return pulumi.get(self, "job_category")

    @job_category.setter
    def job_category(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_category", value)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input[str]:
        """
        The template content itself
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input[str]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="descriptionFormat")
    def description_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description_format")

    @description_format.setter
    def description_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description_format", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the job template
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_type", value)

    @property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snippet", value)

    @property
    @pulumi.getter(name="templateInputs")
    def template_inputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobtemplateTemplateInputArgs']]]]:
        return pulumi.get(self, "template_inputs")

    @template_inputs.setter
    def template_inputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobtemplateTemplateInputArgs']]]]):
        pulumi.set(self, "template_inputs", value)


@pulumi.input_type
class _JobtemplateState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 description_format: Optional[pulumi.Input[str]] = None,
                 job_category: Optional[pulumi.Input[str]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 snippet: Optional[pulumi.Input[bool]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 template_inputs: Optional[pulumi.Input[Sequence[pulumi.Input['JobtemplateTemplateInputArgs']]]] = None):
        """
        Input properties used for looking up and filtering Jobtemplate resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY Foreman representation of a job template.
        :param pulumi.Input[str] name: The name of the job template
        :param pulumi.Input[str] template: The template content itself
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_format is not None:
            pulumi.set(__self__, "description_format", description_format)
        if job_category is not None:
            pulumi.set(__self__, "job_category", job_category)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_inputs is not None:
            pulumi.set(__self__, "template_inputs", template_inputs)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY Foreman representation of a job template.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="descriptionFormat")
    def description_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description_format")

    @description_format.setter
    def description_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description_format", value)

    @property
    @pulumi.getter(name="jobCategory")
    def job_category(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "job_category")

    @job_category.setter
    def job_category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_category", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the job template
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_type", value)

    @property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snippet", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        """
        The template content itself
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="templateInputs")
    def template_inputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobtemplateTemplateInputArgs']]]]:
        return pulumi.get(self, "template_inputs")

    @template_inputs.setter
    def template_inputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobtemplateTemplateInputArgs']]]]):
        pulumi.set(self, "template_inputs", value)


class Jobtemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 description_format: Optional[pulumi.Input[str]] = None,
                 job_category: Optional[pulumi.Input[str]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 snippet: Optional[pulumi.Input[bool]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 template_inputs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['JobtemplateTemplateInputArgs', 'JobtemplateTemplateInputArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a Jobtemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the job template
        :param pulumi.Input[str] template: The template content itself
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: JobtemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Jobtemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param JobtemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(JobtemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 description_format: Optional[pulumi.Input[str]] = None,
                 job_category: Optional[pulumi.Input[str]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 snippet: Optional[pulumi.Input[bool]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 template_inputs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['JobtemplateTemplateInputArgs', 'JobtemplateTemplateInputArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = JobtemplateArgs.__new__(JobtemplateArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["description_format"] = description_format
            if job_category is None and not opts.urn:
                raise TypeError("Missing required property 'job_category'")
            __props__.__dict__["job_category"] = job_category
            __props__.__dict__["locked"] = locked
            __props__.__dict__["name"] = name
            __props__.__dict__["provider_type"] = provider_type
            __props__.__dict__["snippet"] = snippet
            if template is None and not opts.urn:
                raise TypeError("Missing required property 'template'")
            __props__.__dict__["template"] = template
            __props__.__dict__["template_inputs"] = template_inputs
            __props__.__dict__["__meta_"] = None
        super(Jobtemplate, __self__).__init__(
            'foreman:index/jobtemplate:Jobtemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            description_format: Optional[pulumi.Input[str]] = None,
            job_category: Optional[pulumi.Input[str]] = None,
            locked: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            provider_type: Optional[pulumi.Input[str]] = None,
            snippet: Optional[pulumi.Input[bool]] = None,
            template: Optional[pulumi.Input[str]] = None,
            template_inputs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['JobtemplateTemplateInputArgs', 'JobtemplateTemplateInputArgsDict']]]]] = None) -> 'Jobtemplate':
        """
        Get an existing Jobtemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY Foreman representation of a job template.
        :param pulumi.Input[str] name: The name of the job template
        :param pulumi.Input[str] template: The template content itself
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _JobtemplateState.__new__(_JobtemplateState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["description"] = description
        __props__.__dict__["description_format"] = description_format
        __props__.__dict__["job_category"] = job_category
        __props__.__dict__["locked"] = locked
        __props__.__dict__["name"] = name
        __props__.__dict__["provider_type"] = provider_type
        __props__.__dict__["snippet"] = snippet
        __props__.__dict__["template"] = template
        __props__.__dict__["template_inputs"] = template_inputs
        return Jobtemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY Foreman representation of a job template.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="descriptionFormat")
    def description_format(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description_format")

    @property
    @pulumi.getter(name="jobCategory")
    def job_category(self) -> pulumi.Output[str]:
        return pulumi.get(self, "job_category")

    @property
    @pulumi.getter
    def locked(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the job template
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "provider_type")

    @property
    @pulumi.getter
    def snippet(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "snippet")

    @property
    @pulumi.getter
    def template(self) -> pulumi.Output[str]:
        """
        The template content itself
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="templateInputs")
    def template_inputs(self) -> pulumi.Output[Optional[Sequence['outputs.JobtemplateTemplateInput']]]:
        return pulumi.get(self, "template_inputs")

