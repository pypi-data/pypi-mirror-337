# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['TemplateinputArgs', 'Templateinput']

@pulumi.input_type
class TemplateinputArgs:
    def __init__(__self__, *,
                 default: pulumi.Input[str],
                 advanced: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fact_name: Optional[pulumi.Input[str]] = None,
                 hidden_value: Optional[pulumi.Input[bool]] = None,
                 input_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 puppet_class_name: Optional[pulumi.Input[str]] = None,
                 puppet_parameter_name: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 value_type: Optional[pulumi.Input[str]] = None,
                 variable_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Templateinput resource.
        :param pulumi.Input[str] name: The name of the template input
        """
        pulumi.set(__self__, "default", default)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fact_name is not None:
            pulumi.set(__self__, "fact_name", fact_name)
        if hidden_value is not None:
            pulumi.set(__self__, "hidden_value", hidden_value)
        if input_type is not None:
            pulumi.set(__self__, "input_type", input_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if puppet_class_name is not None:
            pulumi.set(__self__, "puppet_class_name", puppet_class_name)
        if puppet_parameter_name is not None:
            pulumi.set(__self__, "puppet_parameter_name", puppet_parameter_name)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def default(self) -> pulumi.Input[str]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: pulumi.Input[str]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="factName")
    def fact_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fact_name")

    @fact_name.setter
    def fact_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fact_name", value)

    @property
    @pulumi.getter(name="hiddenValue")
    def hidden_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden_value")

    @hidden_value.setter
    def hidden_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden_value", value)

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_type")

    @input_type.setter
    def input_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the template input
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="puppetClassName")
    def puppet_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "puppet_class_name")

    @puppet_class_name.setter
    def puppet_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puppet_class_name", value)

    @property
    @pulumi.getter(name="puppetParameterName")
    def puppet_parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "puppet_parameter_name")

    @puppet_parameter_name.setter
    def puppet_parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puppet_parameter_name", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_type", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_name", value)


@pulumi.input_type
class _TemplateinputState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 advanced: Optional[pulumi.Input[bool]] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fact_name: Optional[pulumi.Input[str]] = None,
                 hidden_value: Optional[pulumi.Input[bool]] = None,
                 input_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 puppet_class_name: Optional[pulumi.Input[str]] = None,
                 puppet_parameter_name: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None,
                 value_type: Optional[pulumi.Input[str]] = None,
                 variable_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Templateinput resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY Foreman representation of a template input.
        :param pulumi.Input[str] name: The name of the template input
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fact_name is not None:
            pulumi.set(__self__, "fact_name", fact_name)
        if hidden_value is not None:
            pulumi.set(__self__, "hidden_value", hidden_value)
        if input_type is not None:
            pulumi.set(__self__, "input_type", input_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if puppet_class_name is not None:
            pulumi.set(__self__, "puppet_class_name", puppet_class_name)
        if puppet_parameter_name is not None:
            pulumi.set(__self__, "puppet_parameter_name", puppet_parameter_name)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY Foreman representation of a template input.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="factName")
    def fact_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fact_name")

    @fact_name.setter
    def fact_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fact_name", value)

    @property
    @pulumi.getter(name="hiddenValue")
    def hidden_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden_value")

    @hidden_value.setter
    def hidden_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden_value", value)

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_type")

    @input_type.setter
    def input_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the template input
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="puppetClassName")
    def puppet_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "puppet_class_name")

    @puppet_class_name.setter
    def puppet_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puppet_class_name", value)

    @property
    @pulumi.getter(name="puppetParameterName")
    def puppet_parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "puppet_parameter_name")

    @puppet_parameter_name.setter
    def puppet_parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puppet_parameter_name", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_type", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_name", value)


class Templateinput(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advanced: Optional[pulumi.Input[bool]] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fact_name: Optional[pulumi.Input[str]] = None,
                 hidden_value: Optional[pulumi.Input[bool]] = None,
                 input_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 puppet_class_name: Optional[pulumi.Input[str]] = None,
                 puppet_parameter_name: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 value_type: Optional[pulumi.Input[str]] = None,
                 variable_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Templateinput resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the template input
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TemplateinputArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Templateinput resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TemplateinputArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TemplateinputArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advanced: Optional[pulumi.Input[bool]] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fact_name: Optional[pulumi.Input[str]] = None,
                 hidden_value: Optional[pulumi.Input[bool]] = None,
                 input_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 puppet_class_name: Optional[pulumi.Input[str]] = None,
                 puppet_parameter_name: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 value_type: Optional[pulumi.Input[str]] = None,
                 variable_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TemplateinputArgs.__new__(TemplateinputArgs)

            __props__.__dict__["advanced"] = advanced
            if default is None and not opts.urn:
                raise TypeError("Missing required property 'default'")
            __props__.__dict__["default"] = default
            __props__.__dict__["description"] = description
            __props__.__dict__["fact_name"] = fact_name
            __props__.__dict__["hidden_value"] = hidden_value
            __props__.__dict__["input_type"] = input_type
            __props__.__dict__["name"] = name
            __props__.__dict__["puppet_class_name"] = puppet_class_name
            __props__.__dict__["puppet_parameter_name"] = puppet_parameter_name
            __props__.__dict__["required"] = required
            __props__.__dict__["resource_type"] = resource_type
            __props__.__dict__["value_type"] = value_type
            __props__.__dict__["variable_name"] = variable_name
            __props__.__dict__["__meta_"] = None
            __props__.__dict__["template_id"] = None
        super(Templateinput, __self__).__init__(
            'foreman:index/templateinput:Templateinput',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            advanced: Optional[pulumi.Input[bool]] = None,
            default: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            fact_name: Optional[pulumi.Input[str]] = None,
            hidden_value: Optional[pulumi.Input[bool]] = None,
            input_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            puppet_class_name: Optional[pulumi.Input[str]] = None,
            puppet_parameter_name: Optional[pulumi.Input[str]] = None,
            required: Optional[pulumi.Input[bool]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            template_id: Optional[pulumi.Input[int]] = None,
            value_type: Optional[pulumi.Input[str]] = None,
            variable_name: Optional[pulumi.Input[str]] = None) -> 'Templateinput':
        """
        Get an existing Templateinput resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY Foreman representation of a template input.
        :param pulumi.Input[str] name: The name of the template input
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TemplateinputState.__new__(_TemplateinputState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["advanced"] = advanced
        __props__.__dict__["default"] = default
        __props__.__dict__["description"] = description
        __props__.__dict__["fact_name"] = fact_name
        __props__.__dict__["hidden_value"] = hidden_value
        __props__.__dict__["input_type"] = input_type
        __props__.__dict__["name"] = name
        __props__.__dict__["puppet_class_name"] = puppet_class_name
        __props__.__dict__["puppet_parameter_name"] = puppet_parameter_name
        __props__.__dict__["required"] = required
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["value_type"] = value_type
        __props__.__dict__["variable_name"] = variable_name
        return Templateinput(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY Foreman representation of a template input.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter
    def advanced(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter
    def default(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="factName")
    def fact_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "fact_name")

    @property
    @pulumi.getter(name="hiddenValue")
    def hidden_value(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "hidden_value")

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "input_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the template input
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="puppetClassName")
    def puppet_class_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "puppet_class_name")

    @property
    @pulumi.getter(name="puppetParameterName")
    def puppet_parameter_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "puppet_parameter_name")

    @property
    @pulumi.getter
    def required(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "variable_name")

