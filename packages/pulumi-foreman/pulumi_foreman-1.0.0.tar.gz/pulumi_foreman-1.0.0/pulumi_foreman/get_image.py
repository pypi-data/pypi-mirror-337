# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetImageResult',
    'AwaitableGetImageResult',
    'get_image',
    'get_image_output',
]

@pulumi.output_type
class GetImageResult:
    """
    A collection of values returned by getImage.
    """
    def __init__(__self__, architecture_id=None, compute_resource_id=None, id=None, name=None, operatingsystem_id=None, user_data=None, username=None, uuid=None):
        if architecture_id and not isinstance(architecture_id, int):
            raise TypeError("Expected argument 'architecture_id' to be a int")
        pulumi.set(__self__, "architecture_id", architecture_id)
        if compute_resource_id and not isinstance(compute_resource_id, int):
            raise TypeError("Expected argument 'compute_resource_id' to be a int")
        pulumi.set(__self__, "compute_resource_id", compute_resource_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operatingsystem_id and not isinstance(operatingsystem_id, int):
            raise TypeError("Expected argument 'operatingsystem_id' to be a int")
        pulumi.set(__self__, "operatingsystem_id", operatingsystem_id)
        if user_data and not isinstance(user_data, bool):
            raise TypeError("Expected argument 'user_data' to be a bool")
        pulumi.set(__self__, "user_data", user_data)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="architectureId")
    def architecture_id(self) -> int:
        return pulumi.get(self, "architecture_id")

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> int:
        return pulumi.get(self, "compute_resource_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> int:
        return pulumi.get(self, "operatingsystem_id")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> bool:
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


class AwaitableGetImageResult(GetImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageResult(
            architecture_id=self.architecture_id,
            compute_resource_id=self.compute_resource_id,
            id=self.id,
            name=self.name,
            operatingsystem_id=self.operatingsystem_id,
            user_data=self.user_data,
            username=self.username,
            uuid=self.uuid)


def get_image(compute_resource_id: Optional[int] = None,
              name: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImageResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['computeResourceId'] = compute_resource_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getImage:getImage', __args__, opts=opts, typ=GetImageResult).value

    return AwaitableGetImageResult(
        architecture_id=pulumi.get(__ret__, 'architecture_id'),
        compute_resource_id=pulumi.get(__ret__, 'compute_resource_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        operatingsystem_id=pulumi.get(__ret__, 'operatingsystem_id'),
        user_data=pulumi.get(__ret__, 'user_data'),
        username=pulumi.get(__ret__, 'username'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_image_output(compute_resource_id: Optional[pulumi.Input[int]] = None,
                     name: Optional[pulumi.Input[str]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetImageResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['computeResourceId'] = compute_resource_id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getImage:getImage', __args__, opts=opts, typ=GetImageResult)
    return __ret__.apply(lambda __response__: GetImageResult(
        architecture_id=pulumi.get(__response__, 'architecture_id'),
        compute_resource_id=pulumi.get(__response__, 'compute_resource_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        operatingsystem_id=pulumi.get(__response__, 'operatingsystem_id'),
        user_data=pulumi.get(__response__, 'user_data'),
        username=pulumi.get(__response__, 'username'),
        uuid=pulumi.get(__response__, 'uuid')))
