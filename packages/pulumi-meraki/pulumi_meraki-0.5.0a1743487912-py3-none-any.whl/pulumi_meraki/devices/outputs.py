# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ApplianceRadioSettingsFiveGhzSettings',
    'ApplianceRadioSettingsTwoFourGhzSettings',
    'ApplianceUplinksSettingsInterfaces',
    'ApplianceUplinksSettingsInterfacesWan1',
    'ApplianceUplinksSettingsInterfacesWan1Pppoe',
    'ApplianceUplinksSettingsInterfacesWan1PppoeAuthentication',
    'ApplianceUplinksSettingsInterfacesWan1Svis',
    'ApplianceUplinksSettingsInterfacesWan1SvisIpv4',
    'ApplianceUplinksSettingsInterfacesWan1SvisIpv4Nameservers',
    'ApplianceUplinksSettingsInterfacesWan1SvisIpv6',
    'ApplianceUplinksSettingsInterfacesWan1SvisIpv6Nameservers',
    'ApplianceUplinksSettingsInterfacesWan1VlanTagging',
    'ApplianceUplinksSettingsInterfacesWan2',
    'ApplianceUplinksSettingsInterfacesWan2Pppoe',
    'ApplianceUplinksSettingsInterfacesWan2PppoeAuthentication',
    'ApplianceUplinksSettingsInterfacesWan2Svis',
    'ApplianceUplinksSettingsInterfacesWan2SvisIpv4',
    'ApplianceUplinksSettingsInterfacesWan2SvisIpv4Nameservers',
    'ApplianceUplinksSettingsInterfacesWan2SvisIpv6',
    'ApplianceUplinksSettingsInterfacesWan2SvisIpv6Nameservers',
    'ApplianceUplinksSettingsInterfacesWan2VlanTagging',
    'ApplianceVmxAuthenticationTokenItem',
    'BlinkLedsItem',
    'BlinkLedsParameters',
    'CameraCustomAnalyticsParameter',
    'CameraGenerateSnapshotParameters',
    'CameraSenseAudioDetection',
    'CameraWirelessProfilesIds',
    'CellularGatewayLanFixedIpAssignment',
    'CellularGatewayLanReservedIpRange',
    'CellularGatewayPortForwardingRulesRule',
    'CellularSimsSim',
    'CellularSimsSimApn',
    'CellularSimsSimApnAuthentication',
    'CellularSimsSimFailover',
    'LiveToolsArpTableCallback',
    'LiveToolsArpTableCallbackHttpServer',
    'LiveToolsArpTableCallbackPayloadTemplate',
    'LiveToolsArpTableEntry',
    'LiveToolsArpTableRequest',
    'LiveToolsCableCallback',
    'LiveToolsCableCallbackHttpServer',
    'LiveToolsCableCallbackPayloadTemplate',
    'LiveToolsCableRequest',
    'LiveToolsCableResult',
    'LiveToolsCableResultPair',
    'LiveToolsPingDeviceItem',
    'LiveToolsPingDeviceItemCallback',
    'LiveToolsPingDeviceItemRequest',
    'LiveToolsPingDeviceParameters',
    'LiveToolsPingDeviceParametersCallback',
    'LiveToolsPingDeviceParametersCallbackHttpServer',
    'LiveToolsPingDeviceParametersCallbackPayloadTemplate',
    'LiveToolsPingItem',
    'LiveToolsPingItemCallback',
    'LiveToolsPingItemRequest',
    'LiveToolsPingParameters',
    'LiveToolsPingParametersCallback',
    'LiveToolsPingParametersCallbackHttpServer',
    'LiveToolsPingParametersCallbackPayloadTemplate',
    'LiveToolsThroughputTestCallback',
    'LiveToolsThroughputTestCallbackHttpServer',
    'LiveToolsThroughputTestCallbackPayloadTemplate',
    'LiveToolsThroughputTestRequest',
    'LiveToolsThroughputTestResult',
    'LiveToolsThroughputTestResultSpeeds',
    'LiveToolsWakeOnLanCallback',
    'LiveToolsWakeOnLanCallbackHttpServer',
    'LiveToolsWakeOnLanCallbackPayloadTemplate',
    'LiveToolsWakeOnLanRequest',
    'ManagementInterfaceDdnsHostnames',
    'ManagementInterfaceWan1',
    'ManagementInterfaceWan2',
    'SensorRelationshipsLivestream',
    'SensorRelationshipsLivestreamRelatedDevice',
    'SensorRelationshipsLivestreamRequest',
    'SensorRelationshipsLivestreamRequestRelatedDevice',
    'SwitchPortsCycleItem',
    'SwitchPortsCycleParameters',
    'SwitchPortsMirror',
    'SwitchPortsModule',
    'SwitchPortsProfile',
    'SwitchRoutingInterfacesDhcpDhcpOption',
    'SwitchRoutingInterfacesDhcpFixedIpAssignment',
    'SwitchRoutingInterfacesDhcpReservedIpRange',
    'SwitchRoutingInterfacesIpv6',
    'SwitchRoutingInterfacesOspfSettings',
    'SwitchRoutingInterfacesOspfV3',
    'WirelessAlternateManagementInterfaceIpv6Item',
    'WirelessAlternateManagementInterfaceIpv6ItemAddress',
    'WirelessAlternateManagementInterfaceIpv6ItemAddressNameservers',
    'WirelessAlternateManagementInterfaceIpv6Parameters',
    'WirelessAlternateManagementInterfaceIpv6ParametersAddress',
    'WirelessAlternateManagementInterfaceIpv6ParametersAddressNameservers',
    'WirelessRadioSettingsFiveGhzSettings',
    'WirelessRadioSettingsTwoFourGhzSettings',
    'BaseDetail',
    'GetAppliancePerformanceItemResult',
    'GetApplianceRadioSettingsItemResult',
    'GetApplianceRadioSettingsItemFiveGhzSettingsResult',
    'GetApplianceRadioSettingsItemTwoFourGhzSettingsResult',
    'GetApplianceUplinksSettingsItemResult',
    'GetApplianceUplinksSettingsItemInterfacesResult',
    'GetApplianceUplinksSettingsItemInterfacesWan1Result',
    'GetApplianceUplinksSettingsItemInterfacesWan1PppoeResult',
    'GetApplianceUplinksSettingsItemInterfacesWan1PppoeAuthenticationResult',
    'GetApplianceUplinksSettingsItemInterfacesWan1SvisResult',
    'GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4Result',
    'GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4NameserversResult',
    'GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv6Result',
    'GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv6NameserversResult',
    'GetApplianceUplinksSettingsItemInterfacesWan1VlanTaggingResult',
    'GetApplianceUplinksSettingsItemInterfacesWan2Result',
    'GetApplianceUplinksSettingsItemInterfacesWan2PppoeResult',
    'GetApplianceUplinksSettingsItemInterfacesWan2PppoeAuthenticationResult',
    'GetApplianceUplinksSettingsItemInterfacesWan2SvisResult',
    'GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv4Result',
    'GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv4NameserversResult',
    'GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv6Result',
    'GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv6NameserversResult',
    'GetApplianceUplinksSettingsItemInterfacesWan2VlanTaggingResult',
    'GetCameraAnalyticsLiveItemResult',
    'GetCameraAnalyticsLiveItemZonesResult',
    'GetCameraAnalyticsLiveItemZonesStatus0Result',
    'GetCameraCustomAnalyticsItemResult',
    'GetCameraCustomAnalyticsItemParameterResult',
    'GetCameraQualityAndRetentionItemResult',
    'GetCameraSenseItemResult',
    'GetCameraSenseItemAudioDetectionResult',
    'GetCameraVideoLinkItemResult',
    'GetCameraVideoSettingsItemResult',
    'GetCameraWirelessProfilesItemResult',
    'GetCameraWirelessProfilesItemIdsResult',
    'GetCellularGatewayLanItemResult',
    'GetCellularGatewayLanItemFixedIpAssignmentResult',
    'GetCellularGatewayLanItemReservedIpRangeResult',
    'GetCellularGatewayPortForwardingRulesItemResult',
    'GetCellularGatewayPortForwardingRulesItemRuleResult',
    'GetCellularSimsItemResult',
    'GetCellularSimsItemSimResult',
    'GetCellularSimsItemSimApnResult',
    'GetCellularSimsItemSimApnAuthenticationResult',
    'GetLiveToolsArpTableItemResult',
    'GetLiveToolsArpTableItemEntryResult',
    'GetLiveToolsArpTableItemRequestResult',
    'GetLiveToolsCableTestItemResult',
    'GetLiveToolsCableTestItemRequestResult',
    'GetLiveToolsCableTestItemResultResult',
    'GetLiveToolsCableTestItemResultPairResult',
    'GetLiveToolsPingDeviceItemResult',
    'GetLiveToolsPingDeviceItemCallbackResult',
    'GetLiveToolsPingDeviceItemRequestResult',
    'GetLiveToolsPingDeviceItemResultsResult',
    'GetLiveToolsPingDeviceItemResultsLatenciesResult',
    'GetLiveToolsPingDeviceItemResultsLossResult',
    'GetLiveToolsPingDeviceItemResultsReplyResult',
    'GetLiveToolsPingItemResult',
    'GetLiveToolsPingItemRequestResult',
    'GetLiveToolsPingItemResultsResult',
    'GetLiveToolsPingItemResultsLatenciesResult',
    'GetLiveToolsPingItemResultsLossResult',
    'GetLiveToolsPingItemResultsReplyResult',
    'GetLiveToolsThroughputTestItemResult',
    'GetLiveToolsThroughputTestItemRequestResult',
    'GetLiveToolsThroughputTestItemResultResult',
    'GetLiveToolsThroughputTestItemResultSpeedsResult',
    'GetLiveToolsWakeOnLanItemResult',
    'GetLiveToolsWakeOnLanItemRequestResult',
    'GetLldpCdpItemResult',
    'GetLldpCdpItemPortsResult',
    'GetLldpCdpItemPortsStatus12Result',
    'GetLldpCdpItemPortsStatus12CdpResult',
    'GetLldpCdpItemPortsStatus12LldpResult',
    'GetLldpCdpItemPortsStatus8Result',
    'GetLldpCdpItemPortsStatus8CdpResult',
    'GetManagementInterfaceItemResult',
    'GetManagementInterfaceItemDdnsHostnamesResult',
    'GetManagementInterfaceItemWan1Result',
    'GetManagementInterfaceItemWan2Result',
    'GetSensorRelationshipsItemResult',
    'GetSensorRelationshipsItemLivestreamResult',
    'GetSensorRelationshipsItemLivestreamRelatedDeviceResult',
    'GetSwitchPortsItemResult',
    'GetSwitchPortsItemMirrorResult',
    'GetSwitchPortsItemModuleResult',
    'GetSwitchPortsItemProfileResult',
    'GetSwitchPortsStatusesItemResult',
    'GetSwitchPortsStatusesItemCdpResult',
    'GetSwitchPortsStatusesItemLldpResult',
    'GetSwitchPortsStatusesItemSecurePortResult',
    'GetSwitchPortsStatusesItemSecurePortConfigOverridesResult',
    'GetSwitchPortsStatusesItemSpanningTreeResult',
    'GetSwitchPortsStatusesItemTrafficInKbpsResult',
    'GetSwitchPortsStatusesItemUsageInKbResult',
    'GetSwitchRoutingInterfacesDhcpItemResult',
    'GetSwitchRoutingInterfacesDhcpItemDhcpOptionResult',
    'GetSwitchRoutingInterfacesDhcpItemFixedIpAssignmentResult',
    'GetSwitchRoutingInterfacesDhcpItemReservedIpRangeResult',
    'GetSwitchRoutingInterfacesItemResult',
    'GetSwitchRoutingInterfacesItemIpv6Result',
    'GetSwitchRoutingInterfacesItemOspfSettingsResult',
    'GetSwitchRoutingInterfacesItemOspfV3Result',
    'GetSwitchRoutingStaticRoutesItemResult',
    'GetSwitchWarmSpareItemResult',
    'GetWirelessBluetoothSettingsItemResult',
    'GetWirelessConnectionStatsItemResult',
    'GetWirelessConnectionStatsItemConnectionStatsResult',
    'GetWirelessLatencyStatsItemResult',
    'GetWirelessLatencyStatsItemLatencyStatsResult',
    'GetWirelessLatencyStatsItemLatencyStatsBackgroundTrafficResult',
    'GetWirelessLatencyStatsItemLatencyStatsBackgroundTrafficRawDistributionResult',
    'GetWirelessRadioSettingsItemResult',
    'GetWirelessRadioSettingsItemFiveGhzSettingsResult',
    'GetWirelessRadioSettingsItemTwoFourGhzSettingsResult',
    'GetWirelessStatusItemResult',
    'GetWirelessStatusItemBasicServiceSetResult',
]

@pulumi.output_type
class ApplianceRadioSettingsFiveGhzSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelWidth":
            suggest = "channel_width"
        elif key == "targetPower":
            suggest = "target_power"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceRadioSettingsFiveGhzSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceRadioSettingsFiveGhzSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceRadioSettingsFiveGhzSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: Optional[int] = None,
                 channel_width: Optional[int] = None,
                 target_power: Optional[int] = None):
        """
        :param int channel: Manual channel for 5 GHz
        :param int channel_width: Manual channel width for 5 GHz
        :param int target_power: Manual target power for 5 GHz
        """
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channel_width is not None:
            pulumi.set(__self__, "channel_width", channel_width)
        if target_power is not None:
            pulumi.set(__self__, "target_power", target_power)

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        Manual channel for 5 GHz
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="channelWidth")
    def channel_width(self) -> Optional[int]:
        """
        Manual channel width for 5 GHz
        """
        return pulumi.get(self, "channel_width")

    @property
    @pulumi.getter(name="targetPower")
    def target_power(self) -> Optional[int]:
        """
        Manual target power for 5 GHz
        """
        return pulumi.get(self, "target_power")


@pulumi.output_type
class ApplianceRadioSettingsTwoFourGhzSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetPower":
            suggest = "target_power"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceRadioSettingsTwoFourGhzSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceRadioSettingsTwoFourGhzSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceRadioSettingsTwoFourGhzSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: Optional[int] = None,
                 target_power: Optional[int] = None):
        """
        :param int channel: Manual channel for 2.4 GHz
        :param int target_power: Manual target power for 2.4 GHz
        """
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if target_power is not None:
            pulumi.set(__self__, "target_power", target_power)

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        Manual channel for 2.4 GHz
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="targetPower")
    def target_power(self) -> Optional[int]:
        """
        Manual target power for 2.4 GHz
        """
        return pulumi.get(self, "target_power")


@pulumi.output_type
class ApplianceUplinksSettingsInterfaces(dict):
    def __init__(__self__, *,
                 wan1: Optional['outputs.ApplianceUplinksSettingsInterfacesWan1'] = None,
                 wan2: Optional['outputs.ApplianceUplinksSettingsInterfacesWan2'] = None):
        """
        :param 'ApplianceUplinksSettingsInterfacesWan1Args' wan1: WAN 1 settings.
        :param 'ApplianceUplinksSettingsInterfacesWan2Args' wan2: WAN 2 settings.
        """
        if wan1 is not None:
            pulumi.set(__self__, "wan1", wan1)
        if wan2 is not None:
            pulumi.set(__self__, "wan2", wan2)

    @property
    @pulumi.getter
    def wan1(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan1']:
        """
        WAN 1 settings.
        """
        return pulumi.get(self, "wan1")

    @property
    @pulumi.getter
    def wan2(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan2']:
        """
        WAN 2 settings.
        """
        return pulumi.get(self, "wan2")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanTagging":
            suggest = "vlan_tagging"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceUplinksSettingsInterfacesWan1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceUplinksSettingsInterfacesWan1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceUplinksSettingsInterfacesWan1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 pppoe: Optional['outputs.ApplianceUplinksSettingsInterfacesWan1Pppoe'] = None,
                 svis: Optional['outputs.ApplianceUplinksSettingsInterfacesWan1Svis'] = None,
                 vlan_tagging: Optional['outputs.ApplianceUplinksSettingsInterfacesWan1VlanTagging'] = None):
        """
        :param bool enabled: Enable or disable the interface.
        :param 'ApplianceUplinksSettingsInterfacesWan1PppoeArgs' pppoe: Configuration options for PPPoE.
        :param 'ApplianceUplinksSettingsInterfacesWan1SvisArgs' svis: SVI settings by protocol.
        :param 'ApplianceUplinksSettingsInterfacesWan1VlanTaggingArgs' vlan_tagging: VLAN tagging settings.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if pppoe is not None:
            pulumi.set(__self__, "pppoe", pppoe)
        if svis is not None:
            pulumi.set(__self__, "svis", svis)
        if vlan_tagging is not None:
            pulumi.set(__self__, "vlan_tagging", vlan_tagging)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable or disable the interface.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def pppoe(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan1Pppoe']:
        """
        Configuration options for PPPoE.
        """
        return pulumi.get(self, "pppoe")

    @property
    @pulumi.getter
    def svis(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan1Svis']:
        """
        SVI settings by protocol.
        """
        return pulumi.get(self, "svis")

    @property
    @pulumi.getter(name="vlanTagging")
    def vlan_tagging(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan1VlanTagging']:
        """
        VLAN tagging settings.
        """
        return pulumi.get(self, "vlan_tagging")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan1Pppoe(dict):
    def __init__(__self__, *,
                 authentication: Optional['outputs.ApplianceUplinksSettingsInterfacesWan1PppoeAuthentication'] = None,
                 enabled: Optional[bool] = None):
        """
        :param 'ApplianceUplinksSettingsInterfacesWan1PppoeAuthenticationArgs' authentication: Settings for PPPoE Authentication.
        :param bool enabled: Whether PPPoE is enabled.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan1PppoeAuthentication']:
        """
        Settings for PPPoE Authentication.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether PPPoE is enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan1PppoeAuthentication(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param bool enabled: Whether PPPoE authentication is enabled.
        :param str password: Password for PPPoE authentication. This parameter is not returned.
        :param str username: Username for PPPoE authentication.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether PPPoE authentication is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password for PPPoE authentication. This parameter is not returned.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for PPPoE authentication.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan1Svis(dict):
    def __init__(__self__, *,
                 ipv4: Optional['outputs.ApplianceUplinksSettingsInterfacesWan1SvisIpv4'] = None,
                 ipv6: Optional['outputs.ApplianceUplinksSettingsInterfacesWan1SvisIpv6'] = None):
        """
        :param 'ApplianceUplinksSettingsInterfacesWan1SvisIpv4Args' ipv4: IPv4 settings for static/dynamic mode.
        :param 'ApplianceUplinksSettingsInterfacesWan1SvisIpv6Args' ipv6: IPv6 settings for static/dynamic mode.
        """
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan1SvisIpv4']:
        """
        IPv4 settings for static/dynamic mode.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan1SvisIpv6']:
        """
        IPv6 settings for static/dynamic mode.
        """
        return pulumi.get(self, "ipv6")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan1SvisIpv4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignmentMode":
            suggest = "assignment_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceUplinksSettingsInterfacesWan1SvisIpv4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceUplinksSettingsInterfacesWan1SvisIpv4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceUplinksSettingsInterfacesWan1SvisIpv4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 assignment_mode: Optional[str] = None,
                 gateway: Optional[str] = None,
                 nameservers: Optional['outputs.ApplianceUplinksSettingsInterfacesWan1SvisIpv4Nameservers'] = None):
        """
        :param str address: IP address and subnet mask when in static mode.
        :param str assignment_mode: The assignment mode for this SVI. Applies only when PPPoE is disabled.
        :param str gateway: Gateway IP address when in static mode.
        :param 'ApplianceUplinksSettingsInterfacesWan1SvisIpv4NameserversArgs' nameservers: The nameserver settings for this SVI.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if assignment_mode is not None:
            pulumi.set(__self__, "assignment_mode", assignment_mode)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        IP address and subnet mask when in static mode.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="assignmentMode")
    def assignment_mode(self) -> Optional[str]:
        """
        The assignment mode for this SVI. Applies only when PPPoE is disabled.
        """
        return pulumi.get(self, "assignment_mode")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        Gateway IP address when in static mode.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def nameservers(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan1SvisIpv4Nameservers']:
        """
        The nameserver settings for this SVI.
        """
        return pulumi.get(self, "nameservers")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan1SvisIpv4Nameservers(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] addresses: Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        """
        Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        return pulumi.get(self, "addresses")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan1SvisIpv6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignmentMode":
            suggest = "assignment_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceUplinksSettingsInterfacesWan1SvisIpv6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceUplinksSettingsInterfacesWan1SvisIpv6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceUplinksSettingsInterfacesWan1SvisIpv6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 assignment_mode: Optional[str] = None,
                 gateway: Optional[str] = None,
                 nameservers: Optional['outputs.ApplianceUplinksSettingsInterfacesWan1SvisIpv6Nameservers'] = None):
        """
        :param str address: Static address that will override the one(s) received by SLAAC.
        :param str assignment_mode: The assignment mode for this SVI. Applies only when PPPoE is disabled.
        :param str gateway: Static gateway that will override the one received by autoconf.
        :param 'ApplianceUplinksSettingsInterfacesWan1SvisIpv6NameserversArgs' nameservers: The nameserver settings for this SVI.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if assignment_mode is not None:
            pulumi.set(__self__, "assignment_mode", assignment_mode)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Static address that will override the one(s) received by SLAAC.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="assignmentMode")
    def assignment_mode(self) -> Optional[str]:
        """
        The assignment mode for this SVI. Applies only when PPPoE is disabled.
        """
        return pulumi.get(self, "assignment_mode")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        Static gateway that will override the one received by autoconf.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def nameservers(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan1SvisIpv6Nameservers']:
        """
        The nameserver settings for this SVI.
        """
        return pulumi.get(self, "nameservers")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan1SvisIpv6Nameservers(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] addresses: Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        """
        Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        return pulumi.get(self, "addresses")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan1VlanTagging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceUplinksSettingsInterfacesWan1VlanTagging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceUplinksSettingsInterfacesWan1VlanTagging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceUplinksSettingsInterfacesWan1VlanTagging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 vlan_id: Optional[int] = None):
        """
        :param bool enabled: Whether VLAN tagging is enabled.
        :param int vlan_id: The ID of the VLAN to use for VLAN tagging.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether VLAN tagging is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        The ID of the VLAN to use for VLAN tagging.
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanTagging":
            suggest = "vlan_tagging"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceUplinksSettingsInterfacesWan2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceUplinksSettingsInterfacesWan2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceUplinksSettingsInterfacesWan2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 pppoe: Optional['outputs.ApplianceUplinksSettingsInterfacesWan2Pppoe'] = None,
                 svis: Optional['outputs.ApplianceUplinksSettingsInterfacesWan2Svis'] = None,
                 vlan_tagging: Optional['outputs.ApplianceUplinksSettingsInterfacesWan2VlanTagging'] = None):
        """
        :param bool enabled: Enable or disable the interface.
        :param 'ApplianceUplinksSettingsInterfacesWan2PppoeArgs' pppoe: Configuration options for PPPoE.
        :param 'ApplianceUplinksSettingsInterfacesWan2SvisArgs' svis: SVI settings by protocol.
        :param 'ApplianceUplinksSettingsInterfacesWan2VlanTaggingArgs' vlan_tagging: VLAN tagging settings.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if pppoe is not None:
            pulumi.set(__self__, "pppoe", pppoe)
        if svis is not None:
            pulumi.set(__self__, "svis", svis)
        if vlan_tagging is not None:
            pulumi.set(__self__, "vlan_tagging", vlan_tagging)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable or disable the interface.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def pppoe(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan2Pppoe']:
        """
        Configuration options for PPPoE.
        """
        return pulumi.get(self, "pppoe")

    @property
    @pulumi.getter
    def svis(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan2Svis']:
        """
        SVI settings by protocol.
        """
        return pulumi.get(self, "svis")

    @property
    @pulumi.getter(name="vlanTagging")
    def vlan_tagging(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan2VlanTagging']:
        """
        VLAN tagging settings.
        """
        return pulumi.get(self, "vlan_tagging")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan2Pppoe(dict):
    def __init__(__self__, *,
                 authentication: Optional['outputs.ApplianceUplinksSettingsInterfacesWan2PppoeAuthentication'] = None,
                 enabled: Optional[bool] = None):
        """
        :param 'ApplianceUplinksSettingsInterfacesWan2PppoeAuthenticationArgs' authentication: Settings for PPPoE Authentication.
        :param bool enabled: Whether PPPoE is enabled.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan2PppoeAuthentication']:
        """
        Settings for PPPoE Authentication.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether PPPoE is enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan2PppoeAuthentication(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param bool enabled: Whether PPPoE authentication is enabled.
        :param str password: Password for PPPoE authentication. This parameter is not returned.
        :param str username: Username for PPPoE authentication.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether PPPoE authentication is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password for PPPoE authentication. This parameter is not returned.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username for PPPoE authentication.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan2Svis(dict):
    def __init__(__self__, *,
                 ipv4: Optional['outputs.ApplianceUplinksSettingsInterfacesWan2SvisIpv4'] = None,
                 ipv6: Optional['outputs.ApplianceUplinksSettingsInterfacesWan2SvisIpv6'] = None):
        """
        :param 'ApplianceUplinksSettingsInterfacesWan2SvisIpv4Args' ipv4: IPv4 settings for static/dynamic mode.
        :param 'ApplianceUplinksSettingsInterfacesWan2SvisIpv6Args' ipv6: IPv6 settings for static/dynamic mode.
        """
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan2SvisIpv4']:
        """
        IPv4 settings for static/dynamic mode.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan2SvisIpv6']:
        """
        IPv6 settings for static/dynamic mode.
        """
        return pulumi.get(self, "ipv6")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan2SvisIpv4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignmentMode":
            suggest = "assignment_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceUplinksSettingsInterfacesWan2SvisIpv4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceUplinksSettingsInterfacesWan2SvisIpv4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceUplinksSettingsInterfacesWan2SvisIpv4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 assignment_mode: Optional[str] = None,
                 gateway: Optional[str] = None,
                 nameservers: Optional['outputs.ApplianceUplinksSettingsInterfacesWan2SvisIpv4Nameservers'] = None):
        """
        :param str address: IP address and subnet mask when in static mode.
        :param str assignment_mode: The assignment mode for this SVI. Applies only when PPPoE is disabled.
        :param str gateway: Gateway IP address when in static mode.
        :param 'ApplianceUplinksSettingsInterfacesWan2SvisIpv4NameserversArgs' nameservers: The nameserver settings for this SVI.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if assignment_mode is not None:
            pulumi.set(__self__, "assignment_mode", assignment_mode)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        IP address and subnet mask when in static mode.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="assignmentMode")
    def assignment_mode(self) -> Optional[str]:
        """
        The assignment mode for this SVI. Applies only when PPPoE is disabled.
        """
        return pulumi.get(self, "assignment_mode")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        Gateway IP address when in static mode.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def nameservers(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan2SvisIpv4Nameservers']:
        """
        The nameserver settings for this SVI.
        """
        return pulumi.get(self, "nameservers")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan2SvisIpv4Nameservers(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] addresses: Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        """
        Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        return pulumi.get(self, "addresses")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan2SvisIpv6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignmentMode":
            suggest = "assignment_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceUplinksSettingsInterfacesWan2SvisIpv6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceUplinksSettingsInterfacesWan2SvisIpv6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceUplinksSettingsInterfacesWan2SvisIpv6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 assignment_mode: Optional[str] = None,
                 gateway: Optional[str] = None,
                 nameservers: Optional['outputs.ApplianceUplinksSettingsInterfacesWan2SvisIpv6Nameservers'] = None):
        """
        :param str address: Static address that will override the one(s) received by SLAAC.
        :param str assignment_mode: The assignment mode for this SVI. Applies only when PPPoE is disabled.
        :param str gateway: Static gateway that will override the one received by autoconf.
        :param 'ApplianceUplinksSettingsInterfacesWan2SvisIpv6NameserversArgs' nameservers: The nameserver settings for this SVI.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if assignment_mode is not None:
            pulumi.set(__self__, "assignment_mode", assignment_mode)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Static address that will override the one(s) received by SLAAC.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="assignmentMode")
    def assignment_mode(self) -> Optional[str]:
        """
        The assignment mode for this SVI. Applies only when PPPoE is disabled.
        """
        return pulumi.get(self, "assignment_mode")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        Static gateway that will override the one received by autoconf.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def nameservers(self) -> Optional['outputs.ApplianceUplinksSettingsInterfacesWan2SvisIpv6Nameservers']:
        """
        The nameserver settings for this SVI.
        """
        return pulumi.get(self, "nameservers")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan2SvisIpv6Nameservers(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] addresses: Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        """
        Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        return pulumi.get(self, "addresses")


@pulumi.output_type
class ApplianceUplinksSettingsInterfacesWan2VlanTagging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceUplinksSettingsInterfacesWan2VlanTagging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceUplinksSettingsInterfacesWan2VlanTagging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceUplinksSettingsInterfacesWan2VlanTagging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 vlan_id: Optional[int] = None):
        """
        :param bool enabled: Whether VLAN tagging is enabled.
        :param int vlan_id: The ID of the VLAN to use for VLAN tagging.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether VLAN tagging is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        The ID of the VLAN to use for VLAN tagging.
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class ApplianceVmxAuthenticationTokenItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiresAt":
            suggest = "expires_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceVmxAuthenticationTokenItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceVmxAuthenticationTokenItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceVmxAuthenticationTokenItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expires_at: Optional[str] = None,
                 token: Optional[str] = None):
        """
        :param str expires_at: The expiration time for the token, in ISO 8601 format
        :param str token: The newly generated authentication token for the vMX instance
        """
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[str]:
        """
        The expiration time for the token, in ISO 8601 format
        """
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        The newly generated authentication token for the vMX instance
        """
        return pulumi.get(self, "token")


@pulumi.output_type
class BlinkLedsItem(dict):
    def __init__(__self__, *,
                 duration: Optional[int] = None,
                 duty: Optional[int] = None,
                 period: Optional[int] = None):
        """
        :param int duration: The duration in seconds. Will be between 5 and 120. Default is 20 seconds
        :param int duty: The duty cycle as the percent active. Will be between 10 and 90. Default is 50
        :param int period: The period in milliseconds. Will be between 100 and 1000. Default is 160 milliseconds
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if duty is not None:
            pulumi.set(__self__, "duty", duty)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter
    def duration(self) -> Optional[int]:
        """
        The duration in seconds. Will be between 5 and 120. Default is 20 seconds
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def duty(self) -> Optional[int]:
        """
        The duty cycle as the percent active. Will be between 10 and 90. Default is 50
        """
        return pulumi.get(self, "duty")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        """
        The period in milliseconds. Will be between 100 and 1000. Default is 160 milliseconds
        """
        return pulumi.get(self, "period")


@pulumi.output_type
class BlinkLedsParameters(dict):
    def __init__(__self__, *,
                 duration: Optional[int] = None,
                 duty: Optional[int] = None,
                 period: Optional[int] = None):
        """
        :param int duration: The duration in seconds. Must be between 5 and 120. Default is 20 seconds
        :param int duty: The duty cycle as the percent active. Must be between 10 and 90. Default is 50.
        :param int period: The period in milliseconds. Must be between 100 and 1000. Default is 160 milliseconds
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if duty is not None:
            pulumi.set(__self__, "duty", duty)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter
    def duration(self) -> Optional[int]:
        """
        The duration in seconds. Must be between 5 and 120. Default is 20 seconds
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def duty(self) -> Optional[int]:
        """
        The duty cycle as the percent active. Must be between 10 and 90. Default is 50.
        """
        return pulumi.get(self, "duty")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        """
        The period in milliseconds. Must be between 100 and 1000. Default is 160 milliseconds
        """
        return pulumi.get(self, "period")


@pulumi.output_type
class CameraCustomAnalyticsParameter(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[float] = None):
        """
        :param str name: Name of the parameter
        :param float value: Value of the parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[float]:
        """
        Value of the parameter
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CameraGenerateSnapshotParameters(dict):
    def __init__(__self__, *,
                 fullframe: Optional[bool] = None,
                 timestamp: Optional[str] = None):
        """
        :param bool fullframe: [optional] If set to "true" the snapshot will be taken at full sensor resolution. This will error if used with timestamp.
        :param str timestamp: [optional] The snapshot will be taken from this time on the camera. The timestamp is expected to be in ISO 8601 format. If no timestamp is specified, we will assume current time.
        """
        if fullframe is not None:
            pulumi.set(__self__, "fullframe", fullframe)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def fullframe(self) -> Optional[bool]:
        """
        [optional] If set to "true" the snapshot will be taken at full sensor resolution. This will error if used with timestamp.
        """
        return pulumi.get(self, "fullframe")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        """
        [optional] The snapshot will be taken from this time on the camera. The timestamp is expected to be in ISO 8601 format. If no timestamp is specified, we will assume current time.
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class CameraSenseAudioDetection(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Boolean indicating if audio detection is enabled(true) or disabled(false) on the camera
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Boolean indicating if audio detection is enabled(true) or disabled(false) on the camera
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class CameraWirelessProfilesIds(dict):
    def __init__(__self__, *,
                 backup: Optional[str] = None,
                 primary: Optional[str] = None,
                 secondary: Optional[str] = None):
        """
        :param str backup: The id of the backup wireless profile
        :param str primary: The id of the primary wireless profile
        :param str secondary: The id of the secondary wireless profile
        """
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)

    @property
    @pulumi.getter
    def backup(self) -> Optional[str]:
        """
        The id of the backup wireless profile
        """
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter
    def primary(self) -> Optional[str]:
        """
        The id of the primary wireless profile
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def secondary(self) -> Optional[str]:
        """
        The id of the secondary wireless profile
        """
        return pulumi.get(self, "secondary")


@pulumi.output_type
class CellularGatewayLanFixedIpAssignment(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 mac: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str ip: The IP address you want to assign to a specific server or device
        :param str mac: The MAC address of the server or device that hosts the internal resource that you wish to receive the specified IP address
        :param str name: A descriptive name of the assignment
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        The IP address you want to assign to a specific server or device
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        """
        The MAC address of the server or device that hosts the internal resource that you wish to receive the specified IP address
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A descriptive name of the assignment
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CellularGatewayLanReservedIpRange(dict):
    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        """
        :param str comment: Comment explaining the reserved IP range
        :param str end: Ending IP included in the reserved range of IPs
        :param str start: Starting IP included in the reserved range of IPs
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Comment explaining the reserved IP range
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        """
        Ending IP included in the reserved range of IPs
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        """
        Starting IP included in the reserved range of IPs
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class CellularGatewayPortForwardingRulesRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedIps":
            suggest = "allowed_ips"
        elif key == "lanIp":
            suggest = "lan_ip"
        elif key == "localPort":
            suggest = "local_port"
        elif key == "publicPort":
            suggest = "public_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CellularGatewayPortForwardingRulesRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CellularGatewayPortForwardingRulesRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CellularGatewayPortForwardingRulesRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access: Optional[str] = None,
                 allowed_ips: Optional[Sequence[str]] = None,
                 lan_ip: Optional[str] = None,
                 local_port: Optional[str] = None,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None,
                 public_port: Optional[str] = None,
                 uplink: Optional[str] = None):
        """
        :param str access: *any* or *restricted*. Specify the right to make inbound connections on the specified ports or port ranges. If *restricted*, a list of allowed IPs is mandatory.
        :param Sequence[str] allowed_ips: An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges.
        :param str lan_ip: The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
        :param str local_port: A port or port ranges that will receive the forwarded traffic from the WAN
        :param str name: A descriptive name for the rule
        :param str protocol: TCP or UDP
        :param str public_port: A port or port ranges that will be forwarded to the host on the LAN
        """
        if access is not None:
            pulumi.set(__self__, "access", access)
        if allowed_ips is not None:
            pulumi.set(__self__, "allowed_ips", allowed_ips)
        if lan_ip is not None:
            pulumi.set(__self__, "lan_ip", lan_ip)
        if local_port is not None:
            pulumi.set(__self__, "local_port", local_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if public_port is not None:
            pulumi.set(__self__, "public_port", public_port)
        if uplink is not None:
            pulumi.set(__self__, "uplink", uplink)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        """
        *any* or *restricted*. Specify the right to make inbound connections on the specified ports or port ranges. If *restricted*, a list of allowed IPs is mandatory.
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="allowedIps")
    def allowed_ips(self) -> Optional[Sequence[str]]:
        """
        An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges.
        """
        return pulumi.get(self, "allowed_ips")

    @property
    @pulumi.getter(name="lanIp")
    def lan_ip(self) -> Optional[str]:
        """
        The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
        """
        return pulumi.get(self, "lan_ip")

    @property
    @pulumi.getter(name="localPort")
    def local_port(self) -> Optional[str]:
        """
        A port or port ranges that will receive the forwarded traffic from the WAN
        """
        return pulumi.get(self, "local_port")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A descriptive name for the rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        TCP or UDP
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="publicPort")
    def public_port(self) -> Optional[str]:
        """
        A port or port ranges that will be forwarded to the host on the LAN
        """
        return pulumi.get(self, "public_port")

    @property
    @pulumi.getter
    def uplink(self) -> Optional[str]:
        return pulumi.get(self, "uplink")


@pulumi.output_type
class CellularSimsSim(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isPrimary":
            suggest = "is_primary"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CellularSimsSim. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CellularSimsSim.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CellularSimsSim.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apns: Optional[Sequence['outputs.CellularSimsSimApn']] = None,
                 is_primary: Optional[bool] = None,
                 slot: Optional[str] = None):
        """
        :param Sequence['CellularSimsSimApnArgs'] apns: APN configurations. If empty, the default APN will be used.
        :param bool is_primary: If true, this SIM is used for boot. Must be true on single-sim devices.
        :param str slot: SIM slot being configured. Must be 'sim1' on single-sim devices.
        """
        if apns is not None:
            pulumi.set(__self__, "apns", apns)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)

    @property
    @pulumi.getter
    def apns(self) -> Optional[Sequence['outputs.CellularSimsSimApn']]:
        """
        APN configurations. If empty, the default APN will be used.
        """
        return pulumi.get(self, "apns")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[bool]:
        """
        If true, this SIM is used for boot. Must be true on single-sim devices.
        """
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        """
        SIM slot being configured. Must be 'sim1' on single-sim devices.
        """
        return pulumi.get(self, "slot")


@pulumi.output_type
class CellularSimsSimApn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedIpTypes":
            suggest = "allowed_ip_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CellularSimsSimApn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CellularSimsSimApn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CellularSimsSimApn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_ip_types: Optional[Sequence[str]] = None,
                 authentication: Optional['outputs.CellularSimsSimApnAuthentication'] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[str] allowed_ip_types: IP versions to support (permitted values include 'ipv4', 'ipv6').
        :param 'CellularSimsSimApnAuthenticationArgs' authentication: APN authentication configurations.
        :param str name: APN name.
        """
        if allowed_ip_types is not None:
            pulumi.set(__self__, "allowed_ip_types", allowed_ip_types)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="allowedIpTypes")
    def allowed_ip_types(self) -> Optional[Sequence[str]]:
        """
        IP versions to support (permitted values include 'ipv4', 'ipv6').
        """
        return pulumi.get(self, "allowed_ip_types")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.CellularSimsSimApnAuthentication']:
        """
        APN authentication configurations.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        APN name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CellularSimsSimApnAuthentication(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 type: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param str password: APN password, if type is set (if APN password is not supplied, the password is left unchanged).
        :param str type: APN auth type.
        :param str username: APN username, if type is set.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        APN password, if type is set (if APN password is not supplied, the password is left unchanged).
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        APN auth type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        APN username, if type is set.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class CellularSimsSimFailover(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 timeout: Optional[int] = None):
        """
        :param bool enabled: Failover to secondary SIM (optional)
        :param int timeout: Failover timeout in seconds (optional)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Failover to secondary SIM (optional)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Failover timeout in seconds (optional)
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class LiveToolsArpTableCallback(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpServer":
            suggest = "http_server"
        elif key == "payloadTemplate":
            suggest = "payload_template"
        elif key == "sharedSecret":
            suggest = "shared_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiveToolsArpTableCallback. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiveToolsArpTableCallback.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiveToolsArpTableCallback.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_server: Optional['outputs.LiveToolsArpTableCallbackHttpServer'] = None,
                 payload_template: Optional['outputs.LiveToolsArpTableCallbackPayloadTemplate'] = None,
                 shared_secret: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param 'LiveToolsArpTableCallbackHttpServerArgs' http_server: The webhook receiver used for the callback webhook.
        :param 'LiveToolsArpTableCallbackPayloadTemplateArgs' payload_template: The payload template of the webhook used for the callback
        :param str shared_secret: A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        :param str url: The callback URL for the webhook target. If using this field, please also specify a sharedSecret.
        """
        if http_server is not None:
            pulumi.set(__self__, "http_server", http_server)
        if payload_template is not None:
            pulumi.set(__self__, "payload_template", payload_template)
        if shared_secret is not None:
            pulumi.set(__self__, "shared_secret", shared_secret)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="httpServer")
    def http_server(self) -> Optional['outputs.LiveToolsArpTableCallbackHttpServer']:
        """
        The webhook receiver used for the callback webhook.
        """
        return pulumi.get(self, "http_server")

    @property
    @pulumi.getter(name="payloadTemplate")
    def payload_template(self) -> Optional['outputs.LiveToolsArpTableCallbackPayloadTemplate']:
        """
        The payload template of the webhook used for the callback
        """
        return pulumi.get(self, "payload_template")

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> Optional[str]:
        """
        A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        """
        return pulumi.get(self, "shared_secret")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The callback URL for the webhook target. If using this field, please also specify a sharedSecret.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class LiveToolsArpTableCallbackHttpServer(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LiveToolsArpTableCallbackPayloadTemplate(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LiveToolsArpTableEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastUpdatedAt":
            suggest = "last_updated_at"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiveToolsArpTableEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiveToolsArpTableEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiveToolsArpTableEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 last_updated_at: Optional[str] = None,
                 mac: Optional[str] = None,
                 vlan_id: Optional[int] = None):
        """
        :param str ip: The IP address of the ARP table entry
        :param str last_updated_at: Time of the last update of the ARP table entry
        :param str mac: The MAC address of the ARP table entry
        :param int vlan_id: The VLAN ID of the ARP table entry
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if last_updated_at is not None:
            pulumi.set(__self__, "last_updated_at", last_updated_at)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        The IP address of the ARP table entry
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> Optional[str]:
        """
        Time of the last update of the ARP table entry
        """
        return pulumi.get(self, "last_updated_at")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        """
        The MAC address of the ARP table entry
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        The VLAN ID of the ARP table entry
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class LiveToolsArpTableRequest(dict):
    def __init__(__self__, *,
                 serial: Optional[str] = None):
        """
        :param str serial: Device serial number
        """
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class LiveToolsCableCallback(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpServer":
            suggest = "http_server"
        elif key == "payloadTemplate":
            suggest = "payload_template"
        elif key == "sharedSecret":
            suggest = "shared_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiveToolsCableCallback. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiveToolsCableCallback.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiveToolsCableCallback.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_server: Optional['outputs.LiveToolsCableCallbackHttpServer'] = None,
                 payload_template: Optional['outputs.LiveToolsCableCallbackPayloadTemplate'] = None,
                 shared_secret: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param 'LiveToolsCableCallbackHttpServerArgs' http_server: The webhook receiver used for the callback webhook.
        :param 'LiveToolsCableCallbackPayloadTemplateArgs' payload_template: The payload template of the webhook used for the callback
        :param str shared_secret: A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        :param str url: The callback URL for the webhook target. If using this field, please also specify a sharedSecret.
        """
        if http_server is not None:
            pulumi.set(__self__, "http_server", http_server)
        if payload_template is not None:
            pulumi.set(__self__, "payload_template", payload_template)
        if shared_secret is not None:
            pulumi.set(__self__, "shared_secret", shared_secret)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="httpServer")
    def http_server(self) -> Optional['outputs.LiveToolsCableCallbackHttpServer']:
        """
        The webhook receiver used for the callback webhook.
        """
        return pulumi.get(self, "http_server")

    @property
    @pulumi.getter(name="payloadTemplate")
    def payload_template(self) -> Optional['outputs.LiveToolsCableCallbackPayloadTemplate']:
        """
        The payload template of the webhook used for the callback
        """
        return pulumi.get(self, "payload_template")

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> Optional[str]:
        """
        A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        """
        return pulumi.get(self, "shared_secret")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The callback URL for the webhook target. If using this field, please also specify a sharedSecret.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class LiveToolsCableCallbackHttpServer(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LiveToolsCableCallbackPayloadTemplate(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LiveToolsCableRequest(dict):
    def __init__(__self__, *,
                 ports: Optional[Sequence[str]] = None,
                 serial: Optional[str] = None):
        """
        :param Sequence[str] ports: A list of ports for which to perform the cable test.
        :param str serial: Device serial number
        """
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[str]]:
        """
        A list of ports for which to perform the cable test.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class LiveToolsCableResult(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "speedMbps":
            suggest = "speed_mbps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiveToolsCableResult. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiveToolsCableResult.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiveToolsCableResult.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error: Optional[str] = None,
                 pairs: Optional[Sequence['outputs.LiveToolsCableResultPair']] = None,
                 port: Optional[str] = None,
                 speed_mbps: Optional[int] = None,
                 status: Optional[str] = None):
        """
        :param str error: If an error occurred during the cable test, the error message will be populated here.
        :param Sequence['LiveToolsCableResultPairArgs'] pairs: Results for each twisted pair within the cable.
        :param str port: The port for which the test was performed.
        :param int speed_mbps: Speed in Mbps.  A speed of 0 indicates the port is down or the port speed is automatic.
        :param str status: The current status of the port. If the cable test is still being performed on the port, "in-progress" is used. If an error occurred during the cable test, "error" is used and the error property will be populated.
        """
        if error is not None:
            pulumi.set(__self__, "error", error)
        if pairs is not None:
            pulumi.set(__self__, "pairs", pairs)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if speed_mbps is not None:
            pulumi.set(__self__, "speed_mbps", speed_mbps)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def error(self) -> Optional[str]:
        """
        If an error occurred during the cable test, the error message will be populated here.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def pairs(self) -> Optional[Sequence['outputs.LiveToolsCableResultPair']]:
        """
        Results for each twisted pair within the cable.
        """
        return pulumi.get(self, "pairs")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        The port for which the test was performed.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="speedMbps")
    def speed_mbps(self) -> Optional[int]:
        """
        Speed in Mbps.  A speed of 0 indicates the port is down or the port speed is automatic.
        """
        return pulumi.get(self, "speed_mbps")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The current status of the port. If the cable test is still being performed on the port, "in-progress" is used. If an error occurred during the cable test, "error" is used and the error property will be populated.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class LiveToolsCableResultPair(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lengthMeters":
            suggest = "length_meters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiveToolsCableResultPair. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiveToolsCableResultPair.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiveToolsCableResultPair.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: Optional[int] = None,
                 length_meters: Optional[int] = None,
                 status: Optional[str] = None):
        """
        :param int index: The index of the twisted pair tested.
        :param int length_meters: The detected length of the twisted pair.
        :param str status: The test result of the twisted pair tested.
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if length_meters is not None:
            pulumi.set(__self__, "length_meters", length_meters)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        The index of the twisted pair tested.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="lengthMeters")
    def length_meters(self) -> Optional[int]:
        """
        The detected length of the twisted pair.
        """
        return pulumi.get(self, "length_meters")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The test result of the twisted pair tested.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class LiveToolsPingDeviceItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pingId":
            suggest = "ping_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiveToolsPingDeviceItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiveToolsPingDeviceItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiveToolsPingDeviceItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 callback: Optional['outputs.LiveToolsPingDeviceItemCallback'] = None,
                 ping_id: Optional[str] = None,
                 request: Optional['outputs.LiveToolsPingDeviceItemRequest'] = None,
                 status: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param 'LiveToolsPingDeviceItemCallbackArgs' callback: Information for callback used to send back results
        :param str ping_id: Id to check the status of your ping request.
        :param 'LiveToolsPingDeviceItemRequestArgs' request: Ping request parameters
        :param str status: Status of the ping request.
        :param str url: GET this url to check the status of your ping request.
        """
        if callback is not None:
            pulumi.set(__self__, "callback", callback)
        if ping_id is not None:
            pulumi.set(__self__, "ping_id", ping_id)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def callback(self) -> Optional['outputs.LiveToolsPingDeviceItemCallback']:
        """
        Information for callback used to send back results
        """
        return pulumi.get(self, "callback")

    @property
    @pulumi.getter(name="pingId")
    def ping_id(self) -> Optional[str]:
        """
        Id to check the status of your ping request.
        """
        return pulumi.get(self, "ping_id")

    @property
    @pulumi.getter
    def request(self) -> Optional['outputs.LiveToolsPingDeviceItemRequest']:
        """
        Ping request parameters
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status of the ping request.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        GET this url to check the status of your ping request.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class LiveToolsPingDeviceItemCallback(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 status: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str id: The ID of the callback. To check the status of the callback, use this ID in a request to /webhooks/callbacks/statuses/{id}
        :param str status: The status of the callback
        :param str url: The callback URL for the webhook target. This was either provided in the original request or comes from a configured webhook receiver
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the callback. To check the status of the callback, use this ID in a request to /webhooks/callbacks/statuses/{id}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the callback
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The callback URL for the webhook target. This was either provided in the original request or comes from a configured webhook receiver
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class LiveToolsPingDeviceItemRequest(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 serial: Optional[str] = None,
                 target: Optional[str] = None):
        """
        :param int count: Number of pings to send
        :param str serial: Device serial number
        :param str target: IP address or FQDN to ping
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Number of pings to send
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        IP address or FQDN to ping
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class LiveToolsPingDeviceParameters(dict):
    def __init__(__self__, *,
                 callback: Optional['outputs.LiveToolsPingDeviceParametersCallback'] = None,
                 count: Optional[int] = None):
        """
        :param 'LiveToolsPingDeviceParametersCallbackArgs' callback: Details for the callback. Please include either an httpServerId OR url and sharedSecret
        :param int count: Count parameter to pass to ping. [1..5], default 5
        """
        if callback is not None:
            pulumi.set(__self__, "callback", callback)
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def callback(self) -> Optional['outputs.LiveToolsPingDeviceParametersCallback']:
        """
        Details for the callback. Please include either an httpServerId OR url and sharedSecret
        """
        return pulumi.get(self, "callback")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Count parameter to pass to ping. [1..5], default 5
        """
        return pulumi.get(self, "count")


@pulumi.output_type
class LiveToolsPingDeviceParametersCallback(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpServer":
            suggest = "http_server"
        elif key == "payloadTemplate":
            suggest = "payload_template"
        elif key == "sharedSecret":
            suggest = "shared_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiveToolsPingDeviceParametersCallback. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiveToolsPingDeviceParametersCallback.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiveToolsPingDeviceParametersCallback.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_server: Optional['outputs.LiveToolsPingDeviceParametersCallbackHttpServer'] = None,
                 payload_template: Optional['outputs.LiveToolsPingDeviceParametersCallbackPayloadTemplate'] = None,
                 shared_secret: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param 'LiveToolsPingDeviceParametersCallbackHttpServerArgs' http_server: The webhook receiver used for the callback webhook.
        :param 'LiveToolsPingDeviceParametersCallbackPayloadTemplateArgs' payload_template: The payload template of the webhook used for the callback
        :param str shared_secret: A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        :param str url: The callback URL for the webhook target. If using this field, please also specify a sharedSecret.
        """
        if http_server is not None:
            pulumi.set(__self__, "http_server", http_server)
        if payload_template is not None:
            pulumi.set(__self__, "payload_template", payload_template)
        if shared_secret is not None:
            pulumi.set(__self__, "shared_secret", shared_secret)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="httpServer")
    def http_server(self) -> Optional['outputs.LiveToolsPingDeviceParametersCallbackHttpServer']:
        """
        The webhook receiver used for the callback webhook.
        """
        return pulumi.get(self, "http_server")

    @property
    @pulumi.getter(name="payloadTemplate")
    def payload_template(self) -> Optional['outputs.LiveToolsPingDeviceParametersCallbackPayloadTemplate']:
        """
        The payload template of the webhook used for the callback
        """
        return pulumi.get(self, "payload_template")

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> Optional[str]:
        """
        A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        """
        return pulumi.get(self, "shared_secret")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The callback URL for the webhook target. If using this field, please also specify a sharedSecret.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class LiveToolsPingDeviceParametersCallbackHttpServer(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LiveToolsPingDeviceParametersCallbackPayloadTemplate(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LiveToolsPingItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pingId":
            suggest = "ping_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiveToolsPingItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiveToolsPingItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiveToolsPingItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 callback: Optional['outputs.LiveToolsPingItemCallback'] = None,
                 ping_id: Optional[str] = None,
                 request: Optional['outputs.LiveToolsPingItemRequest'] = None,
                 status: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param 'LiveToolsPingItemCallbackArgs' callback: Information for callback used to send back results
        :param str ping_id: Id to check the status of your ping request.
        :param 'LiveToolsPingItemRequestArgs' request: Ping request parameters
        :param str status: Status of the ping request.
        :param str url: GET this url to check the status of your ping request.
        """
        if callback is not None:
            pulumi.set(__self__, "callback", callback)
        if ping_id is not None:
            pulumi.set(__self__, "ping_id", ping_id)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def callback(self) -> Optional['outputs.LiveToolsPingItemCallback']:
        """
        Information for callback used to send back results
        """
        return pulumi.get(self, "callback")

    @property
    @pulumi.getter(name="pingId")
    def ping_id(self) -> Optional[str]:
        """
        Id to check the status of your ping request.
        """
        return pulumi.get(self, "ping_id")

    @property
    @pulumi.getter
    def request(self) -> Optional['outputs.LiveToolsPingItemRequest']:
        """
        Ping request parameters
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status of the ping request.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        GET this url to check the status of your ping request.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class LiveToolsPingItemCallback(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 status: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str id: The ID of the callback. To check the status of the callback, use this ID in a request to /webhooks/callbacks/statuses/{id}
        :param str status: The status of the callback
        :param str url: The callback URL for the webhook target. This was either provided in the original request or comes from a configured webhook receiver
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the callback. To check the status of the callback, use this ID in a request to /webhooks/callbacks/statuses/{id}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the callback
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The callback URL for the webhook target. This was either provided in the original request or comes from a configured webhook receiver
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class LiveToolsPingItemRequest(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 serial: Optional[str] = None,
                 target: Optional[str] = None):
        """
        :param int count: Number of pings to send
        :param str serial: Device serial number
        :param str target: IP address or FQDN to ping
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Number of pings to send
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        IP address or FQDN to ping
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class LiveToolsPingParameters(dict):
    def __init__(__self__, *,
                 callback: Optional['outputs.LiveToolsPingParametersCallback'] = None,
                 count: Optional[int] = None,
                 target: Optional[str] = None):
        """
        :param 'LiveToolsPingParametersCallbackArgs' callback: Details for the callback. Please include either an httpServerId OR url and sharedSecret
        :param int count: Count parameter to pass to ping. [1..5], default 5
        :param str target: FQDN, IPv4 or IPv6 address
        """
        if callback is not None:
            pulumi.set(__self__, "callback", callback)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def callback(self) -> Optional['outputs.LiveToolsPingParametersCallback']:
        """
        Details for the callback. Please include either an httpServerId OR url and sharedSecret
        """
        return pulumi.get(self, "callback")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        Count parameter to pass to ping. [1..5], default 5
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        FQDN, IPv4 or IPv6 address
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class LiveToolsPingParametersCallback(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpServer":
            suggest = "http_server"
        elif key == "payloadTemplate":
            suggest = "payload_template"
        elif key == "sharedSecret":
            suggest = "shared_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiveToolsPingParametersCallback. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiveToolsPingParametersCallback.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiveToolsPingParametersCallback.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_server: Optional['outputs.LiveToolsPingParametersCallbackHttpServer'] = None,
                 payload_template: Optional['outputs.LiveToolsPingParametersCallbackPayloadTemplate'] = None,
                 shared_secret: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param 'LiveToolsPingParametersCallbackHttpServerArgs' http_server: The webhook receiver used for the callback webhook.
        :param 'LiveToolsPingParametersCallbackPayloadTemplateArgs' payload_template: The payload template of the webhook used for the callback
        :param str shared_secret: A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        :param str url: The callback URL for the webhook target. If using this field, please also specify a sharedSecret.
        """
        if http_server is not None:
            pulumi.set(__self__, "http_server", http_server)
        if payload_template is not None:
            pulumi.set(__self__, "payload_template", payload_template)
        if shared_secret is not None:
            pulumi.set(__self__, "shared_secret", shared_secret)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="httpServer")
    def http_server(self) -> Optional['outputs.LiveToolsPingParametersCallbackHttpServer']:
        """
        The webhook receiver used for the callback webhook.
        """
        return pulumi.get(self, "http_server")

    @property
    @pulumi.getter(name="payloadTemplate")
    def payload_template(self) -> Optional['outputs.LiveToolsPingParametersCallbackPayloadTemplate']:
        """
        The payload template of the webhook used for the callback
        """
        return pulumi.get(self, "payload_template")

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> Optional[str]:
        """
        A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        """
        return pulumi.get(self, "shared_secret")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The callback URL for the webhook target. If using this field, please also specify a sharedSecret.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class LiveToolsPingParametersCallbackHttpServer(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LiveToolsPingParametersCallbackPayloadTemplate(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LiveToolsThroughputTestCallback(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpServer":
            suggest = "http_server"
        elif key == "payloadTemplate":
            suggest = "payload_template"
        elif key == "sharedSecret":
            suggest = "shared_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiveToolsThroughputTestCallback. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiveToolsThroughputTestCallback.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiveToolsThroughputTestCallback.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_server: Optional['outputs.LiveToolsThroughputTestCallbackHttpServer'] = None,
                 payload_template: Optional['outputs.LiveToolsThroughputTestCallbackPayloadTemplate'] = None,
                 shared_secret: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param 'LiveToolsThroughputTestCallbackHttpServerArgs' http_server: The webhook receiver used for the callback webhook.
        :param 'LiveToolsThroughputTestCallbackPayloadTemplateArgs' payload_template: The payload template of the webhook used for the callback
        :param str shared_secret: A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        :param str url: The callback URL for the webhook target. If using this field, please also specify a sharedSecret.
        """
        if http_server is not None:
            pulumi.set(__self__, "http_server", http_server)
        if payload_template is not None:
            pulumi.set(__self__, "payload_template", payload_template)
        if shared_secret is not None:
            pulumi.set(__self__, "shared_secret", shared_secret)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="httpServer")
    def http_server(self) -> Optional['outputs.LiveToolsThroughputTestCallbackHttpServer']:
        """
        The webhook receiver used for the callback webhook.
        """
        return pulumi.get(self, "http_server")

    @property
    @pulumi.getter(name="payloadTemplate")
    def payload_template(self) -> Optional['outputs.LiveToolsThroughputTestCallbackPayloadTemplate']:
        """
        The payload template of the webhook used for the callback
        """
        return pulumi.get(self, "payload_template")

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> Optional[str]:
        """
        A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        """
        return pulumi.get(self, "shared_secret")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The callback URL for the webhook target. If using this field, please also specify a sharedSecret.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class LiveToolsThroughputTestCallbackHttpServer(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LiveToolsThroughputTestCallbackPayloadTemplate(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LiveToolsThroughputTestRequest(dict):
    def __init__(__self__, *,
                 serial: Optional[str] = None):
        """
        :param str serial: Device serial number
        """
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class LiveToolsThroughputTestResult(dict):
    def __init__(__self__, *,
                 speeds: Optional['outputs.LiveToolsThroughputTestResultSpeeds'] = None):
        """
        :param 'LiveToolsThroughputTestResultSpeedsArgs' speeds: Shows the speeds (Mbps)
        """
        if speeds is not None:
            pulumi.set(__self__, "speeds", speeds)

    @property
    @pulumi.getter
    def speeds(self) -> Optional['outputs.LiveToolsThroughputTestResultSpeeds']:
        """
        Shows the speeds (Mbps)
        """
        return pulumi.get(self, "speeds")


@pulumi.output_type
class LiveToolsThroughputTestResultSpeeds(dict):
    def __init__(__self__, *,
                 downstream: Optional[int] = None):
        """
        :param int downstream: Shows the download speed from shard (Mbps)
        """
        if downstream is not None:
            pulumi.set(__self__, "downstream", downstream)

    @property
    @pulumi.getter
    def downstream(self) -> Optional[int]:
        """
        Shows the download speed from shard (Mbps)
        """
        return pulumi.get(self, "downstream")


@pulumi.output_type
class LiveToolsWakeOnLanCallback(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpServer":
            suggest = "http_server"
        elif key == "payloadTemplate":
            suggest = "payload_template"
        elif key == "sharedSecret":
            suggest = "shared_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiveToolsWakeOnLanCallback. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiveToolsWakeOnLanCallback.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiveToolsWakeOnLanCallback.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_server: Optional['outputs.LiveToolsWakeOnLanCallbackHttpServer'] = None,
                 payload_template: Optional['outputs.LiveToolsWakeOnLanCallbackPayloadTemplate'] = None,
                 shared_secret: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param 'LiveToolsWakeOnLanCallbackHttpServerArgs' http_server: The webhook receiver used for the callback webhook.
        :param 'LiveToolsWakeOnLanCallbackPayloadTemplateArgs' payload_template: The payload template of the webhook used for the callback
        :param str shared_secret: A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        :param str url: The callback URL for the webhook target. If using this field, please also specify a sharedSecret.
        """
        if http_server is not None:
            pulumi.set(__self__, "http_server", http_server)
        if payload_template is not None:
            pulumi.set(__self__, "payload_template", payload_template)
        if shared_secret is not None:
            pulumi.set(__self__, "shared_secret", shared_secret)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="httpServer")
    def http_server(self) -> Optional['outputs.LiveToolsWakeOnLanCallbackHttpServer']:
        """
        The webhook receiver used for the callback webhook.
        """
        return pulumi.get(self, "http_server")

    @property
    @pulumi.getter(name="payloadTemplate")
    def payload_template(self) -> Optional['outputs.LiveToolsWakeOnLanCallbackPayloadTemplate']:
        """
        The payload template of the webhook used for the callback
        """
        return pulumi.get(self, "payload_template")

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> Optional[str]:
        """
        A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        """
        return pulumi.get(self, "shared_secret")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The callback URL for the webhook target. If using this field, please also specify a sharedSecret.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class LiveToolsWakeOnLanCallbackHttpServer(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LiveToolsWakeOnLanCallbackPayloadTemplate(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class LiveToolsWakeOnLanRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiveToolsWakeOnLanRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiveToolsWakeOnLanRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiveToolsWakeOnLanRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mac: Optional[str] = None,
                 serial: Optional[str] = None,
                 vlan_id: Optional[int] = None):
        """
        :param str mac: The target's MAC address
        :param str serial: Device serial number
        :param int vlan_id: The target's VLAN (1 to 4094)
        """
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        """
        The target's MAC address
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        The target's VLAN (1 to 4094)
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class ManagementInterfaceDdnsHostnames(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeDdnsHostname":
            suggest = "active_ddns_hostname"
        elif key == "ddnsHostnameWan1":
            suggest = "ddns_hostname_wan1"
        elif key == "ddnsHostnameWan2":
            suggest = "ddns_hostname_wan2"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementInterfaceDdnsHostnames. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementInterfaceDdnsHostnames.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementInterfaceDdnsHostnames.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active_ddns_hostname: Optional[str] = None,
                 ddns_hostname_wan1: Optional[str] = None,
                 ddns_hostname_wan2: Optional[str] = None):
        """
        :param str active_ddns_hostname: Active dynamic DNS hostname.
        :param str ddns_hostname_wan1: WAN 1 dynamic DNS hostname.
        :param str ddns_hostname_wan2: WAN 2 dynamic DNS hostname.
        """
        if active_ddns_hostname is not None:
            pulumi.set(__self__, "active_ddns_hostname", active_ddns_hostname)
        if ddns_hostname_wan1 is not None:
            pulumi.set(__self__, "ddns_hostname_wan1", ddns_hostname_wan1)
        if ddns_hostname_wan2 is not None:
            pulumi.set(__self__, "ddns_hostname_wan2", ddns_hostname_wan2)

    @property
    @pulumi.getter(name="activeDdnsHostname")
    def active_ddns_hostname(self) -> Optional[str]:
        """
        Active dynamic DNS hostname.
        """
        return pulumi.get(self, "active_ddns_hostname")

    @property
    @pulumi.getter(name="ddnsHostnameWan1")
    def ddns_hostname_wan1(self) -> Optional[str]:
        """
        WAN 1 dynamic DNS hostname.
        """
        return pulumi.get(self, "ddns_hostname_wan1")

    @property
    @pulumi.getter(name="ddnsHostnameWan2")
    def ddns_hostname_wan2(self) -> Optional[str]:
        """
        WAN 2 dynamic DNS hostname.
        """
        return pulumi.get(self, "ddns_hostname_wan2")


@pulumi.output_type
class ManagementInterfaceWan1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "staticDns":
            suggest = "static_dns"
        elif key == "staticGatewayIp":
            suggest = "static_gateway_ip"
        elif key == "staticIp":
            suggest = "static_ip"
        elif key == "staticSubnetMask":
            suggest = "static_subnet_mask"
        elif key == "usingStaticIp":
            suggest = "using_static_ip"
        elif key == "wanEnabled":
            suggest = "wan_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementInterfaceWan1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementInterfaceWan1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementInterfaceWan1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 static_dns: Optional[Sequence[str]] = None,
                 static_gateway_ip: Optional[str] = None,
                 static_ip: Optional[str] = None,
                 static_subnet_mask: Optional[str] = None,
                 using_static_ip: Optional[bool] = None,
                 vlan: Optional[int] = None,
                 wan_enabled: Optional[str] = None):
        """
        :param Sequence[str] static_dns: Up to two DNS IPs.
        :param str static_gateway_ip: The IP of the gateway on the WAN.
        :param str static_ip: The IP the device should use on the WAN.
        :param str static_subnet_mask: The subnet mask for the WAN.
        :param bool using_static_ip: Configure the interface to have static IP settings or use DHCP.
        :param int vlan: The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
        :param str wan_enabled: Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
        """
        if static_dns is not None:
            pulumi.set(__self__, "static_dns", static_dns)
        if static_gateway_ip is not None:
            pulumi.set(__self__, "static_gateway_ip", static_gateway_ip)
        if static_ip is not None:
            pulumi.set(__self__, "static_ip", static_ip)
        if static_subnet_mask is not None:
            pulumi.set(__self__, "static_subnet_mask", static_subnet_mask)
        if using_static_ip is not None:
            pulumi.set(__self__, "using_static_ip", using_static_ip)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if wan_enabled is not None:
            pulumi.set(__self__, "wan_enabled", wan_enabled)

    @property
    @pulumi.getter(name="staticDns")
    def static_dns(self) -> Optional[Sequence[str]]:
        """
        Up to two DNS IPs.
        """
        return pulumi.get(self, "static_dns")

    @property
    @pulumi.getter(name="staticGatewayIp")
    def static_gateway_ip(self) -> Optional[str]:
        """
        The IP of the gateway on the WAN.
        """
        return pulumi.get(self, "static_gateway_ip")

    @property
    @pulumi.getter(name="staticIp")
    def static_ip(self) -> Optional[str]:
        """
        The IP the device should use on the WAN.
        """
        return pulumi.get(self, "static_ip")

    @property
    @pulumi.getter(name="staticSubnetMask")
    def static_subnet_mask(self) -> Optional[str]:
        """
        The subnet mask for the WAN.
        """
        return pulumi.get(self, "static_subnet_mask")

    @property
    @pulumi.getter(name="usingStaticIp")
    def using_static_ip(self) -> Optional[bool]:
        """
        Configure the interface to have static IP settings or use DHCP.
        """
        return pulumi.get(self, "using_static_ip")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        """
        The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="wanEnabled")
    def wan_enabled(self) -> Optional[str]:
        """
        Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
        """
        return pulumi.get(self, "wan_enabled")


@pulumi.output_type
class ManagementInterfaceWan2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "staticDns":
            suggest = "static_dns"
        elif key == "staticGatewayIp":
            suggest = "static_gateway_ip"
        elif key == "staticIp":
            suggest = "static_ip"
        elif key == "staticSubnetMask":
            suggest = "static_subnet_mask"
        elif key == "usingStaticIp":
            suggest = "using_static_ip"
        elif key == "wanEnabled":
            suggest = "wan_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementInterfaceWan2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementInterfaceWan2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementInterfaceWan2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 static_dns: Optional[Sequence[str]] = None,
                 static_gateway_ip: Optional[str] = None,
                 static_ip: Optional[str] = None,
                 static_subnet_mask: Optional[str] = None,
                 using_static_ip: Optional[bool] = None,
                 vlan: Optional[int] = None,
                 wan_enabled: Optional[str] = None):
        """
        :param Sequence[str] static_dns: Up to two DNS IPs.
        :param str static_gateway_ip: The IP of the gateway on the WAN.
        :param str static_ip: The IP the device should use on the WAN.
        :param str static_subnet_mask: The subnet mask for the WAN.
        :param bool using_static_ip: Configure the interface to have static IP settings or use DHCP.
        :param int vlan: The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
        :param str wan_enabled: Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
        """
        if static_dns is not None:
            pulumi.set(__self__, "static_dns", static_dns)
        if static_gateway_ip is not None:
            pulumi.set(__self__, "static_gateway_ip", static_gateway_ip)
        if static_ip is not None:
            pulumi.set(__self__, "static_ip", static_ip)
        if static_subnet_mask is not None:
            pulumi.set(__self__, "static_subnet_mask", static_subnet_mask)
        if using_static_ip is not None:
            pulumi.set(__self__, "using_static_ip", using_static_ip)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if wan_enabled is not None:
            pulumi.set(__self__, "wan_enabled", wan_enabled)

    @property
    @pulumi.getter(name="staticDns")
    def static_dns(self) -> Optional[Sequence[str]]:
        """
        Up to two DNS IPs.
        """
        return pulumi.get(self, "static_dns")

    @property
    @pulumi.getter(name="staticGatewayIp")
    def static_gateway_ip(self) -> Optional[str]:
        """
        The IP of the gateway on the WAN.
        """
        return pulumi.get(self, "static_gateway_ip")

    @property
    @pulumi.getter(name="staticIp")
    def static_ip(self) -> Optional[str]:
        """
        The IP the device should use on the WAN.
        """
        return pulumi.get(self, "static_ip")

    @property
    @pulumi.getter(name="staticSubnetMask")
    def static_subnet_mask(self) -> Optional[str]:
        """
        The subnet mask for the WAN.
        """
        return pulumi.get(self, "static_subnet_mask")

    @property
    @pulumi.getter(name="usingStaticIp")
    def using_static_ip(self) -> Optional[bool]:
        """
        Configure the interface to have static IP settings or use DHCP.
        """
        return pulumi.get(self, "using_static_ip")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        """
        The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="wanEnabled")
    def wan_enabled(self) -> Optional[str]:
        """
        Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
        """
        return pulumi.get(self, "wan_enabled")


@pulumi.output_type
class SensorRelationshipsLivestream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relatedDevices":
            suggest = "related_devices"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensorRelationshipsLivestream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensorRelationshipsLivestream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensorRelationshipsLivestream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 related_devices: Optional[Sequence['outputs.SensorRelationshipsLivestreamRelatedDevice']] = None):
        """
        :param Sequence['SensorRelationshipsLivestreamRelatedDeviceArgs'] related_devices: An array of the related devices for the role
        """
        if related_devices is not None:
            pulumi.set(__self__, "related_devices", related_devices)

    @property
    @pulumi.getter(name="relatedDevices")
    def related_devices(self) -> Optional[Sequence['outputs.SensorRelationshipsLivestreamRelatedDevice']]:
        """
        An array of the related devices for the role
        """
        return pulumi.get(self, "related_devices")


@pulumi.output_type
class SensorRelationshipsLivestreamRelatedDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productType":
            suggest = "product_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensorRelationshipsLivestreamRelatedDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensorRelationshipsLivestreamRelatedDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensorRelationshipsLivestreamRelatedDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 product_type: Optional[str] = None,
                 serial: Optional[str] = None):
        """
        :param str product_type: The product type of the related device
        :param str serial: The serial of the related device
        """
        if product_type is not None:
            pulumi.set(__self__, "product_type", product_type)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> Optional[str]:
        """
        The product type of the related device
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        The serial of the related device
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class SensorRelationshipsLivestreamRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relatedDevices":
            suggest = "related_devices"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensorRelationshipsLivestreamRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensorRelationshipsLivestreamRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensorRelationshipsLivestreamRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 related_devices: Optional[Sequence['outputs.SensorRelationshipsLivestreamRequestRelatedDevice']] = None):
        """
        :param Sequence['SensorRelationshipsLivestreamRequestRelatedDeviceArgs'] related_devices: An array of the related devices for the role
        """
        if related_devices is not None:
            pulumi.set(__self__, "related_devices", related_devices)

    @property
    @pulumi.getter(name="relatedDevices")
    def related_devices(self) -> Optional[Sequence['outputs.SensorRelationshipsLivestreamRequestRelatedDevice']]:
        """
        An array of the related devices for the role
        """
        return pulumi.get(self, "related_devices")


@pulumi.output_type
class SensorRelationshipsLivestreamRequestRelatedDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productType":
            suggest = "product_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensorRelationshipsLivestreamRequestRelatedDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensorRelationshipsLivestreamRequestRelatedDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensorRelationshipsLivestreamRequestRelatedDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 product_type: Optional[str] = None,
                 serial: Optional[str] = None):
        """
        :param str product_type: The product type of the related device
        :param str serial: The serial of the related device
        """
        if product_type is not None:
            pulumi.set(__self__, "product_type", product_type)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> Optional[str]:
        """
        The product type of the related device
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        The serial of the related device
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class SwitchPortsCycleItem(dict):
    def __init__(__self__, *,
                 ports: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] ports: List of switch ports
        """
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[str]]:
        """
        List of switch ports
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class SwitchPortsCycleParameters(dict):
    def __init__(__self__, *,
                 ports: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] ports: List of switch ports
        """
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[str]]:
        """
        List of switch ports
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class SwitchPortsMirror(dict):
    def __init__(__self__, *,
                 mode: Optional[str] = None):
        """
        :param str mode: The port mirror mode. Can be one of ('Destination port', 'Source port' or 'Not mirroring traffic').
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The port mirror mode. Can be one of ('Destination port', 'Source port' or 'Not mirroring traffic').
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class SwitchPortsModule(dict):
    def __init__(__self__, *,
                 model: Optional[str] = None):
        """
        :param str model: The model of the expansion module.
        """
        if model is not None:
            pulumi.set(__self__, "model", model)

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        The model of the expansion module.
        """
        return pulumi.get(self, "model")


@pulumi.output_type
class SwitchPortsProfile(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 id: Optional[str] = None,
                 iname: Optional[str] = None):
        """
        :param bool enabled: When enabled, override this port's configuration with a port profile.
        :param str id: When enabled, the ID of the port profile used to override the port's configuration.
        :param str iname: When enabled, the IName of the profile.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if iname is not None:
            pulumi.set(__self__, "iname", iname)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        When enabled, override this port's configuration with a port profile.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        When enabled, the ID of the port profile used to override the port's configuration.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def iname(self) -> Optional[str]:
        """
        When enabled, the IName of the profile.
        """
        return pulumi.get(self, "iname")


@pulumi.output_type
class SwitchRoutingInterfacesDhcpDhcpOption(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str code: The code for DHCP option which should be from 2 to 254
        :param str type: The type of the DHCP option which should be one of ('text', 'ip', 'integer' or 'hex')
        :param str value: The value of the DHCP option
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        The code for DHCP option which should be from 2 to 254
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the DHCP option which should be one of ('text', 'ip', 'integer' or 'hex')
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the DHCP option
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SwitchRoutingInterfacesDhcpFixedIpAssignment(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 mac: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str ip: The IP address of the client which has fixed IP address assigned to it
        :param str mac: The MAC address of the client which has fixed IP address
        :param str name: The name of the client which has fixed IP address
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        The IP address of the client which has fixed IP address assigned to it
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        """
        The MAC address of the client which has fixed IP address
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the client which has fixed IP address
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SwitchRoutingInterfacesDhcpReservedIpRange(dict):
    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        """
        :param str comment: The comment for the reserved IP range
        :param str end: The ending IP address of the reserved IP range
        :param str start: The starting IP address of the reserved IP range
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        The comment for the reserved IP range
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        """
        The ending IP address of the reserved IP range
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        """
        The starting IP address of the reserved IP range
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class SwitchRoutingInterfacesIpv6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignmentMode":
            suggest = "assignment_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchRoutingInterfacesIpv6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchRoutingInterfacesIpv6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchRoutingInterfacesIpv6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 assignment_mode: Optional[str] = None,
                 gateway: Optional[str] = None,
                 prefix: Optional[str] = None):
        """
        :param str address: IPv6 address
        :param str assignment_mode: Assignment mode
        :param str gateway: IPv6 gateway
        :param str prefix: IPv6 subnet
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if assignment_mode is not None:
            pulumi.set(__self__, "assignment_mode", assignment_mode)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        IPv6 address
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="assignmentMode")
    def assignment_mode(self) -> Optional[str]:
        """
        Assignment mode
        """
        return pulumi.get(self, "assignment_mode")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        IPv6 gateway
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        IPv6 subnet
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class SwitchRoutingInterfacesOspfSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isPassiveEnabled":
            suggest = "is_passive_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchRoutingInterfacesOspfSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchRoutingInterfacesOspfSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchRoutingInterfacesOspfSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area: Optional[str] = None,
                 cost: Optional[int] = None,
                 is_passive_enabled: Optional[bool] = None):
        """
        :param str area: Area id
        :param int cost: OSPF Cost
        :param bool is_passive_enabled: Disable sending Hello packets on this interface's IPv4 area
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if is_passive_enabled is not None:
            pulumi.set(__self__, "is_passive_enabled", is_passive_enabled)

    @property
    @pulumi.getter
    def area(self) -> Optional[str]:
        """
        Area id
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        """
        OSPF Cost
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="isPassiveEnabled")
    def is_passive_enabled(self) -> Optional[bool]:
        """
        Disable sending Hello packets on this interface's IPv4 area
        """
        return pulumi.get(self, "is_passive_enabled")


@pulumi.output_type
class SwitchRoutingInterfacesOspfV3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isPassiveEnabled":
            suggest = "is_passive_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchRoutingInterfacesOspfV3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchRoutingInterfacesOspfV3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchRoutingInterfacesOspfV3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area: Optional[str] = None,
                 cost: Optional[int] = None,
                 is_passive_enabled: Optional[bool] = None):
        """
        :param str area: Area id
        :param int cost: OSPF Cost
        :param bool is_passive_enabled: Disable sending Hello packets on this interface's IPv6 area
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if is_passive_enabled is not None:
            pulumi.set(__self__, "is_passive_enabled", is_passive_enabled)

    @property
    @pulumi.getter
    def area(self) -> Optional[str]:
        """
        Area id
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        """
        OSPF Cost
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="isPassiveEnabled")
    def is_passive_enabled(self) -> Optional[bool]:
        """
        Disable sending Hello packets on this interface's IPv6 area
        """
        return pulumi.get(self, "is_passive_enabled")


@pulumi.output_type
class WirelessAlternateManagementInterfaceIpv6Item(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence['outputs.WirelessAlternateManagementInterfaceIpv6ItemAddress']] = None):
        """
        :param Sequence['WirelessAlternateManagementInterfaceIpv6ItemAddressArgs'] addresses: configured alternate management interface addresses
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence['outputs.WirelessAlternateManagementInterfaceIpv6ItemAddress']]:
        """
        configured alternate management interface addresses
        """
        return pulumi.get(self, "addresses")


@pulumi.output_type
class WirelessAlternateManagementInterfaceIpv6ItemAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignmentMode":
            suggest = "assignment_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessAlternateManagementInterfaceIpv6ItemAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessAlternateManagementInterfaceIpv6ItemAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessAlternateManagementInterfaceIpv6ItemAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 assignment_mode: Optional[str] = None,
                 gateway: Optional[str] = None,
                 nameservers: Optional['outputs.WirelessAlternateManagementInterfaceIpv6ItemAddressNameservers'] = None,
                 prefix: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        :param str address: The IP address configured for the alternate management interface
        :param str assignment_mode: The type of address assignment. Either static or dynamic.
        :param str gateway: The gateway address configured for the alternate managment interface
        :param 'WirelessAlternateManagementInterfaceIpv6ItemAddressNameserversArgs' nameservers: The DNS servers settings for this address.
        :param str prefix: The IPv6 prefix of the interface. Required if IPv6 object is included.
        :param str protocol: The IP protocol used for the address
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if assignment_mode is not None:
            pulumi.set(__self__, "assignment_mode", assignment_mode)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        The IP address configured for the alternate management interface
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="assignmentMode")
    def assignment_mode(self) -> Optional[str]:
        """
        The type of address assignment. Either static or dynamic.
        """
        return pulumi.get(self, "assignment_mode")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        The gateway address configured for the alternate managment interface
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def nameservers(self) -> Optional['outputs.WirelessAlternateManagementInterfaceIpv6ItemAddressNameservers']:
        """
        The DNS servers settings for this address.
        """
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The IPv6 prefix of the interface. Required if IPv6 object is included.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The IP protocol used for the address
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class WirelessAlternateManagementInterfaceIpv6ItemAddressNameservers(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] addresses: Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        """
        Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        return pulumi.get(self, "addresses")


@pulumi.output_type
class WirelessAlternateManagementInterfaceIpv6Parameters(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence['outputs.WirelessAlternateManagementInterfaceIpv6ParametersAddress']] = None):
        """
        :param Sequence['WirelessAlternateManagementInterfaceIpv6ParametersAddressArgs'] addresses: configured alternate management interface addresses
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence['outputs.WirelessAlternateManagementInterfaceIpv6ParametersAddress']]:
        """
        configured alternate management interface addresses
        """
        return pulumi.get(self, "addresses")


@pulumi.output_type
class WirelessAlternateManagementInterfaceIpv6ParametersAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignmentMode":
            suggest = "assignment_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessAlternateManagementInterfaceIpv6ParametersAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessAlternateManagementInterfaceIpv6ParametersAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessAlternateManagementInterfaceIpv6ParametersAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 assignment_mode: Optional[str] = None,
                 gateway: Optional[str] = None,
                 nameservers: Optional['outputs.WirelessAlternateManagementInterfaceIpv6ParametersAddressNameservers'] = None,
                 prefix: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        :param str address: The IP address configured for the alternate management interface
        :param str assignment_mode: The type of address assignment. Either static or dynamic.
        :param str gateway: The gateway address configured for the alternate managment interface
        :param 'WirelessAlternateManagementInterfaceIpv6ParametersAddressNameserversArgs' nameservers: The DNS servers settings for this address.
        :param str prefix: The IPv6 prefix length of the IPv6 interface. Required if IPv6 object is included.
        :param str protocol: The IP protocol used for the address
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if assignment_mode is not None:
            pulumi.set(__self__, "assignment_mode", assignment_mode)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        The IP address configured for the alternate management interface
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="assignmentMode")
    def assignment_mode(self) -> Optional[str]:
        """
        The type of address assignment. Either static or dynamic.
        """
        return pulumi.get(self, "assignment_mode")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        The gateway address configured for the alternate managment interface
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def nameservers(self) -> Optional['outputs.WirelessAlternateManagementInterfaceIpv6ParametersAddressNameservers']:
        """
        The DNS servers settings for this address.
        """
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The IPv6 prefix length of the IPv6 interface. Required if IPv6 object is included.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The IP protocol used for the address
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class WirelessAlternateManagementInterfaceIpv6ParametersAddressNameservers(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] addresses: Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        """
        Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        return pulumi.get(self, "addresses")


@pulumi.output_type
class WirelessRadioSettingsFiveGhzSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelWidth":
            suggest = "channel_width"
        elif key == "targetPower":
            suggest = "target_power"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessRadioSettingsFiveGhzSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessRadioSettingsFiveGhzSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessRadioSettingsFiveGhzSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: Optional[int] = None,
                 channel_width: Optional[str] = None,
                 target_power: Optional[int] = None):
        """
        :param int channel: Sets a manual channel for 5 GHz. Can be '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161', '165', '169', '173' or '177' or null for using auto channel.
        :param str channel_width: Sets a manual channel for 5 GHz. Can be '0', '20', '40', '80' or '160' or null for using auto channel width.
        :param int target_power: Set a manual target power for 5 GHz. Can be between '8' or '30' or null for using auto power range.
        """
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channel_width is not None:
            pulumi.set(__self__, "channel_width", channel_width)
        if target_power is not None:
            pulumi.set(__self__, "target_power", target_power)

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        Sets a manual channel for 5 GHz. Can be '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161', '165', '169', '173' or '177' or null for using auto channel.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="channelWidth")
    def channel_width(self) -> Optional[str]:
        """
        Sets a manual channel for 5 GHz. Can be '0', '20', '40', '80' or '160' or null for using auto channel width.
        """
        return pulumi.get(self, "channel_width")

    @property
    @pulumi.getter(name="targetPower")
    def target_power(self) -> Optional[int]:
        """
        Set a manual target power for 5 GHz. Can be between '8' or '30' or null for using auto power range.
        """
        return pulumi.get(self, "target_power")


@pulumi.output_type
class WirelessRadioSettingsTwoFourGhzSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetPower":
            suggest = "target_power"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WirelessRadioSettingsTwoFourGhzSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WirelessRadioSettingsTwoFourGhzSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WirelessRadioSettingsTwoFourGhzSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: Optional[int] = None,
                 target_power: Optional[int] = None):
        """
        :param int channel: Sets a manual channel for 2.4 GHz. Can be '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13' or '14' or null for using auto channel.
        :param int target_power: Set a manual target power for 2.4 GHz. Can be between '5' or '30' or null for using auto power range.
        """
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if target_power is not None:
            pulumi.set(__self__, "target_power", target_power)

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        Sets a manual channel for 2.4 GHz. Can be '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13' or '14' or null for using auto channel.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="targetPower")
    def target_power(self) -> Optional[int]:
        """
        Set a manual target power for 2.4 GHz. Can be between '5' or '30' or null for using auto power range.
        """
        return pulumi.get(self, "target_power")


@pulumi.output_type
class BaseDetail(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Additional property name
        :param str value: Additional property value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Additional property name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Additional property value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAppliancePerformanceItemResult(dict):
    def __init__(__self__, *,
                 perf_score: int):
        pulumi.set(__self__, "perf_score", perf_score)

    @property
    @pulumi.getter(name="perfScore")
    def perf_score(self) -> int:
        return pulumi.get(self, "perf_score")


@pulumi.output_type
class GetApplianceRadioSettingsItemResult(dict):
    def __init__(__self__, *,
                 five_ghz_settings: 'outputs.GetApplianceRadioSettingsItemFiveGhzSettingsResult',
                 rf_profile_id: str,
                 serial: str,
                 two_four_ghz_settings: 'outputs.GetApplianceRadioSettingsItemTwoFourGhzSettingsResult'):
        """
        :param 'GetApplianceRadioSettingsItemFiveGhzSettingsArgs' five_ghz_settings: Manual radio settings for 5 GHz
        :param str rf_profile_id: RF Profile ID
        :param str serial: The device serial
        :param 'GetApplianceRadioSettingsItemTwoFourGhzSettingsArgs' two_four_ghz_settings: Manual radio settings for 2.4 GHz
        """
        pulumi.set(__self__, "five_ghz_settings", five_ghz_settings)
        pulumi.set(__self__, "rf_profile_id", rf_profile_id)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "two_four_ghz_settings", two_four_ghz_settings)

    @property
    @pulumi.getter(name="fiveGhzSettings")
    def five_ghz_settings(self) -> 'outputs.GetApplianceRadioSettingsItemFiveGhzSettingsResult':
        """
        Manual radio settings for 5 GHz
        """
        return pulumi.get(self, "five_ghz_settings")

    @property
    @pulumi.getter(name="rfProfileId")
    def rf_profile_id(self) -> str:
        """
        RF Profile ID
        """
        return pulumi.get(self, "rf_profile_id")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The device serial
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="twoFourGhzSettings")
    def two_four_ghz_settings(self) -> 'outputs.GetApplianceRadioSettingsItemTwoFourGhzSettingsResult':
        """
        Manual radio settings for 2.4 GHz
        """
        return pulumi.get(self, "two_four_ghz_settings")


@pulumi.output_type
class GetApplianceRadioSettingsItemFiveGhzSettingsResult(dict):
    def __init__(__self__, *,
                 channel: int,
                 channel_width: int,
                 target_power: int):
        """
        :param int channel: Manual channel for 5 GHz
        :param int channel_width: Manual channel width for 5 GHz
        :param int target_power: Manual target power for 5 GHz
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "channel_width", channel_width)
        pulumi.set(__self__, "target_power", target_power)

    @property
    @pulumi.getter
    def channel(self) -> int:
        """
        Manual channel for 5 GHz
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="channelWidth")
    def channel_width(self) -> int:
        """
        Manual channel width for 5 GHz
        """
        return pulumi.get(self, "channel_width")

    @property
    @pulumi.getter(name="targetPower")
    def target_power(self) -> int:
        """
        Manual target power for 5 GHz
        """
        return pulumi.get(self, "target_power")


@pulumi.output_type
class GetApplianceRadioSettingsItemTwoFourGhzSettingsResult(dict):
    def __init__(__self__, *,
                 channel: int,
                 target_power: int):
        """
        :param int channel: Manual channel for 2.4 GHz
        :param int target_power: Manual target power for 2.4 GHz
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "target_power", target_power)

    @property
    @pulumi.getter
    def channel(self) -> int:
        """
        Manual channel for 2.4 GHz
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="targetPower")
    def target_power(self) -> int:
        """
        Manual target power for 2.4 GHz
        """
        return pulumi.get(self, "target_power")


@pulumi.output_type
class GetApplianceUplinksSettingsItemResult(dict):
    def __init__(__self__, *,
                 interfaces: 'outputs.GetApplianceUplinksSettingsItemInterfacesResult'):
        """
        :param 'GetApplianceUplinksSettingsItemInterfacesArgs' interfaces: Interface settings.
        """
        pulumi.set(__self__, "interfaces", interfaces)

    @property
    @pulumi.getter
    def interfaces(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesResult':
        """
        Interface settings.
        """
        return pulumi.get(self, "interfaces")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesResult(dict):
    def __init__(__self__, *,
                 wan1: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1Result',
                 wan2: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2Result'):
        """
        :param 'GetApplianceUplinksSettingsItemInterfacesWan1Args' wan1: WAN 1 settings.
        :param 'GetApplianceUplinksSettingsItemInterfacesWan2Args' wan2: WAN 2 settings.
        """
        pulumi.set(__self__, "wan1", wan1)
        pulumi.set(__self__, "wan2", wan2)

    @property
    @pulumi.getter
    def wan1(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1Result':
        """
        WAN 1 settings.
        """
        return pulumi.get(self, "wan1")

    @property
    @pulumi.getter
    def wan2(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2Result':
        """
        WAN 2 settings.
        """
        return pulumi.get(self, "wan2")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan1Result(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 pppoe: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1PppoeResult',
                 svis: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1SvisResult',
                 vlan_tagging: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1VlanTaggingResult'):
        """
        :param bool enabled: Enable or disable the interface.
        :param 'GetApplianceUplinksSettingsItemInterfacesWan1PppoeArgs' pppoe: Configuration options for PPPoE.
        :param 'GetApplianceUplinksSettingsItemInterfacesWan1SvisArgs' svis: SVI settings by protocol.
        :param 'GetApplianceUplinksSettingsItemInterfacesWan1VlanTaggingArgs' vlan_tagging: VLAN tagging settings.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "pppoe", pppoe)
        pulumi.set(__self__, "svis", svis)
        pulumi.set(__self__, "vlan_tagging", vlan_tagging)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable or disable the interface.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def pppoe(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1PppoeResult':
        """
        Configuration options for PPPoE.
        """
        return pulumi.get(self, "pppoe")

    @property
    @pulumi.getter
    def svis(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1SvisResult':
        """
        SVI settings by protocol.
        """
        return pulumi.get(self, "svis")

    @property
    @pulumi.getter(name="vlanTagging")
    def vlan_tagging(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1VlanTaggingResult':
        """
        VLAN tagging settings.
        """
        return pulumi.get(self, "vlan_tagging")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan1PppoeResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1PppoeAuthenticationResult',
                 enabled: bool):
        """
        :param 'GetApplianceUplinksSettingsItemInterfacesWan1PppoeAuthenticationArgs' authentication: Settings for PPPoE Authentication.
        :param bool enabled: Whether PPPoE is enabled.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1PppoeAuthenticationResult':
        """
        Settings for PPPoE Authentication.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether PPPoE is enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan1PppoeAuthenticationResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 username: str):
        """
        :param bool enabled: Whether PPPoE authentication is enabled.
        :param str username: Username for PPPoE authentication.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether PPPoE authentication is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username for PPPoE authentication.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan1SvisResult(dict):
    def __init__(__self__, *,
                 ipv4: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4Result',
                 ipv6: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv6Result'):
        """
        :param 'GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4Args' ipv4: IPv4 settings for static/dynamic mode.
        :param 'GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv6Args' ipv6: IPv6 settings for static/dynamic mode.
        """
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "ipv6", ipv6)

    @property
    @pulumi.getter
    def ipv4(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4Result':
        """
        IPv4 settings for static/dynamic mode.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv6Result':
        """
        IPv6 settings for static/dynamic mode.
        """
        return pulumi.get(self, "ipv6")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4Result(dict):
    def __init__(__self__, *,
                 address: str,
                 assignment_mode: str,
                 gateway: str,
                 nameservers: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4NameserversResult'):
        """
        :param str address: IP address and subnet mask when in static mode.
        :param str assignment_mode: The assignment mode for this SVI. Applies only when PPPoE is disabled.
        :param str gateway: Gateway IP address when in static mode.
        :param 'GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4NameserversArgs' nameservers: The nameserver settings for this SVI.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "assignment_mode", assignment_mode)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        IP address and subnet mask when in static mode.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="assignmentMode")
    def assignment_mode(self) -> str:
        """
        The assignment mode for this SVI. Applies only when PPPoE is disabled.
        """
        return pulumi.get(self, "assignment_mode")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        Gateway IP address when in static mode.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def nameservers(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4NameserversResult':
        """
        The nameserver settings for this SVI.
        """
        return pulumi.get(self, "nameservers")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4NameserversResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence[str]):
        """
        :param Sequence[str] addresses: Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence[str]:
        """
        Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        return pulumi.get(self, "addresses")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv6Result(dict):
    def __init__(__self__, *,
                 address: str,
                 assignment_mode: str,
                 gateway: str,
                 nameservers: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv6NameserversResult'):
        """
        :param str address: Static address that will override the one(s) received by SLAAC.
        :param str assignment_mode: The assignment mode for this SVI. Applies only when PPPoE is disabled.
        :param str gateway: Static gateway that will override the one received by autoconf.
        :param 'GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv6NameserversArgs' nameservers: The nameserver settings for this SVI.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "assignment_mode", assignment_mode)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        Static address that will override the one(s) received by SLAAC.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="assignmentMode")
    def assignment_mode(self) -> str:
        """
        The assignment mode for this SVI. Applies only when PPPoE is disabled.
        """
        return pulumi.get(self, "assignment_mode")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        Static gateway that will override the one received by autoconf.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def nameservers(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv6NameserversResult':
        """
        The nameserver settings for this SVI.
        """
        return pulumi.get(self, "nameservers")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv6NameserversResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence[str]):
        """
        :param Sequence[str] addresses: Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence[str]:
        """
        Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        return pulumi.get(self, "addresses")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan1VlanTaggingResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 vlan_id: int):
        """
        :param bool enabled: Whether VLAN tagging is enabled.
        :param int vlan_id: The ID of the VLAN to use for VLAN tagging.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether VLAN tagging is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        """
        The ID of the VLAN to use for VLAN tagging.
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan2Result(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 pppoe: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2PppoeResult',
                 svis: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2SvisResult',
                 vlan_tagging: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2VlanTaggingResult'):
        """
        :param bool enabled: Enable or disable the interface.
        :param 'GetApplianceUplinksSettingsItemInterfacesWan2PppoeArgs' pppoe: Configuration options for PPPoE.
        :param 'GetApplianceUplinksSettingsItemInterfacesWan2SvisArgs' svis: SVI settings by protocol.
        :param 'GetApplianceUplinksSettingsItemInterfacesWan2VlanTaggingArgs' vlan_tagging: VLAN tagging settings.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "pppoe", pppoe)
        pulumi.set(__self__, "svis", svis)
        pulumi.set(__self__, "vlan_tagging", vlan_tagging)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable or disable the interface.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def pppoe(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2PppoeResult':
        """
        Configuration options for PPPoE.
        """
        return pulumi.get(self, "pppoe")

    @property
    @pulumi.getter
    def svis(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2SvisResult':
        """
        SVI settings by protocol.
        """
        return pulumi.get(self, "svis")

    @property
    @pulumi.getter(name="vlanTagging")
    def vlan_tagging(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2VlanTaggingResult':
        """
        VLAN tagging settings.
        """
        return pulumi.get(self, "vlan_tagging")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan2PppoeResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2PppoeAuthenticationResult',
                 enabled: bool):
        """
        :param 'GetApplianceUplinksSettingsItemInterfacesWan2PppoeAuthenticationArgs' authentication: Settings for PPPoE Authentication.
        :param bool enabled: Whether PPPoE is enabled.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2PppoeAuthenticationResult':
        """
        Settings for PPPoE Authentication.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether PPPoE is enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan2PppoeAuthenticationResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 username: str):
        """
        :param bool enabled: Whether PPPoE authentication is enabled.
        :param str username: Username for PPPoE authentication.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether PPPoE authentication is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username for PPPoE authentication.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan2SvisResult(dict):
    def __init__(__self__, *,
                 ipv4: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv4Result',
                 ipv6: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv6Result'):
        """
        :param 'GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv4Args' ipv4: IPv4 settings for static/dynamic mode.
        :param 'GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv6Args' ipv6: IPv6 settings for static/dynamic mode.
        """
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "ipv6", ipv6)

    @property
    @pulumi.getter
    def ipv4(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv4Result':
        """
        IPv4 settings for static/dynamic mode.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv6Result':
        """
        IPv6 settings for static/dynamic mode.
        """
        return pulumi.get(self, "ipv6")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv4Result(dict):
    def __init__(__self__, *,
                 address: str,
                 assignment_mode: str,
                 gateway: str,
                 nameservers: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv4NameserversResult'):
        """
        :param str address: IP address and subnet mask when in static mode.
        :param str assignment_mode: The assignment mode for this SVI. Applies only when PPPoE is disabled.
        :param str gateway: Gateway IP address when in static mode.
        :param 'GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv4NameserversArgs' nameservers: The nameserver settings for this SVI.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "assignment_mode", assignment_mode)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        IP address and subnet mask when in static mode.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="assignmentMode")
    def assignment_mode(self) -> str:
        """
        The assignment mode for this SVI. Applies only when PPPoE is disabled.
        """
        return pulumi.get(self, "assignment_mode")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        Gateway IP address when in static mode.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def nameservers(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv4NameserversResult':
        """
        The nameserver settings for this SVI.
        """
        return pulumi.get(self, "nameservers")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv4NameserversResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence[str]):
        """
        :param Sequence[str] addresses: Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence[str]:
        """
        Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        return pulumi.get(self, "addresses")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv6Result(dict):
    def __init__(__self__, *,
                 address: str,
                 assignment_mode: str,
                 gateway: str,
                 nameservers: 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv6NameserversResult'):
        """
        :param str address: Static address that will override the one(s) received by SLAAC.
        :param str assignment_mode: The assignment mode for this SVI. Applies only when PPPoE is disabled.
        :param str gateway: Static gateway that will override the one received by autoconf.
        :param 'GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv6NameserversArgs' nameservers: The nameserver settings for this SVI.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "assignment_mode", assignment_mode)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        Static address that will override the one(s) received by SLAAC.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="assignmentMode")
    def assignment_mode(self) -> str:
        """
        The assignment mode for this SVI. Applies only when PPPoE is disabled.
        """
        return pulumi.get(self, "assignment_mode")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        Static gateway that will override the one received by autoconf.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def nameservers(self) -> 'outputs.GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv6NameserversResult':
        """
        The nameserver settings for this SVI.
        """
        return pulumi.get(self, "nameservers")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan2SvisIpv6NameserversResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence[str]):
        """
        :param Sequence[str] addresses: Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence[str]:
        """
        Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
        """
        return pulumi.get(self, "addresses")


@pulumi.output_type
class GetApplianceUplinksSettingsItemInterfacesWan2VlanTaggingResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 vlan_id: int):
        """
        :param bool enabled: Whether VLAN tagging is enabled.
        :param int vlan_id: The ID of the VLAN to use for VLAN tagging.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether VLAN tagging is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        """
        The ID of the VLAN to use for VLAN tagging.
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetCameraAnalyticsLiveItemResult(dict):
    def __init__(__self__, *,
                 ts: str,
                 zones: 'outputs.GetCameraAnalyticsLiveItemZonesResult'):
        pulumi.set(__self__, "ts", ts)
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter
    def ts(self) -> str:
        return pulumi.get(self, "ts")

    @property
    @pulumi.getter
    def zones(self) -> 'outputs.GetCameraAnalyticsLiveItemZonesResult':
        return pulumi.get(self, "zones")


@pulumi.output_type
class GetCameraAnalyticsLiveItemZonesResult(dict):
    def __init__(__self__, *,
                 status0: 'outputs.GetCameraAnalyticsLiveItemZonesStatus0Result'):
        pulumi.set(__self__, "status0", status0)

    @property
    @pulumi.getter
    def status0(self) -> 'outputs.GetCameraAnalyticsLiveItemZonesStatus0Result':
        return pulumi.get(self, "status0")


@pulumi.output_type
class GetCameraAnalyticsLiveItemZonesStatus0Result(dict):
    def __init__(__self__, *,
                 person: int):
        pulumi.set(__self__, "person", person)

    @property
    @pulumi.getter
    def person(self) -> int:
        return pulumi.get(self, "person")


@pulumi.output_type
class GetCameraCustomAnalyticsItemResult(dict):
    def __init__(__self__, *,
                 artifact_id: str,
                 enabled: bool,
                 parameters: Sequence['outputs.GetCameraCustomAnalyticsItemParameterResult']):
        """
        :param str artifact_id: Custom analytics artifact ID
        :param bool enabled: Whether custom analytics is enabled
        :param Sequence['GetCameraCustomAnalyticsItemParameterArgs'] parameters: Parameters for the custom analytics workload
        """
        pulumi.set(__self__, "artifact_id", artifact_id)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        Custom analytics artifact ID
        """
        return pulumi.get(self, "artifact_id")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether custom analytics is enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetCameraCustomAnalyticsItemParameterResult']:
        """
        Parameters for the custom analytics workload
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetCameraCustomAnalyticsItemParameterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: float):
        """
        :param str name: Name of the parameter
        :param float value: Value of the parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        Value of the parameter
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCameraQualityAndRetentionItemResult(dict):
    def __init__(__self__, *,
                 audio_recording_enabled: bool,
                 motion_based_retention_enabled: bool,
                 motion_detector_version: int,
                 profile_id: str,
                 quality: str,
                 resolution: str,
                 restricted_bandwidth_mode_enabled: bool):
        pulumi.set(__self__, "audio_recording_enabled", audio_recording_enabled)
        pulumi.set(__self__, "motion_based_retention_enabled", motion_based_retention_enabled)
        pulumi.set(__self__, "motion_detector_version", motion_detector_version)
        pulumi.set(__self__, "profile_id", profile_id)
        pulumi.set(__self__, "quality", quality)
        pulumi.set(__self__, "resolution", resolution)
        pulumi.set(__self__, "restricted_bandwidth_mode_enabled", restricted_bandwidth_mode_enabled)

    @property
    @pulumi.getter(name="audioRecordingEnabled")
    def audio_recording_enabled(self) -> bool:
        return pulumi.get(self, "audio_recording_enabled")

    @property
    @pulumi.getter(name="motionBasedRetentionEnabled")
    def motion_based_retention_enabled(self) -> bool:
        return pulumi.get(self, "motion_based_retention_enabled")

    @property
    @pulumi.getter(name="motionDetectorVersion")
    def motion_detector_version(self) -> int:
        return pulumi.get(self, "motion_detector_version")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> str:
        return pulumi.get(self, "profile_id")

    @property
    @pulumi.getter
    def quality(self) -> str:
        return pulumi.get(self, "quality")

    @property
    @pulumi.getter
    def resolution(self) -> str:
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter(name="restrictedBandwidthModeEnabled")
    def restricted_bandwidth_mode_enabled(self) -> bool:
        return pulumi.get(self, "restricted_bandwidth_mode_enabled")


@pulumi.output_type
class GetCameraSenseItemResult(dict):
    def __init__(__self__, *,
                 audio_detection: 'outputs.GetCameraSenseItemAudioDetectionResult',
                 mqtt_broker_id: str,
                 mqtt_topics: Sequence[str],
                 sense_enabled: bool):
        pulumi.set(__self__, "audio_detection", audio_detection)
        pulumi.set(__self__, "mqtt_broker_id", mqtt_broker_id)
        pulumi.set(__self__, "mqtt_topics", mqtt_topics)
        pulumi.set(__self__, "sense_enabled", sense_enabled)

    @property
    @pulumi.getter(name="audioDetection")
    def audio_detection(self) -> 'outputs.GetCameraSenseItemAudioDetectionResult':
        return pulumi.get(self, "audio_detection")

    @property
    @pulumi.getter(name="mqttBrokerId")
    def mqtt_broker_id(self) -> str:
        return pulumi.get(self, "mqtt_broker_id")

    @property
    @pulumi.getter(name="mqttTopics")
    def mqtt_topics(self) -> Sequence[str]:
        return pulumi.get(self, "mqtt_topics")

    @property
    @pulumi.getter(name="senseEnabled")
    def sense_enabled(self) -> bool:
        return pulumi.get(self, "sense_enabled")


@pulumi.output_type
class GetCameraSenseItemAudioDetectionResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetCameraVideoLinkItemResult(dict):
    def __init__(__self__, *,
                 url: str,
                 vision_url: str):
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "vision_url", vision_url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="visionUrl")
    def vision_url(self) -> str:
        return pulumi.get(self, "vision_url")


@pulumi.output_type
class GetCameraVideoSettingsItemResult(dict):
    def __init__(__self__, *,
                 external_rtsp_enabled: bool,
                 rtsp_url: str):
        """
        :param bool external_rtsp_enabled: Boolean indicating if external rtsp stream is exposed
        :param str rtsp_url: External rstp url. Will only be returned if external rtsp stream is exposed
        """
        pulumi.set(__self__, "external_rtsp_enabled", external_rtsp_enabled)
        pulumi.set(__self__, "rtsp_url", rtsp_url)

    @property
    @pulumi.getter(name="externalRtspEnabled")
    def external_rtsp_enabled(self) -> bool:
        """
        Boolean indicating if external rtsp stream is exposed
        """
        return pulumi.get(self, "external_rtsp_enabled")

    @property
    @pulumi.getter(name="rtspUrl")
    def rtsp_url(self) -> str:
        """
        External rstp url. Will only be returned if external rtsp stream is exposed
        """
        return pulumi.get(self, "rtsp_url")


@pulumi.output_type
class GetCameraWirelessProfilesItemResult(dict):
    def __init__(__self__, *,
                 ids: 'outputs.GetCameraWirelessProfilesItemIdsResult'):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> 'outputs.GetCameraWirelessProfilesItemIdsResult':
        return pulumi.get(self, "ids")


@pulumi.output_type
class GetCameraWirelessProfilesItemIdsResult(dict):
    def __init__(__self__, *,
                 backup: str,
                 primary: str,
                 secondary: str):
        pulumi.set(__self__, "backup", backup)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "secondary", secondary)

    @property
    @pulumi.getter
    def backup(self) -> str:
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter
    def primary(self) -> str:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def secondary(self) -> str:
        return pulumi.get(self, "secondary")


@pulumi.output_type
class GetCellularGatewayLanItemResult(dict):
    def __init__(__self__, *,
                 device_lan_ip: str,
                 device_name: str,
                 device_subnet: str,
                 fixed_ip_assignments: Sequence['outputs.GetCellularGatewayLanItemFixedIpAssignmentResult'],
                 reserved_ip_ranges: Sequence['outputs.GetCellularGatewayLanItemReservedIpRangeResult']):
        """
        :param str device_lan_ip: Lan IP of the MG
        :param str device_name: Name of the MG.
        :param str device_subnet: Subnet configuration of the MG.
        :param Sequence['GetCellularGatewayLanItemFixedIpAssignmentArgs'] fixed_ip_assignments: list of all fixed IP assignments for a single MG
        :param Sequence['GetCellularGatewayLanItemReservedIpRangeArgs'] reserved_ip_ranges: list of all reserved IP ranges for a single MG
        """
        pulumi.set(__self__, "device_lan_ip", device_lan_ip)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "device_subnet", device_subnet)
        pulumi.set(__self__, "fixed_ip_assignments", fixed_ip_assignments)
        pulumi.set(__self__, "reserved_ip_ranges", reserved_ip_ranges)

    @property
    @pulumi.getter(name="deviceLanIp")
    def device_lan_ip(self) -> str:
        """
        Lan IP of the MG
        """
        return pulumi.get(self, "device_lan_ip")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        Name of the MG.
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="deviceSubnet")
    def device_subnet(self) -> str:
        """
        Subnet configuration of the MG.
        """
        return pulumi.get(self, "device_subnet")

    @property
    @pulumi.getter(name="fixedIpAssignments")
    def fixed_ip_assignments(self) -> Sequence['outputs.GetCellularGatewayLanItemFixedIpAssignmentResult']:
        """
        list of all fixed IP assignments for a single MG
        """
        return pulumi.get(self, "fixed_ip_assignments")

    @property
    @pulumi.getter(name="reservedIpRanges")
    def reserved_ip_ranges(self) -> Sequence['outputs.GetCellularGatewayLanItemReservedIpRangeResult']:
        """
        list of all reserved IP ranges for a single MG
        """
        return pulumi.get(self, "reserved_ip_ranges")


@pulumi.output_type
class GetCellularGatewayLanItemFixedIpAssignmentResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 mac: str,
                 name: str):
        """
        :param str ip: The IP address you want to assign to a specific server or device
        :param str mac: The MAC address of the server or device that hosts the internal resource that you wish to receive the specified IP address
        :param str name: A descriptive name of the assignment
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The IP address you want to assign to a specific server or device
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        The MAC address of the server or device that hosts the internal resource that you wish to receive the specified IP address
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A descriptive name of the assignment
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCellularGatewayLanItemReservedIpRangeResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 end: str,
                 start: str):
        """
        :param str comment: Comment explaining the reserved IP range
        :param str end: Ending IP included in the reserved range of IPs
        :param str start: Starting IP included in the reserved range of IPs
        """
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Comment explaining the reserved IP range
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def end(self) -> str:
        """
        Ending IP included in the reserved range of IPs
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> str:
        """
        Starting IP included in the reserved range of IPs
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCellularGatewayPortForwardingRulesItemResult(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.GetCellularGatewayPortForwardingRulesItemRuleResult']):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetCellularGatewayPortForwardingRulesItemRuleResult']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetCellularGatewayPortForwardingRulesItemRuleResult(dict):
    def __init__(__self__, *,
                 access: str,
                 lan_ip: str,
                 local_port: str,
                 name: str,
                 protocol: str,
                 public_port: str,
                 uplink: str):
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "lan_ip", lan_ip)
        pulumi.set(__self__, "local_port", local_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "public_port", public_port)
        pulumi.set(__self__, "uplink", uplink)

    @property
    @pulumi.getter
    def access(self) -> str:
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="lanIp")
    def lan_ip(self) -> str:
        return pulumi.get(self, "lan_ip")

    @property
    @pulumi.getter(name="localPort")
    def local_port(self) -> str:
        return pulumi.get(self, "local_port")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="publicPort")
    def public_port(self) -> str:
        return pulumi.get(self, "public_port")

    @property
    @pulumi.getter
    def uplink(self) -> str:
        return pulumi.get(self, "uplink")


@pulumi.output_type
class GetCellularSimsItemResult(dict):
    def __init__(__self__, *,
                 sims: Sequence['outputs.GetCellularSimsItemSimResult']):
        pulumi.set(__self__, "sims", sims)

    @property
    @pulumi.getter
    def sims(self) -> Sequence['outputs.GetCellularSimsItemSimResult']:
        return pulumi.get(self, "sims")


@pulumi.output_type
class GetCellularSimsItemSimResult(dict):
    def __init__(__self__, *,
                 apns: Sequence['outputs.GetCellularSimsItemSimApnResult'],
                 is_primary: bool,
                 slot: str):
        pulumi.set(__self__, "apns", apns)
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "slot", slot)

    @property
    @pulumi.getter
    def apns(self) -> Sequence['outputs.GetCellularSimsItemSimApnResult']:
        return pulumi.get(self, "apns")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> bool:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter
    def slot(self) -> str:
        return pulumi.get(self, "slot")


@pulumi.output_type
class GetCellularSimsItemSimApnResult(dict):
    def __init__(__self__, *,
                 allowed_ip_types: Sequence[str],
                 authentication: 'outputs.GetCellularSimsItemSimApnAuthenticationResult',
                 name: str):
        pulumi.set(__self__, "allowed_ip_types", allowed_ip_types)
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="allowedIpTypes")
    def allowed_ip_types(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_ip_types")

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetCellularSimsItemSimApnAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCellularSimsItemSimApnAuthenticationResult(dict):
    def __init__(__self__, *,
                 type: str,
                 username: str):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetLiveToolsArpTableItemResult(dict):
    def __init__(__self__, *,
                 arp_table_id: str,
                 entries: Sequence['outputs.GetLiveToolsArpTableItemEntryResult'],
                 error: str,
                 request: 'outputs.GetLiveToolsArpTableItemRequestResult',
                 status: str,
                 url: str):
        """
        :param str arp_table_id: Id of the ARP table request. Used to check the status of the request.
        :param Sequence['GetLiveToolsArpTableItemEntryArgs'] entries: The ARP table entries
        :param str error: An error message for a failed execution
        :param 'GetLiveToolsArpTableItemRequestArgs' request: ARP table request parameters
        :param str status: Status of the ARP table request.
        :param str url: GET this url to check the status of your ARP table request.
        """
        pulumi.set(__self__, "arp_table_id", arp_table_id)
        pulumi.set(__self__, "entries", entries)
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="arpTableId")
    def arp_table_id(self) -> str:
        """
        Id of the ARP table request. Used to check the status of the request.
        """
        return pulumi.get(self, "arp_table_id")

    @property
    @pulumi.getter
    def entries(self) -> Sequence['outputs.GetLiveToolsArpTableItemEntryResult']:
        """
        The ARP table entries
        """
        return pulumi.get(self, "entries")

    @property
    @pulumi.getter
    def error(self) -> str:
        """
        An error message for a failed execution
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def request(self) -> 'outputs.GetLiveToolsArpTableItemRequestResult':
        """
        ARP table request parameters
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the ARP table request.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        GET this url to check the status of your ARP table request.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetLiveToolsArpTableItemEntryResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 last_updated_at: str,
                 mac: str,
                 vlan_id: int):
        """
        :param str ip: The IP address of the ARP table entry
        :param str last_updated_at: Time of the last update of the ARP table entry
        :param str mac: The MAC address of the ARP table entry
        :param int vlan_id: The VLAN ID of the ARP table entry
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "last_updated_at", last_updated_at)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The IP address of the ARP table entry
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> str:
        """
        Time of the last update of the ARP table entry
        """
        return pulumi.get(self, "last_updated_at")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        The MAC address of the ARP table entry
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        """
        The VLAN ID of the ARP table entry
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetLiveToolsArpTableItemRequestResult(dict):
    def __init__(__self__, *,
                 serial: str):
        """
        :param str serial: Device serial number
        """
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetLiveToolsCableTestItemResult(dict):
    def __init__(__self__, *,
                 cable_test_id: str,
                 error: str,
                 request: 'outputs.GetLiveToolsCableTestItemRequestResult',
                 results: Sequence['outputs.GetLiveToolsCableTestItemResultResult'],
                 status: str,
                 url: str):
        """
        :param str cable_test_id: Id of the cable test request. Used to check the status of the request.
        :param str error: An error message for a failed execution
        :param 'GetLiveToolsCableTestItemRequestArgs' request: Cable test request parameters
        :param Sequence['GetLiveToolsCableTestItemResultArgs'] results: Results of the cable test request, one for each requested port.
        :param str status: Status of the cable test request.
        :param str url: GET this url to check the status of your cable test request.
        """
        pulumi.set(__self__, "cable_test_id", cable_test_id)
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "results", results)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="cableTestId")
    def cable_test_id(self) -> str:
        """
        Id of the cable test request. Used to check the status of the request.
        """
        return pulumi.get(self, "cable_test_id")

    @property
    @pulumi.getter
    def error(self) -> str:
        """
        An error message for a failed execution
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def request(self) -> 'outputs.GetLiveToolsCableTestItemRequestResult':
        """
        Cable test request parameters
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetLiveToolsCableTestItemResultResult']:
        """
        Results of the cable test request, one for each requested port.
        """
        return pulumi.get(self, "results")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the cable test request.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        GET this url to check the status of your cable test request.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetLiveToolsCableTestItemRequestResult(dict):
    def __init__(__self__, *,
                 ports: Sequence[str],
                 serial: str):
        """
        :param Sequence[str] ports: A list of ports for which to perform the cable test.
        :param str serial: Device serial number
        """
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        """
        A list of ports for which to perform the cable test.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetLiveToolsCableTestItemResultResult(dict):
    def __init__(__self__, *,
                 error: str,
                 pairs: Sequence['outputs.GetLiveToolsCableTestItemResultPairResult'],
                 port: str,
                 speed_mbps: int,
                 status: str):
        """
        :param str error: If an error occurred during the cable test, the error message will be populated here.
        :param Sequence['GetLiveToolsCableTestItemResultPairArgs'] pairs: Results for each twisted pair within the cable.
        :param str port: The port for which the test was performed.
        :param int speed_mbps: Speed in Mbps.  A speed of 0 indicates the port is down or the port speed is automatic.
        :param str status: The current status of the port. If the cable test is still being performed on the port, "in-progress" is used. If an error occurred during the cable test, "error" is used and the error property will be populated.
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "pairs", pairs)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "speed_mbps", speed_mbps)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def error(self) -> str:
        """
        If an error occurred during the cable test, the error message will be populated here.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def pairs(self) -> Sequence['outputs.GetLiveToolsCableTestItemResultPairResult']:
        """
        Results for each twisted pair within the cable.
        """
        return pulumi.get(self, "pairs")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        The port for which the test was performed.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="speedMbps")
    def speed_mbps(self) -> int:
        """
        Speed in Mbps.  A speed of 0 indicates the port is down or the port speed is automatic.
        """
        return pulumi.get(self, "speed_mbps")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The current status of the port. If the cable test is still being performed on the port, "in-progress" is used. If an error occurred during the cable test, "error" is used and the error property will be populated.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetLiveToolsCableTestItemResultPairResult(dict):
    def __init__(__self__, *,
                 index: int,
                 length_meters: int,
                 status: str):
        """
        :param int index: The index of the twisted pair tested.
        :param int length_meters: The detected length of the twisted pair.
        :param str status: The test result of the twisted pair tested.
        """
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "length_meters", length_meters)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def index(self) -> int:
        """
        The index of the twisted pair tested.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="lengthMeters")
    def length_meters(self) -> int:
        """
        The detected length of the twisted pair.
        """
        return pulumi.get(self, "length_meters")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The test result of the twisted pair tested.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetLiveToolsPingDeviceItemResult(dict):
    def __init__(__self__, *,
                 callback: 'outputs.GetLiveToolsPingDeviceItemCallbackResult',
                 ping_id: str,
                 request: 'outputs.GetLiveToolsPingDeviceItemRequestResult',
                 results: 'outputs.GetLiveToolsPingDeviceItemResultsResult',
                 status: str,
                 url: str):
        """
        :param 'GetLiveToolsPingDeviceItemCallbackArgs' callback: Information for callback used to send back results
        :param str ping_id: Id to check the status of your ping request.
        :param 'GetLiveToolsPingDeviceItemRequestArgs' request: Ping request parameters
        :param 'GetLiveToolsPingDeviceItemResultsArgs' results: Results of the ping request.
        :param str status: Status of the ping request.
        :param str url: GET this url to check the status of your ping request.
        """
        pulumi.set(__self__, "callback", callback)
        pulumi.set(__self__, "ping_id", ping_id)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "results", results)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def callback(self) -> 'outputs.GetLiveToolsPingDeviceItemCallbackResult':
        """
        Information for callback used to send back results
        """
        return pulumi.get(self, "callback")

    @property
    @pulumi.getter(name="pingId")
    def ping_id(self) -> str:
        """
        Id to check the status of your ping request.
        """
        return pulumi.get(self, "ping_id")

    @property
    @pulumi.getter
    def request(self) -> 'outputs.GetLiveToolsPingDeviceItemRequestResult':
        """
        Ping request parameters
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def results(self) -> 'outputs.GetLiveToolsPingDeviceItemResultsResult':
        """
        Results of the ping request.
        """
        return pulumi.get(self, "results")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the ping request.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        GET this url to check the status of your ping request.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetLiveToolsPingDeviceItemCallbackResult(dict):
    def __init__(__self__, *,
                 id: str,
                 status: str,
                 url: str):
        """
        :param str id: The ID of the callback. To check the status of the callback, use this ID in a request to /webhooks/callbacks/statuses/{id}
        :param str status: The status of the callback
        :param str url: The callback URL for the webhook target. This was either provided in the original request or comes from a configured webhook receiver
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the callback. To check the status of the callback, use this ID in a request to /webhooks/callbacks/statuses/{id}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the callback
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The callback URL for the webhook target. This was either provided in the original request or comes from a configured webhook receiver
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetLiveToolsPingDeviceItemRequestResult(dict):
    def __init__(__self__, *,
                 count_r: int,
                 serial: str,
                 target: str):
        """
        :param int count_r: Number of pings to send
        :param str serial: Device serial number
        :param str target: IP address or FQDN to ping
        """
        pulumi.set(__self__, "count_r", count_r)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="countR")
    def count_r(self) -> int:
        """
        Number of pings to send
        """
        return pulumi.get(self, "count_r")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        IP address or FQDN to ping
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class GetLiveToolsPingDeviceItemResultsResult(dict):
    def __init__(__self__, *,
                 latencies: 'outputs.GetLiveToolsPingDeviceItemResultsLatenciesResult',
                 loss: 'outputs.GetLiveToolsPingDeviceItemResultsLossResult',
                 received: int,
                 replies: Sequence['outputs.GetLiveToolsPingDeviceItemResultsReplyResult'],
                 sent: int):
        """
        :param 'GetLiveToolsPingDeviceItemResultsLatenciesArgs' latencies: Packet latency stats
        :param 'GetLiveToolsPingDeviceItemResultsLossArgs' loss: Lost packets
        :param int received: Number of packets received
        :param Sequence['GetLiveToolsPingDeviceItemResultsReplyArgs'] replies: Received packets
        :param int sent: Number of packets sent
        """
        pulumi.set(__self__, "latencies", latencies)
        pulumi.set(__self__, "loss", loss)
        pulumi.set(__self__, "received", received)
        pulumi.set(__self__, "replies", replies)
        pulumi.set(__self__, "sent", sent)

    @property
    @pulumi.getter
    def latencies(self) -> 'outputs.GetLiveToolsPingDeviceItemResultsLatenciesResult':
        """
        Packet latency stats
        """
        return pulumi.get(self, "latencies")

    @property
    @pulumi.getter
    def loss(self) -> 'outputs.GetLiveToolsPingDeviceItemResultsLossResult':
        """
        Lost packets
        """
        return pulumi.get(self, "loss")

    @property
    @pulumi.getter
    def received(self) -> int:
        """
        Number of packets received
        """
        return pulumi.get(self, "received")

    @property
    @pulumi.getter
    def replies(self) -> Sequence['outputs.GetLiveToolsPingDeviceItemResultsReplyResult']:
        """
        Received packets
        """
        return pulumi.get(self, "replies")

    @property
    @pulumi.getter
    def sent(self) -> int:
        """
        Number of packets sent
        """
        return pulumi.get(self, "sent")


@pulumi.output_type
class GetLiveToolsPingDeviceItemResultsLatenciesResult(dict):
    def __init__(__self__, *,
                 average: float,
                 maximum: float,
                 minimum: float):
        """
        :param float average: Average latency
        :param float maximum: Maximum latency
        :param float minimum: Minimum latency
        """
        pulumi.set(__self__, "average", average)
        pulumi.set(__self__, "maximum", maximum)
        pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter
    def average(self) -> float:
        """
        Average latency
        """
        return pulumi.get(self, "average")

    @property
    @pulumi.getter
    def maximum(self) -> float:
        """
        Maximum latency
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> float:
        """
        Minimum latency
        """
        return pulumi.get(self, "minimum")


@pulumi.output_type
class GetLiveToolsPingDeviceItemResultsLossResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of packets lost
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of packets lost
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetLiveToolsPingDeviceItemResultsReplyResult(dict):
    def __init__(__self__, *,
                 latency: float,
                 sequence_id: int,
                 size: int):
        """
        :param float latency: Latency of the packet in milliseconds
        :param int sequence_id: Sequence ID of the packet
        :param int size: Size of the packet in bytes
        """
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "sequence_id", sequence_id)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def latency(self) -> float:
        """
        Latency of the packet in milliseconds
        """
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> int:
        """
        Sequence ID of the packet
        """
        return pulumi.get(self, "sequence_id")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Size of the packet in bytes
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetLiveToolsPingItemResult(dict):
    def __init__(__self__, *,
                 ping_id: str,
                 request: 'outputs.GetLiveToolsPingItemRequestResult',
                 results: 'outputs.GetLiveToolsPingItemResultsResult',
                 status: str,
                 url: str):
        """
        :param str ping_id: Id to check the status of your ping request.
        :param 'GetLiveToolsPingItemRequestArgs' request: Ping request parameters
        :param 'GetLiveToolsPingItemResultsArgs' results: Results of the ping request.
        :param str status: Status of the ping request.
        :param str url: GET this url to check the status of your ping request.
        """
        pulumi.set(__self__, "ping_id", ping_id)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "results", results)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="pingId")
    def ping_id(self) -> str:
        """
        Id to check the status of your ping request.
        """
        return pulumi.get(self, "ping_id")

    @property
    @pulumi.getter
    def request(self) -> 'outputs.GetLiveToolsPingItemRequestResult':
        """
        Ping request parameters
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def results(self) -> 'outputs.GetLiveToolsPingItemResultsResult':
        """
        Results of the ping request.
        """
        return pulumi.get(self, "results")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the ping request.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        GET this url to check the status of your ping request.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetLiveToolsPingItemRequestResult(dict):
    def __init__(__self__, *,
                 count_r: int,
                 serial: str,
                 target: str):
        """
        :param int count_r: Number of pings to send
        :param str serial: Device serial number
        :param str target: IP address or FQDN to ping
        """
        pulumi.set(__self__, "count_r", count_r)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="countR")
    def count_r(self) -> int:
        """
        Number of pings to send
        """
        return pulumi.get(self, "count_r")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        IP address or FQDN to ping
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class GetLiveToolsPingItemResultsResult(dict):
    def __init__(__self__, *,
                 latencies: 'outputs.GetLiveToolsPingItemResultsLatenciesResult',
                 loss: 'outputs.GetLiveToolsPingItemResultsLossResult',
                 received: int,
                 replies: Sequence['outputs.GetLiveToolsPingItemResultsReplyResult'],
                 sent: int):
        """
        :param 'GetLiveToolsPingItemResultsLatenciesArgs' latencies: Packet latency stats
        :param 'GetLiveToolsPingItemResultsLossArgs' loss: Lost packets
        :param int received: Number of packets received
        :param Sequence['GetLiveToolsPingItemResultsReplyArgs'] replies: Received packets
        :param int sent: Number of packets sent
        """
        pulumi.set(__self__, "latencies", latencies)
        pulumi.set(__self__, "loss", loss)
        pulumi.set(__self__, "received", received)
        pulumi.set(__self__, "replies", replies)
        pulumi.set(__self__, "sent", sent)

    @property
    @pulumi.getter
    def latencies(self) -> 'outputs.GetLiveToolsPingItemResultsLatenciesResult':
        """
        Packet latency stats
        """
        return pulumi.get(self, "latencies")

    @property
    @pulumi.getter
    def loss(self) -> 'outputs.GetLiveToolsPingItemResultsLossResult':
        """
        Lost packets
        """
        return pulumi.get(self, "loss")

    @property
    @pulumi.getter
    def received(self) -> int:
        """
        Number of packets received
        """
        return pulumi.get(self, "received")

    @property
    @pulumi.getter
    def replies(self) -> Sequence['outputs.GetLiveToolsPingItemResultsReplyResult']:
        """
        Received packets
        """
        return pulumi.get(self, "replies")

    @property
    @pulumi.getter
    def sent(self) -> int:
        """
        Number of packets sent
        """
        return pulumi.get(self, "sent")


@pulumi.output_type
class GetLiveToolsPingItemResultsLatenciesResult(dict):
    def __init__(__self__, *,
                 average: float,
                 maximum: float,
                 minimum: float):
        """
        :param float average: Average latency
        :param float maximum: Maximum latency
        :param float minimum: Minimum latency
        """
        pulumi.set(__self__, "average", average)
        pulumi.set(__self__, "maximum", maximum)
        pulumi.set(__self__, "minimum", minimum)

    @property
    @pulumi.getter
    def average(self) -> float:
        """
        Average latency
        """
        return pulumi.get(self, "average")

    @property
    @pulumi.getter
    def maximum(self) -> float:
        """
        Maximum latency
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> float:
        """
        Minimum latency
        """
        return pulumi.get(self, "minimum")


@pulumi.output_type
class GetLiveToolsPingItemResultsLossResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of packets lost
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of packets lost
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetLiveToolsPingItemResultsReplyResult(dict):
    def __init__(__self__, *,
                 latency: float,
                 sequence_id: int,
                 size: int):
        """
        :param float latency: Latency of the packet in milliseconds
        :param int sequence_id: Sequence ID of the packet
        :param int size: Size of the packet in bytes
        """
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "sequence_id", sequence_id)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def latency(self) -> float:
        """
        Latency of the packet in milliseconds
        """
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> int:
        """
        Sequence ID of the packet
        """
        return pulumi.get(self, "sequence_id")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Size of the packet in bytes
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetLiveToolsThroughputTestItemResult(dict):
    def __init__(__self__, *,
                 error: str,
                 request: 'outputs.GetLiveToolsThroughputTestItemRequestResult',
                 result: 'outputs.GetLiveToolsThroughputTestItemResultResult',
                 status: str,
                 throughput_test_id: str,
                 url: str):
        """
        :param str error: Description of the error.
        :param 'GetLiveToolsThroughputTestItemRequestArgs' request: The parameters of the throughput test request
        :param 'GetLiveToolsThroughputTestItemResultArgs' result: Result of the throughput test request
        :param str status: Status of the throughput test request
        :param str throughput_test_id: ID of throughput test job
        :param str url: GET this url to check the status of your throughput test request
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "result", result)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "throughput_test_id", throughput_test_id)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def error(self) -> str:
        """
        Description of the error.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def request(self) -> 'outputs.GetLiveToolsThroughputTestItemRequestResult':
        """
        The parameters of the throughput test request
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def result(self) -> 'outputs.GetLiveToolsThroughputTestItemResultResult':
        """
        Result of the throughput test request
        """
        return pulumi.get(self, "result")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the throughput test request
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="throughputTestId")
    def throughput_test_id(self) -> str:
        """
        ID of throughput test job
        """
        return pulumi.get(self, "throughput_test_id")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        GET this url to check the status of your throughput test request
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetLiveToolsThroughputTestItemRequestResult(dict):
    def __init__(__self__, *,
                 serial: str):
        """
        :param str serial: Device serial number
        """
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetLiveToolsThroughputTestItemResultResult(dict):
    def __init__(__self__, *,
                 speeds: 'outputs.GetLiveToolsThroughputTestItemResultSpeedsResult'):
        """
        :param 'GetLiveToolsThroughputTestItemResultSpeedsArgs' speeds: Shows the speeds (Mbps)
        """
        pulumi.set(__self__, "speeds", speeds)

    @property
    @pulumi.getter
    def speeds(self) -> 'outputs.GetLiveToolsThroughputTestItemResultSpeedsResult':
        """
        Shows the speeds (Mbps)
        """
        return pulumi.get(self, "speeds")


@pulumi.output_type
class GetLiveToolsThroughputTestItemResultSpeedsResult(dict):
    def __init__(__self__, *,
                 downstream: int):
        """
        :param int downstream: Shows the download speed from shard (Mbps)
        """
        pulumi.set(__self__, "downstream", downstream)

    @property
    @pulumi.getter
    def downstream(self) -> int:
        """
        Shows the download speed from shard (Mbps)
        """
        return pulumi.get(self, "downstream")


@pulumi.output_type
class GetLiveToolsWakeOnLanItemResult(dict):
    def __init__(__self__, *,
                 error: str,
                 request: 'outputs.GetLiveToolsWakeOnLanItemRequestResult',
                 status: str,
                 url: str,
                 wake_on_lan_id: str):
        """
        :param str error: An error message for a failed execution
        :param 'GetLiveToolsWakeOnLanItemRequestArgs' request: The parameters of the Wake-on-LAN request
        :param str status: Status of the Wake-on-LAN request
        :param str url: GET this url to check the status of your ping request
        :param str wake_on_lan_id: ID of the Wake-on-LAN job
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "wake_on_lan_id", wake_on_lan_id)

    @property
    @pulumi.getter
    def error(self) -> str:
        """
        An error message for a failed execution
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter
    def request(self) -> 'outputs.GetLiveToolsWakeOnLanItemRequestResult':
        """
        The parameters of the Wake-on-LAN request
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the Wake-on-LAN request
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        GET this url to check the status of your ping request
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="wakeOnLanId")
    def wake_on_lan_id(self) -> str:
        """
        ID of the Wake-on-LAN job
        """
        return pulumi.get(self, "wake_on_lan_id")


@pulumi.output_type
class GetLiveToolsWakeOnLanItemRequestResult(dict):
    def __init__(__self__, *,
                 mac: str,
                 serial: str,
                 vlan_id: int):
        """
        :param str mac: The target's MAC address
        :param str serial: Device serial number
        :param int vlan_id: The target's VLAN (1 to 4094)
        """
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        The target's MAC address
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        """
        The target's VLAN (1 to 4094)
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetLldpCdpItemResult(dict):
    def __init__(__self__, *,
                 ports: 'outputs.GetLldpCdpItemPortsResult',
                 source_mac: str):
        """
        :param str source_mac: Source MAC address
        """
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "source_mac", source_mac)

    @property
    @pulumi.getter
    def ports(self) -> 'outputs.GetLldpCdpItemPortsResult':
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="sourceMac")
    def source_mac(self) -> str:
        """
        Source MAC address
        """
        return pulumi.get(self, "source_mac")


@pulumi.output_type
class GetLldpCdpItemPortsResult(dict):
    def __init__(__self__, *,
                 status12: 'outputs.GetLldpCdpItemPortsStatus12Result',
                 status8: 'outputs.GetLldpCdpItemPortsStatus8Result'):
        pulumi.set(__self__, "status12", status12)
        pulumi.set(__self__, "status8", status8)

    @property
    @pulumi.getter
    def status12(self) -> 'outputs.GetLldpCdpItemPortsStatus12Result':
        return pulumi.get(self, "status12")

    @property
    @pulumi.getter
    def status8(self) -> 'outputs.GetLldpCdpItemPortsStatus8Result':
        return pulumi.get(self, "status8")


@pulumi.output_type
class GetLldpCdpItemPortsStatus12Result(dict):
    def __init__(__self__, *,
                 cdp: 'outputs.GetLldpCdpItemPortsStatus12CdpResult',
                 lldp: 'outputs.GetLldpCdpItemPortsStatus12LldpResult'):
        pulumi.set(__self__, "cdp", cdp)
        pulumi.set(__self__, "lldp", lldp)

    @property
    @pulumi.getter
    def cdp(self) -> 'outputs.GetLldpCdpItemPortsStatus12CdpResult':
        return pulumi.get(self, "cdp")

    @property
    @pulumi.getter
    def lldp(self) -> 'outputs.GetLldpCdpItemPortsStatus12LldpResult':
        return pulumi.get(self, "lldp")


@pulumi.output_type
class GetLldpCdpItemPortsStatus12CdpResult(dict):
    def __init__(__self__, *,
                 address: str,
                 device_id: str,
                 port_id: str,
                 source_port: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "source_port", source_port)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> str:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> str:
        return pulumi.get(self, "source_port")


@pulumi.output_type
class GetLldpCdpItemPortsStatus12LldpResult(dict):
    def __init__(__self__, *,
                 management_address: str,
                 port_id: str,
                 source_port: str,
                 system_name: str):
        pulumi.set(__self__, "management_address", management_address)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "source_port", source_port)
        pulumi.set(__self__, "system_name", system_name)

    @property
    @pulumi.getter(name="managementAddress")
    def management_address(self) -> str:
        return pulumi.get(self, "management_address")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> str:
        return pulumi.get(self, "source_port")

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> str:
        return pulumi.get(self, "system_name")


@pulumi.output_type
class GetLldpCdpItemPortsStatus8Result(dict):
    def __init__(__self__, *,
                 cdp: 'outputs.GetLldpCdpItemPortsStatus8CdpResult'):
        pulumi.set(__self__, "cdp", cdp)

    @property
    @pulumi.getter
    def cdp(self) -> 'outputs.GetLldpCdpItemPortsStatus8CdpResult':
        return pulumi.get(self, "cdp")


@pulumi.output_type
class GetLldpCdpItemPortsStatus8CdpResult(dict):
    def __init__(__self__, *,
                 address: str,
                 device_id: str,
                 port_id: str,
                 source_port: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "source_port", source_port)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> str:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> str:
        return pulumi.get(self, "source_port")


@pulumi.output_type
class GetManagementInterfaceItemResult(dict):
    def __init__(__self__, *,
                 ddns_hostnames: 'outputs.GetManagementInterfaceItemDdnsHostnamesResult',
                 wan1: 'outputs.GetManagementInterfaceItemWan1Result',
                 wan2: 'outputs.GetManagementInterfaceItemWan2Result'):
        """
        :param 'GetManagementInterfaceItemDdnsHostnamesArgs' ddns_hostnames: Dynamic DNS hostnames.
        :param 'GetManagementInterfaceItemWan1Args' wan1: WAN 1 settings
        :param 'GetManagementInterfaceItemWan2Args' wan2: WAN 2 settings (only for MX devices)
        """
        pulumi.set(__self__, "ddns_hostnames", ddns_hostnames)
        pulumi.set(__self__, "wan1", wan1)
        pulumi.set(__self__, "wan2", wan2)

    @property
    @pulumi.getter(name="ddnsHostnames")
    def ddns_hostnames(self) -> 'outputs.GetManagementInterfaceItemDdnsHostnamesResult':
        """
        Dynamic DNS hostnames.
        """
        return pulumi.get(self, "ddns_hostnames")

    @property
    @pulumi.getter
    def wan1(self) -> 'outputs.GetManagementInterfaceItemWan1Result':
        """
        WAN 1 settings
        """
        return pulumi.get(self, "wan1")

    @property
    @pulumi.getter
    def wan2(self) -> 'outputs.GetManagementInterfaceItemWan2Result':
        """
        WAN 2 settings (only for MX devices)
        """
        return pulumi.get(self, "wan2")


@pulumi.output_type
class GetManagementInterfaceItemDdnsHostnamesResult(dict):
    def __init__(__self__, *,
                 active_ddns_hostname: str,
                 ddns_hostname_wan1: str,
                 ddns_hostname_wan2: str):
        """
        :param str active_ddns_hostname: Active dynamic DNS hostname.
        :param str ddns_hostname_wan1: WAN 1 dynamic DNS hostname.
        :param str ddns_hostname_wan2: WAN 2 dynamic DNS hostname.
        """
        pulumi.set(__self__, "active_ddns_hostname", active_ddns_hostname)
        pulumi.set(__self__, "ddns_hostname_wan1", ddns_hostname_wan1)
        pulumi.set(__self__, "ddns_hostname_wan2", ddns_hostname_wan2)

    @property
    @pulumi.getter(name="activeDdnsHostname")
    def active_ddns_hostname(self) -> str:
        """
        Active dynamic DNS hostname.
        """
        return pulumi.get(self, "active_ddns_hostname")

    @property
    @pulumi.getter(name="ddnsHostnameWan1")
    def ddns_hostname_wan1(self) -> str:
        """
        WAN 1 dynamic DNS hostname.
        """
        return pulumi.get(self, "ddns_hostname_wan1")

    @property
    @pulumi.getter(name="ddnsHostnameWan2")
    def ddns_hostname_wan2(self) -> str:
        """
        WAN 2 dynamic DNS hostname.
        """
        return pulumi.get(self, "ddns_hostname_wan2")


@pulumi.output_type
class GetManagementInterfaceItemWan1Result(dict):
    def __init__(__self__, *,
                 static_dns: Sequence[str],
                 static_gateway_ip: str,
                 static_ip: str,
                 static_subnet_mask: str,
                 using_static_ip: bool,
                 vlan: int,
                 wan_enabled: str):
        """
        :param Sequence[str] static_dns: Up to two DNS IPs.
        :param str static_gateway_ip: The IP of the gateway on the WAN.
        :param str static_ip: The IP the device should use on the WAN.
        :param str static_subnet_mask: The subnet mask for the WAN.
        :param bool using_static_ip: Configure the interface to have static IP settings or use DHCP.
        :param int vlan: The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
        :param str wan_enabled: Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
        """
        pulumi.set(__self__, "static_dns", static_dns)
        pulumi.set(__self__, "static_gateway_ip", static_gateway_ip)
        pulumi.set(__self__, "static_ip", static_ip)
        pulumi.set(__self__, "static_subnet_mask", static_subnet_mask)
        pulumi.set(__self__, "using_static_ip", using_static_ip)
        pulumi.set(__self__, "vlan", vlan)
        pulumi.set(__self__, "wan_enabled", wan_enabled)

    @property
    @pulumi.getter(name="staticDns")
    def static_dns(self) -> Sequence[str]:
        """
        Up to two DNS IPs.
        """
        return pulumi.get(self, "static_dns")

    @property
    @pulumi.getter(name="staticGatewayIp")
    def static_gateway_ip(self) -> str:
        """
        The IP of the gateway on the WAN.
        """
        return pulumi.get(self, "static_gateway_ip")

    @property
    @pulumi.getter(name="staticIp")
    def static_ip(self) -> str:
        """
        The IP the device should use on the WAN.
        """
        return pulumi.get(self, "static_ip")

    @property
    @pulumi.getter(name="staticSubnetMask")
    def static_subnet_mask(self) -> str:
        """
        The subnet mask for the WAN.
        """
        return pulumi.get(self, "static_subnet_mask")

    @property
    @pulumi.getter(name="usingStaticIp")
    def using_static_ip(self) -> bool:
        """
        Configure the interface to have static IP settings or use DHCP.
        """
        return pulumi.get(self, "using_static_ip")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="wanEnabled")
    def wan_enabled(self) -> str:
        """
        Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
        """
        return pulumi.get(self, "wan_enabled")


@pulumi.output_type
class GetManagementInterfaceItemWan2Result(dict):
    def __init__(__self__, *,
                 static_dns: Sequence[str],
                 static_gateway_ip: str,
                 static_ip: str,
                 static_subnet_mask: str,
                 using_static_ip: bool,
                 vlan: int,
                 wan_enabled: str):
        """
        :param Sequence[str] static_dns: Up to two DNS IPs.
        :param str static_gateway_ip: The IP of the gateway on the WAN.
        :param str static_ip: The IP the device should use on the WAN.
        :param str static_subnet_mask: The subnet mask for the WAN.
        :param bool using_static_ip: Configure the interface to have static IP settings or use DHCP.
        :param int vlan: The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
        :param str wan_enabled: Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
        """
        pulumi.set(__self__, "static_dns", static_dns)
        pulumi.set(__self__, "static_gateway_ip", static_gateway_ip)
        pulumi.set(__self__, "static_ip", static_ip)
        pulumi.set(__self__, "static_subnet_mask", static_subnet_mask)
        pulumi.set(__self__, "using_static_ip", using_static_ip)
        pulumi.set(__self__, "vlan", vlan)
        pulumi.set(__self__, "wan_enabled", wan_enabled)

    @property
    @pulumi.getter(name="staticDns")
    def static_dns(self) -> Sequence[str]:
        """
        Up to two DNS IPs.
        """
        return pulumi.get(self, "static_dns")

    @property
    @pulumi.getter(name="staticGatewayIp")
    def static_gateway_ip(self) -> str:
        """
        The IP of the gateway on the WAN.
        """
        return pulumi.get(self, "static_gateway_ip")

    @property
    @pulumi.getter(name="staticIp")
    def static_ip(self) -> str:
        """
        The IP the device should use on the WAN.
        """
        return pulumi.get(self, "static_ip")

    @property
    @pulumi.getter(name="staticSubnetMask")
    def static_subnet_mask(self) -> str:
        """
        The subnet mask for the WAN.
        """
        return pulumi.get(self, "static_subnet_mask")

    @property
    @pulumi.getter(name="usingStaticIp")
    def using_static_ip(self) -> bool:
        """
        Configure the interface to have static IP settings or use DHCP.
        """
        return pulumi.get(self, "using_static_ip")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="wanEnabled")
    def wan_enabled(self) -> str:
        """
        Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
        """
        return pulumi.get(self, "wan_enabled")


@pulumi.output_type
class GetSensorRelationshipsItemResult(dict):
    def __init__(__self__, *,
                 livestream: 'outputs.GetSensorRelationshipsItemLivestreamResult'):
        """
        :param 'GetSensorRelationshipsItemLivestreamArgs' livestream: A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
        """
        pulumi.set(__self__, "livestream", livestream)

    @property
    @pulumi.getter
    def livestream(self) -> 'outputs.GetSensorRelationshipsItemLivestreamResult':
        """
        A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
        """
        return pulumi.get(self, "livestream")


@pulumi.output_type
class GetSensorRelationshipsItemLivestreamResult(dict):
    def __init__(__self__, *,
                 related_devices: Sequence['outputs.GetSensorRelationshipsItemLivestreamRelatedDeviceResult']):
        """
        :param Sequence['GetSensorRelationshipsItemLivestreamRelatedDeviceArgs'] related_devices: An array of the related devices for the role
        """
        pulumi.set(__self__, "related_devices", related_devices)

    @property
    @pulumi.getter(name="relatedDevices")
    def related_devices(self) -> Sequence['outputs.GetSensorRelationshipsItemLivestreamRelatedDeviceResult']:
        """
        An array of the related devices for the role
        """
        return pulumi.get(self, "related_devices")


@pulumi.output_type
class GetSensorRelationshipsItemLivestreamRelatedDeviceResult(dict):
    def __init__(__self__, *,
                 product_type: str,
                 serial: str):
        """
        :param str product_type: The product type of the related device
        :param str serial: The serial of the related device
        """
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        The product type of the related device
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The serial of the related device
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetSwitchPortsItemResult(dict):
    def __init__(__self__, *,
                 access_policy_number: int,
                 access_policy_type: str,
                 adaptive_policy_group_id: str,
                 allowed_vlans: str,
                 dai_trusted: bool,
                 enabled: bool,
                 flexible_stacking_enabled: bool,
                 isolation_enabled: bool,
                 link_negotiation: str,
                 link_negotiation_capabilities: Sequence[str],
                 mac_allow_lists: Sequence[str],
                 mirror: 'outputs.GetSwitchPortsItemMirrorResult',
                 module: 'outputs.GetSwitchPortsItemModuleResult',
                 name: str,
                 peer_sgt_capable: bool,
                 poe_enabled: bool,
                 port_id: str,
                 port_schedule_id: str,
                 profile: 'outputs.GetSwitchPortsItemProfileResult',
                 rstp_enabled: bool,
                 sticky_mac_allow_list_limit: int,
                 sticky_mac_allow_lists: Sequence[str],
                 storm_control_enabled: bool,
                 stp_guard: str,
                 tags: Sequence[str],
                 type: str,
                 udld: str,
                 vlan: int,
                 voice_vlan: int):
        """
        :param int access_policy_number: The number of a custom access policy to configure on the switch port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
        :param str access_policy_type: The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        :param str adaptive_policy_group_id: The adaptive policy group ID that will be used to tag traffic through this switch port. This ID must pre-exist during the configuration, else needs to be created using adaptivePolicy/groups API. Cannot be applied to a port on a switch bound to profile.
        :param str allowed_vlans: The VLANs allowed on the switch port. Only applicable to trunk ports.
        :param bool dai_trusted: If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
        :param bool enabled: The status of the switch port.
        :param bool flexible_stacking_enabled: For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
        :param bool isolation_enabled: The isolation status of the switch port.
        :param str link_negotiation: The link speed for the switch port.
        :param Sequence[str] link_negotiation_capabilities: Available link speeds for the switch port.
        :param Sequence[str] mac_allow_lists: Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
        :param 'GetSwitchPortsItemMirrorArgs' mirror: Port mirror
        :param 'GetSwitchPortsItemModuleArgs' module: Expansion module
        :param str name: The name of the switch port.
        :param bool peer_sgt_capable: If true, Peer SGT is enabled for traffic through this switch port. Applicable to trunk port only, not access port. Cannot be applied to a port on a switch bound to profile.
        :param bool poe_enabled: The PoE status of the switch port.
        :param str port_id: The identifier of the switch port.
        :param str port_schedule_id: The ID of the port schedule. A value of null will clear the port schedule.
        :param 'GetSwitchPortsItemProfileArgs' profile: Profile attributes
        :param bool rstp_enabled: The rapid spanning tree protocol status.
        :param int sticky_mac_allow_list_limit: The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        :param Sequence[str] sticky_mac_allow_lists: The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        :param bool storm_control_enabled: The storm control status of the switch port.
        :param str stp_guard: The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        :param Sequence[str] tags: The list of tags of the switch port.
        :param str type: The type of the switch port ('trunk' or 'access').
        :param str udld: The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
        :param int vlan: The VLAN of the switch port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        :param int voice_vlan: The voice VLAN of the switch port. Only applicable to access ports.
        """
        pulumi.set(__self__, "access_policy_number", access_policy_number)
        pulumi.set(__self__, "access_policy_type", access_policy_type)
        pulumi.set(__self__, "adaptive_policy_group_id", adaptive_policy_group_id)
        pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        pulumi.set(__self__, "dai_trusted", dai_trusted)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "flexible_stacking_enabled", flexible_stacking_enabled)
        pulumi.set(__self__, "isolation_enabled", isolation_enabled)
        pulumi.set(__self__, "link_negotiation", link_negotiation)
        pulumi.set(__self__, "link_negotiation_capabilities", link_negotiation_capabilities)
        pulumi.set(__self__, "mac_allow_lists", mac_allow_lists)
        pulumi.set(__self__, "mirror", mirror)
        pulumi.set(__self__, "module", module)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peer_sgt_capable", peer_sgt_capable)
        pulumi.set(__self__, "poe_enabled", poe_enabled)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "port_schedule_id", port_schedule_id)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "rstp_enabled", rstp_enabled)
        pulumi.set(__self__, "sticky_mac_allow_list_limit", sticky_mac_allow_list_limit)
        pulumi.set(__self__, "sticky_mac_allow_lists", sticky_mac_allow_lists)
        pulumi.set(__self__, "storm_control_enabled", storm_control_enabled)
        pulumi.set(__self__, "stp_guard", stp_guard)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "udld", udld)
        pulumi.set(__self__, "vlan", vlan)
        pulumi.set(__self__, "voice_vlan", voice_vlan)

    @property
    @pulumi.getter(name="accessPolicyNumber")
    def access_policy_number(self) -> int:
        """
        The number of a custom access policy to configure on the switch port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
        """
        return pulumi.get(self, "access_policy_number")

    @property
    @pulumi.getter(name="accessPolicyType")
    def access_policy_type(self) -> str:
        """
        The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        """
        return pulumi.get(self, "access_policy_type")

    @property
    @pulumi.getter(name="adaptivePolicyGroupId")
    def adaptive_policy_group_id(self) -> str:
        """
        The adaptive policy group ID that will be used to tag traffic through this switch port. This ID must pre-exist during the configuration, else needs to be created using adaptivePolicy/groups API. Cannot be applied to a port on a switch bound to profile.
        """
        return pulumi.get(self, "adaptive_policy_group_id")

    @property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> str:
        """
        The VLANs allowed on the switch port. Only applicable to trunk ports.
        """
        return pulumi.get(self, "allowed_vlans")

    @property
    @pulumi.getter(name="daiTrusted")
    def dai_trusted(self) -> bool:
        """
        If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
        """
        return pulumi.get(self, "dai_trusted")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        The status of the switch port.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="flexibleStackingEnabled")
    def flexible_stacking_enabled(self) -> bool:
        """
        For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
        """
        return pulumi.get(self, "flexible_stacking_enabled")

    @property
    @pulumi.getter(name="isolationEnabled")
    def isolation_enabled(self) -> bool:
        """
        The isolation status of the switch port.
        """
        return pulumi.get(self, "isolation_enabled")

    @property
    @pulumi.getter(name="linkNegotiation")
    def link_negotiation(self) -> str:
        """
        The link speed for the switch port.
        """
        return pulumi.get(self, "link_negotiation")

    @property
    @pulumi.getter(name="linkNegotiationCapabilities")
    def link_negotiation_capabilities(self) -> Sequence[str]:
        """
        Available link speeds for the switch port.
        """
        return pulumi.get(self, "link_negotiation_capabilities")

    @property
    @pulumi.getter(name="macAllowLists")
    def mac_allow_lists(self) -> Sequence[str]:
        """
        Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
        """
        return pulumi.get(self, "mac_allow_lists")

    @property
    @pulumi.getter
    def mirror(self) -> 'outputs.GetSwitchPortsItemMirrorResult':
        """
        Port mirror
        """
        return pulumi.get(self, "mirror")

    @property
    @pulumi.getter
    def module(self) -> 'outputs.GetSwitchPortsItemModuleResult':
        """
        Expansion module
        """
        return pulumi.get(self, "module")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the switch port.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="peerSgtCapable")
    def peer_sgt_capable(self) -> bool:
        """
        If true, Peer SGT is enabled for traffic through this switch port. Applicable to trunk port only, not access port. Cannot be applied to a port on a switch bound to profile.
        """
        return pulumi.get(self, "peer_sgt_capable")

    @property
    @pulumi.getter(name="poeEnabled")
    def poe_enabled(self) -> bool:
        """
        The PoE status of the switch port.
        """
        return pulumi.get(self, "poe_enabled")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        """
        The identifier of the switch port.
        """
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="portScheduleId")
    def port_schedule_id(self) -> str:
        """
        The ID of the port schedule. A value of null will clear the port schedule.
        """
        return pulumi.get(self, "port_schedule_id")

    @property
    @pulumi.getter
    def profile(self) -> 'outputs.GetSwitchPortsItemProfileResult':
        """
        Profile attributes
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="rstpEnabled")
    def rstp_enabled(self) -> bool:
        """
        The rapid spanning tree protocol status.
        """
        return pulumi.get(self, "rstp_enabled")

    @property
    @pulumi.getter(name="stickyMacAllowListLimit")
    def sticky_mac_allow_list_limit(self) -> int:
        """
        The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        """
        return pulumi.get(self, "sticky_mac_allow_list_limit")

    @property
    @pulumi.getter(name="stickyMacAllowLists")
    def sticky_mac_allow_lists(self) -> Sequence[str]:
        """
        The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        """
        return pulumi.get(self, "sticky_mac_allow_lists")

    @property
    @pulumi.getter(name="stormControlEnabled")
    def storm_control_enabled(self) -> bool:
        """
        The storm control status of the switch port.
        """
        return pulumi.get(self, "storm_control_enabled")

    @property
    @pulumi.getter(name="stpGuard")
    def stp_guard(self) -> str:
        """
        The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        """
        return pulumi.get(self, "stp_guard")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        The list of tags of the switch port.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the switch port ('trunk' or 'access').
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def udld(self) -> str:
        """
        The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
        """
        return pulumi.get(self, "udld")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        The VLAN of the switch port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> int:
        """
        The voice VLAN of the switch port. Only applicable to access ports.
        """
        return pulumi.get(self, "voice_vlan")


@pulumi.output_type
class GetSwitchPortsItemMirrorResult(dict):
    def __init__(__self__, *,
                 mode: str):
        """
        :param str mode: The port mirror mode. Can be one of ('Destination port', 'Source port' or 'Not mirroring traffic').
        """
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        The port mirror mode. Can be one of ('Destination port', 'Source port' or 'Not mirroring traffic').
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetSwitchPortsItemModuleResult(dict):
    def __init__(__self__, *,
                 model: str):
        """
        :param str model: The model of the expansion module.
        """
        pulumi.set(__self__, "model", model)

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        The model of the expansion module.
        """
        return pulumi.get(self, "model")


@pulumi.output_type
class GetSwitchPortsItemProfileResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 id: str,
                 iname: str):
        """
        :param bool enabled: When enabled, override this port's configuration with a port profile.
        :param str id: When enabled, the ID of the port profile used to override the port's configuration.
        :param str iname: When enabled, the IName of the profile.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "iname", iname)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        When enabled, override this port's configuration with a port profile.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        When enabled, the ID of the port profile used to override the port's configuration.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def iname(self) -> str:
        """
        When enabled, the IName of the profile.
        """
        return pulumi.get(self, "iname")


@pulumi.output_type
class GetSwitchPortsStatusesItemResult(dict):
    def __init__(__self__, *,
                 cdp: 'outputs.GetSwitchPortsStatusesItemCdpResult',
                 client_count: int,
                 duplex: str,
                 enabled: bool,
                 errors: Sequence[str],
                 is_uplink: bool,
                 lldp: 'outputs.GetSwitchPortsStatusesItemLldpResult',
                 port_id: str,
                 power_usage_in_wh: float,
                 secure_port: 'outputs.GetSwitchPortsStatusesItemSecurePortResult',
                 spanning_tree: 'outputs.GetSwitchPortsStatusesItemSpanningTreeResult',
                 speed: str,
                 status: str,
                 traffic_in_kbps: 'outputs.GetSwitchPortsStatusesItemTrafficInKbpsResult',
                 usage_in_kb: 'outputs.GetSwitchPortsStatusesItemUsageInKbResult',
                 warnings: Sequence[str]):
        """
        :param 'GetSwitchPortsStatusesItemCdpArgs' cdp: The Cisco Discovery Protocol (CDP) information of the connected device.
        :param int client_count: The number of clients connected through this port.
        :param str duplex: The current duplex of a connected port.
        :param bool enabled: Whether the port is configured to be enabled.
        :param Sequence[str] errors: All errors present on the port.
        :param bool is_uplink: Whether the port is the switch's uplink.
        :param 'GetSwitchPortsStatusesItemLldpArgs' lldp: The Link Layer Discovery Protocol (LLDP) information of the connected device.
        :param str port_id: The string identifier of this port on the switch. This is commonly just the port number but may contain additional identifying information such as the slot and module-type if the port is located on a port module.
        :param float power_usage_in_wh: How much power (in watt-hours) has been delivered by this port during the timespan.
        :param 'GetSwitchPortsStatusesItemSecurePortArgs' secure_port: The Secure Port status of the port.
        :param 'GetSwitchPortsStatusesItemSpanningTreeArgs' spanning_tree: The Spanning Tree Protocol (STP) information of the connected device.
        :param str speed: The current data transfer rate which the port is operating at.
        :param str status: The current connection status of the port.
        :param 'GetSwitchPortsStatusesItemTrafficInKbpsArgs' traffic_in_kbps: A breakdown of the average speed of data that has passed through this port during the timespan.
        :param 'GetSwitchPortsStatusesItemUsageInKbArgs' usage_in_kb: A breakdown of how many kilobytes have passed through this port during the timespan.
        :param Sequence[str] warnings: All warnings present on the port.
        """
        pulumi.set(__self__, "cdp", cdp)
        pulumi.set(__self__, "client_count", client_count)
        pulumi.set(__self__, "duplex", duplex)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "is_uplink", is_uplink)
        pulumi.set(__self__, "lldp", lldp)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "power_usage_in_wh", power_usage_in_wh)
        pulumi.set(__self__, "secure_port", secure_port)
        pulumi.set(__self__, "spanning_tree", spanning_tree)
        pulumi.set(__self__, "speed", speed)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "traffic_in_kbps", traffic_in_kbps)
        pulumi.set(__self__, "usage_in_kb", usage_in_kb)
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def cdp(self) -> 'outputs.GetSwitchPortsStatusesItemCdpResult':
        """
        The Cisco Discovery Protocol (CDP) information of the connected device.
        """
        return pulumi.get(self, "cdp")

    @property
    @pulumi.getter(name="clientCount")
    def client_count(self) -> int:
        """
        The number of clients connected through this port.
        """
        return pulumi.get(self, "client_count")

    @property
    @pulumi.getter
    def duplex(self) -> str:
        """
        The current duplex of a connected port.
        """
        return pulumi.get(self, "duplex")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether the port is configured to be enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def errors(self) -> Sequence[str]:
        """
        All errors present on the port.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="isUplink")
    def is_uplink(self) -> bool:
        """
        Whether the port is the switch's uplink.
        """
        return pulumi.get(self, "is_uplink")

    @property
    @pulumi.getter
    def lldp(self) -> 'outputs.GetSwitchPortsStatusesItemLldpResult':
        """
        The Link Layer Discovery Protocol (LLDP) information of the connected device.
        """
        return pulumi.get(self, "lldp")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        """
        The string identifier of this port on the switch. This is commonly just the port number but may contain additional identifying information such as the slot and module-type if the port is located on a port module.
        """
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="powerUsageInWh")
    def power_usage_in_wh(self) -> float:
        """
        How much power (in watt-hours) has been delivered by this port during the timespan.
        """
        return pulumi.get(self, "power_usage_in_wh")

    @property
    @pulumi.getter(name="securePort")
    def secure_port(self) -> 'outputs.GetSwitchPortsStatusesItemSecurePortResult':
        """
        The Secure Port status of the port.
        """
        return pulumi.get(self, "secure_port")

    @property
    @pulumi.getter(name="spanningTree")
    def spanning_tree(self) -> 'outputs.GetSwitchPortsStatusesItemSpanningTreeResult':
        """
        The Spanning Tree Protocol (STP) information of the connected device.
        """
        return pulumi.get(self, "spanning_tree")

    @property
    @pulumi.getter
    def speed(self) -> str:
        """
        The current data transfer rate which the port is operating at.
        """
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The current connection status of the port.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trafficInKbps")
    def traffic_in_kbps(self) -> 'outputs.GetSwitchPortsStatusesItemTrafficInKbpsResult':
        """
        A breakdown of the average speed of data that has passed through this port during the timespan.
        """
        return pulumi.get(self, "traffic_in_kbps")

    @property
    @pulumi.getter(name="usageInKb")
    def usage_in_kb(self) -> 'outputs.GetSwitchPortsStatusesItemUsageInKbResult':
        """
        A breakdown of how many kilobytes have passed through this port during the timespan.
        """
        return pulumi.get(self, "usage_in_kb")

    @property
    @pulumi.getter
    def warnings(self) -> Sequence[str]:
        """
        All warnings present on the port.
        """
        return pulumi.get(self, "warnings")


@pulumi.output_type
class GetSwitchPortsStatusesItemCdpResult(dict):
    def __init__(__self__, *,
                 address: str,
                 capabilities: str,
                 device_id: str,
                 management_address: str,
                 native_vlan: int,
                 platform: str,
                 port_id: str,
                 system_name: str,
                 version: str,
                 vtp_management_domain: str):
        """
        :param str address: Contains network addresses of both receiving and sending devices.
        :param str capabilities: Identifies the device type, which indicates the functional capabilities of the device.
        :param str device_id: Identifies the device name.
        :param str management_address: The device's management IP.
        :param int native_vlan: Indicates, per interface, the assumed VLAN for untagged packets on the interface.
        :param str platform: Identifies the hardware platform of the device.
        :param str port_id: Identifies the port from which the CDP packet was sent.
        :param str system_name: The system name.
        :param str version: Contains the device software release information.
        :param str vtp_management_domain: Advertises the configured VLAN Trunking Protocl (VTP)-management-domain name of the system.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "management_address", management_address)
        pulumi.set(__self__, "native_vlan", native_vlan)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "system_name", system_name)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vtp_management_domain", vtp_management_domain)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        Contains network addresses of both receiving and sending devices.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def capabilities(self) -> str:
        """
        Identifies the device type, which indicates the functional capabilities of the device.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> str:
        """
        Identifies the device name.
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="managementAddress")
    def management_address(self) -> str:
        """
        The device's management IP.
        """
        return pulumi.get(self, "management_address")

    @property
    @pulumi.getter(name="nativeVlan")
    def native_vlan(self) -> int:
        """
        Indicates, per interface, the assumed VLAN for untagged packets on the interface.
        """
        return pulumi.get(self, "native_vlan")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        Identifies the hardware platform of the device.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        """
        Identifies the port from which the CDP packet was sent.
        """
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> str:
        """
        The system name.
        """
        return pulumi.get(self, "system_name")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Contains the device software release information.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vtpManagementDomain")
    def vtp_management_domain(self) -> str:
        """
        Advertises the configured VLAN Trunking Protocl (VTP)-management-domain name of the system.
        """
        return pulumi.get(self, "vtp_management_domain")


@pulumi.output_type
class GetSwitchPortsStatusesItemLldpResult(dict):
    def __init__(__self__, *,
                 chassis_id: str,
                 management_address: str,
                 management_vlan: int,
                 port_description: str,
                 port_id: str,
                 port_vlan: int,
                 system_capabilities: str,
                 system_description: str,
                 system_name: str):
        """
        :param str chassis_id: The device's chassis ID.
        :param str management_address: The device's management IP.
        :param int management_vlan: The device's management VLAN.
        :param str port_description: Description of the port from which the LLDP packet was sent.
        :param str port_id: Identifies the port from which the LLDP packet was sent
        :param int port_vlan: The port's VLAN.
        :param str system_capabilities: Identifies the device type, which indicates the functional capabilities of the device.
        :param str system_description: The device's system description.
        :param str system_name: The device's system name.
        """
        pulumi.set(__self__, "chassis_id", chassis_id)
        pulumi.set(__self__, "management_address", management_address)
        pulumi.set(__self__, "management_vlan", management_vlan)
        pulumi.set(__self__, "port_description", port_description)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "port_vlan", port_vlan)
        pulumi.set(__self__, "system_capabilities", system_capabilities)
        pulumi.set(__self__, "system_description", system_description)
        pulumi.set(__self__, "system_name", system_name)

    @property
    @pulumi.getter(name="chassisId")
    def chassis_id(self) -> str:
        """
        The device's chassis ID.
        """
        return pulumi.get(self, "chassis_id")

    @property
    @pulumi.getter(name="managementAddress")
    def management_address(self) -> str:
        """
        The device's management IP.
        """
        return pulumi.get(self, "management_address")

    @property
    @pulumi.getter(name="managementVlan")
    def management_vlan(self) -> int:
        """
        The device's management VLAN.
        """
        return pulumi.get(self, "management_vlan")

    @property
    @pulumi.getter(name="portDescription")
    def port_description(self) -> str:
        """
        Description of the port from which the LLDP packet was sent.
        """
        return pulumi.get(self, "port_description")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        """
        Identifies the port from which the LLDP packet was sent
        """
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="portVlan")
    def port_vlan(self) -> int:
        """
        The port's VLAN.
        """
        return pulumi.get(self, "port_vlan")

    @property
    @pulumi.getter(name="systemCapabilities")
    def system_capabilities(self) -> str:
        """
        Identifies the device type, which indicates the functional capabilities of the device.
        """
        return pulumi.get(self, "system_capabilities")

    @property
    @pulumi.getter(name="systemDescription")
    def system_description(self) -> str:
        """
        The device's system description.
        """
        return pulumi.get(self, "system_description")

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> str:
        """
        The device's system name.
        """
        return pulumi.get(self, "system_name")


@pulumi.output_type
class GetSwitchPortsStatusesItemSecurePortResult(dict):
    def __init__(__self__, *,
                 active: bool,
                 authentication_status: str,
                 config_overrides: 'outputs.GetSwitchPortsStatusesItemSecurePortConfigOverridesResult',
                 enabled: bool):
        """
        :param bool active: Whether Secure Port is currently active for this port.
        :param str authentication_status: The current Secure Port status.
        :param 'GetSwitchPortsStatusesItemSecurePortConfigOverridesArgs' config_overrides: The configuration overrides applied to this port when Secure Port is active.
        :param bool enabled: Whether Secure Port is turned on for this port.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "authentication_status", authentication_status)
        pulumi.set(__self__, "config_overrides", config_overrides)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Whether Secure Port is currently active for this port.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="authenticationStatus")
    def authentication_status(self) -> str:
        """
        The current Secure Port status.
        """
        return pulumi.get(self, "authentication_status")

    @property
    @pulumi.getter(name="configOverrides")
    def config_overrides(self) -> 'outputs.GetSwitchPortsStatusesItemSecurePortConfigOverridesResult':
        """
        The configuration overrides applied to this port when Secure Port is active.
        """
        return pulumi.get(self, "config_overrides")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether Secure Port is turned on for this port.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetSwitchPortsStatusesItemSecurePortConfigOverridesResult(dict):
    def __init__(__self__, *,
                 allowed_vlans: str,
                 type: str,
                 vlan: int,
                 voice_vlan: int):
        """
        :param str allowed_vlans: The VLANs allowed on the . Only applicable to trunk ports.
        :param str type: The type of the  ('trunk' or 'access').
        :param int vlan: The VLAN of the . For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        :param int voice_vlan: The voice VLAN of the . Only applicable to access ports.
        """
        pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vlan", vlan)
        pulumi.set(__self__, "voice_vlan", voice_vlan)

    @property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> str:
        """
        The VLANs allowed on the . Only applicable to trunk ports.
        """
        return pulumi.get(self, "allowed_vlans")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the  ('trunk' or 'access').
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        The VLAN of the . For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> int:
        """
        The voice VLAN of the . Only applicable to access ports.
        """
        return pulumi.get(self, "voice_vlan")


@pulumi.output_type
class GetSwitchPortsStatusesItemSpanningTreeResult(dict):
    def __init__(__self__, *,
                 statuses: Sequence[str]):
        """
        :param Sequence[str] statuses: The current Spanning Tree Protocol statuses of the port.
        """
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def statuses(self) -> Sequence[str]:
        """
        The current Spanning Tree Protocol statuses of the port.
        """
        return pulumi.get(self, "statuses")


@pulumi.output_type
class GetSwitchPortsStatusesItemTrafficInKbpsResult(dict):
    def __init__(__self__, *,
                 recv: float,
                 sent: float,
                 total: float):
        """
        :param float recv: The average speed of the data received (in kilobits-per-second).
        :param float sent: The average speed of the data sent (in kilobits-per-second).
        :param float total: The average speed of the data sent and received (in kilobits-per-second).
        """
        pulumi.set(__self__, "recv", recv)
        pulumi.set(__self__, "sent", sent)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def recv(self) -> float:
        """
        The average speed of the data received (in kilobits-per-second).
        """
        return pulumi.get(self, "recv")

    @property
    @pulumi.getter
    def sent(self) -> float:
        """
        The average speed of the data sent (in kilobits-per-second).
        """
        return pulumi.get(self, "sent")

    @property
    @pulumi.getter
    def total(self) -> float:
        """
        The average speed of the data sent and received (in kilobits-per-second).
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetSwitchPortsStatusesItemUsageInKbResult(dict):
    def __init__(__self__, *,
                 recv: int,
                 sent: int,
                 total: int):
        """
        :param int recv: The amount of data received (in kilobytes).
        :param int sent: The amount of data sent (in kilobytes).
        :param int total: The total amount of data sent and received (in kilobytes).
        """
        pulumi.set(__self__, "recv", recv)
        pulumi.set(__self__, "sent", sent)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def recv(self) -> int:
        """
        The amount of data received (in kilobytes).
        """
        return pulumi.get(self, "recv")

    @property
    @pulumi.getter
    def sent(self) -> int:
        """
        The amount of data sent (in kilobytes).
        """
        return pulumi.get(self, "sent")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        The total amount of data sent and received (in kilobytes).
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetSwitchRoutingInterfacesDhcpItemResult(dict):
    def __init__(__self__, *,
                 boot_file_name: str,
                 boot_next_server: str,
                 boot_options_enabled: bool,
                 dhcp_lease_time: str,
                 dhcp_mode: str,
                 dhcp_options: Sequence['outputs.GetSwitchRoutingInterfacesDhcpItemDhcpOptionResult'],
                 dhcp_relay_server_ips: Sequence[str],
                 dns_custom_nameservers: Sequence[str],
                 dns_nameservers_option: str,
                 fixed_ip_assignments: Sequence['outputs.GetSwitchRoutingInterfacesDhcpItemFixedIpAssignmentResult'],
                 reserved_ip_ranges: Sequence['outputs.GetSwitchRoutingInterfacesDhcpItemReservedIpRangeResult']):
        """
        :param str boot_file_name: The PXE boot server file name for the DHCP server running on the switch stack interface
        :param str boot_next_server: The PXE boot server IP for the DHCP server running on the switch stack interface
        :param bool boot_options_enabled: Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
        :param str dhcp_lease_time: The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
        :param str dhcp_mode: The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
        :param Sequence['GetSwitchRoutingInterfacesDhcpItemDhcpOptionArgs'] dhcp_options: Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
        :param Sequence[str] dhcp_relay_server_ips: The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
        :param Sequence[str] dns_custom_nameservers: The DHCP name server IPs when DHCP name server option is 'custom'
        :param str dns_nameservers_option: The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
        :param Sequence['GetSwitchRoutingInterfacesDhcpItemFixedIpAssignmentArgs'] fixed_ip_assignments: Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
        :param Sequence['GetSwitchRoutingInterfacesDhcpItemReservedIpRangeArgs'] reserved_ip_ranges: Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
        """
        pulumi.set(__self__, "boot_file_name", boot_file_name)
        pulumi.set(__self__, "boot_next_server", boot_next_server)
        pulumi.set(__self__, "boot_options_enabled", boot_options_enabled)
        pulumi.set(__self__, "dhcp_lease_time", dhcp_lease_time)
        pulumi.set(__self__, "dhcp_mode", dhcp_mode)
        pulumi.set(__self__, "dhcp_options", dhcp_options)
        pulumi.set(__self__, "dhcp_relay_server_ips", dhcp_relay_server_ips)
        pulumi.set(__self__, "dns_custom_nameservers", dns_custom_nameservers)
        pulumi.set(__self__, "dns_nameservers_option", dns_nameservers_option)
        pulumi.set(__self__, "fixed_ip_assignments", fixed_ip_assignments)
        pulumi.set(__self__, "reserved_ip_ranges", reserved_ip_ranges)

    @property
    @pulumi.getter(name="bootFileName")
    def boot_file_name(self) -> str:
        """
        The PXE boot server file name for the DHCP server running on the switch stack interface
        """
        return pulumi.get(self, "boot_file_name")

    @property
    @pulumi.getter(name="bootNextServer")
    def boot_next_server(self) -> str:
        """
        The PXE boot server IP for the DHCP server running on the switch stack interface
        """
        return pulumi.get(self, "boot_next_server")

    @property
    @pulumi.getter(name="bootOptionsEnabled")
    def boot_options_enabled(self) -> bool:
        """
        Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
        """
        return pulumi.get(self, "boot_options_enabled")

    @property
    @pulumi.getter(name="dhcpLeaseTime")
    def dhcp_lease_time(self) -> str:
        """
        The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
        """
        return pulumi.get(self, "dhcp_lease_time")

    @property
    @pulumi.getter(name="dhcpMode")
    def dhcp_mode(self) -> str:
        """
        The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
        """
        return pulumi.get(self, "dhcp_mode")

    @property
    @pulumi.getter(name="dhcpOptions")
    def dhcp_options(self) -> Sequence['outputs.GetSwitchRoutingInterfacesDhcpItemDhcpOptionResult']:
        """
        Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
        """
        return pulumi.get(self, "dhcp_options")

    @property
    @pulumi.getter(name="dhcpRelayServerIps")
    def dhcp_relay_server_ips(self) -> Sequence[str]:
        """
        The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
        """
        return pulumi.get(self, "dhcp_relay_server_ips")

    @property
    @pulumi.getter(name="dnsCustomNameservers")
    def dns_custom_nameservers(self) -> Sequence[str]:
        """
        The DHCP name server IPs when DHCP name server option is 'custom'
        """
        return pulumi.get(self, "dns_custom_nameservers")

    @property
    @pulumi.getter(name="dnsNameserversOption")
    def dns_nameservers_option(self) -> str:
        """
        The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
        """
        return pulumi.get(self, "dns_nameservers_option")

    @property
    @pulumi.getter(name="fixedIpAssignments")
    def fixed_ip_assignments(self) -> Sequence['outputs.GetSwitchRoutingInterfacesDhcpItemFixedIpAssignmentResult']:
        """
        Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
        """
        return pulumi.get(self, "fixed_ip_assignments")

    @property
    @pulumi.getter(name="reservedIpRanges")
    def reserved_ip_ranges(self) -> Sequence['outputs.GetSwitchRoutingInterfacesDhcpItemReservedIpRangeResult']:
        """
        Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
        """
        return pulumi.get(self, "reserved_ip_ranges")


@pulumi.output_type
class GetSwitchRoutingInterfacesDhcpItemDhcpOptionResult(dict):
    def __init__(__self__, *,
                 code: str,
                 type: str,
                 value: str):
        """
        :param str code: The code for DHCP option which should be from 2 to 254
        :param str type: The type of the DHCP option which should be one of ('text', 'ip', 'integer' or 'hex')
        :param str value: The value of the DHCP option
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        The code for DHCP option which should be from 2 to 254
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the DHCP option which should be one of ('text', 'ip', 'integer' or 'hex')
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the DHCP option
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSwitchRoutingInterfacesDhcpItemFixedIpAssignmentResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 mac: str,
                 name: str):
        """
        :param str ip: The IP address of the client which has fixed IP address assigned to it
        :param str mac: The MAC address of the client which has fixed IP address
        :param str name: The name of the client which has fixed IP address
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The IP address of the client which has fixed IP address assigned to it
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        The MAC address of the client which has fixed IP address
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the client which has fixed IP address
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSwitchRoutingInterfacesDhcpItemReservedIpRangeResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 end: str,
                 start: str):
        """
        :param str comment: The comment for the reserved IP range
        :param str end: The ending IP address of the reserved IP range
        :param str start: The starting IP address of the reserved IP range
        """
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        The comment for the reserved IP range
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def end(self) -> str:
        """
        The ending IP address of the reserved IP range
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> str:
        """
        The starting IP address of the reserved IP range
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetSwitchRoutingInterfacesItemResult(dict):
    def __init__(__self__, *,
                 default_gateway: str,
                 interface_id: str,
                 interface_ip: str,
                 ipv6: 'outputs.GetSwitchRoutingInterfacesItemIpv6Result',
                 multicast_routing: str,
                 name: str,
                 ospf_settings: 'outputs.GetSwitchRoutingInterfacesItemOspfSettingsResult',
                 ospf_v3: 'outputs.GetSwitchRoutingInterfacesItemOspfV3Result',
                 subnet: str,
                 vlan_id: int):
        """
        :param str default_gateway: IPv4 default gateway
        :param str interface_id: The id
        :param str interface_ip: IPv4 address
        :param 'GetSwitchRoutingInterfacesItemIpv6Args' ipv6: IPv6 addressing
        :param str multicast_routing: Multicast routing status
        :param str name: The name
        :param 'GetSwitchRoutingInterfacesItemOspfSettingsArgs' ospf_settings: IPv4 OSPF Settings
        :param 'GetSwitchRoutingInterfacesItemOspfV3Args' ospf_v3: IPv6 OSPF Settings
        :param str subnet: IPv4 subnet
        :param int vlan_id: VLAN id
        """
        pulumi.set(__self__, "default_gateway", default_gateway)
        pulumi.set(__self__, "interface_id", interface_id)
        pulumi.set(__self__, "interface_ip", interface_ip)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "multicast_routing", multicast_routing)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ospf_settings", ospf_settings)
        pulumi.set(__self__, "ospf_v3", ospf_v3)
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> str:
        """
        IPv4 default gateway
        """
        return pulumi.get(self, "default_gateway")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> str:
        """
        The id
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter(name="interfaceIp")
    def interface_ip(self) -> str:
        """
        IPv4 address
        """
        return pulumi.get(self, "interface_ip")

    @property
    @pulumi.getter
    def ipv6(self) -> 'outputs.GetSwitchRoutingInterfacesItemIpv6Result':
        """
        IPv6 addressing
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="multicastRouting")
    def multicast_routing(self) -> str:
        """
        Multicast routing status
        """
        return pulumi.get(self, "multicast_routing")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ospfSettings")
    def ospf_settings(self) -> 'outputs.GetSwitchRoutingInterfacesItemOspfSettingsResult':
        """
        IPv4 OSPF Settings
        """
        return pulumi.get(self, "ospf_settings")

    @property
    @pulumi.getter(name="ospfV3")
    def ospf_v3(self) -> 'outputs.GetSwitchRoutingInterfacesItemOspfV3Result':
        """
        IPv6 OSPF Settings
        """
        return pulumi.get(self, "ospf_v3")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        """
        IPv4 subnet
        """
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        """
        VLAN id
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetSwitchRoutingInterfacesItemIpv6Result(dict):
    def __init__(__self__, *,
                 address: str,
                 assignment_mode: str,
                 gateway: str,
                 prefix: str):
        """
        :param str address: IPv6 address
        :param str assignment_mode: Assignment mode
        :param str gateway: IPv6 gateway
        :param str prefix: IPv6 subnet
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "assignment_mode", assignment_mode)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        IPv6 address
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="assignmentMode")
    def assignment_mode(self) -> str:
        """
        Assignment mode
        """
        return pulumi.get(self, "assignment_mode")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        IPv6 gateway
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        IPv6 subnet
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetSwitchRoutingInterfacesItemOspfSettingsResult(dict):
    def __init__(__self__, *,
                 area: str,
                 cost: int,
                 is_passive_enabled: bool):
        """
        :param str area: Area id
        :param int cost: OSPF Cost
        :param bool is_passive_enabled: Disable sending Hello packets on this interface's IPv4 area
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "is_passive_enabled", is_passive_enabled)

    @property
    @pulumi.getter
    def area(self) -> str:
        """
        Area id
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def cost(self) -> int:
        """
        OSPF Cost
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="isPassiveEnabled")
    def is_passive_enabled(self) -> bool:
        """
        Disable sending Hello packets on this interface's IPv4 area
        """
        return pulumi.get(self, "is_passive_enabled")


@pulumi.output_type
class GetSwitchRoutingInterfacesItemOspfV3Result(dict):
    def __init__(__self__, *,
                 area: str,
                 cost: int,
                 is_passive_enabled: bool):
        """
        :param str area: Area id
        :param int cost: OSPF Cost
        :param bool is_passive_enabled: Disable sending Hello packets on this interface's IPv6 area
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "is_passive_enabled", is_passive_enabled)

    @property
    @pulumi.getter
    def area(self) -> str:
        """
        Area id
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def cost(self) -> int:
        """
        OSPF Cost
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="isPassiveEnabled")
    def is_passive_enabled(self) -> bool:
        """
        Disable sending Hello packets on this interface's IPv6 area
        """
        return pulumi.get(self, "is_passive_enabled")


@pulumi.output_type
class GetSwitchRoutingStaticRoutesItemResult(dict):
    def __init__(__self__, *,
                 advertise_via_ospf_enabled: bool,
                 name: str,
                 next_hop_ip: str,
                 prefer_over_ospf_routes_enabled: bool,
                 static_route_id: str,
                 subnet: str):
        """
        :param bool advertise_via_ospf_enabled: Option to advertise static routes via OSPF
        :param str name: The name or description of the layer 3 static route
        :param str next_hop_ip: The IP address of the router to which traffic for this destination network should be sent
        :param bool prefer_over_ospf_routes_enabled: Option to prefer static routes over OSPF routes
        :param str static_route_id: The identifier of a layer 3 static route
        :param str subnet: The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
        """
        pulumi.set(__self__, "advertise_via_ospf_enabled", advertise_via_ospf_enabled)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_hop_ip", next_hop_ip)
        pulumi.set(__self__, "prefer_over_ospf_routes_enabled", prefer_over_ospf_routes_enabled)
        pulumi.set(__self__, "static_route_id", static_route_id)
        pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="advertiseViaOspfEnabled")
    def advertise_via_ospf_enabled(self) -> bool:
        """
        Option to advertise static routes via OSPF
        """
        return pulumi.get(self, "advertise_via_ospf_enabled")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name or description of the layer 3 static route
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHopIp")
    def next_hop_ip(self) -> str:
        """
        The IP address of the router to which traffic for this destination network should be sent
        """
        return pulumi.get(self, "next_hop_ip")

    @property
    @pulumi.getter(name="preferOverOspfRoutesEnabled")
    def prefer_over_ospf_routes_enabled(self) -> bool:
        """
        Option to prefer static routes over OSPF routes
        """
        return pulumi.get(self, "prefer_over_ospf_routes_enabled")

    @property
    @pulumi.getter(name="staticRouteId")
    def static_route_id(self) -> str:
        """
        The identifier of a layer 3 static route
        """
        return pulumi.get(self, "static_route_id")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        """
        The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class GetSwitchWarmSpareItemResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 primary_serial: str,
                 spare_serial: str):
        """
        :param bool enabled: Enable or disable warm spare for a switch
        :param str primary_serial: Serial number of the primary switch
        :param str spare_serial: Serial number of the warm spare switch
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "primary_serial", primary_serial)
        pulumi.set(__self__, "spare_serial", spare_serial)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable or disable warm spare for a switch
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="primarySerial")
    def primary_serial(self) -> str:
        """
        Serial number of the primary switch
        """
        return pulumi.get(self, "primary_serial")

    @property
    @pulumi.getter(name="spareSerial")
    def spare_serial(self) -> str:
        """
        Serial number of the warm spare switch
        """
        return pulumi.get(self, "spare_serial")


@pulumi.output_type
class GetWirelessBluetoothSettingsItemResult(dict):
    def __init__(__self__, *,
                 major: int,
                 minor: int,
                 uuid: str):
        """
        :param int major: Desired major value of the beacon. If the value is set to null it will reset to Dashboard's automatically generated value.
        :param int minor: Desired minor value of the beacon. If the value is set to null it will reset to Dashboard's automatically generated value.
        :param str uuid: Desired UUID of the beacon. If the value is set to null it will reset to Dashboard's automatically generated value.
        """
        pulumi.set(__self__, "major", major)
        pulumi.set(__self__, "minor", minor)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def major(self) -> int:
        """
        Desired major value of the beacon. If the value is set to null it will reset to Dashboard's automatically generated value.
        """
        return pulumi.get(self, "major")

    @property
    @pulumi.getter
    def minor(self) -> int:
        """
        Desired minor value of the beacon. If the value is set to null it will reset to Dashboard's automatically generated value.
        """
        return pulumi.get(self, "minor")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Desired UUID of the beacon. If the value is set to null it will reset to Dashboard's automatically generated value.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetWirelessConnectionStatsItemResult(dict):
    def __init__(__self__, *,
                 connection_stats: 'outputs.GetWirelessConnectionStatsItemConnectionStatsResult',
                 serial: str):
        """
        :param 'GetWirelessConnectionStatsItemConnectionStatsArgs' connection_stats: The connection stats of the device
        :param str serial: The serial number for the device
        """
        pulumi.set(__self__, "connection_stats", connection_stats)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter(name="connectionStats")
    def connection_stats(self) -> 'outputs.GetWirelessConnectionStatsItemConnectionStatsResult':
        """
        The connection stats of the device
        """
        return pulumi.get(self, "connection_stats")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The serial number for the device
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetWirelessConnectionStatsItemConnectionStatsResult(dict):
    def __init__(__self__, *,
                 assoc: int,
                 auth: int,
                 dhcp: int,
                 dns: int,
                 success: int):
        """
        :param int assoc: The number of failed association attempts
        :param int auth: The number of failed authentication attempts
        :param int dhcp: The number of failed DHCP attempts
        :param int dns: The number of failed DNS attempts
        :param int success: The number of successful connection attempts
        """
        pulumi.set(__self__, "assoc", assoc)
        pulumi.set(__self__, "auth", auth)
        pulumi.set(__self__, "dhcp", dhcp)
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "success", success)

    @property
    @pulumi.getter
    def assoc(self) -> int:
        """
        The number of failed association attempts
        """
        return pulumi.get(self, "assoc")

    @property
    @pulumi.getter
    def auth(self) -> int:
        """
        The number of failed authentication attempts
        """
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def dhcp(self) -> int:
        """
        The number of failed DHCP attempts
        """
        return pulumi.get(self, "dhcp")

    @property
    @pulumi.getter
    def dns(self) -> int:
        """
        The number of failed DNS attempts
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter
    def success(self) -> int:
        """
        The number of successful connection attempts
        """
        return pulumi.get(self, "success")


@pulumi.output_type
class GetWirelessLatencyStatsItemResult(dict):
    def __init__(__self__, *,
                 latency_stats: 'outputs.GetWirelessLatencyStatsItemLatencyStatsResult',
                 serial: str):
        pulumi.set(__self__, "latency_stats", latency_stats)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter(name="latencyStats")
    def latency_stats(self) -> 'outputs.GetWirelessLatencyStatsItemLatencyStatsResult':
        return pulumi.get(self, "latency_stats")

    @property
    @pulumi.getter
    def serial(self) -> str:
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetWirelessLatencyStatsItemLatencyStatsResult(dict):
    def __init__(__self__, *,
                 background_traffic: 'outputs.GetWirelessLatencyStatsItemLatencyStatsBackgroundTrafficResult',
                 best_effort_traffic: str,
                 video_traffic: str,
                 voice_traffic: str):
        pulumi.set(__self__, "background_traffic", background_traffic)
        pulumi.set(__self__, "best_effort_traffic", best_effort_traffic)
        pulumi.set(__self__, "video_traffic", video_traffic)
        pulumi.set(__self__, "voice_traffic", voice_traffic)

    @property
    @pulumi.getter(name="backgroundTraffic")
    def background_traffic(self) -> 'outputs.GetWirelessLatencyStatsItemLatencyStatsBackgroundTrafficResult':
        return pulumi.get(self, "background_traffic")

    @property
    @pulumi.getter(name="bestEffortTraffic")
    def best_effort_traffic(self) -> str:
        return pulumi.get(self, "best_effort_traffic")

    @property
    @pulumi.getter(name="videoTraffic")
    def video_traffic(self) -> str:
        return pulumi.get(self, "video_traffic")

    @property
    @pulumi.getter(name="voiceTraffic")
    def voice_traffic(self) -> str:
        return pulumi.get(self, "voice_traffic")


@pulumi.output_type
class GetWirelessLatencyStatsItemLatencyStatsBackgroundTrafficResult(dict):
    def __init__(__self__, *,
                 avg: float,
                 raw_distribution: 'outputs.GetWirelessLatencyStatsItemLatencyStatsBackgroundTrafficRawDistributionResult'):
        pulumi.set(__self__, "avg", avg)
        pulumi.set(__self__, "raw_distribution", raw_distribution)

    @property
    @pulumi.getter
    def avg(self) -> float:
        return pulumi.get(self, "avg")

    @property
    @pulumi.getter(name="rawDistribution")
    def raw_distribution(self) -> 'outputs.GetWirelessLatencyStatsItemLatencyStatsBackgroundTrafficRawDistributionResult':
        return pulumi.get(self, "raw_distribution")


@pulumi.output_type
class GetWirelessLatencyStatsItemLatencyStatsBackgroundTrafficRawDistributionResult(dict):
    def __init__(__self__, *,
                 status0: int,
                 status1: int,
                 status1024: int,
                 status128: int,
                 status16: int,
                 status2: int,
                 status2048: int,
                 status256: int,
                 status32: int,
                 status4: int,
                 status512: int,
                 status64: int,
                 status8: int):
        pulumi.set(__self__, "status0", status0)
        pulumi.set(__self__, "status1", status1)
        pulumi.set(__self__, "status1024", status1024)
        pulumi.set(__self__, "status128", status128)
        pulumi.set(__self__, "status16", status16)
        pulumi.set(__self__, "status2", status2)
        pulumi.set(__self__, "status2048", status2048)
        pulumi.set(__self__, "status256", status256)
        pulumi.set(__self__, "status32", status32)
        pulumi.set(__self__, "status4", status4)
        pulumi.set(__self__, "status512", status512)
        pulumi.set(__self__, "status64", status64)
        pulumi.set(__self__, "status8", status8)

    @property
    @pulumi.getter
    def status0(self) -> int:
        return pulumi.get(self, "status0")

    @property
    @pulumi.getter
    def status1(self) -> int:
        return pulumi.get(self, "status1")

    @property
    @pulumi.getter
    def status1024(self) -> int:
        return pulumi.get(self, "status1024")

    @property
    @pulumi.getter
    def status128(self) -> int:
        return pulumi.get(self, "status128")

    @property
    @pulumi.getter
    def status16(self) -> int:
        return pulumi.get(self, "status16")

    @property
    @pulumi.getter
    def status2(self) -> int:
        return pulumi.get(self, "status2")

    @property
    @pulumi.getter
    def status2048(self) -> int:
        return pulumi.get(self, "status2048")

    @property
    @pulumi.getter
    def status256(self) -> int:
        return pulumi.get(self, "status256")

    @property
    @pulumi.getter
    def status32(self) -> int:
        return pulumi.get(self, "status32")

    @property
    @pulumi.getter
    def status4(self) -> int:
        return pulumi.get(self, "status4")

    @property
    @pulumi.getter
    def status512(self) -> int:
        return pulumi.get(self, "status512")

    @property
    @pulumi.getter
    def status64(self) -> int:
        return pulumi.get(self, "status64")

    @property
    @pulumi.getter
    def status8(self) -> int:
        return pulumi.get(self, "status8")


@pulumi.output_type
class GetWirelessRadioSettingsItemResult(dict):
    def __init__(__self__, *,
                 five_ghz_settings: 'outputs.GetWirelessRadioSettingsItemFiveGhzSettingsResult',
                 rf_profile_id: str,
                 serial: str,
                 two_four_ghz_settings: 'outputs.GetWirelessRadioSettingsItemTwoFourGhzSettingsResult'):
        pulumi.set(__self__, "five_ghz_settings", five_ghz_settings)
        pulumi.set(__self__, "rf_profile_id", rf_profile_id)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "two_four_ghz_settings", two_four_ghz_settings)

    @property
    @pulumi.getter(name="fiveGhzSettings")
    def five_ghz_settings(self) -> 'outputs.GetWirelessRadioSettingsItemFiveGhzSettingsResult':
        return pulumi.get(self, "five_ghz_settings")

    @property
    @pulumi.getter(name="rfProfileId")
    def rf_profile_id(self) -> str:
        return pulumi.get(self, "rf_profile_id")

    @property
    @pulumi.getter
    def serial(self) -> str:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="twoFourGhzSettings")
    def two_four_ghz_settings(self) -> 'outputs.GetWirelessRadioSettingsItemTwoFourGhzSettingsResult':
        return pulumi.get(self, "two_four_ghz_settings")


@pulumi.output_type
class GetWirelessRadioSettingsItemFiveGhzSettingsResult(dict):
    def __init__(__self__, *,
                 channel: int,
                 channel_width: str,
                 target_power: int):
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "channel_width", channel_width)
        pulumi.set(__self__, "target_power", target_power)

    @property
    @pulumi.getter
    def channel(self) -> int:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="channelWidth")
    def channel_width(self) -> str:
        return pulumi.get(self, "channel_width")

    @property
    @pulumi.getter(name="targetPower")
    def target_power(self) -> int:
        return pulumi.get(self, "target_power")


@pulumi.output_type
class GetWirelessRadioSettingsItemTwoFourGhzSettingsResult(dict):
    def __init__(__self__, *,
                 channel: int,
                 target_power: int):
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "target_power", target_power)

    @property
    @pulumi.getter
    def channel(self) -> int:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="targetPower")
    def target_power(self) -> int:
        return pulumi.get(self, "target_power")


@pulumi.output_type
class GetWirelessStatusItemResult(dict):
    def __init__(__self__, *,
                 basic_service_sets: Sequence['outputs.GetWirelessStatusItemBasicServiceSetResult']):
        """
        :param Sequence['GetWirelessStatusItemBasicServiceSetArgs'] basic_service_sets: SSID status list
        """
        pulumi.set(__self__, "basic_service_sets", basic_service_sets)

    @property
    @pulumi.getter(name="basicServiceSets")
    def basic_service_sets(self) -> Sequence['outputs.GetWirelessStatusItemBasicServiceSetResult']:
        """
        SSID status list
        """
        return pulumi.get(self, "basic_service_sets")


@pulumi.output_type
class GetWirelessStatusItemBasicServiceSetResult(dict):
    def __init__(__self__, *,
                 band: str,
                 broadcasting: bool,
                 bssid: str,
                 channel: int,
                 channel_width: str,
                 enabled: bool,
                 power: str,
                 ssid_name: str,
                 ssid_number: int,
                 visible: bool):
        """
        :param str band: Frequency range used by wireless network
        :param bool broadcasting: Whether the SSID is broadcasting based on an availability schedule
        :param str bssid: Unique identifier of wireless access point
        :param int channel: Frequency channel used by wireless network
        :param str channel_width: Width of frequency channel used by wireless network
        :param bool enabled: Status of wireless network
        :param str power: Strength of wireless signal
        :param str ssid_name: Name of wireless network
        :param int ssid_number: Unique identifier of wireless network
        :param bool visible: Whether the SSID is advertised or hidden
        """
        pulumi.set(__self__, "band", band)
        pulumi.set(__self__, "broadcasting", broadcasting)
        pulumi.set(__self__, "bssid", bssid)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "channel_width", channel_width)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "power", power)
        pulumi.set(__self__, "ssid_name", ssid_name)
        pulumi.set(__self__, "ssid_number", ssid_number)
        pulumi.set(__self__, "visible", visible)

    @property
    @pulumi.getter
    def band(self) -> str:
        """
        Frequency range used by wireless network
        """
        return pulumi.get(self, "band")

    @property
    @pulumi.getter
    def broadcasting(self) -> bool:
        """
        Whether the SSID is broadcasting based on an availability schedule
        """
        return pulumi.get(self, "broadcasting")

    @property
    @pulumi.getter
    def bssid(self) -> str:
        """
        Unique identifier of wireless access point
        """
        return pulumi.get(self, "bssid")

    @property
    @pulumi.getter
    def channel(self) -> int:
        """
        Frequency channel used by wireless network
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="channelWidth")
    def channel_width(self) -> str:
        """
        Width of frequency channel used by wireless network
        """
        return pulumi.get(self, "channel_width")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Status of wireless network
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def power(self) -> str:
        """
        Strength of wireless signal
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="ssidName")
    def ssid_name(self) -> str:
        """
        Name of wireless network
        """
        return pulumi.get(self, "ssid_name")

    @property
    @pulumi.getter(name="ssidNumber")
    def ssid_number(self) -> int:
        """
        Unique identifier of wireless network
        """
        return pulumi.get(self, "ssid_number")

    @property
    @pulumi.getter
    def visible(self) -> bool:
        """
        Whether the SSID is advertised or hidden
        """
        return pulumi.get(self, "visible")


