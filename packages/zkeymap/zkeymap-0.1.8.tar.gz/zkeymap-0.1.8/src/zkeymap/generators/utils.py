# Copyright (c) 2025 Frank David Martínez Muñoz <mnesarco>
# SPDX-License-Identifier: MIT

from dataclasses import dataclass
from pathlib import Path
from typing import Any, Callable
from itertools import product
import textwrap
from datetime import datetime
import re


@dataclass
class TableOutput:
    content: str
    rows: int
    columns: int


def table_output(
    data: list[list[Any]],
    indent: int = 0,
    sep: str = "",
    render: Callable[[Any, int, int], str] = str,
    just: Callable[[str, int], str] = str.center,
) -> TableOutput:
    num_rows = len(data)
    num_cols = max(len(r) for r in data) if data else 0
    table = [["" for c in range(num_cols)] for r in range(num_rows)]
    widths = [0] * num_cols

    for n_row, row in enumerate(data):
        min_col = (num_cols - len(row)) // 2
        for c in range(len(row)):
            col = min_col + c
            content = f"{render(row[c], n_row, col)} "
            table[n_row][col] = content
            widths[col] = max(widths[col], len(content))

    for r, c in product(range(num_rows), range(num_cols)):
        table[r][c] = just(table[r][c], (widths[c]))

    rows = [sep.join(r) for r in table]
    body = textwrap.indent(f"{sep}\n".join(rows), " " * indent)
    return TableOutput(f"\n{body}", num_rows, num_cols)


def file_header_comment(comment_style: str = "//") -> str:
    return f"{comment_style} Generated by zkeymap. {datetime.now()}\n"


def file_tag(name: str | Path) -> str:
    path = Path(name)
    base = re.sub(r"\W+", "_", path.stem).upper()
    return f"INCLUDED_{base}_H"


def path_with_suffix(name: str | Path, suffix: str) -> Path:
    """
    Add a suffix to a path if it does not have one already.

    :param name: the path to modify.
    :param suffix: the suffix to add if the path does not have one.

    :return: A Path object with the suffix added if it was not already present.
    """
    path = Path(name)
    if path.suffix:
        return path
    return Path(path.parent, f"{path.stem}{suffix}")
