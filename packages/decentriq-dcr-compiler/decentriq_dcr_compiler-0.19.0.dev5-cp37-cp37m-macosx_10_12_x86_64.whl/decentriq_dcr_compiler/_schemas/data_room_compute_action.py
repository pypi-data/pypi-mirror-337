# generated by datamodel-codegen:
#   filename:  data_room_compute_action.json

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Kind(Enum):
    BASE = 'BASE'


class AudienceReference(BaseModel):
    kind: Kind


class Kind19(Enum):
    CUSTOM = 'CUSTOM'


class AudienceReference12(BaseModel):
    id: str
    kind: Kind19


class Kind20(Enum):
    SEED = 'SEED'


class AudienceReference13(BaseModel):
    audienceType: str
    kind: Kind20


class AudienceReference10(
    RootModel[Union[AudienceReference, AudienceReference12, AudienceReference13]]
):
    root: Union[AudienceReference, AudienceReference12, AudienceReference13]


class MediaDcrComputeAction1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getMatchingValidationReport: Mapping[str, Any]


class MediaDcrComputeAction2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getSegmentsValidationReport: Mapping[str, Any]


class MediaDcrComputeAction3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getDemographicsValidationReport: Mapping[str, Any]


class MediaDcrComputeAction4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudiencesValidationReport: Mapping[str, Any]


class MediaDcrComputeAction5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computeInsights: Mapping[str, Any]


class MediaDcrComputeAction6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computeOverlapStatistics: Mapping[str, Any]


class MediaDcrComputeAction7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getDataAttributes: Mapping[str, Any]


class MediaDcrComputeAction8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retrieveModelQualityReport: Mapping[str, Any]


class GetLookalikeAudienceStatistics(BaseModel):
    audienceRef: AudienceReference10


class MediaDcrComputeAction9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getLookalikeAudienceStatistics: GetLookalikeAudienceStatistics


class GetAudiences(BaseModel):
    user: str


class MediaDcrComputeAction10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudiences: GetAudiences


class EstimateAudienceSize(GetLookalikeAudienceStatistics):
    pass


class MediaDcrComputeAction11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    estimateAudienceSize: EstimateAudienceSize


class GetAudienceUserList(GetLookalikeAudienceStatistics):
    pass


class MediaDcrComputeAction12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudienceUserList: GetAudienceUserList


class MediaDcrComputeAction(
    RootModel[
        Union[
            MediaDcrComputeAction1,
            MediaDcrComputeAction2,
            MediaDcrComputeAction3,
            MediaDcrComputeAction4,
            MediaDcrComputeAction5,
            MediaDcrComputeAction6,
            MediaDcrComputeAction7,
            MediaDcrComputeAction8,
            MediaDcrComputeAction9,
            MediaDcrComputeAction10,
            MediaDcrComputeAction11,
            MediaDcrComputeAction12,
        ]
    ]
):
    root: Union[
        MediaDcrComputeAction1,
        MediaDcrComputeAction2,
        MediaDcrComputeAction3,
        MediaDcrComputeAction4,
        MediaDcrComputeAction5,
        MediaDcrComputeAction6,
        MediaDcrComputeAction7,
        MediaDcrComputeAction8,
        MediaDcrComputeAction9,
        MediaDcrComputeAction10,
        MediaDcrComputeAction11,
        MediaDcrComputeAction12,
    ]


class DataRoomComputeAction1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    media: MediaDcrComputeAction


class DataRoomComputeAction(RootModel[DataRoomComputeAction1]):
    root: DataRoomComputeAction1 = Field(..., title='DataRoomComputeAction')
