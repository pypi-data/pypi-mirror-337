{"version":3,"file":"main.js","mappings":"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","sources":["webpack://djangocms-aldryn-forms/./aldryn_forms/static/aldryn_forms/js/src/form.js","webpack://djangocms-aldryn-forms/./aldryn_forms/static/aldryn_forms/js/src/main.js"],"sourcesContent":["/* global gettext */\n\n// Prevent a situation when the translation is not implemented.\nif (typeof gettext !== \"function\") {\n    window.gettext = text => text\n}\n\nfunction populate(text, obj) {\n    // Map values to the text. E.g. \"Text %(value)s.\"\n    for (const [key, value] of Object.entries(obj)) {\n        const pattern = new RegExp(`%\\\\(${key}\\\\)s`, 'g')\n        text = text.replace(pattern, value)\n    }\n    return text\n}\n\n\nexport function handleFormRequiredCheckbox(event) {\n    // The event.target is a checkbox - this is the result of selector: .form-required input[type=checkbox]\n    const form = event.target.closest(\"form\")\n    if (form) {\n        // Remove error messages if there are any.\n        for (const element of form.querySelectorAll(\".aldryn-forms-required-msg, .aldryn-forms-submit-msg\")) {\n            element.parentNode.removeChild(element)\n        }\n        // Enable submit button.\n        for (const button of form.querySelectorAll('[type=submit]')) {\n            button.disabled = false\n            button.readOnly = false\n        }\n    }\n}\n\nexport function disableButtonSubmit(event, display_message) {\n    // Disable button submit to prevent user click more than once.\n    event.target.blur()\n    for (const button of event.target.querySelectorAll('[type=submit]')) {\n        button.disabled = true\n        button.readOnly = true\n        if (display_message) {\n            const form = event.target.closest(\"form\")\n            const message = form && form.dataset.message_wait ? form.dataset.message_wait : gettext(\"Please wait. Submitting form...\")\n            button.insertAdjacentHTML(\n                'afterend',\n                '<div class=\"text-danger aldryn-forms aldryn-forms-submit-msg\">' + message + '</div>')\n        }\n    }\n}\n\n\nfunction enableButtonSubmit(form) {\n    for (const button of form.querySelectorAll('[type=submit]')) {\n        button.disabled = false\n        button.readOnly = false\n    }\n    for (const msg of form.querySelectorAll('.aldryn-forms-submit-msg')) {\n        msg.remove()\n    }\n}\n\n\nexport function handleRequiredFields(event) {\n    // Handle required fields.\n    let requiredFieldsFulfilled = true\n    for (const checkboxset of this.getElementsByClassName(\"form-required\")) {\n        const chosen = checkboxset.querySelectorAll(\"input[type=checkbox]:checked\").length\n        if (chosen < parseInt(checkboxset.dataset.required_min)) {\n            requiredFieldsFulfilled = false\n            checkboxset.insertAdjacentHTML(\n                'afterend',\n                '<div class=\"text-danger aldryn-forms aldryn-forms-required-msg\">'\n                + populate(gettext(\"You have to choose at least %(value)s options (chosen %(chosen)s).\"), {\n                    value: checkboxset.dataset.required_min, chosen: chosen})\n                + '</div>')\n        }\n    }\n    // Do not submit the form if any required fields are missing.\n    if (requiredFieldsFulfilled) {\n        // Display a message to inform the user that the form has been submitted.\n        for (const button of this.querySelectorAll('[type=submit]')) {\n            button.insertAdjacentHTML(\n                'afterend',\n                '<div class=\"text-danger aldryn-forms aldryn-forms-submit-msg\">'\n                + gettext(\"Please wait. Submitting form...\")\n                + '</div>')\n        }\n    } else {\n        // Some required value is not set.\n        event.preventDefault()\n        for (const button of this.querySelectorAll('[type=submit]')) {\n            button.insertAdjacentHTML(\n                'afterend', '<div class=\"text-danger aldryn-forms aldryn-forms-submit-msg\">'\n                + gettext(\"Correct the errors first, please.\") + '</div>')\n        }\n    }\n}\n\n\nfunction blockSubmit(nodeInput) {\n    const form = nodeInput.closest(\"form\")\n    for (const button of form.querySelectorAll('[type=submit]')) {\n        button.disabled = true\n        button.insertAdjacentHTML(\n            'afterend', '<div class=\"text-danger aldryn-forms aldryn-forms-submit-msg\">'\n            + gettext(\"Correct the errors first, please.\") + '</div>')\n    }\n}\n\n\nfunction unblockSubmit(nodeInput) {\n    const form = nodeInput.closest(\"form\")\n    for (const button of form.querySelectorAll('[type=submit]')) {\n        button.disabled = false\n    }\n    for (const element of form.getElementsByClassName('aldryn-forms-submit-msg')) {\n        element.remove()\n    }\n}\n\nfunction displayNodeMessages(node, messages, class_name) {\n    node.insertAdjacentHTML(\n        'afterend',\n        `<ul class=\"messages aldryn-forms-post-message\"><li class=\"${class_name}\">`\n        + messages.join(`</li><li class=\"${class_name}\">`) + '</ul>') + '</ul>'\n}\n\nfunction displayMessage(form, message, class_name) {\n    for (const button of form.querySelectorAll('[type=submit]')) {\n        button.insertAdjacentHTML(\n            'afterend',\n            `<ul class=\"messages aldryn-forms-post-message\">\n                <li class=\"${class_name}\">${message}</li>\n            </ul>`)\n    }\n}\n\nfunction removeMessages(form) {\n    for (const node of form.querySelectorAll('.aldryn-forms-post-message')) {\n        node.remove()\n    }\n}\n\n\nfunction handleChangeFilesList(nodeInputFile) {\n    const listFileNames = nodeInputFile.parentNode.querySelector('ul.upload-file-names')\n    if (listFileNames === null) {\n        return\n    }\n    listFileNames.innerHTML = ''\n    unblockSubmit(nodeInputFile)\n\n    const accept = nodeInputFile.accept.length ? nodeInputFile.accept.split(',') : []\n    const extensions = [],\n        mimetypes = [],\n        maim_mimes = []\n    let is_valid = true\n\n    let files_size_summary = null\n    if (nodeInputFile.dataset.max_size !== null) {\n        files_size_summary = 0\n        for (let i = 0; i < nodeInputFile.files.length; i++) {\n            files_size_summary += nodeInputFile.files[i].size\n        }\n    }\n    if (nodeInputFile.dataset.max_size !== null && files_size_summary > nodeInputFile.dataset.max_size) {\n        is_valid = false\n        const msg = document.createElement(\"li\")\n        msg.classList.add(\"text-danger\")\n        msg.appendChild(document.createTextNode(gettext('The total file size has exceeded the specified limit.')))\n        listFileNames.appendChild(msg)\n    }\n\n    if (nodeInputFile.accept.length) {\n        for (let i = 0; i < accept.length; i++) {\n            if (accept[i][0] === '.') {\n                extensions.push(accept[i])\n            } else {\n                const mtypes = accept[i].split('/')\n                if (mtypes[1] === '*') {\n                    maim_mimes.push(mtypes[0])\n                } else {\n                    mimetypes.push(accept[i])\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < nodeInputFile.files.length; i++) {\n        const item = document.createElement(\"li\")\n        const file_name = nodeInputFile.files[i].name\n        const name = document.createElement(\"span\")\n        name.appendChild(document.createTextNode(file_name + \" \"))\n        item.appendChild(name)\n        const errors = []\n        if (i >= nodeInputFile.dataset.max_files) {\n            errors.push(gettext('This file exceeds the uploaded files limit.'))\n        }\n\n        let is_expected_type = accept.length ? false : true\n\n        if (!is_expected_type && extensions) {\n            const ext = file_name.toLowerCase().match(/\\.\\w+$/)\n            if (ext !== null && extensions.includes(ext[0])) {\n                is_expected_type = true\n            }\n        }\n        if (!is_expected_type && mimetypes) {\n            if (mimetypes.includes(nodeInputFile.files[i].type)) {\n                is_expected_type = true\n            }\n        }\n        if (!is_expected_type && maim_mimes) {\n            const mt = nodeInputFile.files[i].type.split('/')\n            if (maim_mimes.includes(mt[0])) {\n                is_expected_type = true\n            }\n        }\n\n        if (!is_expected_type) {\n            errors.push(gettext('The file type is not among the accpeted types.'))\n        }\n\n        if (errors.length) {\n            is_valid = false\n            name.title = errors.join(\" \")\n            name.classList.add(\"fail-upload\")\n            const icon = document.createElement(\"img\")\n            icon.src = '/static/admin/img/icon-alert.svg'\n            icon.width = 16\n            icon.height = 16\n            name.insertBefore(icon, name.firstChild)\n        }\n        listFileNames.appendChild(item)\n    }\n\n    if (!is_valid) {\n        blockSubmit(nodeInputFile)\n    }\n}\n\n\nexport function enableFieldUploadDragAndDrop() {\n    for (const input of document.querySelectorAll('input[type=file]')) {\n        if (input.dataset.enable_js !== undefined) {\n            // <div class=\"upload-file-frame\">\n            const uploadFileFrame = document.createElement(\"div\")\n            uploadFileFrame.classList.add(\"upload-file-frame\")\n            input.parentNode.insertBefore(uploadFileFrame, input)\n            input.parentElement.removeChild(input)\n            uploadFileFrame.appendChild(input)\n            // <ul class=\"upload-file-names\"></ul>\n            const listFileNames = document.createElement(\"ul\")\n            listFileNames.classList.add(\"upload-file-names\")\n            uploadFileFrame.appendChild(listFileNames)\n            input.addEventListener('change', (event) => handleChangeFilesList(event.target), false)\n            handleChangeFilesList(input)\n        }\n    }\n}\n\n\nexport async function sendData(form) {\n    removeMessages(form)\n    const formData = new FormData(form)\n    try {\n        const response = await fetch(form.action, {\n            method: \"POST\",\n            body: formData,\n            headers: {\n                \"X-Requested-With\": \"XMLHttpRequest\",\n            },\n        })\n        const data = await response.json()\n        console.log(data)\n        if (data.status === \"ERROR\") {\n            for (const name in data.form) {\n                if (name === \"__all__\") {\n                    const button = form.querySelector('[type=submit]')\n                    if (button) {\n                        displayNodeMessages(button, data.form[name], \"error\")\n                    } else {\n                        displayMessage(form, data.form[name], \"error\")\n                    }\n                } else {\n                    const input = form.querySelector(`input[name=\"${name}\"]`)\n                    if (input) {\n                        displayNodeMessages(input, data.form[name], \"error\")\n                    }\n                }\n            }\n        } else {\n            if (form.dataset.run_next) {\n                document[form.dataset.run_next](form, data)\n            } else {\n                displayMessage(form, data.message, \"success\")\n            }\n        }\n    } catch (e) {\n        displayMessage(form, e, \"error\")\n    } finally {\n        enableButtonSubmit(form)\n    }\n}\n\n\nexport function enableSubmitFromByFetch() {\n    for (const form of document.querySelectorAll('form.submit-by-fetch')) {\n        form.addEventListener(\"submit\", (event) => {\n            event.preventDefault()\n            sendData(form)\n        })\n    }\n}\n","import {\n    enableFieldUploadDragAndDrop,\n    disableButtonSubmit,\n    handleRequiredFields,\n    handleFormRequiredCheckbox,\n    enableSubmitFromByFetch,\n    sendData,\n} from './form'\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Disable button submit to prevent user click more than once.\n    // Do not submit the form if any required fields are missing.\n    for (const form of document.getElementsByTagName(\"form\")) {\n        if (form.getAttribute(\"novalidate\")) {\n            // Skip forms with class skip-disable-submit.\n            if (!form.classList.contains(\"skip-disable-submit\")) {\n                form.addEventListener('submit', (event) => disableButtonSubmit(event, true))\n            }\n        } else {\n            // Skip forms with class skip-disable-submit.\n            if (!form.classList.contains(\"skip-disable-submit\")) {\n                form.addEventListener('submit', (event) => disableButtonSubmit(event, false))\n            }\n            if (!form.getAttribute(\"novalidate-checkbox-groups\")) {\n                // Enable submit button if required were set.\n                form.addEventListener('submit', handleRequiredFields)\n                for (const element of form.querySelectorAll(\".form-required input[type=checkbox]\")) {\n                    element.addEventListener('click', handleFormRequiredCheckbox)\n                }\n            }\n        }\n    }\n    enableFieldUploadDragAndDrop()\n    enableSubmitFromByFetch()\n})\n\n// Allow access from the entire document.\ndocument.AldrynFormsSendData = sendData\n"],"names":["populate","text","obj","key","value","Object","entries","pattern","RegExp","replace","handleFormRequiredCheckbox","event","form","target","closest","element","querySelectorAll","parentNode","removeChild","button","disabled","readOnly","disableButtonSubmit","display_message","blur","message","dataset","message_wait","gettext","insertAdjacentHTML","handleRequiredFields","requiredFieldsFulfilled","checkboxset","this","getElementsByClassName","chosen","length","parseInt","required_min","preventDefault","displayNodeMessages","node","messages","class_name","join","displayMessage","handleChangeFilesList","nodeInputFile","listFileNames","querySelector","innerHTML","nodeInput","remove","unblockSubmit","accept","split","extensions","mimetypes","maim_mimes","is_valid","files_size_summary","max_size","i","files","size","msg","document","createElement","classList","add","appendChild","createTextNode","push","mtypes","item","file_name","name","errors","max_files","is_expected_type","ext","toLowerCase","match","includes","type","mt","title","icon","src","width","height","insertBefore","firstChild","blockSubmit","async","sendData","removeMessages","formData","FormData","response","fetch","action","method","body","headers","data","json","console","log","status","input","run_next","e","enableButtonSubmit","window","addEventListener","getElementsByTagName","getAttribute","contains","undefined","enable_js","uploadFileFrame","parentElement","enableFieldUploadDragAndDrop","enableSubmitFromByFetch","AldrynFormsSendData"],"sourceRoot":""}