# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 login: pulumi.Input[str],
                 admin: Optional[pulumi.Input[bool]] = None,
                 auth_source_id: Optional[pulumi.Input[int]] = None,
                 default_location_id: Optional[pulumi.Input[int]] = None,
                 default_organization_id: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 firstname: Optional[pulumi.Input[str]] = None,
                 lastname: Optional[pulumi.Input[str]] = None,
                 locale: Optional[pulumi.Input[str]] = None,
                 location_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 mail: Optional[pulumi.Input[str]] = None,
                 organization_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[str] login: Username used for logging-in
        :param pulumi.Input[bool] admin: If the user is allow admin privileges
        :param pulumi.Input[int] auth_source_id: Set the authentication source, i.e internal (1,default) or external (2)
        :param pulumi.Input[int] default_location_id: Default location for the user, if empty takes global default
        :param pulumi.Input[int] default_organization_id: Default organization for the user, if empty takes global default
        :param pulumi.Input[str] description: Description of user
        :param pulumi.Input[str] firstname: First name of the user
        :param pulumi.Input[str] lastname: Last name of user
        :param pulumi.Input[str] locale: Sets the timezone/location of a user
        :param pulumi.Input[Sequence[pulumi.Input[int]]] location_ids: List of all locations a user has access to
        :param pulumi.Input[str] mail: Email of user
        :param pulumi.Input[Sequence[pulumi.Input[int]]] organization_ids: List of all organizations a user has access to
        :param pulumi.Input[str] password: Password of user, required if auth_source_id is 1 (internal)
        """
        pulumi.set(__self__, "login", login)
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if auth_source_id is not None:
            pulumi.set(__self__, "auth_source_id", auth_source_id)
        if default_location_id is not None:
            pulumi.set(__self__, "default_location_id", default_location_id)
        if default_organization_id is not None:
            pulumi.set(__self__, "default_organization_id", default_organization_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if firstname is not None:
            pulumi.set(__self__, "firstname", firstname)
        if lastname is not None:
            pulumi.set(__self__, "lastname", lastname)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if location_ids is not None:
            pulumi.set(__self__, "location_ids", location_ids)
        if mail is not None:
            pulumi.set(__self__, "mail", mail)
        if organization_ids is not None:
            pulumi.set(__self__, "organization_ids", organization_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def login(self) -> pulumi.Input[str]:
        """
        Username used for logging-in
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: pulumi.Input[str]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input[bool]]:
        """
        If the user is allow admin privileges
        """
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter(name="authSourceId")
    def auth_source_id(self) -> Optional[pulumi.Input[int]]:
        """
        Set the authentication source, i.e internal (1,default) or external (2)
        """
        return pulumi.get(self, "auth_source_id")

    @auth_source_id.setter
    def auth_source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_source_id", value)

    @property
    @pulumi.getter(name="defaultLocationId")
    def default_location_id(self) -> Optional[pulumi.Input[int]]:
        """
        Default location for the user, if empty takes global default
        """
        return pulumi.get(self, "default_location_id")

    @default_location_id.setter
    def default_location_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_location_id", value)

    @property
    @pulumi.getter(name="defaultOrganizationId")
    def default_organization_id(self) -> Optional[pulumi.Input[int]]:
        """
        Default organization for the user, if empty takes global default
        """
        return pulumi.get(self, "default_organization_id")

    @default_organization_id.setter
    def default_organization_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_organization_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of user
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def firstname(self) -> Optional[pulumi.Input[str]]:
        """
        First name of the user
        """
        return pulumi.get(self, "firstname")

    @firstname.setter
    def firstname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firstname", value)

    @property
    @pulumi.getter
    def lastname(self) -> Optional[pulumi.Input[str]]:
        """
        Last name of user
        """
        return pulumi.get(self, "lastname")

    @lastname.setter
    def lastname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lastname", value)

    @property
    @pulumi.getter
    def locale(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the timezone/location of a user
        """
        return pulumi.get(self, "locale")

    @locale.setter
    def locale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locale", value)

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of all locations a user has access to
        """
        return pulumi.get(self, "location_ids")

    @location_ids.setter
    def location_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "location_ids", value)

    @property
    @pulumi.getter
    def mail(self) -> Optional[pulumi.Input[str]]:
        """
        Email of user
        """
        return pulumi.get(self, "mail")

    @mail.setter
    def mail(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mail", value)

    @property
    @pulumi.getter(name="organizationIds")
    def organization_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of all organizations a user has access to
        """
        return pulumi.get(self, "organization_ids")

    @organization_ids.setter
    def organization_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "organization_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of user, required if auth_source_id is 1 (internal)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 admin: Optional[pulumi.Input[bool]] = None,
                 auth_source_id: Optional[pulumi.Input[int]] = None,
                 default_location_id: Optional[pulumi.Input[int]] = None,
                 default_organization_id: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 firstname: Optional[pulumi.Input[str]] = None,
                 lastname: Optional[pulumi.Input[str]] = None,
                 locale: Optional[pulumi.Input[str]] = None,
                 location_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 login: Optional[pulumi.Input[str]] = None,
                 mail: Optional[pulumi.Input[str]] = None,
                 organization_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY User can be used to allow access to foreman.
        :param pulumi.Input[bool] admin: If the user is allow admin privileges
        :param pulumi.Input[int] auth_source_id: Set the authentication source, i.e internal (1,default) or external (2)
        :param pulumi.Input[int] default_location_id: Default location for the user, if empty takes global default
        :param pulumi.Input[int] default_organization_id: Default organization for the user, if empty takes global default
        :param pulumi.Input[str] description: Description of user
        :param pulumi.Input[str] firstname: First name of the user
        :param pulumi.Input[str] lastname: Last name of user
        :param pulumi.Input[str] locale: Sets the timezone/location of a user
        :param pulumi.Input[Sequence[pulumi.Input[int]]] location_ids: List of all locations a user has access to
        :param pulumi.Input[str] login: Username used for logging-in
        :param pulumi.Input[str] mail: Email of user
        :param pulumi.Input[Sequence[pulumi.Input[int]]] organization_ids: List of all organizations a user has access to
        :param pulumi.Input[str] password: Password of user, required if auth_source_id is 1 (internal)
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if auth_source_id is not None:
            pulumi.set(__self__, "auth_source_id", auth_source_id)
        if default_location_id is not None:
            pulumi.set(__self__, "default_location_id", default_location_id)
        if default_organization_id is not None:
            pulumi.set(__self__, "default_organization_id", default_organization_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if firstname is not None:
            pulumi.set(__self__, "firstname", firstname)
        if lastname is not None:
            pulumi.set(__self__, "lastname", lastname)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if location_ids is not None:
            pulumi.set(__self__, "location_ids", location_ids)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if mail is not None:
            pulumi.set(__self__, "mail", mail)
        if organization_ids is not None:
            pulumi.set(__self__, "organization_ids", organization_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY User can be used to allow access to foreman.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input[bool]]:
        """
        If the user is allow admin privileges
        """
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter(name="authSourceId")
    def auth_source_id(self) -> Optional[pulumi.Input[int]]:
        """
        Set the authentication source, i.e internal (1,default) or external (2)
        """
        return pulumi.get(self, "auth_source_id")

    @auth_source_id.setter
    def auth_source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_source_id", value)

    @property
    @pulumi.getter(name="defaultLocationId")
    def default_location_id(self) -> Optional[pulumi.Input[int]]:
        """
        Default location for the user, if empty takes global default
        """
        return pulumi.get(self, "default_location_id")

    @default_location_id.setter
    def default_location_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_location_id", value)

    @property
    @pulumi.getter(name="defaultOrganizationId")
    def default_organization_id(self) -> Optional[pulumi.Input[int]]:
        """
        Default organization for the user, if empty takes global default
        """
        return pulumi.get(self, "default_organization_id")

    @default_organization_id.setter
    def default_organization_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_organization_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of user
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def firstname(self) -> Optional[pulumi.Input[str]]:
        """
        First name of the user
        """
        return pulumi.get(self, "firstname")

    @firstname.setter
    def firstname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firstname", value)

    @property
    @pulumi.getter
    def lastname(self) -> Optional[pulumi.Input[str]]:
        """
        Last name of user
        """
        return pulumi.get(self, "lastname")

    @lastname.setter
    def lastname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lastname", value)

    @property
    @pulumi.getter
    def locale(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the timezone/location of a user
        """
        return pulumi.get(self, "locale")

    @locale.setter
    def locale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locale", value)

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of all locations a user has access to
        """
        return pulumi.get(self, "location_ids")

    @location_ids.setter
    def location_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "location_ids", value)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input[str]]:
        """
        Username used for logging-in
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter
    def mail(self) -> Optional[pulumi.Input[str]]:
        """
        Email of user
        """
        return pulumi.get(self, "mail")

    @mail.setter
    def mail(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mail", value)

    @property
    @pulumi.getter(name="organizationIds")
    def organization_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of all organizations a user has access to
        """
        return pulumi.get(self, "organization_ids")

    @organization_ids.setter
    def organization_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "organization_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of user, required if auth_source_id is 1 (internal)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin: Optional[pulumi.Input[bool]] = None,
                 auth_source_id: Optional[pulumi.Input[int]] = None,
                 default_location_id: Optional[pulumi.Input[int]] = None,
                 default_organization_id: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 firstname: Optional[pulumi.Input[str]] = None,
                 lastname: Optional[pulumi.Input[str]] = None,
                 locale: Optional[pulumi.Input[str]] = None,
                 location_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 login: Optional[pulumi.Input[str]] = None,
                 mail: Optional[pulumi.Input[str]] = None,
                 organization_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a User resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] admin: If the user is allow admin privileges
        :param pulumi.Input[int] auth_source_id: Set the authentication source, i.e internal (1,default) or external (2)
        :param pulumi.Input[int] default_location_id: Default location for the user, if empty takes global default
        :param pulumi.Input[int] default_organization_id: Default organization for the user, if empty takes global default
        :param pulumi.Input[str] description: Description of user
        :param pulumi.Input[str] firstname: First name of the user
        :param pulumi.Input[str] lastname: Last name of user
        :param pulumi.Input[str] locale: Sets the timezone/location of a user
        :param pulumi.Input[Sequence[pulumi.Input[int]]] location_ids: List of all locations a user has access to
        :param pulumi.Input[str] login: Username used for logging-in
        :param pulumi.Input[str] mail: Email of user
        :param pulumi.Input[Sequence[pulumi.Input[int]]] organization_ids: List of all organizations a user has access to
        :param pulumi.Input[str] password: Password of user, required if auth_source_id is 1 (internal)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a User resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin: Optional[pulumi.Input[bool]] = None,
                 auth_source_id: Optional[pulumi.Input[int]] = None,
                 default_location_id: Optional[pulumi.Input[int]] = None,
                 default_organization_id: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 firstname: Optional[pulumi.Input[str]] = None,
                 lastname: Optional[pulumi.Input[str]] = None,
                 locale: Optional[pulumi.Input[str]] = None,
                 location_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 login: Optional[pulumi.Input[str]] = None,
                 mail: Optional[pulumi.Input[str]] = None,
                 organization_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            __props__.__dict__["admin"] = admin
            __props__.__dict__["auth_source_id"] = auth_source_id
            __props__.__dict__["default_location_id"] = default_location_id
            __props__.__dict__["default_organization_id"] = default_organization_id
            __props__.__dict__["description"] = description
            __props__.__dict__["firstname"] = firstname
            __props__.__dict__["lastname"] = lastname
            __props__.__dict__["locale"] = locale
            __props__.__dict__["location_ids"] = location_ids
            if login is None and not opts.urn:
                raise TypeError("Missing required property 'login'")
            __props__.__dict__["login"] = login
            __props__.__dict__["mail"] = mail
            __props__.__dict__["organization_ids"] = organization_ids
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["__meta_"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(User, __self__).__init__(
            'foreman:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            admin: Optional[pulumi.Input[bool]] = None,
            auth_source_id: Optional[pulumi.Input[int]] = None,
            default_location_id: Optional[pulumi.Input[int]] = None,
            default_organization_id: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            firstname: Optional[pulumi.Input[str]] = None,
            lastname: Optional[pulumi.Input[str]] = None,
            locale: Optional[pulumi.Input[str]] = None,
            location_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            login: Optional[pulumi.Input[str]] = None,
            mail: Optional[pulumi.Input[str]] = None,
            organization_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            password: Optional[pulumi.Input[str]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY User can be used to allow access to foreman.
        :param pulumi.Input[bool] admin: If the user is allow admin privileges
        :param pulumi.Input[int] auth_source_id: Set the authentication source, i.e internal (1,default) or external (2)
        :param pulumi.Input[int] default_location_id: Default location for the user, if empty takes global default
        :param pulumi.Input[int] default_organization_id: Default organization for the user, if empty takes global default
        :param pulumi.Input[str] description: Description of user
        :param pulumi.Input[str] firstname: First name of the user
        :param pulumi.Input[str] lastname: Last name of user
        :param pulumi.Input[str] locale: Sets the timezone/location of a user
        :param pulumi.Input[Sequence[pulumi.Input[int]]] location_ids: List of all locations a user has access to
        :param pulumi.Input[str] login: Username used for logging-in
        :param pulumi.Input[str] mail: Email of user
        :param pulumi.Input[Sequence[pulumi.Input[int]]] organization_ids: List of all organizations a user has access to
        :param pulumi.Input[str] password: Password of user, required if auth_source_id is 1 (internal)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["admin"] = admin
        __props__.__dict__["auth_source_id"] = auth_source_id
        __props__.__dict__["default_location_id"] = default_location_id
        __props__.__dict__["default_organization_id"] = default_organization_id
        __props__.__dict__["description"] = description
        __props__.__dict__["firstname"] = firstname
        __props__.__dict__["lastname"] = lastname
        __props__.__dict__["locale"] = locale
        __props__.__dict__["location_ids"] = location_ids
        __props__.__dict__["login"] = login
        __props__.__dict__["mail"] = mail
        __props__.__dict__["organization_ids"] = organization_ids
        __props__.__dict__["password"] = password
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY User can be used to allow access to foreman.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter
    def admin(self) -> pulumi.Output[Optional[bool]]:
        """
        If the user is allow admin privileges
        """
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter(name="authSourceId")
    def auth_source_id(self) -> pulumi.Output[Optional[int]]:
        """
        Set the authentication source, i.e internal (1,default) or external (2)
        """
        return pulumi.get(self, "auth_source_id")

    @property
    @pulumi.getter(name="defaultLocationId")
    def default_location_id(self) -> pulumi.Output[Optional[int]]:
        """
        Default location for the user, if empty takes global default
        """
        return pulumi.get(self, "default_location_id")

    @property
    @pulumi.getter(name="defaultOrganizationId")
    def default_organization_id(self) -> pulumi.Output[Optional[int]]:
        """
        Default organization for the user, if empty takes global default
        """
        return pulumi.get(self, "default_organization_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of user
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def firstname(self) -> pulumi.Output[Optional[str]]:
        """
        First name of the user
        """
        return pulumi.get(self, "firstname")

    @property
    @pulumi.getter
    def lastname(self) -> pulumi.Output[Optional[str]]:
        """
        Last name of user
        """
        return pulumi.get(self, "lastname")

    @property
    @pulumi.getter
    def locale(self) -> pulumi.Output[Optional[str]]:
        """
        Sets the timezone/location of a user
        """
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        List of all locations a user has access to
        """
        return pulumi.get(self, "location_ids")

    @property
    @pulumi.getter
    def login(self) -> pulumi.Output[str]:
        """
        Username used for logging-in
        """
        return pulumi.get(self, "login")

    @property
    @pulumi.getter
    def mail(self) -> pulumi.Output[Optional[str]]:
        """
        Email of user
        """
        return pulumi.get(self, "mail")

    @property
    @pulumi.getter(name="organizationIds")
    def organization_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        List of all organizations a user has access to
        """
        return pulumi.get(self, "organization_ids")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password of user, required if auth_source_id is 1 (internal)
        """
        return pulumi.get(self, "password")

