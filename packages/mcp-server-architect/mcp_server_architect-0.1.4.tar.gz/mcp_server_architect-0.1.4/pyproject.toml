[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-server-architect"
version = "0.1.4"
description = "AI Software Architect MCP Server that generates PRDs based on codebase analysis"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "ArchitectAI", email = "example@example.com"},
]
dependencies = [
    "mcp[cli]",
    "google-generativeai>=0.3.0",
    "python-dotenv>=1.0.0",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
keywords = ["mcp", "llm", "architecture", "prd", "design"]
license = {text = "MIT"}

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "ruff>=0.3.0",
    "build>=1.0.0",
    "twine>=4.0.0",
]

[project.scripts]
mcp-server-architect = "mcp_server_architect.__main__:main"

[tool.ruff]
line-length = 120  # Increase line length to accommodate existing code
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "B", "I", "N", "UP", "S", "A", "C4", "DTZ", "T20", "RET", "SIM"]
ignore = [
    "S101",  # Ignore assertions in tests
    "E501",  # Line too long - handled by formatter
]

# Ignoring ANN annotations (uncomment if you want to use)
# extend-select = ["ANN"]
# ignore = ["ANN001", "ANN201", "ANN204"]  # Missing type annotations

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["mcp_server_architect"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
