# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetKatelloProductResult',
    'AwaitableGetKatelloProductResult',
    'get_katello_product',
    'get_katello_product_output',
]

@pulumi.output_type
class GetKatelloProductResult:
    """
    A collection of values returned by getKatelloProduct.
    """
    def __init__(__self__, description=None, gpg_key_id=None, id=None, label=None, name=None, ssl_ca_cert_id=None, ssl_client_cert_id=None, ssl_client_key_id=None, sync_plan_id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if gpg_key_id and not isinstance(gpg_key_id, int):
            raise TypeError("Expected argument 'gpg_key_id' to be a int")
        pulumi.set(__self__, "gpg_key_id", gpg_key_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ssl_ca_cert_id and not isinstance(ssl_ca_cert_id, int):
            raise TypeError("Expected argument 'ssl_ca_cert_id' to be a int")
        pulumi.set(__self__, "ssl_ca_cert_id", ssl_ca_cert_id)
        if ssl_client_cert_id and not isinstance(ssl_client_cert_id, int):
            raise TypeError("Expected argument 'ssl_client_cert_id' to be a int")
        pulumi.set(__self__, "ssl_client_cert_id", ssl_client_cert_id)
        if ssl_client_key_id and not isinstance(ssl_client_key_id, int):
            raise TypeError("Expected argument 'ssl_client_key_id' to be a int")
        pulumi.set(__self__, "ssl_client_key_id", ssl_client_key_id)
        if sync_plan_id and not isinstance(sync_plan_id, int):
            raise TypeError("Expected argument 'sync_plan_id' to be a int")
        pulumi.set(__self__, "sync_plan_id", sync_plan_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="gpgKeyId")
    def gpg_key_id(self) -> int:
        return pulumi.get(self, "gpg_key_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sslCaCertId")
    def ssl_ca_cert_id(self) -> int:
        return pulumi.get(self, "ssl_ca_cert_id")

    @property
    @pulumi.getter(name="sslClientCertId")
    def ssl_client_cert_id(self) -> int:
        return pulumi.get(self, "ssl_client_cert_id")

    @property
    @pulumi.getter(name="sslClientKeyId")
    def ssl_client_key_id(self) -> int:
        return pulumi.get(self, "ssl_client_key_id")

    @property
    @pulumi.getter(name="syncPlanId")
    def sync_plan_id(self) -> int:
        return pulumi.get(self, "sync_plan_id")


class AwaitableGetKatelloProductResult(GetKatelloProductResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKatelloProductResult(
            description=self.description,
            gpg_key_id=self.gpg_key_id,
            id=self.id,
            label=self.label,
            name=self.name,
            ssl_ca_cert_id=self.ssl_ca_cert_id,
            ssl_client_cert_id=self.ssl_client_cert_id,
            ssl_client_key_id=self.ssl_client_key_id,
            sync_plan_id=self.sync_plan_id)


def get_katello_product(name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKatelloProductResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getKatelloProduct:getKatelloProduct', __args__, opts=opts, typ=GetKatelloProductResult).value

    return AwaitableGetKatelloProductResult(
        description=pulumi.get(__ret__, 'description'),
        gpg_key_id=pulumi.get(__ret__, 'gpg_key_id'),
        id=pulumi.get(__ret__, 'id'),
        label=pulumi.get(__ret__, 'label'),
        name=pulumi.get(__ret__, 'name'),
        ssl_ca_cert_id=pulumi.get(__ret__, 'ssl_ca_cert_id'),
        ssl_client_cert_id=pulumi.get(__ret__, 'ssl_client_cert_id'),
        ssl_client_key_id=pulumi.get(__ret__, 'ssl_client_key_id'),
        sync_plan_id=pulumi.get(__ret__, 'sync_plan_id'))
def get_katello_product_output(name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKatelloProductResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getKatelloProduct:getKatelloProduct', __args__, opts=opts, typ=GetKatelloProductResult)
    return __ret__.apply(lambda __response__: GetKatelloProductResult(
        description=pulumi.get(__response__, 'description'),
        gpg_key_id=pulumi.get(__response__, 'gpg_key_id'),
        id=pulumi.get(__response__, 'id'),
        label=pulumi.get(__response__, 'label'),
        name=pulumi.get(__response__, 'name'),
        ssl_ca_cert_id=pulumi.get(__response__, 'ssl_ca_cert_id'),
        ssl_client_cert_id=pulumi.get(__response__, 'ssl_client_cert_id'),
        ssl_client_key_id=pulumi.get(__response__, 'ssl_client_key_id'),
        sync_plan_id=pulumi.get(__response__, 'sync_plan_id')))
