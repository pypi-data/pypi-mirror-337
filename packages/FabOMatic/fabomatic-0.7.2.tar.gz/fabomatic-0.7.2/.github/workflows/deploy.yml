# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build, test, and publish on PyPi

on:
  workflow_dispatch:
  push:
    tags:
      - '*'
jobs:
  build:

    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/p/FabOMatic
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Restore cache to speedup build
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Start Mosquitto
      uses: namoshek/mosquitto-github-action@v1
      with:
        version: '1.6'
        ports: '1883:1883 8883:8883'
        #certificates: ${{ github.workspace }}/.ci/tls-certificates
        config: ${{ github.workspace }}/.ci/mosquitto.conf
        #password-file: ${{ github.workspace}}/.ci/mosquitto.passwd
        container-name: 'mqtt'
    - name: Install local package as tests use absolute imports
      run: |
        python -m pip install -e .
    - name: Prepare Babel translations for distribution
      run: |
        cd src/FabOMatic
        pybabel compile -d translations
    - name: Test with pytest
      run: |
        pytest -v
    - name: Install pypa/build
      run: >-
        python -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: >-
        python -m
        build
        --sdist
        --wheel
        --outdir dist/
        .        
    - name: Publish package distributions to PyPi repository
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true