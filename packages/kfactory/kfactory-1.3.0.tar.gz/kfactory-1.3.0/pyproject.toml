[build-system]
requires = ["setuptools>=74", "wheel", "build", "setuptools_scm[toml]>=8.1"]
build-backend = "setuptools.build_meta"

[project]
name = "kfactory"
description = "KLayout API implementation of gdsfactory"
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
]
requires-python = ">=3.11"


version = "1.3.0"
authors = [{ name = "gdsfactory community", email = "contact@gdsfactory.com" }]
dependencies = [
    "aenum >= 3.1.15, < 4",
    "cachetools >= 5.2.0",
    "gitpython >= 3.1.44, < 4",
    "loguru >= 0.7.3, < 0.8",
    "klayout >= 0.30, < 0.31.0",
    "pydantic >= 2.11, < 2.12",
    "pydantic-settings >= 2.0.1, < 3",
    "rectangle-packer >= 2.0.2, < 3",
    "requests >= 2.23.3, < 3",
    "ruamel.yaml.string >= 0.1.1, < 0.2",
    "scipy >= 1.15, < 2",
    "tomli >= 2.2.1, < 3",
    "toolz >= 1, < 2",
    "typer >= 0.15.2, < 0.16",
]

[project.optional-dependencies]

dev = [
    "kfactory[ci]",
    "ruff>=0.9.2",
    "mypy",
    "pre-commit",
    "pylsp-mypy",
    "python-lsp-server[all]",
    "types-cachetools",
    "pytest",
    "types-docutils",
    "types-Pygments",
    "types-requests",
    "types-setuptools",
    "tbump",
]
docs = [
    "kfactory[ipy]",
    "mkdocs",
    "mkdocs-jupyter>=0.24",
    "mkdocstrings[python]",
    "mkdocs-material",
    "mkdocs_gen_files",
    "mkdocs-literate-nav",
    "mkdocs-section-index",
    "mkdocs-video",
    "pymdown-extensions",
    "ruff",
]
ci = [
    "pytest",
    "pytest_regressions",
    "pytest-cov",
    "types-cachetools",
    "types-requests",
    "pytest-xdist",
    "pytest-randomly",
]
ipy = ["ipython", "ipywidgets", "ipytree", "ipyevents"]

[project.scripts]
kf = "kfactory.cli:app"

[tool.setuptools.packages.find]
where = ["src"]

[tool.mypy]
python_version = "3.11"
strict = true
exclude = ["src/kfactory/widgets/interactive.py"]

[[tool.mypy.overrides]]
module = ["src.*"]
ignore_missing_imports = true

[tool.pylsp-mypy]
enabled = true
live_mode = true
strict = true

[tool.pytest.ini_options]
testpaths = ["src", "tests"]
addopts = '--tb=short'
norecursedirs = ["extra/*.py"]


[tool.coverage.html]
directory = "_build/coverage_html_report"

[tool.codespell]
ignore-words-list = "euclidian,TE,TE/TM,te,ba,FPR,fpr_spacing,ro,nd,donot,schem"
skip = "pyproject.toml, uv.lock"

[tool.ruff]
fix = true
line-length = 88
exclude = ["docs", "src/kfactory/widgets/interactive.py"]
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN401",
    "ARG",
    "BLE001",
    "C901",
    "COM812",
    "D100",
    "D",
    "EM",
    "FBT",
    "PLR0904",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PT011",
    "PT012",
    "S101",
    "S311",
    "SLF001",
    "TC004",
    "TID252",
    "TRY003",
]
per-file-ignores = { "tests/*.py" = ["D", "PLR2004", "INP001", "EM101"] }

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.coverage.report]
exclude_also = [
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
    "if TYPE_CHECKING:",
    "@overload",
    "class .*\\(Protocol(\\[.*\\])?(,.*)?.*\\):",
    "def .*:[\\s]*\\.\\.\\.$",
]
ignore_errors = true

[tool.coverage.run]
omit = ["src/kfactory/widgets/interactive.py", "src/kfactory/cli/**/*.py"]


[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "1.3.0"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "README.md"

[[tool.tbump.file]]
src = "pyproject.toml"

[[tool.tbump.file]]
src = "src/kfactory/__init__.py"
# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made
