# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 client_auth_negotiate: Optional[pulumi.Input[bool]] = None,
                 client_password: Optional[pulumi.Input[str]] = None,
                 client_tls_insecure: Optional[pulumi.Input[bool]] = None,
                 client_username: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 organization_id: Optional[pulumi.Input[int]] = None,
                 provider_logfile: Optional[pulumi.Input[str]] = None,
                 provider_loglevel: Optional[pulumi.Input[str]] = None,
                 server_hostname: Optional[pulumi.Input[str]] = None,
                 server_protocol: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[bool] client_auth_negotiate: Whether or not the client should try to authenticate through the HTTP negotiate mechanism. Defaults to `false`.
        :param pulumi.Input[str] client_password: The username to authenticate against Foreman. This can also be set through the environment variable
               `FOREMAN_CLIENT_PASSWORD`. Defaults to `""`.
        :param pulumi.Input[bool] client_tls_insecure: Whether or not to verify the server's certificate. Defaults to `false`.
        :param pulumi.Input[str] client_username: The username to authenticate against Foreman. This can also be set through the environment variable
               `FOREMAN_CLIENT_USERNAME`. Defaults to `""`.
        :param pulumi.Input[int] location_id: The location for all resources requested and created by the providerDefaults to "0". Set organization_id and location_id
               to a value < 0 if you need to disable Locations and Organizations on Foreman older than 1.21
        :param pulumi.Input[int] organization_id: The organization for all resource requested and created by the Provider Defaults to "0". Set organization_id and
               location_id to a value < 0 if you need to disable Locations and Organizations on Foreman older than 1.21
        :param pulumi.Input[str] provider_loglevel: The level of verbosity for the provider's log file. This setting determines which types of log messages are written and
               which are ignored. Possible values (from most verbose to least verbose) include 'DEBUG', 'TRACE', 'INFO', 'WARNING',
               'ERROR', and 'NONE'. The provider's logs will be written to the location specified by `provider_logfile`. This can also
               be set through the environment variable `FOREMAN_PROVIDER_LOGLEVEL`. Defaults to `'INFO'`.
        :param pulumi.Input[str] server_hostname: The hostname / IP address of the Foreman REST API server
        :param pulumi.Input[str] server_protocol: The protocol the Foreman REST API server is using for communication. Defaults to `"https"`.
        """
        if client_auth_negotiate is not None:
            pulumi.set(__self__, "client_auth_negotiate", client_auth_negotiate)
        if client_password is None:
            client_password = _utilities.get_env('FOREMAN_CLIENT_PASSWORD')
        if client_password is not None:
            pulumi.set(__self__, "client_password", client_password)
        if client_tls_insecure is not None:
            pulumi.set(__self__, "client_tls_insecure", client_tls_insecure)
        if client_username is None:
            client_username = _utilities.get_env('FOREMAN_CLIENT_USERNAME')
        if client_username is not None:
            pulumi.set(__self__, "client_username", client_username)
        if location_id is None:
            location_id = _utilities.get_env_int('FOREMAN_LOCATION_ID')
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if organization_id is None:
            organization_id = _utilities.get_env_int('FOREMAN_ORGANIZATION_ID')
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if provider_logfile is not None:
            pulumi.set(__self__, "provider_logfile", provider_logfile)
        if provider_loglevel is not None:
            pulumi.set(__self__, "provider_loglevel", provider_loglevel)
        if server_hostname is None:
            server_hostname = _utilities.get_env('FOREMAN_SERVER_HOSTNAME')
        if server_hostname is not None:
            pulumi.set(__self__, "server_hostname", server_hostname)
        if server_protocol is None:
            server_protocol = _utilities.get_env('FOREMAN_PROTOCOL')
        if server_protocol is not None:
            pulumi.set(__self__, "server_protocol", server_protocol)

    @property
    @pulumi.getter(name="clientAuthNegotiate")
    def client_auth_negotiate(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the client should try to authenticate through the HTTP negotiate mechanism. Defaults to `false`.
        """
        return pulumi.get(self, "client_auth_negotiate")

    @client_auth_negotiate.setter
    def client_auth_negotiate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "client_auth_negotiate", value)

    @property
    @pulumi.getter(name="clientPassword")
    def client_password(self) -> Optional[pulumi.Input[str]]:
        """
        The username to authenticate against Foreman. This can also be set through the environment variable
        `FOREMAN_CLIENT_PASSWORD`. Defaults to `""`.
        """
        return pulumi.get(self, "client_password")

    @client_password.setter
    def client_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_password", value)

    @property
    @pulumi.getter(name="clientTlsInsecure")
    def client_tls_insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to verify the server's certificate. Defaults to `false`.
        """
        return pulumi.get(self, "client_tls_insecure")

    @client_tls_insecure.setter
    def client_tls_insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "client_tls_insecure", value)

    @property
    @pulumi.getter(name="clientUsername")
    def client_username(self) -> Optional[pulumi.Input[str]]:
        """
        The username to authenticate against Foreman. This can also be set through the environment variable
        `FOREMAN_CLIENT_USERNAME`. Defaults to `""`.
        """
        return pulumi.get(self, "client_username")

    @client_username.setter
    def client_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_username", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[int]]:
        """
        The location for all resources requested and created by the providerDefaults to "0". Set organization_id and location_id
        to a value < 0 if you need to disable Locations and Organizations on Foreman older than 1.21
        """
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[int]]:
        """
        The organization for all resource requested and created by the Provider Defaults to "0". Set organization_id and
        location_id to a value < 0 if you need to disable Locations and Organizations on Foreman older than 1.21
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="providerLogfile")
    def provider_logfile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider_logfile")

    @provider_logfile.setter
    def provider_logfile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_logfile", value)

    @property
    @pulumi.getter(name="providerLoglevel")
    def provider_loglevel(self) -> Optional[pulumi.Input[str]]:
        """
        The level of verbosity for the provider's log file. This setting determines which types of log messages are written and
        which are ignored. Possible values (from most verbose to least verbose) include 'DEBUG', 'TRACE', 'INFO', 'WARNING',
        'ERROR', and 'NONE'. The provider's logs will be written to the location specified by `provider_logfile`. This can also
        be set through the environment variable `FOREMAN_PROVIDER_LOGLEVEL`. Defaults to `'INFO'`.
        """
        return pulumi.get(self, "provider_loglevel")

    @provider_loglevel.setter
    def provider_loglevel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_loglevel", value)

    @property
    @pulumi.getter(name="serverHostname")
    def server_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname / IP address of the Foreman REST API server
        """
        return pulumi.get(self, "server_hostname")

    @server_hostname.setter
    def server_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_hostname", value)

    @property
    @pulumi.getter(name="serverProtocol")
    def server_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol the Foreman REST API server is using for communication. Defaults to `"https"`.
        """
        return pulumi.get(self, "server_protocol")

    @server_protocol.setter
    def server_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_protocol", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_auth_negotiate: Optional[pulumi.Input[bool]] = None,
                 client_password: Optional[pulumi.Input[str]] = None,
                 client_tls_insecure: Optional[pulumi.Input[bool]] = None,
                 client_username: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 organization_id: Optional[pulumi.Input[int]] = None,
                 provider_logfile: Optional[pulumi.Input[str]] = None,
                 provider_loglevel: Optional[pulumi.Input[str]] = None,
                 server_hostname: Optional[pulumi.Input[str]] = None,
                 server_protocol: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the foreman package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] client_auth_negotiate: Whether or not the client should try to authenticate through the HTTP negotiate mechanism. Defaults to `false`.
        :param pulumi.Input[str] client_password: The username to authenticate against Foreman. This can also be set through the environment variable
               `FOREMAN_CLIENT_PASSWORD`. Defaults to `""`.
        :param pulumi.Input[bool] client_tls_insecure: Whether or not to verify the server's certificate. Defaults to `false`.
        :param pulumi.Input[str] client_username: The username to authenticate against Foreman. This can also be set through the environment variable
               `FOREMAN_CLIENT_USERNAME`. Defaults to `""`.
        :param pulumi.Input[int] location_id: The location for all resources requested and created by the providerDefaults to "0". Set organization_id and location_id
               to a value < 0 if you need to disable Locations and Organizations on Foreman older than 1.21
        :param pulumi.Input[int] organization_id: The organization for all resource requested and created by the Provider Defaults to "0". Set organization_id and
               location_id to a value < 0 if you need to disable Locations and Organizations on Foreman older than 1.21
        :param pulumi.Input[str] provider_loglevel: The level of verbosity for the provider's log file. This setting determines which types of log messages are written and
               which are ignored. Possible values (from most verbose to least verbose) include 'DEBUG', 'TRACE', 'INFO', 'WARNING',
               'ERROR', and 'NONE'. The provider's logs will be written to the location specified by `provider_logfile`. This can also
               be set through the environment variable `FOREMAN_PROVIDER_LOGLEVEL`. Defaults to `'INFO'`.
        :param pulumi.Input[str] server_hostname: The hostname / IP address of the Foreman REST API server
        :param pulumi.Input[str] server_protocol: The protocol the Foreman REST API server is using for communication. Defaults to `"https"`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the foreman package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_auth_negotiate: Optional[pulumi.Input[bool]] = None,
                 client_password: Optional[pulumi.Input[str]] = None,
                 client_tls_insecure: Optional[pulumi.Input[bool]] = None,
                 client_username: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 organization_id: Optional[pulumi.Input[int]] = None,
                 provider_logfile: Optional[pulumi.Input[str]] = None,
                 provider_loglevel: Optional[pulumi.Input[str]] = None,
                 server_hostname: Optional[pulumi.Input[str]] = None,
                 server_protocol: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["client_auth_negotiate"] = pulumi.Output.from_input(client_auth_negotiate).apply(pulumi.runtime.to_json) if client_auth_negotiate is not None else None
            if client_password is None:
                client_password = _utilities.get_env('FOREMAN_CLIENT_PASSWORD')
            __props__.__dict__["client_password"] = client_password
            __props__.__dict__["client_tls_insecure"] = pulumi.Output.from_input(client_tls_insecure).apply(pulumi.runtime.to_json) if client_tls_insecure is not None else None
            if client_username is None:
                client_username = _utilities.get_env('FOREMAN_CLIENT_USERNAME')
            __props__.__dict__["client_username"] = client_username
            if location_id is None:
                location_id = _utilities.get_env_int('FOREMAN_LOCATION_ID')
            __props__.__dict__["location_id"] = pulumi.Output.from_input(location_id).apply(pulumi.runtime.to_json) if location_id is not None else None
            if organization_id is None:
                organization_id = _utilities.get_env_int('FOREMAN_ORGANIZATION_ID')
            __props__.__dict__["organization_id"] = pulumi.Output.from_input(organization_id).apply(pulumi.runtime.to_json) if organization_id is not None else None
            __props__.__dict__["provider_logfile"] = provider_logfile
            __props__.__dict__["provider_loglevel"] = provider_loglevel
            if server_hostname is None:
                server_hostname = _utilities.get_env('FOREMAN_SERVER_HOSTNAME')
            __props__.__dict__["server_hostname"] = server_hostname
            if server_protocol is None:
                server_protocol = _utilities.get_env('FOREMAN_PROTOCOL')
            __props__.__dict__["server_protocol"] = server_protocol
        super(Provider, __self__).__init__(
            'foreman',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="clientPassword")
    def client_password(self) -> pulumi.Output[Optional[str]]:
        """
        The username to authenticate against Foreman. This can also be set through the environment variable
        `FOREMAN_CLIENT_PASSWORD`. Defaults to `""`.
        """
        return pulumi.get(self, "client_password")

    @property
    @pulumi.getter(name="clientUsername")
    def client_username(self) -> pulumi.Output[Optional[str]]:
        """
        The username to authenticate against Foreman. This can also be set through the environment variable
        `FOREMAN_CLIENT_USERNAME`. Defaults to `""`.
        """
        return pulumi.get(self, "client_username")

    @property
    @pulumi.getter(name="providerLogfile")
    def provider_logfile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "provider_logfile")

    @property
    @pulumi.getter(name="providerLoglevel")
    def provider_loglevel(self) -> pulumi.Output[Optional[str]]:
        """
        The level of verbosity for the provider's log file. This setting determines which types of log messages are written and
        which are ignored. Possible values (from most verbose to least verbose) include 'DEBUG', 'TRACE', 'INFO', 'WARNING',
        'ERROR', and 'NONE'. The provider's logs will be written to the location specified by `provider_logfile`. This can also
        be set through the environment variable `FOREMAN_PROVIDER_LOGLEVEL`. Defaults to `'INFO'`.
        """
        return pulumi.get(self, "provider_loglevel")

    @property
    @pulumi.getter(name="serverHostname")
    def server_hostname(self) -> pulumi.Output[Optional[str]]:
        """
        The hostname / IP address of the Foreman REST API server
        """
        return pulumi.get(self, "server_hostname")

    @property
    @pulumi.getter(name="serverProtocol")
    def server_protocol(self) -> pulumi.Output[Optional[str]]:
        """
        The protocol the Foreman REST API server is using for communication. Defaults to `"https"`.
        """
        return pulumi.get(self, "server_protocol")

