# coding: utf-8

"""
    WeGlide

    Quantifying airsports

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from weglide_client.models.competition_class_in import CompetitionClassIn
from typing import Optional, Set
from typing_extensions import Self

class CompetitionIn(BaseModel):
    """
    CompetitionIn
    """ # noqa: E501
    name: StrictStr
    description: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = None
    url: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    logo: Optional[StrictStr] = None
    user_id: Optional[StrictInt] = None
    strepla_id: Optional[StrictInt] = None
    start: date
    end: date
    strepla_token: Optional[StrictStr] = None
    competition_class: List[CompetitionClassIn]
    __properties: ClassVar[List[str]] = ["name", "description", "url", "logo", "user_id", "strepla_id", "start", "end", "strepla_token", "competition_class"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompetitionIn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in competition_class (list)
        _items = []
        if self.competition_class:
            for _item_competition_class in self.competition_class:
                if _item_competition_class:
                    _items.append(_item_competition_class.to_dict())
            _dict['competition_class'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if logo (nullable) is None
        # and model_fields_set contains the field
        if self.logo is None and "logo" in self.model_fields_set:
            _dict['logo'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if strepla_id (nullable) is None
        # and model_fields_set contains the field
        if self.strepla_id is None and "strepla_id" in self.model_fields_set:
            _dict['strepla_id'] = None

        # set to None if strepla_token (nullable) is None
        # and model_fields_set contains the field
        if self.strepla_token is None and "strepla_token" in self.model_fields_set:
            _dict['strepla_token'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompetitionIn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "url": obj.get("url"),
            "logo": obj.get("logo"),
            "user_id": obj.get("user_id"),
            "strepla_id": obj.get("strepla_id"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "strepla_token": obj.get("strepla_token"),
            "competition_class": [CompetitionClassIn.from_dict(_item) for _item in obj["competition_class"]] if obj.get("competition_class") is not None else None
        })
        return _obj


