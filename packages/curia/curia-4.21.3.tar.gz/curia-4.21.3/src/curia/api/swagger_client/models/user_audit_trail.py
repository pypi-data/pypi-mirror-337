# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 3.0.0-develop.26
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserAuditTrail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        'entity_id': 'str',
        'entity_type': 'str',
        'entity_version': 'float',
        'entity_diff': 'object',
        'action': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'archived_at': 'datetime',
        'version': 'float'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'entity_id': 'entityId',
        'entity_type': 'entityType',
        'entity_version': 'entityVersion',
        'entity_diff': 'entityDiff',
        'action': 'action',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'archived_at': 'archivedAt',
        'version': 'version'
    }

    def __init__(self, id=None, user_id=None, entity_id=None, entity_type=None, entity_version=None, entity_diff=None, action=None, created_at=None, updated_at=None, archived_at=None, version=None):  # noqa: E501
        """UserAuditTrail - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._entity_id = None
        self._entity_type = None
        self._entity_version = None
        self._entity_diff = None
        self._action = None
        self._created_at = None
        self._updated_at = None
        self._archived_at = None
        self._version = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        self.entity_id = entity_id
        self.entity_type = entity_type
        self.entity_version = entity_version
        self.entity_diff = entity_diff
        self.action = action
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if archived_at is not None:
            self.archived_at = archived_at
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this UserAuditTrail.  # noqa: E501


        :return: The id of this UserAuditTrail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserAuditTrail.


        :param id: The id of this UserAuditTrail.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this UserAuditTrail.  # noqa: E501


        :return: The user_id of this UserAuditTrail.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserAuditTrail.


        :param user_id: The user_id of this UserAuditTrail.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def entity_id(self):
        """Gets the entity_id of this UserAuditTrail.  # noqa: E501


        :return: The entity_id of this UserAuditTrail.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this UserAuditTrail.


        :param entity_id: The entity_id of this UserAuditTrail.  # noqa: E501
        :type: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this UserAuditTrail.  # noqa: E501


        :return: The entity_type of this UserAuditTrail.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this UserAuditTrail.


        :param entity_type: The entity_type of this UserAuditTrail.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def entity_version(self):
        """Gets the entity_version of this UserAuditTrail.  # noqa: E501


        :return: The entity_version of this UserAuditTrail.  # noqa: E501
        :rtype: float
        """
        return self._entity_version

    @entity_version.setter
    def entity_version(self, entity_version):
        """Sets the entity_version of this UserAuditTrail.


        :param entity_version: The entity_version of this UserAuditTrail.  # noqa: E501
        :type: float
        """
        if entity_version is None:
            raise ValueError("Invalid value for `entity_version`, must not be `None`")  # noqa: E501

        self._entity_version = entity_version

    @property
    def entity_diff(self):
        """Gets the entity_diff of this UserAuditTrail.  # noqa: E501


        :return: The entity_diff of this UserAuditTrail.  # noqa: E501
        :rtype: object
        """
        return self._entity_diff

    @entity_diff.setter
    def entity_diff(self, entity_diff):
        """Sets the entity_diff of this UserAuditTrail.


        :param entity_diff: The entity_diff of this UserAuditTrail.  # noqa: E501
        :type: object
        """
        if entity_diff is None:
            raise ValueError("Invalid value for `entity_diff`, must not be `None`")  # noqa: E501

        self._entity_diff = entity_diff

    @property
    def action(self):
        """Gets the action of this UserAuditTrail.  # noqa: E501


        :return: The action of this UserAuditTrail.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this UserAuditTrail.


        :param action: The action of this UserAuditTrail.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def created_at(self):
        """Gets the created_at of this UserAuditTrail.  # noqa: E501


        :return: The created_at of this UserAuditTrail.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserAuditTrail.


        :param created_at: The created_at of this UserAuditTrail.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this UserAuditTrail.  # noqa: E501


        :return: The updated_at of this UserAuditTrail.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserAuditTrail.


        :param updated_at: The updated_at of this UserAuditTrail.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def archived_at(self):
        """Gets the archived_at of this UserAuditTrail.  # noqa: E501


        :return: The archived_at of this UserAuditTrail.  # noqa: E501
        :rtype: datetime
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this UserAuditTrail.


        :param archived_at: The archived_at of this UserAuditTrail.  # noqa: E501
        :type: datetime
        """

        self._archived_at = archived_at

    @property
    def version(self):
        """Gets the version of this UserAuditTrail.  # noqa: E501


        :return: The version of this UserAuditTrail.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UserAuditTrail.


        :param version: The version of this UserAuditTrail.  # noqa: E501
        :type: float
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAuditTrail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAuditTrail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
