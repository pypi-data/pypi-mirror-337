# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ArchitectureArgs', 'Architecture']

@pulumi.input_type
class ArchitectureArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a Architecture resource.
        :param pulumi.Input[str] name: The name of the architecture. Valid characters: ^[A-Za-z0-9-_.]+$. @EXAMPLE "i386"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] operatingsystem_ids: IDs of the operating systems associated with this architecture
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operatingsystem_ids is not None:
            pulumi.set(__self__, "operatingsystem_ids", operatingsystem_ids)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the architecture. Valid characters: ^[A-Za-z0-9-_.]+$. @EXAMPLE "i386"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingsystemIds")
    def operatingsystem_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the operating systems associated with this architecture
        """
        return pulumi.get(self, "operatingsystem_ids")

    @operatingsystem_ids.setter
    def operatingsystem_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "operatingsystem_ids", value)


@pulumi.input_type
class _ArchitectureState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering Architecture resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY Foreman representation of an instruction set architecture (ISA).
        :param pulumi.Input[str] name: The name of the architecture. Valid characters: ^[A-Za-z0-9-_.]+$. @EXAMPLE "i386"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] operatingsystem_ids: IDs of the operating systems associated with this architecture
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operatingsystem_ids is not None:
            pulumi.set(__self__, "operatingsystem_ids", operatingsystem_ids)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY Foreman representation of an instruction set architecture (ISA).
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the architecture. Valid characters: ^[A-Za-z0-9-_.]+$. @EXAMPLE "i386"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingsystemIds")
    def operatingsystem_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the operating systems associated with this architecture
        """
        return pulumi.get(self, "operatingsystem_ids")

    @operatingsystem_ids.setter
    def operatingsystem_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "operatingsystem_ids", value)


class Architecture(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        Create a Architecture resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the architecture. Valid characters: ^[A-Za-z0-9-_.]+$. @EXAMPLE "i386"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] operatingsystem_ids: IDs of the operating systems associated with this architecture
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ArchitectureArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Architecture resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ArchitectureArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ArchitectureArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ArchitectureArgs.__new__(ArchitectureArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["operatingsystem_ids"] = operatingsystem_ids
            __props__.__dict__["__meta_"] = None
        super(Architecture, __self__).__init__(
            'foreman:index/architecture:Architecture',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'Architecture':
        """
        Get an existing Architecture resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY Foreman representation of an instruction set architecture (ISA).
        :param pulumi.Input[str] name: The name of the architecture. Valid characters: ^[A-Za-z0-9-_.]+$. @EXAMPLE "i386"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] operatingsystem_ids: IDs of the operating systems associated with this architecture
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ArchitectureState.__new__(_ArchitectureState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["name"] = name
        __props__.__dict__["operatingsystem_ids"] = operatingsystem_ids
        return Architecture(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY Foreman representation of an instruction set architecture (ISA).
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the architecture. Valid characters: ^[A-Za-z0-9-_.]+$. @EXAMPLE "i386"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingsystemIds")
    def operatingsystem_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        IDs of the operating systems associated with this architecture
        """
        return pulumi.get(self, "operatingsystem_ids")

