# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['KatelloRepositoryArgs', 'KatelloRepository']

@pulumi.input_type
class KatelloRepositoryArgs:
    def __init__(__self__, *,
                 content_type: pulumi.Input[str],
                 product_id: pulumi.Input[int],
                 ansible_collection_requirements: Optional[pulumi.Input[str]] = None,
                 checksum_type: Optional[pulumi.Input[str]] = None,
                 deb_architectures: Optional[pulumi.Input[str]] = None,
                 deb_components: Optional[pulumi.Input[str]] = None,
                 deb_releases: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 docker_tags_whitelist: Optional[pulumi.Input[str]] = None,
                 docker_upstream_name: Optional[pulumi.Input[str]] = None,
                 download_concurrency: Optional[pulumi.Input[int]] = None,
                 download_policy: Optional[pulumi.Input[str]] = None,
                 gpg_key_id: Optional[pulumi.Input[int]] = None,
                 http_proxy_id: Optional[pulumi.Input[int]] = None,
                 http_proxy_policy: Optional[pulumi.Input[str]] = None,
                 ignorable_content: Optional[pulumi.Input[str]] = None,
                 ignore_global_proxy: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 mirror_on_sync: Optional[pulumi.Input[bool]] = None,
                 mirroring_policy: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 unprotected: Optional[pulumi.Input[bool]] = None,
                 upstream_password: Optional[pulumi.Input[str]] = None,
                 upstream_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 verify_ssl_on_sync: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a KatelloRepository resource.
        :param pulumi.Input[str] content_type: Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
               `"ansible_collection"`.@EXAMPLE "yum"
        :param pulumi.Input[int] product_id: Product the repository belongs to.@EXAMPLE
        :param pulumi.Input[str] ansible_collection_requirements: Contents of requirement yaml file to sync from URL.@EXAMPLE
        :param pulumi.Input[str] checksum_type: Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
        :param pulumi.Input[str] deb_architectures: Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
        :param pulumi.Input[str] deb_components: Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
        :param pulumi.Input[str] deb_releases: Comma separated list of releases to be synched from deb-archive.@EXAMPLE
        :param pulumi.Input[str] description: Repository description.@EXAMPLE "A repository description"
        :param pulumi.Input[str] docker_tags_whitelist: Comma separated list of tags to sync for Container Image repository.@EXAMPLE
        :param pulumi.Input[str] docker_upstream_name: Name of the upstream docker repository@EXAMPLE
        :param pulumi.Input[int] download_concurrency: Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
               value is not returned from the API and is therefore handled by a DiffSuppressFunc.
        :param pulumi.Input[str] download_policy: Product the repository belongs to. Valid values include:`"immediate"`, "on_demand"`, "background"`.@EXAMPLE "immediate"
        :param pulumi.Input[int] gpg_key_id: Identifier of the GPG key.@EXAMPLE
        :param pulumi.Input[int] http_proxy_id: ID of a HTTP Proxy.@EXAMPLE
        :param pulumi.Input[str] http_proxy_policy: Policies for HTTP proxy for content sync. Valid values include:`"global_default_http_proxy"`, "none"`,
               "use_selected_http_proxy"`.@EXAMPLE "global_default_http_proxy"
        :param pulumi.Input[str] ignorable_content: List of content units to ignore while syncing a yum repository. Must be subset of
               rpm,drpm,srpm,distribution,erratum@EXAMPLE
        :param pulumi.Input[bool] ignore_global_proxy: If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
        :param pulumi.Input[str] label: Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
        :param pulumi.Input[bool] mirror_on_sync: 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
        :param pulumi.Input[str] mirroring_policy: Mirroring policy for this repo. Values: "mirror_content_only" or "additive". @EXAMPLE "mirror_content_only"
        :param pulumi.Input[str] name: Repository name.@EXAMPLE "My Repository"
        :param pulumi.Input[bool] unprotected: true if this repository can be published via HTTP.@EXAMPLE true
        :param pulumi.Input[str] upstream_password: Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
        :param pulumi.Input[str] upstream_username: Username of the upstream repository user used for authentication.@EXAMPLE "admin"
        :param pulumi.Input[str] url: Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
        :param pulumi.Input[bool] verify_ssl_on_sync: If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
        """
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "product_id", product_id)
        if ansible_collection_requirements is not None:
            pulumi.set(__self__, "ansible_collection_requirements", ansible_collection_requirements)
        if checksum_type is not None:
            pulumi.set(__self__, "checksum_type", checksum_type)
        if deb_architectures is not None:
            pulumi.set(__self__, "deb_architectures", deb_architectures)
        if deb_components is not None:
            pulumi.set(__self__, "deb_components", deb_components)
        if deb_releases is not None:
            pulumi.set(__self__, "deb_releases", deb_releases)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if docker_tags_whitelist is not None:
            pulumi.set(__self__, "docker_tags_whitelist", docker_tags_whitelist)
        if docker_upstream_name is not None:
            pulumi.set(__self__, "docker_upstream_name", docker_upstream_name)
        if download_concurrency is not None:
            pulumi.set(__self__, "download_concurrency", download_concurrency)
        if download_policy is not None:
            pulumi.set(__self__, "download_policy", download_policy)
        if gpg_key_id is not None:
            pulumi.set(__self__, "gpg_key_id", gpg_key_id)
        if http_proxy_id is not None:
            pulumi.set(__self__, "http_proxy_id", http_proxy_id)
        if http_proxy_policy is not None:
            pulumi.set(__self__, "http_proxy_policy", http_proxy_policy)
        if ignorable_content is not None:
            pulumi.set(__self__, "ignorable_content", ignorable_content)
        if ignore_global_proxy is not None:
            pulumi.set(__self__, "ignore_global_proxy", ignore_global_proxy)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if mirror_on_sync is not None:
            warnings.warn("""Deprecated and removed in Katello 4.9 in favor of mirroring_policy""", DeprecationWarning)
            pulumi.log.warn("""mirror_on_sync is deprecated: Deprecated and removed in Katello 4.9 in favor of mirroring_policy""")
        if mirror_on_sync is not None:
            pulumi.set(__self__, "mirror_on_sync", mirror_on_sync)
        if mirroring_policy is not None:
            pulumi.set(__self__, "mirroring_policy", mirroring_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unprotected is not None:
            pulumi.set(__self__, "unprotected", unprotected)
        if upstream_password is not None:
            pulumi.set(__self__, "upstream_password", upstream_password)
        if upstream_username is not None:
            pulumi.set(__self__, "upstream_username", upstream_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if verify_ssl_on_sync is not None:
            pulumi.set(__self__, "verify_ssl_on_sync", verify_ssl_on_sync)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
        `"ansible_collection"`.@EXAMPLE "yum"
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[int]:
        """
        Product the repository belongs to.@EXAMPLE
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter(name="ansibleCollectionRequirements")
    def ansible_collection_requirements(self) -> Optional[pulumi.Input[str]]:
        """
        Contents of requirement yaml file to sync from URL.@EXAMPLE
        """
        return pulumi.get(self, "ansible_collection_requirements")

    @ansible_collection_requirements.setter
    def ansible_collection_requirements(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ansible_collection_requirements", value)

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> Optional[pulumi.Input[str]]:
        """
        Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
        """
        return pulumi.get(self, "checksum_type")

    @checksum_type.setter
    def checksum_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum_type", value)

    @property
    @pulumi.getter(name="debArchitectures")
    def deb_architectures(self) -> Optional[pulumi.Input[str]]:
        """
        Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
        """
        return pulumi.get(self, "deb_architectures")

    @deb_architectures.setter
    def deb_architectures(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deb_architectures", value)

    @property
    @pulumi.getter(name="debComponents")
    def deb_components(self) -> Optional[pulumi.Input[str]]:
        """
        Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
        """
        return pulumi.get(self, "deb_components")

    @deb_components.setter
    def deb_components(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deb_components", value)

    @property
    @pulumi.getter(name="debReleases")
    def deb_releases(self) -> Optional[pulumi.Input[str]]:
        """
        Comma separated list of releases to be synched from deb-archive.@EXAMPLE
        """
        return pulumi.get(self, "deb_releases")

    @deb_releases.setter
    def deb_releases(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deb_releases", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Repository description.@EXAMPLE "A repository description"
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dockerTagsWhitelist")
    def docker_tags_whitelist(self) -> Optional[pulumi.Input[str]]:
        """
        Comma separated list of tags to sync for Container Image repository.@EXAMPLE
        """
        return pulumi.get(self, "docker_tags_whitelist")

    @docker_tags_whitelist.setter
    def docker_tags_whitelist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_tags_whitelist", value)

    @property
    @pulumi.getter(name="dockerUpstreamName")
    def docker_upstream_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the upstream docker repository@EXAMPLE
        """
        return pulumi.get(self, "docker_upstream_name")

    @docker_upstream_name.setter
    def docker_upstream_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_upstream_name", value)

    @property
    @pulumi.getter(name="downloadConcurrency")
    def download_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
        value is not returned from the API and is therefore handled by a DiffSuppressFunc.
        """
        return pulumi.get(self, "download_concurrency")

    @download_concurrency.setter
    def download_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "download_concurrency", value)

    @property
    @pulumi.getter(name="downloadPolicy")
    def download_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Product the repository belongs to. Valid values include:`"immediate"`, "on_demand"`, "background"`.@EXAMPLE "immediate"
        """
        return pulumi.get(self, "download_policy")

    @download_policy.setter
    def download_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "download_policy", value)

    @property
    @pulumi.getter(name="gpgKeyId")
    def gpg_key_id(self) -> Optional[pulumi.Input[int]]:
        """
        Identifier of the GPG key.@EXAMPLE
        """
        return pulumi.get(self, "gpg_key_id")

    @gpg_key_id.setter
    def gpg_key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gpg_key_id", value)

    @property
    @pulumi.getter(name="httpProxyId")
    def http_proxy_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of a HTTP Proxy.@EXAMPLE
        """
        return pulumi.get(self, "http_proxy_id")

    @http_proxy_id.setter
    def http_proxy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_proxy_id", value)

    @property
    @pulumi.getter(name="httpProxyPolicy")
    def http_proxy_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Policies for HTTP proxy for content sync. Valid values include:`"global_default_http_proxy"`, "none"`,
        "use_selected_http_proxy"`.@EXAMPLE "global_default_http_proxy"
        """
        return pulumi.get(self, "http_proxy_policy")

    @http_proxy_policy.setter
    def http_proxy_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_proxy_policy", value)

    @property
    @pulumi.getter(name="ignorableContent")
    def ignorable_content(self) -> Optional[pulumi.Input[str]]:
        """
        List of content units to ignore while syncing a yum repository. Must be subset of
        rpm,drpm,srpm,distribution,erratum@EXAMPLE
        """
        return pulumi.get(self, "ignorable_content")

    @ignorable_content.setter
    def ignorable_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignorable_content", value)

    @property
    @pulumi.getter(name="ignoreGlobalProxy")
    def ignore_global_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
        """
        return pulumi.get(self, "ignore_global_proxy")

    @ignore_global_proxy.setter
    def ignore_global_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_global_proxy", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="mirrorOnSync")
    @_utilities.deprecated("""Deprecated and removed in Katello 4.9 in favor of mirroring_policy""")
    def mirror_on_sync(self) -> Optional[pulumi.Input[bool]]:
        """
        'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
        """
        return pulumi.get(self, "mirror_on_sync")

    @mirror_on_sync.setter
    def mirror_on_sync(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mirror_on_sync", value)

    @property
    @pulumi.getter(name="mirroringPolicy")
    def mirroring_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Mirroring policy for this repo. Values: "mirror_content_only" or "additive". @EXAMPLE "mirror_content_only"
        """
        return pulumi.get(self, "mirroring_policy")

    @mirroring_policy.setter
    def mirroring_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mirroring_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Repository name.@EXAMPLE "My Repository"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def unprotected(self) -> Optional[pulumi.Input[bool]]:
        """
        true if this repository can be published via HTTP.@EXAMPLE true
        """
        return pulumi.get(self, "unprotected")

    @unprotected.setter
    def unprotected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unprotected", value)

    @property
    @pulumi.getter(name="upstreamPassword")
    def upstream_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
        """
        return pulumi.get(self, "upstream_password")

    @upstream_password.setter
    def upstream_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_password", value)

    @property
    @pulumi.getter(name="upstreamUsername")
    def upstream_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username of the upstream repository user used for authentication.@EXAMPLE "admin"
        """
        return pulumi.get(self, "upstream_username")

    @upstream_username.setter
    def upstream_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="verifySslOnSync")
    def verify_ssl_on_sync(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
        """
        return pulumi.get(self, "verify_ssl_on_sync")

    @verify_ssl_on_sync.setter
    def verify_ssl_on_sync(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_ssl_on_sync", value)


@pulumi.input_type
class _KatelloRepositoryState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 ansible_collection_requirements: Optional[pulumi.Input[str]] = None,
                 checksum_type: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 deb_architectures: Optional[pulumi.Input[str]] = None,
                 deb_components: Optional[pulumi.Input[str]] = None,
                 deb_releases: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 docker_tags_whitelist: Optional[pulumi.Input[str]] = None,
                 docker_upstream_name: Optional[pulumi.Input[str]] = None,
                 download_concurrency: Optional[pulumi.Input[int]] = None,
                 download_policy: Optional[pulumi.Input[str]] = None,
                 gpg_key_id: Optional[pulumi.Input[int]] = None,
                 http_proxy_id: Optional[pulumi.Input[int]] = None,
                 http_proxy_policy: Optional[pulumi.Input[str]] = None,
                 ignorable_content: Optional[pulumi.Input[str]] = None,
                 ignore_global_proxy: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 mirror_on_sync: Optional[pulumi.Input[bool]] = None,
                 mirroring_policy: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 product_id: Optional[pulumi.Input[int]] = None,
                 unprotected: Optional[pulumi.Input[bool]] = None,
                 upstream_password: Optional[pulumi.Input[str]] = None,
                 upstream_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 verify_ssl_on_sync: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering KatelloRepository resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY Repository
        :param pulumi.Input[str] ansible_collection_requirements: Contents of requirement yaml file to sync from URL.@EXAMPLE
        :param pulumi.Input[str] checksum_type: Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
        :param pulumi.Input[str] content_type: Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
               `"ansible_collection"`.@EXAMPLE "yum"
        :param pulumi.Input[str] deb_architectures: Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
        :param pulumi.Input[str] deb_components: Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
        :param pulumi.Input[str] deb_releases: Comma separated list of releases to be synched from deb-archive.@EXAMPLE
        :param pulumi.Input[str] description: Repository description.@EXAMPLE "A repository description"
        :param pulumi.Input[str] docker_tags_whitelist: Comma separated list of tags to sync for Container Image repository.@EXAMPLE
        :param pulumi.Input[str] docker_upstream_name: Name of the upstream docker repository@EXAMPLE
        :param pulumi.Input[int] download_concurrency: Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
               value is not returned from the API and is therefore handled by a DiffSuppressFunc.
        :param pulumi.Input[str] download_policy: Product the repository belongs to. Valid values include:`"immediate"`, "on_demand"`, "background"`.@EXAMPLE "immediate"
        :param pulumi.Input[int] gpg_key_id: Identifier of the GPG key.@EXAMPLE
        :param pulumi.Input[int] http_proxy_id: ID of a HTTP Proxy.@EXAMPLE
        :param pulumi.Input[str] http_proxy_policy: Policies for HTTP proxy for content sync. Valid values include:`"global_default_http_proxy"`, "none"`,
               "use_selected_http_proxy"`.@EXAMPLE "global_default_http_proxy"
        :param pulumi.Input[str] ignorable_content: List of content units to ignore while syncing a yum repository. Must be subset of
               rpm,drpm,srpm,distribution,erratum@EXAMPLE
        :param pulumi.Input[bool] ignore_global_proxy: If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
        :param pulumi.Input[str] label: Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
        :param pulumi.Input[bool] mirror_on_sync: 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
        :param pulumi.Input[str] mirroring_policy: Mirroring policy for this repo. Values: "mirror_content_only" or "additive". @EXAMPLE "mirror_content_only"
        :param pulumi.Input[str] name: Repository name.@EXAMPLE "My Repository"
        :param pulumi.Input[int] product_id: Product the repository belongs to.@EXAMPLE
        :param pulumi.Input[bool] unprotected: true if this repository can be published via HTTP.@EXAMPLE true
        :param pulumi.Input[str] upstream_password: Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
        :param pulumi.Input[str] upstream_username: Username of the upstream repository user used for authentication.@EXAMPLE "admin"
        :param pulumi.Input[str] url: Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
        :param pulumi.Input[bool] verify_ssl_on_sync: If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if ansible_collection_requirements is not None:
            pulumi.set(__self__, "ansible_collection_requirements", ansible_collection_requirements)
        if checksum_type is not None:
            pulumi.set(__self__, "checksum_type", checksum_type)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if deb_architectures is not None:
            pulumi.set(__self__, "deb_architectures", deb_architectures)
        if deb_components is not None:
            pulumi.set(__self__, "deb_components", deb_components)
        if deb_releases is not None:
            pulumi.set(__self__, "deb_releases", deb_releases)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if docker_tags_whitelist is not None:
            pulumi.set(__self__, "docker_tags_whitelist", docker_tags_whitelist)
        if docker_upstream_name is not None:
            pulumi.set(__self__, "docker_upstream_name", docker_upstream_name)
        if download_concurrency is not None:
            pulumi.set(__self__, "download_concurrency", download_concurrency)
        if download_policy is not None:
            pulumi.set(__self__, "download_policy", download_policy)
        if gpg_key_id is not None:
            pulumi.set(__self__, "gpg_key_id", gpg_key_id)
        if http_proxy_id is not None:
            pulumi.set(__self__, "http_proxy_id", http_proxy_id)
        if http_proxy_policy is not None:
            pulumi.set(__self__, "http_proxy_policy", http_proxy_policy)
        if ignorable_content is not None:
            pulumi.set(__self__, "ignorable_content", ignorable_content)
        if ignore_global_proxy is not None:
            pulumi.set(__self__, "ignore_global_proxy", ignore_global_proxy)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if mirror_on_sync is not None:
            warnings.warn("""Deprecated and removed in Katello 4.9 in favor of mirroring_policy""", DeprecationWarning)
            pulumi.log.warn("""mirror_on_sync is deprecated: Deprecated and removed in Katello 4.9 in favor of mirroring_policy""")
        if mirror_on_sync is not None:
            pulumi.set(__self__, "mirror_on_sync", mirror_on_sync)
        if mirroring_policy is not None:
            pulumi.set(__self__, "mirroring_policy", mirroring_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if unprotected is not None:
            pulumi.set(__self__, "unprotected", unprotected)
        if upstream_password is not None:
            pulumi.set(__self__, "upstream_password", upstream_password)
        if upstream_username is not None:
            pulumi.set(__self__, "upstream_username", upstream_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if verify_ssl_on_sync is not None:
            pulumi.set(__self__, "verify_ssl_on_sync", verify_ssl_on_sync)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY Repository
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter(name="ansibleCollectionRequirements")
    def ansible_collection_requirements(self) -> Optional[pulumi.Input[str]]:
        """
        Contents of requirement yaml file to sync from URL.@EXAMPLE
        """
        return pulumi.get(self, "ansible_collection_requirements")

    @ansible_collection_requirements.setter
    def ansible_collection_requirements(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ansible_collection_requirements", value)

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> Optional[pulumi.Input[str]]:
        """
        Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
        """
        return pulumi.get(self, "checksum_type")

    @checksum_type.setter
    def checksum_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum_type", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        """
        Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
        `"ansible_collection"`.@EXAMPLE "yum"
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="debArchitectures")
    def deb_architectures(self) -> Optional[pulumi.Input[str]]:
        """
        Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
        """
        return pulumi.get(self, "deb_architectures")

    @deb_architectures.setter
    def deb_architectures(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deb_architectures", value)

    @property
    @pulumi.getter(name="debComponents")
    def deb_components(self) -> Optional[pulumi.Input[str]]:
        """
        Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
        """
        return pulumi.get(self, "deb_components")

    @deb_components.setter
    def deb_components(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deb_components", value)

    @property
    @pulumi.getter(name="debReleases")
    def deb_releases(self) -> Optional[pulumi.Input[str]]:
        """
        Comma separated list of releases to be synched from deb-archive.@EXAMPLE
        """
        return pulumi.get(self, "deb_releases")

    @deb_releases.setter
    def deb_releases(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deb_releases", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Repository description.@EXAMPLE "A repository description"
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dockerTagsWhitelist")
    def docker_tags_whitelist(self) -> Optional[pulumi.Input[str]]:
        """
        Comma separated list of tags to sync for Container Image repository.@EXAMPLE
        """
        return pulumi.get(self, "docker_tags_whitelist")

    @docker_tags_whitelist.setter
    def docker_tags_whitelist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_tags_whitelist", value)

    @property
    @pulumi.getter(name="dockerUpstreamName")
    def docker_upstream_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the upstream docker repository@EXAMPLE
        """
        return pulumi.get(self, "docker_upstream_name")

    @docker_upstream_name.setter
    def docker_upstream_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_upstream_name", value)

    @property
    @pulumi.getter(name="downloadConcurrency")
    def download_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
        value is not returned from the API and is therefore handled by a DiffSuppressFunc.
        """
        return pulumi.get(self, "download_concurrency")

    @download_concurrency.setter
    def download_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "download_concurrency", value)

    @property
    @pulumi.getter(name="downloadPolicy")
    def download_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Product the repository belongs to. Valid values include:`"immediate"`, "on_demand"`, "background"`.@EXAMPLE "immediate"
        """
        return pulumi.get(self, "download_policy")

    @download_policy.setter
    def download_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "download_policy", value)

    @property
    @pulumi.getter(name="gpgKeyId")
    def gpg_key_id(self) -> Optional[pulumi.Input[int]]:
        """
        Identifier of the GPG key.@EXAMPLE
        """
        return pulumi.get(self, "gpg_key_id")

    @gpg_key_id.setter
    def gpg_key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gpg_key_id", value)

    @property
    @pulumi.getter(name="httpProxyId")
    def http_proxy_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of a HTTP Proxy.@EXAMPLE
        """
        return pulumi.get(self, "http_proxy_id")

    @http_proxy_id.setter
    def http_proxy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_proxy_id", value)

    @property
    @pulumi.getter(name="httpProxyPolicy")
    def http_proxy_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Policies for HTTP proxy for content sync. Valid values include:`"global_default_http_proxy"`, "none"`,
        "use_selected_http_proxy"`.@EXAMPLE "global_default_http_proxy"
        """
        return pulumi.get(self, "http_proxy_policy")

    @http_proxy_policy.setter
    def http_proxy_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_proxy_policy", value)

    @property
    @pulumi.getter(name="ignorableContent")
    def ignorable_content(self) -> Optional[pulumi.Input[str]]:
        """
        List of content units to ignore while syncing a yum repository. Must be subset of
        rpm,drpm,srpm,distribution,erratum@EXAMPLE
        """
        return pulumi.get(self, "ignorable_content")

    @ignorable_content.setter
    def ignorable_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignorable_content", value)

    @property
    @pulumi.getter(name="ignoreGlobalProxy")
    def ignore_global_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
        """
        return pulumi.get(self, "ignore_global_proxy")

    @ignore_global_proxy.setter
    def ignore_global_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_global_proxy", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="mirrorOnSync")
    @_utilities.deprecated("""Deprecated and removed in Katello 4.9 in favor of mirroring_policy""")
    def mirror_on_sync(self) -> Optional[pulumi.Input[bool]]:
        """
        'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
        """
        return pulumi.get(self, "mirror_on_sync")

    @mirror_on_sync.setter
    def mirror_on_sync(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mirror_on_sync", value)

    @property
    @pulumi.getter(name="mirroringPolicy")
    def mirroring_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Mirroring policy for this repo. Values: "mirror_content_only" or "additive". @EXAMPLE "mirror_content_only"
        """
        return pulumi.get(self, "mirroring_policy")

    @mirroring_policy.setter
    def mirroring_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mirroring_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Repository name.@EXAMPLE "My Repository"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[int]]:
        """
        Product the repository belongs to.@EXAMPLE
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter
    def unprotected(self) -> Optional[pulumi.Input[bool]]:
        """
        true if this repository can be published via HTTP.@EXAMPLE true
        """
        return pulumi.get(self, "unprotected")

    @unprotected.setter
    def unprotected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unprotected", value)

    @property
    @pulumi.getter(name="upstreamPassword")
    def upstream_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
        """
        return pulumi.get(self, "upstream_password")

    @upstream_password.setter
    def upstream_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_password", value)

    @property
    @pulumi.getter(name="upstreamUsername")
    def upstream_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username of the upstream repository user used for authentication.@EXAMPLE "admin"
        """
        return pulumi.get(self, "upstream_username")

    @upstream_username.setter
    def upstream_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="verifySslOnSync")
    def verify_ssl_on_sync(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
        """
        return pulumi.get(self, "verify_ssl_on_sync")

    @verify_ssl_on_sync.setter
    def verify_ssl_on_sync(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_ssl_on_sync", value)


class KatelloRepository(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ansible_collection_requirements: Optional[pulumi.Input[str]] = None,
                 checksum_type: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 deb_architectures: Optional[pulumi.Input[str]] = None,
                 deb_components: Optional[pulumi.Input[str]] = None,
                 deb_releases: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 docker_tags_whitelist: Optional[pulumi.Input[str]] = None,
                 docker_upstream_name: Optional[pulumi.Input[str]] = None,
                 download_concurrency: Optional[pulumi.Input[int]] = None,
                 download_policy: Optional[pulumi.Input[str]] = None,
                 gpg_key_id: Optional[pulumi.Input[int]] = None,
                 http_proxy_id: Optional[pulumi.Input[int]] = None,
                 http_proxy_policy: Optional[pulumi.Input[str]] = None,
                 ignorable_content: Optional[pulumi.Input[str]] = None,
                 ignore_global_proxy: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 mirror_on_sync: Optional[pulumi.Input[bool]] = None,
                 mirroring_policy: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 product_id: Optional[pulumi.Input[int]] = None,
                 unprotected: Optional[pulumi.Input[bool]] = None,
                 upstream_password: Optional[pulumi.Input[str]] = None,
                 upstream_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 verify_ssl_on_sync: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a KatelloRepository resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ansible_collection_requirements: Contents of requirement yaml file to sync from URL.@EXAMPLE
        :param pulumi.Input[str] checksum_type: Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
        :param pulumi.Input[str] content_type: Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
               `"ansible_collection"`.@EXAMPLE "yum"
        :param pulumi.Input[str] deb_architectures: Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
        :param pulumi.Input[str] deb_components: Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
        :param pulumi.Input[str] deb_releases: Comma separated list of releases to be synched from deb-archive.@EXAMPLE
        :param pulumi.Input[str] description: Repository description.@EXAMPLE "A repository description"
        :param pulumi.Input[str] docker_tags_whitelist: Comma separated list of tags to sync for Container Image repository.@EXAMPLE
        :param pulumi.Input[str] docker_upstream_name: Name of the upstream docker repository@EXAMPLE
        :param pulumi.Input[int] download_concurrency: Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
               value is not returned from the API and is therefore handled by a DiffSuppressFunc.
        :param pulumi.Input[str] download_policy: Product the repository belongs to. Valid values include:`"immediate"`, "on_demand"`, "background"`.@EXAMPLE "immediate"
        :param pulumi.Input[int] gpg_key_id: Identifier of the GPG key.@EXAMPLE
        :param pulumi.Input[int] http_proxy_id: ID of a HTTP Proxy.@EXAMPLE
        :param pulumi.Input[str] http_proxy_policy: Policies for HTTP proxy for content sync. Valid values include:`"global_default_http_proxy"`, "none"`,
               "use_selected_http_proxy"`.@EXAMPLE "global_default_http_proxy"
        :param pulumi.Input[str] ignorable_content: List of content units to ignore while syncing a yum repository. Must be subset of
               rpm,drpm,srpm,distribution,erratum@EXAMPLE
        :param pulumi.Input[bool] ignore_global_proxy: If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
        :param pulumi.Input[str] label: Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
        :param pulumi.Input[bool] mirror_on_sync: 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
        :param pulumi.Input[str] mirroring_policy: Mirroring policy for this repo. Values: "mirror_content_only" or "additive". @EXAMPLE "mirror_content_only"
        :param pulumi.Input[str] name: Repository name.@EXAMPLE "My Repository"
        :param pulumi.Input[int] product_id: Product the repository belongs to.@EXAMPLE
        :param pulumi.Input[bool] unprotected: true if this repository can be published via HTTP.@EXAMPLE true
        :param pulumi.Input[str] upstream_password: Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
        :param pulumi.Input[str] upstream_username: Username of the upstream repository user used for authentication.@EXAMPLE "admin"
        :param pulumi.Input[str] url: Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
        :param pulumi.Input[bool] verify_ssl_on_sync: If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KatelloRepositoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a KatelloRepository resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KatelloRepositoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KatelloRepositoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ansible_collection_requirements: Optional[pulumi.Input[str]] = None,
                 checksum_type: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 deb_architectures: Optional[pulumi.Input[str]] = None,
                 deb_components: Optional[pulumi.Input[str]] = None,
                 deb_releases: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 docker_tags_whitelist: Optional[pulumi.Input[str]] = None,
                 docker_upstream_name: Optional[pulumi.Input[str]] = None,
                 download_concurrency: Optional[pulumi.Input[int]] = None,
                 download_policy: Optional[pulumi.Input[str]] = None,
                 gpg_key_id: Optional[pulumi.Input[int]] = None,
                 http_proxy_id: Optional[pulumi.Input[int]] = None,
                 http_proxy_policy: Optional[pulumi.Input[str]] = None,
                 ignorable_content: Optional[pulumi.Input[str]] = None,
                 ignore_global_proxy: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 mirror_on_sync: Optional[pulumi.Input[bool]] = None,
                 mirroring_policy: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 product_id: Optional[pulumi.Input[int]] = None,
                 unprotected: Optional[pulumi.Input[bool]] = None,
                 upstream_password: Optional[pulumi.Input[str]] = None,
                 upstream_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 verify_ssl_on_sync: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KatelloRepositoryArgs.__new__(KatelloRepositoryArgs)

            __props__.__dict__["ansible_collection_requirements"] = ansible_collection_requirements
            __props__.__dict__["checksum_type"] = checksum_type
            if content_type is None and not opts.urn:
                raise TypeError("Missing required property 'content_type'")
            __props__.__dict__["content_type"] = content_type
            __props__.__dict__["deb_architectures"] = deb_architectures
            __props__.__dict__["deb_components"] = deb_components
            __props__.__dict__["deb_releases"] = deb_releases
            __props__.__dict__["description"] = description
            __props__.__dict__["docker_tags_whitelist"] = docker_tags_whitelist
            __props__.__dict__["docker_upstream_name"] = docker_upstream_name
            __props__.__dict__["download_concurrency"] = download_concurrency
            __props__.__dict__["download_policy"] = download_policy
            __props__.__dict__["gpg_key_id"] = gpg_key_id
            __props__.__dict__["http_proxy_id"] = http_proxy_id
            __props__.__dict__["http_proxy_policy"] = http_proxy_policy
            __props__.__dict__["ignorable_content"] = ignorable_content
            __props__.__dict__["ignore_global_proxy"] = ignore_global_proxy
            __props__.__dict__["label"] = label
            __props__.__dict__["mirror_on_sync"] = mirror_on_sync
            __props__.__dict__["mirroring_policy"] = mirroring_policy
            __props__.__dict__["name"] = name
            if product_id is None and not opts.urn:
                raise TypeError("Missing required property 'product_id'")
            __props__.__dict__["product_id"] = product_id
            __props__.__dict__["unprotected"] = unprotected
            __props__.__dict__["upstream_password"] = upstream_password
            __props__.__dict__["upstream_username"] = upstream_username
            __props__.__dict__["url"] = url
            __props__.__dict__["verify_ssl_on_sync"] = verify_ssl_on_sync
            __props__.__dict__["__meta_"] = None
        super(KatelloRepository, __self__).__init__(
            'foreman:index/katelloRepository:KatelloRepository',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            ansible_collection_requirements: Optional[pulumi.Input[str]] = None,
            checksum_type: Optional[pulumi.Input[str]] = None,
            content_type: Optional[pulumi.Input[str]] = None,
            deb_architectures: Optional[pulumi.Input[str]] = None,
            deb_components: Optional[pulumi.Input[str]] = None,
            deb_releases: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            docker_tags_whitelist: Optional[pulumi.Input[str]] = None,
            docker_upstream_name: Optional[pulumi.Input[str]] = None,
            download_concurrency: Optional[pulumi.Input[int]] = None,
            download_policy: Optional[pulumi.Input[str]] = None,
            gpg_key_id: Optional[pulumi.Input[int]] = None,
            http_proxy_id: Optional[pulumi.Input[int]] = None,
            http_proxy_policy: Optional[pulumi.Input[str]] = None,
            ignorable_content: Optional[pulumi.Input[str]] = None,
            ignore_global_proxy: Optional[pulumi.Input[bool]] = None,
            label: Optional[pulumi.Input[str]] = None,
            mirror_on_sync: Optional[pulumi.Input[bool]] = None,
            mirroring_policy: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            product_id: Optional[pulumi.Input[int]] = None,
            unprotected: Optional[pulumi.Input[bool]] = None,
            upstream_password: Optional[pulumi.Input[str]] = None,
            upstream_username: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None,
            verify_ssl_on_sync: Optional[pulumi.Input[bool]] = None) -> 'KatelloRepository':
        """
        Get an existing KatelloRepository resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY Repository
        :param pulumi.Input[str] ansible_collection_requirements: Contents of requirement yaml file to sync from URL.@EXAMPLE
        :param pulumi.Input[str] checksum_type: Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
        :param pulumi.Input[str] content_type: Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
               `"ansible_collection"`.@EXAMPLE "yum"
        :param pulumi.Input[str] deb_architectures: Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
        :param pulumi.Input[str] deb_components: Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
        :param pulumi.Input[str] deb_releases: Comma separated list of releases to be synched from deb-archive.@EXAMPLE
        :param pulumi.Input[str] description: Repository description.@EXAMPLE "A repository description"
        :param pulumi.Input[str] docker_tags_whitelist: Comma separated list of tags to sync for Container Image repository.@EXAMPLE
        :param pulumi.Input[str] docker_upstream_name: Name of the upstream docker repository@EXAMPLE
        :param pulumi.Input[int] download_concurrency: Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
               value is not returned from the API and is therefore handled by a DiffSuppressFunc.
        :param pulumi.Input[str] download_policy: Product the repository belongs to. Valid values include:`"immediate"`, "on_demand"`, "background"`.@EXAMPLE "immediate"
        :param pulumi.Input[int] gpg_key_id: Identifier of the GPG key.@EXAMPLE
        :param pulumi.Input[int] http_proxy_id: ID of a HTTP Proxy.@EXAMPLE
        :param pulumi.Input[str] http_proxy_policy: Policies for HTTP proxy for content sync. Valid values include:`"global_default_http_proxy"`, "none"`,
               "use_selected_http_proxy"`.@EXAMPLE "global_default_http_proxy"
        :param pulumi.Input[str] ignorable_content: List of content units to ignore while syncing a yum repository. Must be subset of
               rpm,drpm,srpm,distribution,erratum@EXAMPLE
        :param pulumi.Input[bool] ignore_global_proxy: If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
        :param pulumi.Input[str] label: Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
        :param pulumi.Input[bool] mirror_on_sync: 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
        :param pulumi.Input[str] mirroring_policy: Mirroring policy for this repo. Values: "mirror_content_only" or "additive". @EXAMPLE "mirror_content_only"
        :param pulumi.Input[str] name: Repository name.@EXAMPLE "My Repository"
        :param pulumi.Input[int] product_id: Product the repository belongs to.@EXAMPLE
        :param pulumi.Input[bool] unprotected: true if this repository can be published via HTTP.@EXAMPLE true
        :param pulumi.Input[str] upstream_password: Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
        :param pulumi.Input[str] upstream_username: Username of the upstream repository user used for authentication.@EXAMPLE "admin"
        :param pulumi.Input[str] url: Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
        :param pulumi.Input[bool] verify_ssl_on_sync: If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KatelloRepositoryState.__new__(_KatelloRepositoryState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["ansible_collection_requirements"] = ansible_collection_requirements
        __props__.__dict__["checksum_type"] = checksum_type
        __props__.__dict__["content_type"] = content_type
        __props__.__dict__["deb_architectures"] = deb_architectures
        __props__.__dict__["deb_components"] = deb_components
        __props__.__dict__["deb_releases"] = deb_releases
        __props__.__dict__["description"] = description
        __props__.__dict__["docker_tags_whitelist"] = docker_tags_whitelist
        __props__.__dict__["docker_upstream_name"] = docker_upstream_name
        __props__.__dict__["download_concurrency"] = download_concurrency
        __props__.__dict__["download_policy"] = download_policy
        __props__.__dict__["gpg_key_id"] = gpg_key_id
        __props__.__dict__["http_proxy_id"] = http_proxy_id
        __props__.__dict__["http_proxy_policy"] = http_proxy_policy
        __props__.__dict__["ignorable_content"] = ignorable_content
        __props__.__dict__["ignore_global_proxy"] = ignore_global_proxy
        __props__.__dict__["label"] = label
        __props__.__dict__["mirror_on_sync"] = mirror_on_sync
        __props__.__dict__["mirroring_policy"] = mirroring_policy
        __props__.__dict__["name"] = name
        __props__.__dict__["product_id"] = product_id
        __props__.__dict__["unprotected"] = unprotected
        __props__.__dict__["upstream_password"] = upstream_password
        __props__.__dict__["upstream_username"] = upstream_username
        __props__.__dict__["url"] = url
        __props__.__dict__["verify_ssl_on_sync"] = verify_ssl_on_sync
        return KatelloRepository(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY Repository
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter(name="ansibleCollectionRequirements")
    def ansible_collection_requirements(self) -> pulumi.Output[Optional[str]]:
        """
        Contents of requirement yaml file to sync from URL.@EXAMPLE
        """
        return pulumi.get(self, "ansible_collection_requirements")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> pulumi.Output[Optional[str]]:
        """
        Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
        """
        return pulumi.get(self, "checksum_type")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Output[str]:
        """
        Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
        `"ansible_collection"`.@EXAMPLE "yum"
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="debArchitectures")
    def deb_architectures(self) -> pulumi.Output[Optional[str]]:
        """
        Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
        """
        return pulumi.get(self, "deb_architectures")

    @property
    @pulumi.getter(name="debComponents")
    def deb_components(self) -> pulumi.Output[Optional[str]]:
        """
        Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
        """
        return pulumi.get(self, "deb_components")

    @property
    @pulumi.getter(name="debReleases")
    def deb_releases(self) -> pulumi.Output[Optional[str]]:
        """
        Comma separated list of releases to be synched from deb-archive.@EXAMPLE
        """
        return pulumi.get(self, "deb_releases")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Repository description.@EXAMPLE "A repository description"
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dockerTagsWhitelist")
    def docker_tags_whitelist(self) -> pulumi.Output[Optional[str]]:
        """
        Comma separated list of tags to sync for Container Image repository.@EXAMPLE
        """
        return pulumi.get(self, "docker_tags_whitelist")

    @property
    @pulumi.getter(name="dockerUpstreamName")
    def docker_upstream_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the upstream docker repository@EXAMPLE
        """
        return pulumi.get(self, "docker_upstream_name")

    @property
    @pulumi.getter(name="downloadConcurrency")
    def download_concurrency(self) -> pulumi.Output[Optional[int]]:
        """
        Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
        value is not returned from the API and is therefore handled by a DiffSuppressFunc.
        """
        return pulumi.get(self, "download_concurrency")

    @property
    @pulumi.getter(name="downloadPolicy")
    def download_policy(self) -> pulumi.Output[Optional[str]]:
        """
        Product the repository belongs to. Valid values include:`"immediate"`, "on_demand"`, "background"`.@EXAMPLE "immediate"
        """
        return pulumi.get(self, "download_policy")

    @property
    @pulumi.getter(name="gpgKeyId")
    def gpg_key_id(self) -> pulumi.Output[Optional[int]]:
        """
        Identifier of the GPG key.@EXAMPLE
        """
        return pulumi.get(self, "gpg_key_id")

    @property
    @pulumi.getter(name="httpProxyId")
    def http_proxy_id(self) -> pulumi.Output[Optional[int]]:
        """
        ID of a HTTP Proxy.@EXAMPLE
        """
        return pulumi.get(self, "http_proxy_id")

    @property
    @pulumi.getter(name="httpProxyPolicy")
    def http_proxy_policy(self) -> pulumi.Output[Optional[str]]:
        """
        Policies for HTTP proxy for content sync. Valid values include:`"global_default_http_proxy"`, "none"`,
        "use_selected_http_proxy"`.@EXAMPLE "global_default_http_proxy"
        """
        return pulumi.get(self, "http_proxy_policy")

    @property
    @pulumi.getter(name="ignorableContent")
    def ignorable_content(self) -> pulumi.Output[Optional[str]]:
        """
        List of content units to ignore while syncing a yum repository. Must be subset of
        rpm,drpm,srpm,distribution,erratum@EXAMPLE
        """
        return pulumi.get(self, "ignorable_content")

    @property
    @pulumi.getter(name="ignoreGlobalProxy")
    def ignore_global_proxy(self) -> pulumi.Output[Optional[bool]]:
        """
        If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
        """
        return pulumi.get(self, "ignore_global_proxy")

    @property
    @pulumi.getter
    def label(self) -> pulumi.Output[str]:
        """
        Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="mirrorOnSync")
    @_utilities.deprecated("""Deprecated and removed in Katello 4.9 in favor of mirroring_policy""")
    def mirror_on_sync(self) -> pulumi.Output[Optional[bool]]:
        """
        'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
        """
        return pulumi.get(self, "mirror_on_sync")

    @property
    @pulumi.getter(name="mirroringPolicy")
    def mirroring_policy(self) -> pulumi.Output[Optional[str]]:
        """
        Mirroring policy for this repo. Values: "mirror_content_only" or "additive". @EXAMPLE "mirror_content_only"
        """
        return pulumi.get(self, "mirroring_policy")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Repository name.@EXAMPLE "My Repository"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Output[int]:
        """
        Product the repository belongs to.@EXAMPLE
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def unprotected(self) -> pulumi.Output[Optional[bool]]:
        """
        true if this repository can be published via HTTP.@EXAMPLE true
        """
        return pulumi.get(self, "unprotected")

    @property
    @pulumi.getter(name="upstreamPassword")
    def upstream_password(self) -> pulumi.Output[Optional[str]]:
        """
        Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
        """
        return pulumi.get(self, "upstream_password")

    @property
    @pulumi.getter(name="upstreamUsername")
    def upstream_username(self) -> pulumi.Output[Optional[str]]:
        """
        Username of the upstream repository user used for authentication.@EXAMPLE "admin"
        """
        return pulumi.get(self, "upstream_username")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[Optional[str]]:
        """
        Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="verifySslOnSync")
    def verify_ssl_on_sync(self) -> pulumi.Output[Optional[bool]]:
        """
        If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
        """
        return pulumi.get(self, "verify_ssl_on_sync")

