// This code is generated automatically via a script in code_gen/ folder
use strum_macros::EnumIter;
use pyo3::prelude::*;

use super::ScoringRule;
use crate::expansion::Expansion;

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, EnumIter)]
#[pyclass(eq, eq_int)]
pub enum BonusCard {
    Anatomist,
    BackyardBirder,
    BirdCounter,
    BirdFeeder,
    BreedingManager,
    Cartographer,
    Ecologist,
    EnclosureBuilder,
    Falconer,
    FisheryManager,
    FoodWebExpert,
    Forester,
    Historian,
    LargeBirdSpecialist,
    NestBoxBuilder,
    OmnivoreSpecialist,
    Oologist,
    PasserineSpecialist,
    Photographer,
    PlatformBuilder,
    PrairieManager,
    Rodentologist,
    VisionaryLeader,
    Viticulturalist,
    WetlandScientist,
    WildlifeGardener,
    Behaviorist,
    BirdBander,
    CitizenScientist,
    DietSpecialist,
    Ethologist,
    ForestDataAnalyst,
    GrasslandDataAnalyst,
    MechanicalEngineer,
    SiteSelectionExpert,
    WetlandDataAnalyst,
    AvianTheriogenologist,
    EndangeredSpeciesProtector,
    ForestPopulationMonitor,
    ForestRanger,
    GrasslandPopulationMonitor,
    GrasslandRanger,
    PelletDissector,
    SmallClutchSpecialist,
    WetlandPopulationMonitor,
    WetlandRanger,
    WinterFeeder,
}

impl BonusCard {
    pub fn index(&self) -> u16 {
        match self {
            Self::Anatomist => 0,
            Self::BackyardBirder => 1,
            Self::BirdCounter => 2,
            Self::BirdFeeder => 3,
            Self::BreedingManager => 4,
            Self::Cartographer => 5,
            Self::Ecologist => 6,
            Self::EnclosureBuilder => 7,
            Self::Falconer => 8,
            Self::FisheryManager => 9,
            Self::FoodWebExpert => 10,
            Self::Forester => 11,
            Self::Historian => 12,
            Self::LargeBirdSpecialist => 13,
            Self::NestBoxBuilder => 14,
            Self::OmnivoreSpecialist => 15,
            Self::Oologist => 16,
            Self::PasserineSpecialist => 17,
            Self::Photographer => 18,
            Self::PlatformBuilder => 19,
            Self::PrairieManager => 20,
            Self::Rodentologist => 21,
            Self::VisionaryLeader => 22,
            Self::Viticulturalist => 23,
            Self::WetlandScientist => 24,
            Self::WildlifeGardener => 25,
            Self::Behaviorist => 26,
            Self::BirdBander => 27,
            Self::CitizenScientist => 28,
            Self::DietSpecialist => 29,
            Self::Ethologist => 30,
            Self::ForestDataAnalyst => 31,
            Self::GrasslandDataAnalyst => 32,
            Self::MechanicalEngineer => 33,
            Self::SiteSelectionExpert => 34,
            Self::WetlandDataAnalyst => 35,
            Self::AvianTheriogenologist => 36,
            Self::EndangeredSpeciesProtector => 37,
            Self::ForestPopulationMonitor => 38,
            Self::ForestRanger => 39,
            Self::GrasslandPopulationMonitor => 40,
            Self::GrasslandRanger => 41,
            Self::PelletDissector => 42,
            Self::SmallClutchSpecialist => 43,
            Self::WetlandPopulationMonitor => 44,
            Self::WetlandRanger => 45,
            Self::WinterFeeder => 46,
        }
    }

    pub fn name(&self) -> &'static str {
        match self {
            Self::Anatomist => "Anatomist",
            Self::BackyardBirder => "Backyard Birder",
            Self::BirdCounter => "Bird Counter",
            Self::BirdFeeder => "Bird Feeder",
            Self::BreedingManager => "Breeding Manager",
            Self::Cartographer => "Cartographer [swift_start_asia]",
            Self::Ecologist => "Ecologist",
            Self::EnclosureBuilder => "Enclosure Builder",
            Self::Falconer => "Falconer",
            Self::FisheryManager => "Fishery Manager",
            Self::FoodWebExpert => "Food Web Expert",
            Self::Forester => "Forester",
            Self::Historian => "Historian",
            Self::LargeBirdSpecialist => "Large Bird Specialist",
            Self::NestBoxBuilder => "Nest Box Builder",
            Self::OmnivoreSpecialist => "Omnivore Specialist",
            Self::Oologist => "Oologist",
            Self::PasserineSpecialist => "Passerine Specialist",
            Self::Photographer => "Photographer",
            Self::PlatformBuilder => "Platform Builder",
            Self::PrairieManager => "Prairie Manager",
            Self::Rodentologist => "Rodentologist",
            Self::VisionaryLeader => "Visionary Leader",
            Self::Viticulturalist => "Viticulturalist",
            Self::WetlandScientist => "Wetland Scientist",
            Self::WildlifeGardener => "Wildlife Gardener",
            Self::Behaviorist => "Behaviorist",
            Self::BirdBander => "Bird Bander",
            Self::CitizenScientist => "Citizen Scientist",
            Self::DietSpecialist => "Diet Specialist",
            Self::Ethologist => "Ethologist",
            Self::ForestDataAnalyst => "Forest Data Analyst",
            Self::GrasslandDataAnalyst => "Grassland Data Analyst",
            Self::MechanicalEngineer => "Mechanical Engineer",
            Self::SiteSelectionExpert => "Site Selection Expert",
            Self::WetlandDataAnalyst => "Wetland Data Analyst",
            Self::AvianTheriogenologist => "Avian Theriogenologist",
            Self::EndangeredSpeciesProtector => "Endangered Species Protector",
            Self::ForestPopulationMonitor => "Forest Population Monitor",
            Self::ForestRanger => "Forest Ranger [swift_start_asia]",
            Self::GrasslandPopulationMonitor => "Grassland Population Monitor",
            Self::GrasslandRanger => "Grassland Ranger",
            Self::PelletDissector => "Pellet Dissector",
            Self::SmallClutchSpecialist => "Small Clutch Specialist",
            Self::WetlandPopulationMonitor => "Wetland Population Monitor",
            Self::WetlandRanger => "Wetland Ranger",
            Self::WinterFeeder => "Winter Feeder",
        }
    }

    pub fn expansion(&self) -> Expansion {
        match self {
            Self::Anatomist => Expansion::Core,
            Self::BackyardBirder => Expansion::Core,
            Self::BirdCounter => Expansion::Core,
            Self::BirdFeeder => Expansion::Core,
            Self::BreedingManager => Expansion::Core,
            Self::Cartographer => Expansion::Core,
            Self::Ecologist => Expansion::Core,
            Self::EnclosureBuilder => Expansion::Core,
            Self::Falconer => Expansion::Core,
            Self::FisheryManager => Expansion::Core,
            Self::FoodWebExpert => Expansion::Core,
            Self::Forester => Expansion::Core,
            Self::Historian => Expansion::Core,
            Self::LargeBirdSpecialist => Expansion::Core,
            Self::NestBoxBuilder => Expansion::Core,
            Self::OmnivoreSpecialist => Expansion::Core,
            Self::Oologist => Expansion::Core,
            Self::PasserineSpecialist => Expansion::Core,
            Self::Photographer => Expansion::Core,
            Self::PlatformBuilder => Expansion::Core,
            Self::PrairieManager => Expansion::Core,
            Self::Rodentologist => Expansion::Core,
            Self::VisionaryLeader => Expansion::Core,
            Self::Viticulturalist => Expansion::Core,
            Self::WetlandScientist => Expansion::Core,
            Self::WildlifeGardener => Expansion::Core,
            Self::Behaviorist => Expansion::European,
            Self::BirdBander => Expansion::European,
            Self::CitizenScientist => Expansion::European,
            Self::DietSpecialist => Expansion::European,
            Self::Ethologist => Expansion::European,
            Self::ForestDataAnalyst => Expansion::Oceania,
            Self::GrasslandDataAnalyst => Expansion::Oceania,
            Self::MechanicalEngineer => Expansion::Oceania,
            Self::SiteSelectionExpert => Expansion::Oceania,
            Self::WetlandDataAnalyst => Expansion::Oceania,
            Self::AvianTheriogenologist => Expansion::Asia,
            Self::EndangeredSpeciesProtector => Expansion::Asia,
            Self::ForestPopulationMonitor => Expansion::Asia,
            Self::ForestRanger => Expansion::Asia,
            Self::GrasslandPopulationMonitor => Expansion::Asia,
            Self::GrasslandRanger => Expansion::Asia,
            Self::PelletDissector => Expansion::Asia,
            Self::SmallClutchSpecialist => Expansion::Asia,
            Self::WetlandPopulationMonitor => Expansion::Asia,
            Self::WetlandRanger => Expansion::Asia,
            Self::WinterFeeder => Expansion::Asia,
        }
    }

    pub fn scoring_rule(&self) -> ScoringRule {
        match self {
            Self::Anatomist => ScoringRule::Ladder(Box::new([(2, 3), (4, 7)])),
            Self::BackyardBirder => ScoringRule::Ladder(Box::new([(5, 3), (6, 6)])),
            Self::BirdCounter => ScoringRule::Each(2),
            Self::BirdFeeder => ScoringRule::Ladder(Box::new([(5, 3), (8, 7)])),
            Self::BreedingManager => ScoringRule::Each(1),
            Self::Cartographer => ScoringRule::Ladder(Box::new([(2, 3), (4, 7)])),
            Self::Ecologist => ScoringRule::Each(2),
            Self::EnclosureBuilder => ScoringRule::Ladder(Box::new([(4, 4), (6, 7)])),
            Self::Falconer => ScoringRule::Each(2),
            Self::FisheryManager => ScoringRule::Ladder(Box::new([(2, 3), (4, 8)])),
            Self::FoodWebExpert => ScoringRule::Each(2),
            Self::Forester => ScoringRule::Ladder(Box::new([(3, 4), (5, 8)])),
            Self::Historian => ScoringRule::Each(2),
            Self::LargeBirdSpecialist => ScoringRule::Ladder(Box::new([(4, 3), (6, 6)])),
            Self::NestBoxBuilder => ScoringRule::Ladder(Box::new([(4, 4), (6, 7)])),
            Self::OmnivoreSpecialist => ScoringRule::Each(2),
            Self::Oologist => ScoringRule::Ladder(Box::new([(7, 3), (9, 6)])),
            Self::PasserineSpecialist => ScoringRule::Ladder(Box::new([(4, 3), (6, 6)])),
            Self::Photographer => ScoringRule::Ladder(Box::new([(4, 3), (6, 6)])),
            Self::PlatformBuilder => ScoringRule::Ladder(Box::new([(4, 4), (6, 7)])),
            Self::PrairieManager => ScoringRule::Ladder(Box::new([(2, 3), (4, 8)])),
            Self::Rodentologist => ScoringRule::Each(2),
            Self::VisionaryLeader => ScoringRule::Ladder(Box::new([(5, 4), (8, 7)])),
            Self::Viticulturalist => ScoringRule::Ladder(Box::new([(2, 3), (4, 7)])),
            Self::WetlandScientist => ScoringRule::Ladder(Box::new([(3, 3), (5, 7)])),
            Self::WildlifeGardener => ScoringRule::Ladder(Box::new([(4, 4), (6, 7)])),
            Self::Behaviorist => ScoringRule::Each(3),
            Self::BirdBander => ScoringRule::Ladder(Box::new([(4, 4), (6, 7)])),
            Self::CitizenScientist => ScoringRule::Ladder(Box::new([(4, 3), (7, 6)])),
            Self::DietSpecialist => ScoringRule::Ladder(Box::new([(2, 3), (4, 6)])),
            Self::Ethologist => ScoringRule::Each(2),
            Self::ForestDataAnalyst => ScoringRule::Ladder(Box::new([(3, 3), (4, 5), (5, 8)])),
            Self::GrasslandDataAnalyst => ScoringRule::Ladder(Box::new([(3, 3), (4, 5), (5, 8)])),
            Self::MechanicalEngineer => ScoringRule::Ladder(Box::new([(1, 3), (2, 8)])),
            Self::SiteSelectionExpert => ScoringRule::Ladder(Box::new([(2, 1), (3, 3)])),
            Self::WetlandDataAnalyst => ScoringRule::Ladder(Box::new([(3, 3), (4, 5), (5, 8)])),
            Self::AvianTheriogenologist => ScoringRule::Ladder(Box::new([(5, 4), (7, 7)])),
            Self::EndangeredSpeciesProtector => ScoringRule::Each(3),
            Self::ForestPopulationMonitor => {
                ScoringRule::Ladder(Box::new([(2, 3), (4, 5), (5, 8)]))
            }
            Self::ForestRanger => ScoringRule::Ladder(Box::new([(3, 3), (4, 5), (5, 8)])),
            Self::GrasslandPopulationMonitor => {
                ScoringRule::Ladder(Box::new([(2, 3), (4, 5), (5, 8)]))
            }
            Self::GrasslandRanger => ScoringRule::Ladder(Box::new([(3, 3), (4, 5), (5, 8)])),
            Self::PelletDissector => ScoringRule::Ladder(Box::new([(2, 3), (4, 6)])),
            Self::SmallClutchSpecialist => ScoringRule::Ladder(Box::new([(5, 3), (8, 7)])),
            Self::WetlandPopulationMonitor => {
                ScoringRule::Ladder(Box::new([(2, 3), (4, 5), (5, 8)]))
            }
            Self::WetlandRanger => ScoringRule::Ladder(Box::new([(3, 3), (4, 5), (5, 8)])),
            Self::WinterFeeder => ScoringRule::Ladder(Box::new([(4, 4), (7, 7)])),
        }
    }
}
