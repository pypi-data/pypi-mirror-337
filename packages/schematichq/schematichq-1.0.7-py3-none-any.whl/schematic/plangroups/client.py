# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.get_plan_group_response import GetPlanGroupResponse
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unauthorized_error import UnauthorizedError
from ..types.api_error import ApiError as types_api_error_ApiError
from ..errors.forbidden_error import ForbiddenError
from ..errors.not_found_error import NotFoundError
from ..errors.internal_server_error import InternalServerError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError as core_api_error_ApiError
from ..types.ordered_plans_in_group import OrderedPlansInGroup
from ..types.custom_plan_config import CustomPlanConfig
from .types.create_plan_group_response import CreatePlanGroupResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..errors.bad_request_error import BadRequestError
from .types.update_plan_group_response import UpdatePlanGroupResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PlangroupsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_plan_group(self, *, request_options: typing.Optional[RequestOptions] = None) -> GetPlanGroupResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPlanGroupResponse
            OK

        Examples
        --------
        from schematic import Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plangroups.get_plan_group()
        """
        _response = self._client_wrapper.httpx_client.request(
            "plan-groups",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetPlanGroupResponse,
                    parse_obj_as(
                        type_=GetPlanGroupResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def create_plan_group(
        self,
        *,
        add_on_ids: typing.Sequence[str],
        ordered_plans: typing.Sequence[OrderedPlansInGroup],
        custom_plan_config: typing.Optional[CustomPlanConfig] = OMIT,
        custom_plan_id: typing.Optional[str] = OMIT,
        default_plan_id: typing.Optional[str] = OMIT,
        trial_days: typing.Optional[int] = OMIT,
        trial_payment_method_required: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreatePlanGroupResponse:
        """
        Parameters
        ----------
        add_on_ids : typing.Sequence[str]

        ordered_plans : typing.Sequence[OrderedPlansInGroup]

        custom_plan_config : typing.Optional[CustomPlanConfig]

        custom_plan_id : typing.Optional[str]

        default_plan_id : typing.Optional[str]

        trial_days : typing.Optional[int]

        trial_payment_method_required : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreatePlanGroupResponse
            Created

        Examples
        --------
        from schematic import OrderedPlansInGroup, Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plangroups.create_plan_group(
            add_on_ids=["add_on_ids"],
            ordered_plans=[
                OrderedPlansInGroup(
                    plan_id="plan_id",
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "plan-groups",
            method="POST",
            json={
                "add_on_ids": add_on_ids,
                "custom_plan_config": convert_and_respect_annotation_metadata(
                    object_=custom_plan_config,
                    annotation=CustomPlanConfig,
                    direction="write",
                ),
                "custom_plan_id": custom_plan_id,
                "default_plan_id": default_plan_id,
                "ordered_plans": convert_and_respect_annotation_metadata(
                    object_=ordered_plans,
                    annotation=typing.Sequence[OrderedPlansInGroup],
                    direction="write",
                ),
                "trial_days": trial_days,
                "trial_payment_method_required": trial_payment_method_required,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreatePlanGroupResponse,
                    parse_obj_as(
                        type_=CreatePlanGroupResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    def update_plan_group(
        self,
        plan_group_id: str,
        *,
        add_on_ids: typing.Sequence[str],
        ordered_plans: typing.Sequence[OrderedPlansInGroup],
        custom_plan_config: typing.Optional[CustomPlanConfig] = OMIT,
        custom_plan_id: typing.Optional[str] = OMIT,
        default_plan_id: typing.Optional[str] = OMIT,
        trial_days: typing.Optional[int] = OMIT,
        trial_payment_method_required: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdatePlanGroupResponse:
        """
        Parameters
        ----------
        plan_group_id : str
            plan_group_id

        add_on_ids : typing.Sequence[str]

        ordered_plans : typing.Sequence[OrderedPlansInGroup]

        custom_plan_config : typing.Optional[CustomPlanConfig]

        custom_plan_id : typing.Optional[str]

        default_plan_id : typing.Optional[str]

        trial_days : typing.Optional[int]

        trial_payment_method_required : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdatePlanGroupResponse
            OK

        Examples
        --------
        from schematic import OrderedPlansInGroup, Schematic

        client = Schematic(
            api_key="YOUR_API_KEY",
        )
        client.plangroups.update_plan_group(
            plan_group_id="plan_group_id",
            add_on_ids=["add_on_ids"],
            ordered_plans=[
                OrderedPlansInGroup(
                    plan_id="plan_id",
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"plan-groups/{jsonable_encoder(plan_group_id)}",
            method="PUT",
            json={
                "add_on_ids": add_on_ids,
                "custom_plan_config": convert_and_respect_annotation_metadata(
                    object_=custom_plan_config,
                    annotation=CustomPlanConfig,
                    direction="write",
                ),
                "custom_plan_id": custom_plan_id,
                "default_plan_id": default_plan_id,
                "ordered_plans": convert_and_respect_annotation_metadata(
                    object_=ordered_plans,
                    annotation=typing.Sequence[OrderedPlansInGroup],
                    direction="write",
                ),
                "trial_days": trial_days,
                "trial_payment_method_required": trial_payment_method_required,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdatePlanGroupResponse,
                    parse_obj_as(
                        type_=UpdatePlanGroupResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPlangroupsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_plan_group(self, *, request_options: typing.Optional[RequestOptions] = None) -> GetPlanGroupResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPlanGroupResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plangroups.get_plan_group()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "plan-groups",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetPlanGroupResponse,
                    parse_obj_as(
                        type_=GetPlanGroupResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def create_plan_group(
        self,
        *,
        add_on_ids: typing.Sequence[str],
        ordered_plans: typing.Sequence[OrderedPlansInGroup],
        custom_plan_config: typing.Optional[CustomPlanConfig] = OMIT,
        custom_plan_id: typing.Optional[str] = OMIT,
        default_plan_id: typing.Optional[str] = OMIT,
        trial_days: typing.Optional[int] = OMIT,
        trial_payment_method_required: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreatePlanGroupResponse:
        """
        Parameters
        ----------
        add_on_ids : typing.Sequence[str]

        ordered_plans : typing.Sequence[OrderedPlansInGroup]

        custom_plan_config : typing.Optional[CustomPlanConfig]

        custom_plan_id : typing.Optional[str]

        default_plan_id : typing.Optional[str]

        trial_days : typing.Optional[int]

        trial_payment_method_required : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreatePlanGroupResponse
            Created

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic, OrderedPlansInGroup

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plangroups.create_plan_group(
                add_on_ids=["add_on_ids"],
                ordered_plans=[
                    OrderedPlansInGroup(
                        plan_id="plan_id",
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "plan-groups",
            method="POST",
            json={
                "add_on_ids": add_on_ids,
                "custom_plan_config": convert_and_respect_annotation_metadata(
                    object_=custom_plan_config,
                    annotation=CustomPlanConfig,
                    direction="write",
                ),
                "custom_plan_id": custom_plan_id,
                "default_plan_id": default_plan_id,
                "ordered_plans": convert_and_respect_annotation_metadata(
                    object_=ordered_plans,
                    annotation=typing.Sequence[OrderedPlansInGroup],
                    direction="write",
                ),
                "trial_days": trial_days,
                "trial_payment_method_required": trial_payment_method_required,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreatePlanGroupResponse,
                    parse_obj_as(
                        type_=CreatePlanGroupResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)

    async def update_plan_group(
        self,
        plan_group_id: str,
        *,
        add_on_ids: typing.Sequence[str],
        ordered_plans: typing.Sequence[OrderedPlansInGroup],
        custom_plan_config: typing.Optional[CustomPlanConfig] = OMIT,
        custom_plan_id: typing.Optional[str] = OMIT,
        default_plan_id: typing.Optional[str] = OMIT,
        trial_days: typing.Optional[int] = OMIT,
        trial_payment_method_required: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdatePlanGroupResponse:
        """
        Parameters
        ----------
        plan_group_id : str
            plan_group_id

        add_on_ids : typing.Sequence[str]

        ordered_plans : typing.Sequence[OrderedPlansInGroup]

        custom_plan_config : typing.Optional[CustomPlanConfig]

        custom_plan_id : typing.Optional[str]

        default_plan_id : typing.Optional[str]

        trial_days : typing.Optional[int]

        trial_payment_method_required : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdatePlanGroupResponse
            OK

        Examples
        --------
        import asyncio

        from schematic import AsyncSchematic, OrderedPlansInGroup

        client = AsyncSchematic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.plangroups.update_plan_group(
                plan_group_id="plan_group_id",
                add_on_ids=["add_on_ids"],
                ordered_plans=[
                    OrderedPlansInGroup(
                        plan_id="plan_id",
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"plan-groups/{jsonable_encoder(plan_group_id)}",
            method="PUT",
            json={
                "add_on_ids": add_on_ids,
                "custom_plan_config": convert_and_respect_annotation_metadata(
                    object_=custom_plan_config,
                    annotation=CustomPlanConfig,
                    direction="write",
                ),
                "custom_plan_id": custom_plan_id,
                "default_plan_id": default_plan_id,
                "ordered_plans": convert_and_respect_annotation_metadata(
                    object_=ordered_plans,
                    annotation=typing.Sequence[OrderedPlansInGroup],
                    direction="write",
                ),
                "trial_days": trial_days,
                "trial_payment_method_required": trial_payment_method_required,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdatePlanGroupResponse,
                    parse_obj_as(
                        type_=UpdatePlanGroupResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        types_api_error_ApiError,
                        parse_obj_as(
                            type_=types_api_error_ApiError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise core_api_error_ApiError(status_code=_response.status_code, body=_response.text)
        raise core_api_error_ApiError(status_code=_response.status_code, body=_response_json)
