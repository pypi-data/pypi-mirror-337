from typing import Any, overload, Literal
from holisticai_sdk.engine.definitions._metric_entries import (
    BinaryClassificationBiasMetricEntry, 
    BinaryClassificationEfficacyMetricEntry, 
    BinaryClassificationExplainabilityMetricEntry, 
    BinaryClassificationRobustnessMetricEntry, 
    BinaryClassificationSecurityMetricEntry, 
    RegressionBiasMetricEntry, 
    RegressionEfficacyMetricEntry,
    RegressionExplainabilityMetricEntry,
    RegressionRobustnessMetricEntry,
    RegressionSecurityMetricEntry,
    MultiClassificationBiasMetricEntry,
    MultiClassificationEfficacyMetricEntry,
    MultiClassificationExplainabilityMetricEntry,
    MultiClassificationRobustnessMetricEntry,
    MultiClassificationSecurityMetricEntry,
    ClusteringEfficacyMetricEntry,
    ClusteringBiasMetricEntry,
    ClusteringExplainabilityMetricEntry,
    ClusteringRobustnessMetricEntry,
    ClusteringSecurityMetricEntry
)

@overload
def MetricEntry(vertical: Literal["efficacy"], learning_task: Literal["binary_classification"], obj: Any) -> BinaryClassificationEfficacyMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["efficacy"], learning_task: Literal["multi_classification"], obj: Any) -> MultiClassificationEfficacyMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["efficacy"], learning_task: Literal["regression"], obj: Any) -> RegressionEfficacyMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["efficacy"], learning_task: Literal["clustering"], obj: Any) -> ClusteringEfficacyMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["bias"], learning_task: Literal["binary_classification"], obj: Any) -> BinaryClassificationBiasMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["bias"], learning_task: Literal["multi_classification"], obj: Any) -> MultiClassificationBiasMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["bias"], learning_task: Literal["regression"], obj: Any) -> RegressionBiasMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["bias"], learning_task: Literal["clustering"], obj: Any) -> ClusteringBiasMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["explainability"], learning_task: Literal["binary_classification"], obj: Any) -> BinaryClassificationExplainabilityMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["explainability"], learning_task: Literal["multi_classification"], obj: Any) -> MultiClassificationExplainabilityMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["explainability"], learning_task: Literal["regression"], obj: Any) -> RegressionExplainabilityMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["explainability"], learning_task: Literal["clustering"], obj: Any) -> ClusteringExplainabilityMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["robustness"], learning_task: Literal["binary_classification"], obj: Any) -> BinaryClassificationRobustnessMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["robustness"], learning_task: Literal["multi_classification"], obj: Any) -> MultiClassificationRobustnessMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["robustness"], learning_task: Literal["regression"], obj: Any) -> RegressionRobustnessMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["robustness"], learning_task: Literal["clustering"], obj: Any) -> ClusteringRobustnessMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["security"], learning_task: Literal["binary_classification"], obj: Any) -> BinaryClassificationSecurityMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["security"], learning_task: Literal["multi_classification"], obj: Any) -> MultiClassificationSecurityMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["security"], learning_task: Literal["regression"], obj: Any) -> RegressionSecurityMetricEntry: ...
@overload
def MetricEntry(vertical: Literal["security"], learning_task: Literal["clustering"], obj: Any) -> ClusteringSecurityMetricEntry: ...

