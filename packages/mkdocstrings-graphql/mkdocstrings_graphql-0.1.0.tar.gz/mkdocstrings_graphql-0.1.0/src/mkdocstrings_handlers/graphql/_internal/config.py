# Configuration and options dataclasses.

from __future__ import annotations

import sys
from dataclasses import dataclass, field
from typing import TYPE_CHECKING, Any

from mkdocstrings import get_logger

if sys.version_info >= (3, 11):
    from typing import Self
else:
    from typing_extensions import Self  # pyright:ignore[reportUnreachable]


_logger = get_logger(__name__)


if TYPE_CHECKING:
    from collections.abc import MutableMapping


_dataclass_options = {"frozen": True}
if sys.version_info >= (3, 10):
    _dataclass_options["kw_only"] = True


@dataclass(**_dataclass_options)
class GraphQLOptions:
    """Accepted input options."""

    extra: dict[str, Any] = field(default_factory=dict, metadata={"group": "general", "description": "Extra options"})

    heading: str = field(
        default="",
        metadata={
            "group": "headings",
            "description": "A custom string to override the autogenerated heading of the root object.",
        },
    )

    heading_level: int = field(
        default=2, metadata={"group": "headings", "description": "The initial heading level to use."}
    )

    show_node_full_path: bool = field(
        default=False, metadata={"group": "docstrings", "description": "Show the full path of every node."}
    )

    show_root_full_path: bool = field(
        default=True, metadata={"group": "docstrings", "description": "Show the full path for the root object heading."}
    )

    show_root_heading: bool = field(
        default=False,
        metadata={
            "group": "headings",
            "description": "Show the heading of of the object at the root of the documentation tree. The root object is the object reference by the identifier after `:::`.",
        },
    )

    show_root_members_full_path: bool = field(
        default=False, metadata={"group": "headings", "description": "Show the full path of the root members."}
    )

    show_root_toc_entry: bool = field(
        default=True,
        metadata={
            "group": "headings",
            "description": "If the root heading is not shown, at least add a ToC entry for it.",
        },
    )

    signature_crossrefs: bool = field(
        default=False,
        metadata={
            "group": "signatures",
            "description": "Whether to render cross-references for type annotations in signatures.",
        },
    )

    toc_label: str = field(
        default="",
        metadata={
            "group": "headings",
            "description": "A custom string to override the autogenerated toc label of the root object.",
        },
    )

    @classmethod
    def coerce(cls, **data: Any) -> MutableMapping[str, Any]:
        """Coerce data."""
        return data

    @classmethod
    def from_data(cls, **data: Any) -> Self:
        """Create an instance from a dictionary."""
        return cls(**cls.coerce(**data))


@dataclass(**_dataclass_options)
class GraphQLConfig:
    """GraphQL handler configuration."""

    schemas: dict[str, list[str]] = field(
        default_factory=dict, metadata={"description": "Mapping of schema name and paths which make up the schema."}
    )

    options: GraphQLOptions = field(
        default_factory=GraphQLOptions,
        metadata={"description": "Configuration options for collecting and rendering objects."},
    )

    @classmethod
    def coerce(cls, **data: Any) -> MutableMapping[str, Any]:
        """Coerce data."""
        return data

    @classmethod
    def from_data(cls, **data: Any) -> Self:
        """Create an instance from a dictionary."""
        return cls(**cls.coerce(**data))
