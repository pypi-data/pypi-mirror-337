{"version":3,"file":"dash_hierarchies.min.js","mappings":"mBACA,IC2BYA,ED3BRC,EAAsB,CEA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,GJL1DC,EAAmB,WACnB,IAAIC,EAASC,SAASC,cACtB,IAAKF,EAAQ,CAOT,IAHA,IAAIG,EAAcF,SAASG,qBAAqB,UAC5CC,EAAU,GAELC,EAAI,EAAGA,EAAIH,EAAYI,OAAQD,IACpCD,EAAQG,KAAKL,EAAYG,IAI7BN,GADAK,EAAUA,EAAQI,QAAO,SAASC,GAAK,OAAQA,EAAEC,QAAUD,EAAEE,OAASF,EAAEG,WAAa,KACpEC,OAAO,GAAG,EAC/B,CAEA,OAAOd,CACX,EAkBA,GAZAb,OAAOC,eAAeX,EAAqB,IAAK,CAC5Ca,KAGQd,EAFSuB,IAEIgB,IAAIC,MAAM,KAAKF,MAAM,GAAI,GAAGG,KAAK,KAAO,IAElD,WACH,OAAOzC,CACX,KAIsB,oBAAnB0C,eAAgC,CACvC,IAAIC,EAAqBD,eACzBA,eAAiB,SAASE,GACtB,IAnBqBpB,EAoBjBqB,GApBiBrB,EAmBRD,IAlBV,6BAA6BuB,KAAKtB,EAAOe,MAqBxCA,EAAMI,EAAmBC,GAE7B,IAAIC,EACA,OAAON,EAGX,IAAIQ,EAAeR,EAAIC,MAAM,KACzBQ,EAAgBD,EAAaT,OAAO,GAAG,GAAGE,MAAM,KAKpD,OAHAQ,EAAcC,OAAO,EAAG,EAAG,qBAC3BF,EAAaE,QAAQ,EAAG,EAAGD,EAAcP,KAAK,MAEvCM,EAAaN,KAAK,IAC7B,CACJ,C,oEKxDA,MAAM,EAA+BS,OAAc,M,aCAnD,MAAM,EAA+BA,OAAkB,U,ktECevD,IAAMC,EAAuB,SAAHC,GAOpB,IANJC,EAAID,EAAJC,KAAIC,EAAAF,EACJG,MAAAA,OAAK,IAAAD,EAAG,EAACA,EACTE,EAAMJ,EAANI,OACAC,EAASL,EAATK,UACAC,EAAWN,EAAXM,YACAC,EAAUP,EAAVO,WAGmDC,EAAAC,GAAfC,EAAAA,EAAAA,WAAS,GAAM,GAA5CC,EAAUH,EAAA,GAAEI,EAAaJ,EAAA,GAEiBK,EAAAJ,GAAfC,EAAAA,EAAAA,WAAS,GAAM,GAA1CI,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAGxBG,EAAcf,EAAKgB,UAAYhB,EAAKgB,SAAStC,OAAS,EAGtDuC,EAAgB,GAAHC,OAAc,EAARhB,EAAS,MAoBlC,OACEiB,IAAAA,cAAA,OAAKC,MAAO,CAAEC,MAAO,SAEnBF,IAAAA,cAAA,OACEC,MAAO,CACLC,MAAO,OACPC,QAAS,OACTC,WAAY,SACZC,aAAc,SACdC,QAAS,UACTC,gBAAiBb,EAAY,UAAY,cACzCc,aAAc,SACdC,OAAQ,WAEVC,QArBiB,WAEjBvB,GACFA,EAAWN,EAEf,EAiBM8B,aAAc,WAAF,OAAQhB,GAAa,EAAK,EACtCiB,aAAc,WAAF,OAAQjB,GAAa,EAAM,GAGvCK,IAAAA,cAAA,OAAKC,MAAO,CACVE,QAAS,OACTC,WAAY,SACZS,YAAaf,IAEZF,EACCI,IAAAA,cAAA,UACEU,QA3CS,SAACI,GAEpBA,EAAEC,kBAEEnB,GACFJ,GAAeD,EAEnB,EAqCYU,MAAO,CACLe,YAAa,QACbb,QAAS,OACTC,WAAY,SACZa,eAAgB,SAChBC,WAAY,OACZC,OAAQ,OACRV,OAAQ,UACRH,QAAS,UACTJ,MAAO,SAET,gBAAeX,EACf,aAAYA,EAAa,WAAa,UAErCA,EAAaN,EAAYC,GAG5Bc,IAAAA,cAAA,OAAKC,MAAO,CAAEe,YAAa,QAASd,MAAO,WAI7CF,IAAAA,cAAA,OAAKC,MAAO,CACVmB,SAAU,EACVC,WAAY,MAEXxC,EAAKyC,OAKVtB,IAAAA,cAAA,OAAKC,MAAO,CACVsB,WAAY,OACZC,MAAO,YAEN3C,EAAK4C,WAAW,MAKrBzB,IAAAA,cAAA,OAAKC,MAAO,CAAEE,QAAS,OAAQD,MAAO,SAEpCF,IAAAA,cAAA,OAAKC,MAAO,CAAEC,MAAOJ,EAAe4B,WAAY,KAGhD1B,IAAAA,cAAA,OAAKC,MAAO,CAAEC,MAAO,QAASwB,WAAY,KAG1C1B,IAAAA,cAAA,OACEC,MAAO,CACL0B,KAAM,EACNC,OAAQ,QACRpB,aAAc,SACdH,aAAc,QACdE,gBAAiBvB,EAAOkC,aAG1BlB,IAAAA,cAAA,OACEC,MAAO,CACL2B,OAAQ,OACRpB,aAAc,SACdN,MAAO,GAAFH,OAAKlB,EAAK4C,WAAU,KACzBlB,gBAAiBvB,EAAO6C,aAO/BjC,GAAeL,GACdS,IAAAA,cAAA,OAAKC,MAAO,CAAEC,MAAO,SAClBrB,EAAKgB,SAASiC,KAAI,SAACC,EAAOC,GAAK,OAC9BhC,IAAAA,cAACiC,EAAoB,CACnBhG,IAAG,GAAA8D,OAAKgC,EAAMT,KAAI,KAAAvB,OAAIiC,GACtBnD,KAAMkD,EACNhD,MAAOA,EAAQ,EACfC,OAAQA,EACRC,UAAWA,EACXC,YAAaA,EACbC,WAAYA,GACZ,KAMd,EAoBM+C,EAAkB,SAACC,GACvB,IACEC,EAOED,EAPFC,GAAEC,EAOAF,EANFG,KAAAA,OAAI,IAAAD,EAAG,GAAEA,EAAAE,EAMPJ,EALFnD,OAAAA,OAAM,IAAAuD,EAAG,CAAEV,QAAS,UAAWX,WAAY,WAAWqB,EAAAC,EAKpDL,EAJFM,OAAAA,OAAM,IAAAD,EAAG,CAAC,EAACA,EAAAE,EAITP,EAHFQ,UAAAA,OAAS,IAAAD,EAAG,GAAEA,EAEdE,GACET,EAFFU,aAEEV,EADFS,UAKI3D,EACJe,IAAAA,cAAA,OAAK8C,MAAM,6BAA6B5C,MAAM,KAAK0B,OAAO,KAAKmB,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,SACxKpD,IAAAA,cAAA,QAAMnE,EAAE,kBAINqD,EACJc,IAAAA,cAAA,OAAK8C,MAAM,6BAA6B5C,MAAM,KAAK0B,OAAO,KAAKmB,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,SACxKpD,IAAAA,cAAA,QAAMnE,EAAE,mBAKNwH,EAAiB,SAACxE,GACtB,GAAI+D,EAAU,CAEiC/D,EAArCgB,SAAR,IAAqByD,E,6WAAmBC,CAAK1E,EAAI2E,GAGjDZ,EAAS,CAAEC,aAAcS,GAC3B,CACF,EAEA,OACEtD,IAAAA,cAAA,OACEoC,GAAIA,EACJO,UAAWA,EACX1C,MAAKwD,EAAA,CACHvD,MAAO,OACPI,QAAS,MACTa,OAAQ,oBACRX,aAAc,UACXiC,IAGJH,EAAKR,KAAI,SAACjD,EAAMmD,GAAK,OACpBhC,IAAAA,cAACiC,EAAoB,CACnBhG,IAAG,GAAA8D,OAAKlB,EAAKyC,KAAI,KAAAvB,OAAIiC,GACrBnD,KAAMA,EACNG,OAAQA,EACRC,UAAWA,EACXC,YAAaA,EACbC,WAAYkE,GACZ,IAIV,EAMAnB,EAAgBwB,UAAY,CAI1BtB,GAAIuB,IAAAA,OAMJrB,KAAMqB,IAAAA,QAAkBA,IAAAA,MAAgB,CACtCrC,KAAMqC,IAAAA,OAAiBC,WACvBnC,WAAYkC,IAAAA,OAAiBC,WAC7B/D,SAAU8D,IAAAA,SAMZ3E,OAAQ2E,IAAAA,MAAgB,CACtB9B,QAAS8B,IAAAA,OACTzC,WAAYyC,IAAAA,SAMdlB,OAAQkB,IAAAA,OAKRhB,UAAWgB,IAAAA,OAMXf,SAAUe,IAAAA,KAOVd,aAAcc,IAAAA,QAMhBzB,EAAgB2B,aAAe,CAC7BvB,KAAM,GACNtD,OAAQ,CAAE6C,QAAS,UAAWX,WAAY,WAC1CuB,OAAQ,CAAC,EACTI,aAAc,MAGhB,U,qsECjSA,IAAMiB,EAAoB,SAAHlF,GAWjB,IAVJC,EAAID,EAAJC,KAAIC,EAAAF,EACJG,MAAAA,OAAK,IAAAD,EAAG,EAACA,EACTiF,EAAOnF,EAAPmF,QACAC,EAAepF,EAAfoF,gBACA/E,EAASL,EAATK,UACAC,EAAWN,EAAXM,YACAC,EAAUP,EAAVO,WACA8E,EAAUrF,EAAVqF,WACAC,EAAatF,EAAbsF,cACAC,EAAcvF,EAAduF,eAGmD/E,EAAAC,GAAfC,EAAAA,EAAAA,WAAS,GAAM,GAA5CC,EAAUH,EAAA,GAAEI,EAAaJ,EAAA,GAG1BQ,EAAcf,EAAKgB,UAAYhB,EAAKgB,SAAStC,OAAS,EAGtDuC,EAAgB,GAAHC,OAAc,EAARhB,EAAS,MAoBlC,OACEiB,IAAAA,cAAAA,IAAAA,SAAA,KAEEA,IAAAA,cAAA,MACEC,MAAO,CACLQ,OAAQ,WAEVC,QAdiB,WAEjBvB,GACFA,EAAWN,EAEf,GAYMmB,IAAAA,cAAA,MACE2C,UAAU,eACV1C,MAAKwD,EAAAA,EAAA,GACAQ,GAAU,IACbG,SAAU,SACVC,KAAM,EACN9D,gBAAiB,QACjB+D,OAAQ,EACRC,YAAa,oBACbC,UAAW,uCAGbxE,IAAAA,cAAA,OAAKC,MAAO,CACVE,QAAS,OACTC,WAAY,SACZS,YAAaf,IAEZF,EACCI,IAAAA,cAAA,UACEU,QA9CO,SAACI,GAEpBA,EAAEC,kBAEEnB,GACFJ,GAAeD,EAEnB,EAwCcU,MAAO,CACLe,YAAa,QACbb,QAAS,OACTC,WAAY,SACZa,eAAgB,SAChBC,WAAY,OACZC,OAAQ,OACRV,OAAQ,UACRH,QAAS,UACTJ,MAAO,SAET,gBAAeX,EACf,aAAYA,EAAa,WAAa,UAErCA,EAAaN,EAAYC,GAG5Bc,IAAAA,cAAA,OAAKC,MAAO,CAAEe,YAAa,QAASd,MAAO,WAI7CF,IAAAA,cAAA,OAAKC,MAAO,CAAEoB,WAAY,MACvBxC,EAAKmF,MAMXD,EACEtG,QAAO,SAAAgH,GAAG,OAAIA,EAAInD,OAAS0C,CAAe,IAC1ClC,KAAI,SAAC4C,GAAM,OACV1E,IAAAA,cAAA,MACE/D,IAAKyI,EAAOpD,KACZrB,MAAKwD,EAAAA,EAAA,GACAQ,GAAU,IACb/D,MAAOwE,EAAOxE,OAAS,OACvBK,gBAAkB2D,IAAkBQ,EAAOpD,OAAQ6C,aAAc,EAAdA,EAAgB7C,QAASoD,EAAOpD,KAC/E,UACA,sBAGiBqD,IAAtB9F,EAAK6F,EAAOpD,MAAsBzC,EAAK6F,EAAOpD,MAAQ,GACpD,KAMV1B,GAAeL,GACdS,IAAAA,cAAAA,IAAAA,SAAA,KACGnB,EAAKgB,SAASiC,KAAI,SAACC,EAAOC,GAAK,OAC9BhC,IAAAA,cAAC4E,EAAiB,CAChB3I,IAAG,GAAA8D,OAAKgC,EAAMiC,GAAgB,KAAAjE,OAAIiC,GAClCnD,KAAMkD,EACNhD,MAAOA,EAAQ,EACfgF,QAASA,EACTC,gBAAiBA,EACjB/E,UAAWA,EACXC,YAAaA,EACbC,WAAYA,EACZ8E,WAAYA,EACZC,cAAeA,EACfC,eAAgBA,GAChB,KAMd,EA2BMU,EAAiB,SAAC1C,GACtB,IACEC,EAUED,EAVFC,GAAEC,EAUAF,EATFG,KAAAA,OAAI,IAAAD,EAAG,GAAEA,EAAAyC,EASP3C,EARF4B,QAAAA,OAAO,IAAAe,EAAG,GAAEA,EACZd,EAOE7B,EAPF6B,gBAAee,EAOb5C,EANFlC,MAAAA,OAAK,IAAA8E,EAAG,CAAC,EAACA,EAAArC,EAMRP,EALFQ,UAAAA,OAAS,IAAAD,EAAG,GAAEA,EACKsC,GAIjB7C,EAJFU,aAIEV,EAHFgC,gBAAAA,OAAc,IAAAa,EAAG,KAAIA,EAAAC,EAGnB9C,EAFF+C,iBAAAA,OAAgB,IAAAD,EAAG,QAAOA,EAC1BrC,EACET,EADFS,SAIIuC,GAAeC,EAAAA,EAAAA,QAAO,MACtBC,GAAWD,EAAAA,EAAAA,QAAO,MAGgC3F,EAAAJ,GAAdC,EAAAA,EAAAA,UAAS,MAAK,GAAjD4E,EAAazE,EAAA,GAAE6F,EAAgB7F,EAAA,IAGtC8F,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,WACvB,EAUF,OAHA9G,OAAO+G,iBAAiB,SAAUD,GAG3B,WACL9G,OAAOgH,oBAAoB,SAAUF,EACvC,CACF,GAAG,KAGHD,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAASM,QAAd,CAGA,IA6FQC,EA7FFC,EAAQR,EAASM,QAmHvB,OAhHiC,WAE/B,IAAMG,EAAYD,EAAME,cAAc,YACtC,GAAKD,EAAL,CAEA,IAAME,EAAYF,EAAUjG,SAAS,GACrC,GAAKmG,EAAL,CAGAA,EAAU/F,MAAMC,MAAQgF,EAGxB,IAeIe,EAAOC,EAfLC,EAAUlJ,SAASmJ,cAAc,OACvCD,EAAQlG,MAAMmE,SAAW,WACzB+B,EAAQlG,MAAMoG,IAAM,IACpBF,EAAQlG,MAAMqG,MAAQ,IACtBH,EAAQlG,MAAMC,MAAQ,MACtBiG,EAAQlG,MAAM2B,OAAS,OACvBuE,EAAQlG,MAAMQ,OAAS,aACvB0F,EAAQlG,MAAMsG,WAAa,OAC3BJ,EAAQlG,MAAMqE,OAAS,KAGvB0B,EAAU/F,MAAMmE,SAAW,WAC3B4B,EAAUQ,YAAYL,GAMtBA,EAAQV,iBAAiB,aAAa,WACpCU,EAAQlG,MAAMsE,YAAc,mBAC9B,IAEA4B,EAAQV,iBAAiB,YAAY,WACnCU,EAAQlG,MAAMsE,YAAc,EAC9B,IAGA4B,EAAQV,iBAAiB,aAAa,SAAC3E,GAErCA,EAAE2F,iBAGFR,EAAQnF,EAAEmF,MACVC,EAAcF,EAAUU,YACXb,EAAMa,YAGnBzJ,SAASwI,iBAAiB,YAAakB,GACvC1J,SAASwI,iBAAiB,UAAWmB,EACvC,IAGA,IAAMD,EAAc,SAAC7F,GAEnB,IAAM+F,EAAQ/F,EAAEmF,MAAQA,EAGlBa,EAAWC,KAAKC,IAAI,IAAKd,EAAcW,GAC7Cb,EAAU/F,MAAMC,MAAQ4G,EAAW,KAGbjB,EAAMoB,iBAAiB,iBAC/BC,SAAQ,SAAAC,GACpBA,EAAKlH,MAAMC,MAAQ4G,EAAW,IAChC,GACF,EAGMF,EAAY,WAEhB3J,SAASyI,oBAAoB,YAAaiB,GAC1C1J,SAASyI,oBAAoB,UAAWkB,GAGxC,IAAMQ,EAAapB,EAAUU,YAAc,KAGvC9D,GACFA,EAAS,CAAEsC,iBAAkBkC,GAEjC,CA5EsB,CAHA,CAgFxB,CAGAC,IAIQzB,EAAYT,EAAaQ,UAI/BC,EAAUH,iBAAiB,UAAU,WACnC,IAAM6B,EAAczB,EAAME,cAAc,yBAClCwB,EAAa1B,EAAMoB,iBAAiB,yBAEtCK,IACFA,EAAYrH,MAAMoE,KAAO,GAAHtE,OAAM6F,EAAU4B,WAAU,OAGlDD,EAAWL,SAAQ,SAAAC,GACjBA,EAAKlH,MAAMoE,KAAO,GAAHtE,OAAM6F,EAAU4B,WAAU,KAC3C,GACF,IAOK,WACL,IAAM5B,EAAYT,EAAaQ,QAC3BC,GACFA,EAAUF,oBAAoB,UAAU,WAAO,GAEnD,CA3H6B,CA4H/B,GAAG,CAACL,EAASM,QAASR,EAAaQ,QAAST,IAG5C,IAAMjG,EACJe,IAAAA,cAAA,OAAK8C,MAAM,6BAA6B5C,MAAM,KAAK0B,OAAO,KAAKmB,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,SACxKpD,IAAAA,cAAA,QAAMnE,EAAE,kBAINqD,EACJc,IAAAA,cAAA,OAAK8C,MAAM,6BAA6B5C,MAAM,KAAK0B,OAAO,KAAKmB,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,YAAY,IAAIC,cAAc,QAAQC,eAAe,SACxKpD,IAAAA,cAAA,QAAMnE,EAAE,mBAKNwH,EAAiB,SAACxE,GACtB,GAAI+D,EAAU,CAEiC/D,EAArCgB,SAAR,IAAqByD,E,6WAAmBC,CAAK1E,EAAI2E,GAGjDZ,EAAS,CAAEC,aAAcS,GAC3B,CACF,EA2CMmE,EAA0B,WAC9BnC,EAAiB,KACnB,EAGMrB,EAAa,CACjB3D,QAAS,aACToH,aAAc,oBACdC,WAAY,UAIRC,EAAgBnE,EAAAA,EAAA,GACjBQ,GAAU,IACb5C,WAAY,OACZd,gBAAiB,QACjBmH,aAAc,oBACdtD,SAAU,SACViC,IAAK,EACL/B,OAAQ,IAgBV,OACEtE,IAAAA,cAAA,OACEoC,GAAIA,EACJO,UAAWA,EACXkF,IAAK1C,EACLlF,MAAKwD,EAAA,CACHvD,MAAO,OACP4H,UAAW,QACXC,SAAU,OACV3D,SAAU,WACVjD,OAAQ,oBACRX,aAAc,UACXP,IAILD,IAAAA,cAAA,aA3BiB,wLA+BjBA,IAAAA,cAAA,SACE6H,IAAKxC,EACL1C,UAAU,kBACV1C,MAAO,CACLC,MAAO,OACP8H,eAAgB,WAChBC,cAAe,EACfC,YAAa,UAGflI,IAAAA,cAAA,aACEA,IAAAA,cAAA,UAEEA,IAAAA,cAAA,MACE2C,UAAU,eACV1C,MAAKwD,EAAAA,EAAA,GACAmE,GAAgB,IACnBxD,SAAU,SACVC,KAAM,EACNC,OAAQ,EACR/D,gBAAiB,QACjBgE,YAAa,oBACbrE,MAAOgF,EACPV,UAAW,uCAGZR,GAKFD,EACEtG,QAAO,SAAAgH,GAAG,OAAIA,EAAInD,OAAS0C,CAAe,IAC1ClC,KAAI,SAAC4C,GAAM,OACV1E,IAAAA,cAAA,MACE/D,IAAKyI,EAAOpD,KACZrB,MAAKwD,EAAAA,EAAA,GACAmE,GAAgB,IACnB1H,MAAOwE,EAAOxE,OAAS,OACvBO,OAAQiE,EAAOpD,OAAS0C,EAAkB,UAAY,UACtDzD,gBAAkB2D,IAAkBQ,EAAOpD,OAAQ6C,aAAc,EAAdA,EAAgB7C,QAASoD,EAAOpD,KAC/E,UACA,UAENZ,QAAS,WAAF,OA3IS,SAACyH,GAC/B,GAAIvF,GAAYuF,IAAenE,EAAiB,CAE9C,IAAMoE,EAAmB,SAACC,EAAOF,EAAYnE,GAAiC,IAAhBsE,EAAMC,UAAAhL,OAAA,QAAAoH,IAAA4D,UAAA,GAAAA,UAAA,GAAG,GAgBrE,OAfAF,EAAMnB,SAAQ,SAAArI,GACZ,QAAyB8F,IAArB9F,EAAKsJ,SAAuDxD,IAA1B9F,EAAKmF,GAAgC,CAEzE,IAAMwE,EAAOC,EAAAA,EAAA,GACVzE,EAAkBnF,EAAKmF,IAAgB,QACjCnF,EAAKsJ,IAEdG,EAAO9K,KAAKgL,EACd,CAEI3J,EAAKgB,UAAYhB,EAAKgB,SAAStC,OAAS,GAC1C6K,EAAiBvJ,EAAKgB,SAAUsI,EAAYnE,EAAiBsE,EAEjE,IAEOA,CACT,EAEMI,EAAaN,EAAiB9F,EAAM6F,EAAYnE,GAGtDpB,EAAS,CACPuB,eAAgB,CACd7C,KAAM6G,EACN7F,KAAMoG,IAGZ,CACF,CA2G+BC,CAAwBjE,EAAOpD,KAAK,EACnDX,aAAc,WAAF,OAzGKwH,EAyG2BzD,EAAOpD,UAxGjEgE,EAAiB6C,GADa,IAACA,CAyGuC,EACxDvH,aAAc6G,EACdmB,MAAOlE,EAAOpD,OAAS0C,EAAkB,yBAA2B,IAEnEU,EAAOpD,KACL,MAKbtB,IAAAA,cAAA,aACGsC,EAAKR,KAAI,SAACjD,EAAMmD,GAAK,OACpBhC,IAAAA,cAAC4E,EAAiB,CAChB3I,IAAG,GAAA8D,OAAKlB,EAAKmF,GAAgB,KAAAjE,OAAIiC,GACjCnD,KAAMA,EACNE,MAAO,EACPgF,QAASA,EACTC,gBAAiBA,EACjB/E,UAAWA,EACXC,YAAaA,EACbC,WAAYkE,EACZY,WAAYA,EACZC,cAAeA,EACfC,eAAgBA,GAChB,MAMd,EAMAU,EAAenB,UAAY,CAIzBtB,GAAIuB,IAAAA,OAMJrB,KAAMqB,IAAAA,MAONI,QAASJ,IAAAA,QAAkBA,IAAAA,MAAgB,CACzCrC,KAAMqC,IAAAA,OAAiBC,WACvB1D,MAAOyD,IAAAA,UAOTK,gBAAiBL,IAAAA,OAAiBC,WAKlC3D,MAAO0D,IAAAA,OAKPhB,UAAWgB,IAAAA,OAOXd,aAAcc,IAAAA,OAOdQ,eAAgBR,IAAAA,MAAgB,CAC9BrC,KAAMqC,IAAAA,OACNrB,KAAMqB,IAAAA,QAAkBA,IAAAA,UAO1BuB,iBAAkBvB,IAAAA,OAMlBf,SAAUe,IAAAA,MAMZkB,EAAehB,aAAe,CAC5BvB,KAAM,GACNyB,QAAS,GACT9D,MAAO,CAAC,EACR4C,aAAc,KACdsB,eAAgB,KAChBe,iBAAkB,SAGpB,U","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///external window \"React\"","webpack:///external window \"PropTypes\"","webpack:///./src/lib/components/SimpleHierarchy.react.js","webpack:///./src/lib/components/TableHierarchy.react.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","var getCurrentScript = function() {\n    var script = document.currentScript;\n    if (!script) {\n        /* Shim for IE11 and below */\n        /* Do not take into account async scripts and inline scripts */\n\n        var doc_scripts = document.getElementsByTagName('script');\n        var scripts = [];\n\n        for (var i = 0; i < doc_scripts.length; i++) {\n            scripts.push(doc_scripts[i]);\n        }\n\n        scripts = scripts.filter(function(s) { return !s.async && !s.text && !s.textContent; });\n        script = scripts.slice(-1)[0];\n    }\n\n    return script;\n};\n\nvar isLocalScript = function(script) {\n    return /\\/_dash-component-suites\\//.test(script.src);\n};\n\nObject.defineProperty(__webpack_require__, 'p', {\n    get: (function () {\n        var script = getCurrentScript();\n\n        var url = script.src.split('/').slice(0, -1).join('/') + '/';\n\n        return function() {\n            return url;\n        };\n    })()\n});\n\nif (typeof jsonpScriptSrc !== 'undefined') {\n    var __jsonpScriptSrc__ = jsonpScriptSrc;\n    jsonpScriptSrc = function(chunkId) {\n        var script = getCurrentScript();\n        var isLocal = isLocalScript(script);\n\n        var src = __jsonpScriptSrc__(chunkId);\n\n        if(!isLocal) {\n            return src;\n        }\n\n        var srcFragments = src.split('/');\n        var fileFragments = srcFragments.slice(-1)[0].split('.');\n\n        fileFragments.splice(1, 0, \"v0_0_1m1743310129\");\n        srcFragments.splice(-1, 1, fileFragments.join('.'))\n\n        return srcFragments.join('/');\n    };\n}\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"PropTypes\"];","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * HierarchicalDataItem - Renders a single item in the hierarchical structure\n * \n * @param {Object} props - Component props\n * @param {Object} props.item - Item data containing name, percentage, and optional children\n * @param {number} props.level - Current nesting level for indentation\n * @param {Object} props.colors - Color configuration for bars\n * @param {React.ReactNode} props.openCaret - Icon to show when item is expanded\n * @param {React.ReactNode} props.closedCaret - Icon to show when item is collapsed\n * @param {Function} props.onRowClick - Callback function when row is clicked\n * @returns {React.ReactNode} - Rendered item with optional children\n */\nconst HierarchicalDataItem = ({ \n  item, \n  level = 0, \n  colors, \n  openCaret, \n  closedCaret,\n  onRowClick\n}) => {\n  // Track expanded/collapsed state\n  const [isExpanded, setIsExpanded] = useState(false);\n  // Track hover state for visual feedback\n  const [isHovered, setIsHovered] = useState(false);\n  \n  // Determine if this item has children\n  const hasChildren = item.children && item.children.length > 0;\n  \n  // Calculate indentation based on nesting level using em instead of px\n  const indentPadding = `${level * 1}em`;\n  \n  // Toggle expanded state\n  const toggleExpand = (e) => {\n    // Stop propagation to prevent row click handler from firing\n    e.stopPropagation();\n    \n    if (hasChildren) {\n      setIsExpanded(!isExpanded);\n    }\n  };\n  \n  // Handle row click\n  const handleRowClick = () => {\n    // Call the parent's click handler and pass the item data\n    if (onRowClick) {\n      onRowClick(item);\n    }\n  };\n\n  return (\n    <div style={{ width: '100%' }}>\n      {/* Item Row */}\n      <div \n        style={{ \n          width: '100%', \n          display: 'flex', \n          alignItems: 'center', \n          marginBottom: '0.25em',\n          padding: '0.5em 0',\n          backgroundColor: isHovered ? '#f9fafb' : 'transparent',\n          borderRadius: '0.25em',\n          cursor: 'pointer'\n        }}\n        onClick={handleRowClick}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n      >\n        {/* Indentation and Toggle Button */}\n        <div style={{ \n          display: 'flex', \n          alignItems: 'center', \n          paddingLeft: indentPadding \n        }}>\n          {hasChildren ? (\n            <button \n              onClick={toggleExpand} \n              style={{ \n                marginRight: '0.5em', \n                display: 'flex', \n                alignItems: 'center', \n                justifyContent: 'center',\n                background: 'none',\n                border: 'none',\n                cursor: 'pointer',\n                padding: '0.125em',\n                width: '1.5em'\n              }}\n              aria-expanded={isExpanded}\n              aria-label={isExpanded ? \"Collapse\" : \"Expand\"}\n            >\n              {isExpanded ? openCaret : closedCaret}\n            </button>\n          ) : (\n            <div style={{ marginRight: '0.5em', width: '1.2em' }}></div> \n          )}\n          \n          {/* Item Name */}\n          <div style={{ \n            flexGrow: 1, \n            fontWeight: 500 \n          }}>\n            {item.name}\n          </div>\n        </div>\n        \n        {/* Percentage Display */}\n        <div style={{ \n          marginLeft: 'auto', \n          color: '#6b7280' \n        }}>\n          {item.percentage}%\n        </div>\n      </div>\n      \n      {/* Progress Bar - Now indented to match the text */}\n      <div style={{ display: 'flex', width: '100%' }}>\n        {/* This div creates the same indentation as the text */}\n        <div style={{ width: indentPadding, flexShrink: 0 }}></div>\n        \n        {/* Caret width equivalent space */}\n        <div style={{ width: '1.5em', flexShrink: 0 }}></div>\n        \n        {/* The actual progress bar */}\n        <div \n          style={{ \n            flex: 1,\n            height: '0.5em', \n            borderRadius: '0.25em', \n            marginBottom: '0.5em', \n            backgroundColor: colors.background \n          }}\n        >\n          <div \n            style={{ \n              height: '100%', \n              borderRadius: '0.25em', \n              width: `${item.percentage}%`, \n              backgroundColor: colors.primary \n            }}\n          ></div>\n        </div>\n      </div>\n      \n      {/* Render Children if Expanded */}\n      {hasChildren && isExpanded && (\n        <div style={{ width: '100%' }}>\n          {item.children.map((child, index) => (\n            <HierarchicalDataItem\n              key={`${child.name}-${index}`}\n              item={child}\n              level={level + 1}\n              colors={colors}\n              openCaret={openCaret}\n              closedCaret={closedCaret}\n              onRowClick={onRowClick} // Pass down the onRowClick prop to children\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * SimpleHierarchy - A Dash component for displaying hierarchical data with expandable sections\n * \n * This component displays hierarchical data with collapsible sections, percentage indicators, \n * and progress bars. It is designed to be used as a Dash component.\n *\n * @param {Object} props - Component props\n * @param {string} props.id - The ID used to identify this component in Dash callbacks\n * @param {Array} props.data - Array of data items with name, percentage, and optional children\n * @param {Object} props.colors - Colors for the progress bars\n * @param {string} props.colors.primary - Color for the filled portion of progress bars\n * @param {string} props.colors.background - Color for the unfilled portion of progress bars\n * @param {Object} props.styles - Custom styles to apply to the container\n * @param {string} props.className - CSS class names to apply to the container\n * @param {string} props.selectedItem - Name of the currently selected item (for controlled component)\n * @param {Function} props.setProps - Dash callback to update props\n * @returns {React.ReactNode} - Rendered hierarchical data component\n */\nconst SimpleHierarchy = (props) => {\n  const { \n    id,\n    data = [], \n    colors = { primary: \"#7c3aed\", background: \"#e5e7eb\" },\n    styles = {},\n    className = '',\n    selectedItem = null,\n    setProps\n  } = props;\n\n  // Define SVG for carets to avoid external dependencies\n  // Now the openCaret points down (was pointing up before)\n  const openCaret = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n      <path d=\"m6 9 6 6 6-6\"/>\n    </svg>\n  );\n  \n  const closedCaret = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n      <path d=\"m9 18 6-6-6-6\"/>\n    </svg>\n  );\n\n  // Handle row click\n  const handleRowClick = (item) => {\n    if (setProps) {\n      // Create a copy of the item without the children property\n      const { children, ...itemWithoutChildren } = item;\n      \n      // Update the selectedItem property in Dash with the modified item\n      setProps({ selectedItem: itemWithoutChildren });\n    }\n  };\n\n  return (\n    <div \n      id={id}\n      className={className} \n      style={{\n        width: '100%',\n        padding: '1em',\n        border: '1px solid #e5e7eb',\n        borderRadius: '0.25em',\n        ...styles\n      }}\n    >\n      {data.map((item, index) => (\n        <HierarchicalDataItem\n          key={`${item.name}-${index}`}\n          item={item}\n          colors={colors}\n          openCaret={openCaret}\n          closedCaret={closedCaret}\n          onRowClick={handleRowClick}\n        />\n      ))}\n    </div>\n  );\n};\n\n/**\n * PropTypes for the SimpleHierarchy component\n * These define the expected properties and their types for Dash\n */\nSimpleHierarchy.propTypes = {\n  /**\n   * The ID used to identify this component in Dash callbacks.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The hierarchical data to display.\n   * Each item should have a name, percentage, and optional children array.\n   */\n  data: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    percentage: PropTypes.number.isRequired,\n    children: PropTypes.array\n  })),\n\n  /**\n   * Colors for the component.\n   */\n  colors: PropTypes.shape({\n    primary: PropTypes.string,\n    background: PropTypes.string\n  }),\n\n  /**\n   * Inline styles to apply to the outer div.\n   */\n  styles: PropTypes.object,\n\n  /**\n   * CSS class names to apply to the outer div.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Dash-assigned callback that should be called to report property changes\n   * to Dash, to make them available for callbacks.\n   */\n  setProps: PropTypes.func,\n\n  /**\n   * Object representing the currently selected item (controlled component pattern).\n   * This will be updated when a row is clicked.\n   * Contains all properties of the selected item except the 'children' array.\n   */\n  selectedItem: PropTypes.object\n};\n\n/**\n * Default properties for the SimpleHierarchy component.\n */\nSimpleHierarchy.defaultProps = {\n  data: [],\n  colors: { primary: \"#7c3aed\", background: \"#e5e7eb\" },\n  styles: {},\n  selectedItem: null\n};\n\nexport default SimpleHierarchy;","import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * TableHierarchyRow - Renders a single row in the hierarchical table with multiple columns\n * \n * @param {Object} props - Component props\n * @param {Object} props.item - Row data containing children array and arbitrary columns\n * @param {number} props.level - Current nesting level for indentation\n * @param {Array} props.columns - Array of column objects with name and width properties\n * @param {string} props.indexColumnName - Name of the column that acts as the index (leftmost)\n * @param {React.ReactNode} props.openCaret - Icon to show when item is expanded\n * @param {React.ReactNode} props.closedCaret - Icon to show when item is collapsed\n * @param {Function} props.onRowClick - Callback function when row is clicked\n * @param {Object} props.cellStyles - Default styles for cells\n * @param {string} props.hoveredColumn - Name of column currently being hovered\n * @param {Object} props.selectedColumn - Currently selected column (for controlled component)\n * @returns {React.ReactNode} - Rendered row with optional children\n */\nconst TableHierarchyRow = ({\n  item,\n  level = 0,\n  columns,\n  indexColumnName,\n  openCaret,\n  closedCaret,\n  onRowClick,\n  cellStyles,\n  hoveredColumn,\n  selectedColumn,\n}) => {\n  // Track expanded/collapsed state\n  const [isExpanded, setIsExpanded] = useState(false);\n  \n  // Determine if this item has children\n  const hasChildren = item.children && item.children.length > 0;\n  \n  // Calculate indentation based on nesting level\n  const indentPadding = `${level * 1}em`;\n  \n  // Toggle expanded state\n  const toggleExpand = (e) => {\n    // Stop propagation to prevent row click handler from firing\n    e.stopPropagation();\n    \n    if (hasChildren) {\n      setIsExpanded(!isExpanded);\n    }\n  };\n  \n  // Handle row click\n  const handleRowClick = () => {\n    // Call the parent's click handler and pass the item data\n    if (onRowClick) {\n      onRowClick(item);\n    }\n  };\n\n  return (\n    <>\n      {/* Item Row */}\n      <tr \n        style={{ \n          cursor: 'pointer'\n        }}\n        onClick={handleRowClick}\n      >\n        {/* Index Column with Indentation and Caret */}\n        <td \n          className=\"index-column\"\n          style={{\n            ...cellStyles,\n            position: 'sticky',\n            left: 0,\n            backgroundColor: 'white',\n            zIndex: 1,\n            borderRight: '1px solid #e5e7eb',\n            boxShadow: '2px 0 4px -2px rgba(0, 0, 0, 0.1)'\n          }}\n        >\n          <div style={{ \n            display: 'flex', \n            alignItems: 'center', \n            paddingLeft: indentPadding \n          }}>\n            {hasChildren ? (\n              <button \n                onClick={toggleExpand} \n                style={{ \n                  marginRight: '0.5em', \n                  display: 'flex', \n                  alignItems: 'center', \n                  justifyContent: 'center',\n                  background: 'none',\n                  border: 'none',\n                  cursor: 'pointer',\n                  padding: '0.125em',\n                  width: '1.5em'\n                }}\n                aria-expanded={isExpanded}\n                aria-label={isExpanded ? \"Collapse\" : \"Expand\"}\n              >\n                {isExpanded ? openCaret : closedCaret}\n              </button>\n            ) : (\n              <div style={{ marginRight: '0.2em', width: '1.5em' }}></div> // Placeholder for alignment\n            )}\n            \n            {/* Item Name */}\n            <div style={{ fontWeight: 500 }}>\n              {item[indexColumnName]}\n            </div>\n          </div>\n        </td>\n        \n        {/* Other Columns */}\n        {columns\n          .filter(col => col.name !== indexColumnName)\n          .map((column) => (\n            <td \n              key={column.name} \n              style={{\n                ...cellStyles,\n                width: column.width || 'auto',\n                backgroundColor: (hoveredColumn === column.name || selectedColumn?.name === column.name) \n                  ? '#f0f7ff' // Light blue highlight\n                  : 'transparent'\n              }}\n            >\n              {item[column.name] !== undefined ? item[column.name] : ''}\n            </td>\n          ))\n        }\n      </tr>\n      \n      {/* Render Children if Expanded */}\n      {hasChildren && isExpanded && (\n        <>\n          {item.children.map((child, index) => (\n            <TableHierarchyRow\n              key={`${child[indexColumnName]}-${index}`}\n              item={child}\n              level={level + 1}\n              columns={columns}\n              indexColumnName={indexColumnName}\n              openCaret={openCaret}\n              closedCaret={closedCaret}\n              onRowClick={onRowClick}\n              cellStyles={cellStyles}\n              hoveredColumn={hoveredColumn}\n              selectedColumn={selectedColumn}\n            />\n          ))}\n        </>\n      )}\n    </>\n  );\n};\n\n/**\n * TableHierarchy - A Dash component for displaying hierarchical data in a table format\n * with multiple columns, sticky headers, and expandable rows.\n * \n * This component displays hierarchical data in a table format with support for:\n * - Multiple columns\n * - Sticky index column (leftmost)\n * - Sticky headers\n * - Expandable/collapsible rows\n * - Column selection callbacks\n * - Resizable index column\n * \n * @param {Object} props - Component props\n * @param {string} props.id - The ID used to identify this component in Dash callbacks\n * @param {Array} props.data - Array of data items with arbitrary columns and optional children arrays\n * @param {Array} props.columns - Array of column definitions with name and width properties\n * @param {string} props.indexColumnName - Name of the column to use as the index (leftmost column)\n * @param {Object} props.style - Custom styles to apply to the container\n * @param {string} props.className - CSS class names to apply to the container\n * @param {Object} props.selectedItem - Currently selected item (for controlled component)\n * @param {Object} props.selectedColumn - Currently selected column (for controlled component)\n * @param {string} props.indexColumnWidth - The width of the index column \n * @param {Function} props.setProps - Dash callback to update props\n * @returns {React.ReactNode} - Rendered hierarchical table component\n */\nconst TableHierarchy = (props) => {\n  const { \n    id,\n    data = [], \n    columns = [],\n    indexColumnName,\n    style = {},\n    className = '',\n    selectedItem = null,\n    selectedColumn = null,\n    indexColumnWidth = '200px',\n    setProps\n  } = props;\n\n  // Create a ref for the container div and table\n  const containerRef = useRef(null);\n  const tableRef = useRef(null);\n  \n  // Track which column is being hovered over\n  const [hoveredColumn, setHoveredColumn] = useState(null);\n\n  // Update table dimensions when window resizes\n  useEffect(() => {\n    const updateDimensions = () => {\n      // Any dimension update logic if needed\n    };\n\n    // Initial dimensions\n    updateDimensions();\n\n    // Add event listener\n    window.addEventListener('resize', updateDimensions);\n\n    // Clean up\n    return () => {\n      window.removeEventListener('resize', updateDimensions);\n    };\n  }, []);\n\n  // Add resize functionality after component mounts\n  useEffect(() => {\n    if (!tableRef.current) return;\n    \n    // Get the table element\n    const table = tableRef.current;\n    \n    // Function to make the first column resizable\n    const makeIndexColumnResizable = () => {\n      // Get the first row's first cell (index column header)\n      const headerRow = table.querySelector('thead tr');\n      if (!headerRow) return;\n      \n      const indexCell = headerRow.children[0];\n      if (!indexCell) return;\n      \n      // Set initial width from prop\n      indexCell.style.width = indexColumnWidth;\n      \n      // Create resizer div\n      const resizer = document.createElement('div');\n      resizer.style.position = 'absolute';\n      resizer.style.top = '0';\n      resizer.style.right = '0';\n      resizer.style.width = '5px';\n      resizer.style.height = '100%';\n      resizer.style.cursor = 'col-resize';\n      resizer.style.userSelect = 'none';\n      resizer.style.zIndex = '10';\n      \n      // Position the cell relatively for absolutely positioned resizer\n      indexCell.style.position = 'relative';\n      indexCell.appendChild(resizer);\n      \n      // Add mouse event listeners\n      let pageX, curColWidth, tableWidth;\n      \n      // Show visual feedback on hover\n      resizer.addEventListener('mouseover', () => {\n        resizer.style.borderRight = '2px solid #0000ff';\n      });\n      \n      resizer.addEventListener('mouseout', () => {\n        resizer.style.borderRight = '';\n      });\n      \n      // Start resizing\n      resizer.addEventListener('mousedown', (e) => {\n        // Prevent text selection during drag\n        e.preventDefault();\n        \n        // Get starting positions\n        pageX = e.pageX;\n        curColWidth = indexCell.offsetWidth;\n        tableWidth = table.offsetWidth;\n        \n        // Add document-level event listeners\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n      });\n      \n      // Handle resizing\n      const onMouseMove = (e) => {\n        // Calculate width change\n        const diffX = e.pageX - pageX;\n        \n        // Apply new width to the index column\n        const newWidth = Math.max(100, curColWidth + diffX); // Minimum 100px\n        indexCell.style.width = newWidth + 'px';\n        \n        // Update all cells with .index-column class to match the new width\n        const allIndexCells = table.querySelectorAll('.index-column');\n        allIndexCells.forEach(cell => {\n          cell.style.width = newWidth + 'px';\n        });\n      };\n      \n      // End resizing\n      const onMouseUp = () => {\n        // Remove document-level event listeners\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        \n        // Get final width\n        const finalWidth = indexCell.offsetWidth + 'px';\n        \n        // Update the prop via setProps if available\n        if (setProps) {\n          setProps({ indexColumnWidth: finalWidth });\n        }\n      };\n    };\n    \n    // Initialize resizable functionality\n    makeIndexColumnResizable();\n    \n    // Function to enforce sticky positioning\n    const enforceStickyPositioning = () => {\n      const container = containerRef.current;\n      if (!container) return;\n      \n      // Ensure the index header and cells stay sticky when scrolling horizontally\n      container.addEventListener('scroll', () => {\n        const indexHeader = table.querySelector('thead th.index-column');\n        const indexCells = table.querySelectorAll('tbody td.index-column');\n        \n        if (indexHeader) {\n          indexHeader.style.left = `${container.scrollLeft}px`;\n        }\n        \n        indexCells.forEach(cell => {\n          cell.style.left = `${container.scrollLeft}px`;\n        });\n      });\n    };\n    \n    // Initialize sticky positioning\n    enforceStickyPositioning();\n    \n    // Clean up any event listeners if component unmounts\n    return () => {\n      const container = containerRef.current;\n      if (container) {\n        container.removeEventListener('scroll', () => {});\n      }\n    };\n  }, [tableRef.current, containerRef.current, indexColumnWidth]);\n\n  // Define SVG for carets to avoid external dependencies\n  const openCaret = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n      <path d=\"m6 9 6 6 6-6\"/>\n    </svg>\n  );\n  \n  const closedCaret = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n      <path d=\"m9 18 6-6-6-6\"/>\n    </svg>\n  );\n\n  // Handle row click\n  const handleRowClick = (item) => {\n    if (setProps) {\n      // Create a copy of the item without the children property\n      const { children, ...itemWithoutChildren } = item;\n      \n      // Update the selectedItem property in Dash\n      setProps({ selectedItem: itemWithoutChildren });\n    }\n  };\n\n  // Handle column header click\n  const handleColumnHeaderClick = (columnName) => {\n    if (setProps && columnName !== indexColumnName) {\n      // Gather all values in this column along with corresponding index values\n      const gatherColumnData = (items, columnName, indexColumnName, result = []) => {\n        items.forEach(item => {\n          if (item[columnName] !== undefined && item[indexColumnName] !== undefined) {\n            // Create a dictionary with index column name as key and column value\n            const rowData = {\n              [indexColumnName]: item[indexColumnName],\n              value: item[columnName]\n            };\n            result.push(rowData);\n          }\n          \n          if (item.children && item.children.length > 0) {\n            gatherColumnData(item.children, columnName, indexColumnName, result);\n          }\n        });\n        \n        return result;\n      };\n      \n      const columnData = gatherColumnData(data, columnName, indexColumnName);\n      \n      // Update the selectedColumn property in Dash\n      setProps({ \n        selectedColumn: {\n          name: columnName,\n          data: columnData\n        }\n      });\n    }\n  };\n  \n  // Handle column header hover\n  const handleColumnHeaderHover = (columnName) => {\n    setHoveredColumn(columnName);\n  };\n  \n  // Handle column header hover end\n  const handleColumnHeaderLeave = () => {\n    setHoveredColumn(null);\n  };\n\n  // Default styles for cells\n  const cellStyles = {\n    padding: '0.75em 1em',\n    borderBottom: '1px solid #e5e7eb',\n    whiteSpace: 'nowrap'\n  };\n\n  // Default styles for header cells\n  const headerCellStyles = {\n    ...cellStyles,\n    fontWeight: 'bold',\n    backgroundColor: 'white',\n    borderBottom: '2px solid #e5e7eb',\n    position: 'sticky',\n    top: 0,\n    zIndex: 2\n  };\n\n  // Custom CSS for ensuring proper sticky behavior\n  // This is added to ensure the stickiness works correctly across browsers\n  const stickyStyles = `\n    .index-column {\n      position: sticky !important;\n      left: 0 !important;\n      z-index: 1;\n    }\n    thead th.index-column {\n      z-index: 3 !important;\n    }\n  `;\n\n  return (\n    <div \n      id={id}\n      className={className} \n      ref={containerRef}\n      style={{\n        width: '100%',\n        maxHeight: '500px', // Default max height, can be overridden via style prop\n        overflow: 'auto',\n        position: 'relative',\n        border: '1px solid #e5e7eb',\n        borderRadius: '0.25em',\n        ...style\n      }}\n    >\n      {/* Add custom CSS styles for sticky positioning */}\n      <style>\n        {stickyStyles}\n      </style>\n      \n      <table \n        ref={tableRef}\n        className=\"resizable-table\"\n        style={{ \n          width: '100%', \n          borderCollapse: 'separate',\n          borderSpacing: 0,\n          tableLayout: 'fixed'\n        }}\n      >\n        <thead>\n          <tr>\n            {/* Index Column Header (Sticky) */}\n            <th \n              className=\"index-column\"\n              style={{\n                ...headerCellStyles,\n                position: 'sticky',\n                left: 0,\n                zIndex: 3, // Higher z-index for the corner\n                backgroundColor: 'white',\n                borderRight: '1px solid #e5e7eb',\n                width: indexColumnWidth,\n                boxShadow: '2px 0 4px -2px rgba(0, 0, 0, 0.1)'\n              }}\n            >\n              {indexColumnName}\n              {/* Resize handle will be added by useEffect */}\n            </th>\n            \n            {/* Other Column Headers */}\n            {columns\n              .filter(col => col.name !== indexColumnName)\n              .map((column) => (\n                <th \n                  key={column.name}\n                  style={{\n                    ...headerCellStyles,\n                    width: column.width || 'auto',\n                    cursor: column.name !== indexColumnName ? 'pointer' : 'default',\n                    backgroundColor: (hoveredColumn === column.name || selectedColumn?.name === column.name) \n                      ? '#e1efff' // Slightly darker blue for header highlighting\n                      : 'white'\n                  }}\n                  onClick={() => handleColumnHeaderClick(column.name)}\n                  onMouseEnter={() => handleColumnHeaderHover(column.name)}\n                  onMouseLeave={handleColumnHeaderLeave}\n                  title={column.name !== indexColumnName ? \"Click to select column\" : \"\"}\n                >\n                  {column.name}\n                </th>\n              ))\n            }\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((item, index) => (\n            <TableHierarchyRow\n              key={`${item[indexColumnName]}-${index}`}\n              item={item}\n              level={0}\n              columns={columns}\n              indexColumnName={indexColumnName}\n              openCaret={openCaret}\n              closedCaret={closedCaret}\n              onRowClick={handleRowClick}\n              cellStyles={cellStyles}\n              hoveredColumn={hoveredColumn}\n              selectedColumn={selectedColumn}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n/**\n * PropTypes for the TableHierarchy component\n * These define the expected properties and their types for Dash\n */\nTableHierarchy.propTypes = {\n  /**\n   * The ID used to identify this component in Dash callbacks.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The hierarchical data to display.\n   * Each item should have arbitrary columns and an optional children array.\n   */\n  data: PropTypes.array,\n\n  /**\n   * Array of column definitions.\n   * Each column should have a name and optional width property.\n   * Example: [{ name: 'Forecast Decomposition', width: '250px' }, { name: 'January 2024' }]\n   */\n  columns: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    width: PropTypes.string\n  })),\n\n  /**\n   * Name of the column to use as the index (leftmost column).\n   * This column will be sticky when horizontally scrolling.\n   */\n  indexColumnName: PropTypes.string.isRequired,\n\n  /**\n   * Inline styles to apply to the outer div.\n   */\n  style: PropTypes.object,\n\n  /**\n   * CSS class names to apply to the outer div.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Object representing the currently selected item (controlled component pattern).\n   * This will be updated when a row is clicked.\n   * Contains all properties of the selected item except the 'children' array.\n   */\n  selectedItem: PropTypes.object,\n\n  /**\n   * Object representing the currently selected column (controlled component pattern).\n   * This will be updated when a column header is clicked.\n   * Contains the column name and data which is an array of objects with the index column value and the value for this column.\n   */\n  selectedColumn: PropTypes.shape({\n    name: PropTypes.string,\n    data: PropTypes.arrayOf(PropTypes.object)\n  }),\n\n  /**\n   * Width of the index column (leftmost column).\n   * Can be updated by the user via drag-to-resize.\n   */\n  indexColumnWidth: PropTypes.string,\n\n  /**\n   * Dash-assigned callback that should be called to report property changes\n   * to Dash, to make them available for callbacks.\n   */\n  setProps: PropTypes.func\n};\n\n/**\n * Default properties for the TableHierarchy component.\n */\nTableHierarchy.defaultProps = {\n  data: [],\n  columns: [],\n  style: {},\n  selectedItem: null,\n  selectedColumn: null,\n  indexColumnWidth: '200px'\n};\n\nexport default TableHierarchy;"],"names":["url","__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","getCurrentScript","script","document","currentScript","doc_scripts","getElementsByTagName","scripts","i","length","push","filter","s","async","text","textContent","slice","src","split","join","jsonpScriptSrc","__jsonpScriptSrc__","chunkId","isLocal","test","srcFragments","fileFragments","splice","window","HierarchicalDataItem","_ref","item","_ref$level","level","colors","openCaret","closedCaret","onRowClick","_useState2","_slicedToArray","useState","isExpanded","setIsExpanded","_useState4","isHovered","setIsHovered","hasChildren","children","indentPadding","concat","React","style","width","display","alignItems","marginBottom","padding","backgroundColor","borderRadius","cursor","onClick","onMouseEnter","onMouseLeave","paddingLeft","e","stopPropagation","marginRight","justifyContent","background","border","flexGrow","fontWeight","name","marginLeft","color","percentage","flexShrink","flex","height","primary","map","child","index","_HierarchicalDataItem","SimpleHierarchy","props","id","_props$data","data","_props$colors","_props$styles","styles","_props$className","className","setProps","selectedItem","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","handleRowClick","itemWithoutChildren","_objectWithoutProperties","_excluded","_objectSpread","propTypes","PropTypes","isRequired","defaultProps","TableHierarchyRow","columns","indexColumnName","cellStyles","hoveredColumn","selectedColumn","position","left","zIndex","borderRight","boxShadow","col","column","undefined","_TableHierarchyRow","TableHierarchy","_props$columns","_props$style","_props$selectedColumn","_props$indexColumnWid","indexColumnWidth","containerRef","useRef","tableRef","setHoveredColumn","useEffect","updateDimensions","addEventListener","removeEventListener","current","container","table","headerRow","querySelector","indexCell","pageX","curColWidth","resizer","createElement","top","right","userSelect","appendChild","preventDefault","offsetWidth","onMouseMove","onMouseUp","diffX","newWidth","Math","max","querySelectorAll","forEach","cell","finalWidth","makeIndexColumnResizable","indexHeader","indexCells","scrollLeft","handleColumnHeaderLeave","borderBottom","whiteSpace","headerCellStyles","ref","maxHeight","overflow","borderCollapse","borderSpacing","tableLayout","columnName","gatherColumnData","items","result","arguments","rowData","_defineProperty","columnData","handleColumnHeaderClick","title"],"sourceRoot":""}