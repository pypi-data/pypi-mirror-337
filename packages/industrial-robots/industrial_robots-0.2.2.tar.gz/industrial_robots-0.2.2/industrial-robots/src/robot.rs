// use crate::frames::XyzWpr;
// use k::nalgebra::{try_convert, Matrix4};
// use k::{
//     connect, Chain, InverseKinematicsSolver, Isometry3, JointType, NodeBuilder, Translation3,
//     UnitQuaternion, Vector3,
// };
//
// pub struct FanucLrMate200id {
//     chain: Chain<f64>,
//     end_transform: Isometry3<f64>,
// }
//
// impl FanucLrMate200id {
//     pub fn new() -> Self {
//         let chain = fanuc_lr_mate_200id();
//         let end_transform = try_convert(Matrix4::new(
//             0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
//         ))
//         .unwrap();
//         Self {
//             chain,
//             end_transform,
//         }
//     }
//
//     pub fn set_joints(&mut self, joints: &[f64]) {
//         let rad_joints = fanuc_joints_to_rad(joints);
//         // self.chain.set_joint_positions_clamped(&rad_joints);
//         self.chain.set_joint_positions_unchecked(&rad_joints);
//     }
//
//     pub fn link_poses(&self) -> Vec<Isometry3<f64>> {
//         let transforms = self.chain.update_transforms();
//         let mut modified = transforms[0..5].to_vec();
//         modified.push(self.end_pose());
//         modified
//     }
//
//     pub fn end_pose(&self) -> Isometry3<f64> {
//         let transforms = self.chain.update_transforms();
//         let last = transforms.last().unwrap();
//         let working = last * self.end_transform;
//         try_convert(working).unwrap()
//     }
//
//     pub fn find_joints(&self, pose: &Isometry3<f64>) -> Option<[f64; 6]> {
//         // This seems to fail if the robot starts at all zeroes
//         let mut fixed_joints = self
//             .chain
//             .joint_positions()
//             .iter()
//             .map(|&x| x)
//             .collect::<Vec<f64>>();
//         for i in 0..fixed_joints.len() {
//             if fixed_joints[i].abs() <= 1.0e-6 {
//                 fixed_joints[i] = 0.0001;
//             }
//         }
//         self.chain.set_joint_positions_unchecked(&fixed_joints);
//
//         let un_shifted = pose * self.end_transform.inverse();
//         let solver = k::JacobianIkSolver::new(0.001, 0.0001, 0.5, 100);
//         let link = self.chain.find("j6").unwrap();
//         let mut arm = k::SerialChain::from_end(link);
//
//         if let Ok(()) = solver.solve(&arm, &un_shifted) {
//             Some(rad_to_fanuc_joints(&self.chain.joint_positions()))
//         } else {
//             None
//         }
//     }
// }
//
// fn fanuc_lr_mate_200id() -> Chain<f64> {
//     let j1 = NodeBuilder::new()
//         .name("j1")
//         .joint_type(JointType::Rotational {
//             axis: Vector3::z_axis(),
//         })
//         .into_node();
//
//     let j2 = NodeBuilder::new()
//         .name("j2")
//         .translation(Translation3::new(50.0, 0.0, 0.0))
//         .joint_type(JointType::Rotational {
//             axis: Vector3::y_axis(),
//         })
//         .into_node();
//
//     let j3 = NodeBuilder::new()
//         .name("j3")
//         .translation(Translation3::new(0.0, 0.0, 330.0))
//         .joint_type(JointType::Rotational {
//             axis: -Vector3::y_axis(),
//         })
//         .into_node();
//
//     let j4 = NodeBuilder::new()
//         .name("j4")
//         .translation(Translation3::new(0.0, 0.0, 35.0))
//         .joint_type(JointType::Rotational {
//             axis: -Vector3::x_axis(),
//         })
//         .into_node();
//
//     let j5 = NodeBuilder::new()
//         .name("j5")
//         .translation(Translation3::new(335.0, 0.0, 0.0))
//         .joint_type(JointType::Rotational {
//             axis: -Vector3::y_axis(),
//         })
//         .into_node();
//
//     let j6 = NodeBuilder::new()
//         .name("j6")
//         .translation(Translation3::new(80.0, 0.0, 0.0))
//         .joint_type(JointType::Rotational {
//             axis: -Vector3::x_axis(),
//         })
//         .into_node();
//
//     connect![j1 => j2 => j3 => j4 => j5 => j6];
//
//     Chain::from_root(j1)
// }
//
// fn fanuc_joints_to_rad(joints: &[f64]) -> [f64; 6] {
//     let mut rad_joints = [0.0; 6];
//     for (i, j) in joints.iter().enumerate() {
//         rad_joints[i] = j.to_radians();
//     }
//     rad_joints[2] += rad_joints[1];
//     rad_joints
// }
//
// fn rad_to_fanuc_joints(rad_joints: &[f64]) -> [f64; 6] {
//     let mut joints = [0.0; 6];
//     for (i, j) in rad_joints.iter().enumerate() {
//         joints[i] = j.to_degrees();
//     }
//     joints[2] -= joints[1];
//     joints
// }
//
// #[cfg(test)]
// mod tests {
//     use super::*;
//     use approx::assert_relative_eq;
//     use k::nalgebra::{try_convert, Matrix4};
//     use k::Isometry3;
//     use test_case::test_case;
//
//     #[test]
//     fn fanuc_ik_with_zeroes() {
//         let mut robot = FanucLrMate200id::new();
//         robot.set_joints(&[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);
//         let transform = robot.end_pose();
//         let result = robot.find_joints(&transform);
//         assert!(result.is_some());
//     }
//
//     #[test]
//     fn fanuc_at_home() {
//         let mut robot = FanucLrMate200id::new();
//         robot.set_joints(&[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);
//         let transform = XyzWpr::from_isometry(&robot.end_pose());
//         let expected = XyzWpr::new(465.0, 0.0, 365.0, 180.0, -90.0, 0.0);
//         assert!(transform.approx_eq(&expected, 1e-6));
//     }
//
//     #[test_case((-15.0, 0.0, 0.0, 0.0, 0.0, 0.0), (0.0, -0.2588190451, 0.9659258263, 449.1555092244, -0.0, -0.9659258263, -0.2588190451, -120.3508559727, 1.0, -0.0, -0.0, 365.0, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((20.0, 0.0, 0.0, 0.0, 0.0, 0.0), (0.0, 0.3420201433, 0.9396926208, 436.9570686654, -0.0, -0.9396926208, 0.3420201433, 159.0393666464, 1.0, -0.0, -0.0, 365.0, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((0.0, -15.0, 0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 1.0, 379.5897151162, -0.0, -1.0, 0.0, 0.0, 1.0, -0.0, -0.0, 353.7555226754, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((0.0, 20.0, 0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 1.0, 577.8666472975, -0.0, -1.0, 0.0, 0.0, 1.0, -0.0, -0.0, 345.0985648593, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((0.0, 0.0, -15.0, 0.0, 0.0, 0.0), (0.2588190451, 0.0, 0.9659258263, 459.9178844886, -0.0, -1.0, 0.0, 0.0, 0.9659258263, -0.0, -0.2588190451, 256.3975002026, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((0.0, 0.0, 20.0, 0.0, 0.0, 0.0), (-0.3420201433, 0.0, 0.9396926208, 428.0017326098, -0.0, -1.0, 0.0, -0.0, 0.9396926208, -0.0, 0.3420201433, 504.8276012077, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((0.0, 0.0, 0.0, -15.0, 0.0, 0.0), (0.0, 0.0, 1.0, 465.0, -0.2588190451, -0.9659258263, 0.0, 0.0, 0.9659258263, -0.2588190451, -0.0, 365.0, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((0.0, 0.0, 0.0, 20.0, 0.0, 0.0), (0.0, 0.0, 1.0, 465.0, 0.3420201433, -0.9396926208, 0.0, 0.0, 0.9396926208, 0.3420201433, -0.0, 365.0, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((0.0, 0.0, 0.0, 0.0, -15.0, 0.0), (0.2588190451, 0.0, 0.9659258263, 462.2740661031, -0.0, -1.0, 0.0, 0.0, 0.9659258263, -0.0, -0.2588190451, 344.2944763918, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((0.0, 0.0, 0.0, 0.0, 20.0, 0.0), (-0.3420201433, 0.0, 0.9396926208, 460.1754096629, -0.0, -1.0, 0.0, 0.0, 0.9396926208, -0.0, 0.3420201433, 392.3616114661, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((0.0, 0.0, 0.0, 0.0, 0.0, -15.0), (0.0, 0.0, 1.0, 465.0, -0.2588190451, -0.9659258263, 0.0, 0.0, 0.9659258263, -0.2588190451, -0.0, 365.0, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((0.0, 0.0, 0.0, 0.0, 0.0, 20.0), (0.0, 0.0, 1.0, 465.0, 0.3420201433, -0.9396926208, 0.0, 0.0, 0.9396926208, 0.3420201433, -0.0, 365.0, 0.0, 0.0, 0.0, 1.0))]
//     fn fanuc_single_joint(
//         jf: (f64, f64, f64, f64, f64, f64),
//         mf: (
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//         ),
//     ) {
//         let mut robot = FanucLrMate200id::new();
//         robot.set_joints(&[jf.0, jf.1, jf.2, jf.3, jf.4, jf.5]);
//         let transform = robot.end_pose();
//         let expected = Matrix4::new(
//             mf.0, mf.1, mf.2, mf.3, mf.4, mf.5, mf.6, mf.7, mf.8, mf.9, mf.10, mf.11, mf.12, mf.13,
//             mf.14, mf.15,
//         );
//         let check = transform.to_matrix();
//
//         assert_relative_eq!(check, expected, epsilon = 1e-6);
//     }
//
//     #[test_case((-12.1, 15.5, -13.9, 23.8, 16.6, 26.5), (0.0574785794, -0.0797338644, 0.9951576377, 540.9177052538, 0.7591655199, -0.6438631548, -0.0954355868, -106.5300900624, 0.6483547843, 0.7609748673, 0.0235228611, 273.3785610738, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((-44.1, 6.2, 43.4, -31.3, -36.6, -34.5), (-0.4533746825, -0.0988874612, 0.8858175135, 289.889784975, -0.7132273438, -0.5557917756, -0.4270857738, -246.4162559078, 0.5345635166, -0.8254191494, 0.1814526785, 598.190461995, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((21.5, 41.2, 1.5, -15.6, 8.0, -37.3), (0.1740728193, 0.3193869233, 0.9314991394, 634.0140052764, -0.7864255913, -0.5242143347, 0.3267018836, 246.5267275253, 0.5926495111, -0.7894246795, 0.1599225829, 304.8480106225, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((-36.1, -44.6, -12.0, -35.5, -30.3, -43.8), (-0.2397133456, -0.5698714488, 0.7859923943, 186.7004864221, -0.9704574176, 0.1178160747, -0.2105511178, -107.1359848064, 0.0273845319, -0.813244062, -0.5812780599, 153.0510999832, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((-5.4, 33.3, 35.9, -9.4, -1.5, -6.1), (-0.566495656, 0.0630553149, 0.8216487687, 545.611133566, -0.2148241718, -0.9738925997, -0.073374242, -51.2318823935, 0.7955710194, -0.2180762056, 0.5652517329, 545.8227648076, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((28.2, 17.8, 33.9, 4.8, 30.3, 9.3), (-0.8846986839, 0.2906114217, 0.3644903844, 389.9758691524, -0.2107452819, -0.9467688106, 0.2433418284, 212.9355303054, 0.4158060424, 0.1384695665, 0.8988501067, 602.0057496251, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((10.7, 13.7, 23.7, -33.7, -3.7, 5.2), (-0.2002126066, 0.3569301192, 0.912423039, 486.512077452, -0.5222604583, -0.8268183471, 0.2088430863, 94.8425284329, 0.8289504966, -0.4347094558, 0.3519499441, 515.4679010757, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((0.0, -10.0, -43.7, -34.5, -33.9, 9.4), (0.92797142, -0.2430215354, 0.2825058884, 281.6714507083, -0.3292101813, -0.8898434321, 0.3159103083, 25.2728246672, 0.1746130011, -0.3861595522, -0.905754437, 46.3844459317, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((28.4, -16.8, 9.6, 42.7, 39.3, -38.3), (-0.5374897379, 0.7431205521, 0.3985933099, 277.3897050458, -0.3402349372, -0.6236008522, 0.7038196961, 189.0481418088, 0.7715860089, 0.2426804942, 0.588014633, 453.3339962716, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((39.7, 41.9, -42.8, 11.8, 34.8, 17.1), (-0.2241336847, 0.6970833282, 0.6810572113, 469.9331718695, 0.3966151979, -0.5731020265, 0.7171125797, 402.2810752214, 0.8902024917, 0.4308467254, -0.1480223732, 31.8487287284, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((-29.8, -4.1, -9.5, -42.2, -32.2, -34.4), (-0.0450428043, -0.531949209, 0.8455774269, 382.2876958391, -0.9969790728, -0.029677013, -0.0717774564, -185.9390835749, 0.0632761735, -0.846256057, -0.5290054933, 266.0640669962, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((15.7, 25.7, 30.4, -6.5, -42.0, 14.3), (0.1318628199, 0.3679800237, 0.9204362547, 520.6496411295, 0.2073079134, -0.9182485844, 0.3374062334, 152.6426755375, 0.9693480416, 0.146322382, -0.1973680186, 481.2752649506, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((25.2, -30.1, -19.7, 44.9, 39.8, 26.0), (-0.7750395791, 0.1970878502, 0.600391564, 239.5763565152, 0.517164568, -0.3481359962, 0.7818837112, 152.6849469132, 0.363117695, 0.9164920662, 0.1678923231, 218.9559121297, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((-41.3, -42.7, 18.9, -12.5, -9.1, -26.2), (-0.4974178047, -0.4146788555, 0.7619822665, 159.9818011166, -0.3920083434, -0.6761195922, -0.6238523509, -136.9022123009, 0.7738895181, -0.6090186728, 0.1737563521, 398.0476472211, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((-35.1, -5.1, -43.8, 25.7, -30.0, 35.8), (0.9324569023, 0.33646533, 0.13158726, 245.0737896042, 0.3612141512, -0.8612283412, -0.3575053583, -193.4426868009, -0.0069614807, 0.3808895194, -0.9245943498, 48.1196483344, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((-23.7, 34.1, 3.7, 11.1, -12.5, -16.0), (0.0964621537, -0.4498182626, 0.8878955927, 590.2617557257, -0.1404190013, -0.8892838581, -0.4352662677, -262.7473837173, 0.9853819346, -0.0826906908, -0.1489452674, 317.8896589393, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((22.1, 23.4, 15.6, 41.1, 16.1, 24.2), (-0.6560816674, -0.1636045811, 0.7367430941, 516.9281738606, 0.6887615685, -0.5288428651, 0.495916047, 225.643220739, 0.3084871916, 0.8328017562, 0.4596486566, 463.429748748, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((21.0, 29.3, 9.2, 34.9, 23.2, -10.2), (-0.6166024895, 0.3228092342, 0.7180498368, 558.3948568059, 0.1621299352, -0.8404531647, 0.517061275, 233.6619242593, 0.770399412, 0.4352386429, 0.4658884735, 413.1639049336, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((23.6, 41.1, 31.1, -42.2, -7.8, 42.0), (-0.3922325799, 0.4737600858, 0.7884827103, 553.9783810845, -0.1701313626, -0.8797454682, 0.4439630961, 249.9858812216, 0.9039960856, 0.0399911527, 0.4256662836, 485.7372352767, 0.0, 0.0, 0.0, 1.0))]
//     #[test_case((-30.3, -17.9, -10.0, -9.4, 12.9, 13.1), (-0.0043223063, -0.537199648, 0.8434440443, 313.1638791194, 0.0819183147, -0.8408072808, -0.5351004637, -186.3767202474, 0.9966296741, 0.0667806465, 0.0476407164, 294.1335424297, 0.0, 0.0, 0.0, 1.0))]
//     fn fanuc_random_joints(
//         jf: (f64, f64, f64, f64, f64, f64),
//         mf: (
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//             f64,
//         ),
//     ) {
//         let mut robot = FanucLrMate200id::new();
//         robot.set_joints(&[jf.0, jf.1, jf.2, jf.3, jf.4, jf.5]);
//         let transform = robot.end_pose();
//         let expected = Matrix4::new(
//             mf.0, mf.1, mf.2, mf.3, mf.4, mf.5, mf.6, mf.7, mf.8, mf.9, mf.10, mf.11, mf.12, mf.13,
//             mf.14, mf.15,
//         );
//         let check = transform.to_matrix();
//
//         assert_relative_eq!(check, expected, epsilon = 1e-6);
//     }
// }
