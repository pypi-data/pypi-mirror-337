# serializer version: 1
# name: test_function_signature[add-args0-kwargs0]
  '''
  You are now the following python function:
  ```
  # Add two numbers.
  def add(a: int, b: int = 10):
  ```
  Only respond with your `return` value.
  - The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  - As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  - Here is the output schema:
  ```
  {"properties": {"ret": {"title": "Ret", "type": "integer"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[add-args0-kwargs0].1
  'add(1, 2)'
# ---
# name: test_function_signature[add-args0-kwargs0].2
  dict({
    'description': 'Add two numbers.',
    'name': 'add',
    'parameters': dict({
      'properties': dict({
        'a': dict({
          'type': 'integer',
        }),
        'b': dict({
          'default': 10,
          'type': 'integer',
        }),
      }),
      'required': list([
        'a',
      ]),
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[add_ext-args9-kwargs9]
  '''
  You are now the following python function:
  ```
  # Add the given extension to the filename
  
  This is a multiline docstring.
  
  :param filename: the filename
  :param ext: the extension, e.g. `.txt`
  
  def add_ext(filename: str, ext: str):
  ```
  Only respond with your `return` value.
  - The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  - As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  - Here is the output schema:
  ```
  {"properties": {"ret": {"title": "Ret", "type": "string"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[add_ext-args9-kwargs9].1
  "add_ext('test', '.txt')"
# ---
# name: test_function_signature[add_ext-args9-kwargs9].2
  dict({
    'description': '''
      Add the given extension to the filename This is a multiline docstring. :param filename: the filename
      :param ext: the extension, e.g. `.txt`
    ''',
    'name': 'add_ext',
    'parameters': dict({
      'properties': dict({
        'ext': dict({
          'type': 'string',
        }),
        'filename': dict({
          'type': 'string',
        }),
      }),
      'required': list([
        'filename',
        'ext',
      ]),
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[complex-args5-kwargs5]
  '''
  You are now the following python function:
  ```
  # Complex function
  def complex(a: str, b: str, *args: str, c: str, d: str, **kwargs: str):
  ```
  Only respond with your `return` value.
  - The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  - As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  - Here is the output schema:
  ```
  {"properties": {"ret": {"title": "Ret", "type": "string"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[complex-args5-kwargs5].1
  "complex('a-v', 'b-v', 'arg-v1', 'arg-v2', c='c-v', d='d-v', kwarg1='kwarg1-v', kwarg2='kwarg2-v')"
# ---
# name: test_function_signature[complex-args5-kwargs5].2
  dict({
    'description': 'Complex function',
    'name': 'complex',
    'parameters': dict({
      'properties': dict({
        'a': dict({
          'type': 'string',
        }),
        'args': dict({
          'default': None,
          'items': dict({
            'type': 'string',
          }),
          'type': 'array',
        }),
        'b': dict({
          'type': 'string',
        }),
        'c': dict({
          'type': 'string',
        }),
        'd': dict({
          'type': 'string',
        }),
        'kwargs': dict({
          'additionalProperties': dict({
            'type': 'string',
          }),
          'default': None,
          'type': 'object',
        }),
      }),
      'required': list([
        'a',
        'b',
        'c',
        'd',
      ]),
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[concat-args2-kwargs2]
  '''
  You are now the following python function:
  ```
  # Concat two strings
  :param a: first string
  :param b: second string
  
  def concat(a: str, b: str):
  ```
  Only respond with your `return` value.
  - The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  - As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  - Here is the output schema:
  ```
  {"properties": {"ret": {"title": "Ret", "type": "string"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[concat-args2-kwargs2].1
  "concat('pen', 'apple')"
# ---
# name: test_function_signature[concat-args2-kwargs2].2
  dict({
    'description': '''
      Concat two strings
      :param a: first string
      :param b: second string
    ''',
    'name': 'concat',
    'parameters': dict({
      'properties': dict({
        'a': dict({
          'type': 'string',
        }),
        'b': dict({
          'type': 'string',
        }),
      }),
      'required': list([
        'a',
        'b',
      ]),
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[concat-args3-kwargs3]
  '''
  You are now the following python function:
  ```
  # Concat two strings
  :param a: first string
  :param b: second string
  
  def concat(a: str, b: str):
  ```
  Only respond with your `return` value.
  - The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  - As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  - Here is the output schema:
  ```
  {"properties": {"ret": {"title": "Ret", "type": "string"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[concat-args3-kwargs3].1
  'concat("a\'b", \'cd\')'
# ---
# name: test_function_signature[concat-args3-kwargs3].2
  dict({
    'description': '''
      Concat two strings
      :param a: first string
      :param b: second string
    ''',
    'name': 'concat',
    'parameters': dict({
      'properties': dict({
        'a': dict({
          'type': 'string',
        }),
        'b': dict({
          'type': 'string',
        }),
      }),
      'required': list([
        'a',
        'b',
      ]),
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[concats-args4-kwargs4]
  '''
  You are now the following python function:
  ```
  # Concat the given strings
  def concats(*args: str):
  ```
  Only respond with your `return` value.
  - The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  - As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  - Here is the output schema:
  ```
  {"properties": {"ret": {"title": "Ret", "type": "string"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[concats-args4-kwargs4].1
  "concats('a', 'b', 'c', 'd')"
# ---
# name: test_function_signature[concats-args4-kwargs4].2
  dict({
    'description': 'Concat the given strings',
    'name': 'concats',
    'parameters': dict({
      'properties': dict({
        'args': dict({
          'default': None,
          'items': dict({
            'type': 'string',
          }),
          'type': 'array',
        }),
      }),
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[fake_person-args1-kwargs1]
  '''
  You are now the following python function:
  ```
  # generate fake person.
  def fake_person(count: int):
  ```
  Only respond with your `return` value.
  - The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  - As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  - Here is the output schema:
  ```
  {"$defs": {"Person": {"description": "Person model.", "properties": {"name": {"title": "Name", "type": "string"}, "age": {"title": "Age", "type": "integer"}}, "required": ["name", "age"], "title": "Person", "type": "object"}}, "properties": {"ret": {"$ref": "#/$defs/Person"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[fake_person-args1-kwargs1].1
  'fake_person(5)'
# ---
# name: test_function_signature[fake_person-args1-kwargs1].2
  dict({
    'description': 'generate fake person.',
    'name': 'fake_person',
    'parameters': dict({
      'properties': dict({
        'count': dict({
          'type': 'integer',
        }),
      }),
      'required': list([
        'count',
      ]),
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[get_current_weather-args6-kwargs6]
  '''
  You are now the following python function:
  ```
  # "Get the current weather in a given location
  def get_current_weather(*locations: str, unit: Literal['celsius', 'fahrenheit']):
  ```
  Only respond with your `return` value.
  - The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  - As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  - Here is the output schema:
  ```
  {"properties": {"ret": {"items": {"additionalProperties": true, "type": "object"}, "title": "Ret", "type": "array"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[get_current_weather-args6-kwargs6].1
  "get_current_weather('New York', 'London', unit='celsius')"
# ---
# name: test_function_signature[get_current_weather-args6-kwargs6].2
  dict({
    'description': '"Get the current weather in a given location',
    'name': 'get_current_weather',
    'parameters': dict({
      'properties': dict({
        'locations': dict({
          'default': None,
          'items': dict({
            'type': 'string',
          }),
          'type': 'array',
        }),
        'unit': dict({
          'enum': list([
            'celsius',
            'fahrenheit',
          ]),
          'type': 'string',
        }),
      }),
      'required': list([
        'unit',
      ]),
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[how_many-args8-kwargs8]
  '''
  You are now the following python function:
  ```
  # return the given number
  def how_many(num: typing.Annotated[int, FieldInfo(annotation=NoneType, required=True, description='greater than 10', metadata=[Gt(gt=10)])]):
  ```
  Only respond with your `return` value.
  - The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  - As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  - Here is the output schema:
  ```
  {"properties": {"ret": {"title": "Ret", "type": "integer"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[how_many-args8-kwargs8].1
  'how_many(20)'
# ---
# name: test_function_signature[how_many-args8-kwargs8].2
  dict({
    'description': 'return the given number',
    'name': 'how_many',
    'parameters': dict({
      'properties': dict({
        'num': dict({
          'description': 'greater than 10',
          'exclusiveMinimum': 10,
          'type': 'integer',
        }),
      }),
      'required': list([
        'num',
      ]),
      'type': 'object',
    }),
  })
# ---
# name: test_function_signature[is_male-args7-kwargs7]
  '''
  You are now the following python function:
  ```
  # return the person is male
  def is_male(person: gpt_fn.utils.tests.test_signature.Person):
  ```
  Only respond with your `return` value.
  - The output should be formatted as a JSON instance that conforms to the JSON schema below.
  
  - As an example, for the schema {"properties": {"foo": {"title": "Foo", "description": "a list of strings", "type": "array", "items": {"type": "string"}}}, "required": ["foo"]}}
  the object {"foo": ["bar", "baz"]} is a well-formatted instance of the schema. The object {"properties": {"foo": ["bar", "baz"]}} is not well-formatted.
  
  - Here is the output schema:
  ```
  {"properties": {"ret": {"title": "Ret", "type": "boolean"}}, "required": ["ret"]}
  ```
  
  '''
# ---
# name: test_function_signature[is_male-args7-kwargs7].1
  "is_male(Person(name='John', age=20))"
# ---
# name: test_function_signature[is_male-args7-kwargs7].2
  dict({
    'description': 'return the person is male',
    'name': 'is_male',
    'parameters': dict({
      'properties': dict({
        'person': dict({
          'description': 'Person model.',
          'properties': dict({
            'age': dict({
              'type': 'integer',
            }),
            'name': dict({
              'type': 'string',
            }),
          }),
          'required': list([
            'name',
            'age',
          ]),
          'type': 'object',
        }),
      }),
      'required': list([
        'person',
      ]),
      'type': 'object',
    }),
  })
# ---
