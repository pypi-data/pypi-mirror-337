# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetComputeresourceResult',
    'AwaitableGetComputeresourceResult',
    'get_computeresource',
    'get_computeresource_output',
]

@pulumi.output_type
class GetComputeresourceResult:
    """
    A collection of values returned by getComputeresource.
    """
    def __init__(__self__, cachingenabled=None, datacenter=None, description=None, displaytype=None, hypervisor=None, id=None, name=None, password=None, server=None, setconsolepassword=None, url=None, user=None):
        if cachingenabled and not isinstance(cachingenabled, bool):
            raise TypeError("Expected argument 'cachingenabled' to be a bool")
        pulumi.set(__self__, "cachingenabled", cachingenabled)
        if datacenter and not isinstance(datacenter, str):
            raise TypeError("Expected argument 'datacenter' to be a str")
        pulumi.set(__self__, "datacenter", datacenter)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if displaytype and not isinstance(displaytype, str):
            raise TypeError("Expected argument 'displaytype' to be a str")
        pulumi.set(__self__, "displaytype", displaytype)
        if hypervisor and not isinstance(hypervisor, str):
            raise TypeError("Expected argument 'hypervisor' to be a str")
        pulumi.set(__self__, "hypervisor", hypervisor)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if server and not isinstance(server, str):
            raise TypeError("Expected argument 'server' to be a str")
        pulumi.set(__self__, "server", server)
        if setconsolepassword and not isinstance(setconsolepassword, bool):
            raise TypeError("Expected argument 'setconsolepassword' to be a bool")
        pulumi.set(__self__, "setconsolepassword", setconsolepassword)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if user and not isinstance(user, str):
            raise TypeError("Expected argument 'user' to be a str")
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def cachingenabled(self) -> bool:
        return pulumi.get(self, "cachingenabled")

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def displaytype(self) -> str:
        return pulumi.get(self, "displaytype")

    @property
    @pulumi.getter
    def hypervisor(self) -> str:
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def setconsolepassword(self) -> bool:
        return pulumi.get(self, "setconsolepassword")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


class AwaitableGetComputeresourceResult(GetComputeresourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputeresourceResult(
            cachingenabled=self.cachingenabled,
            datacenter=self.datacenter,
            description=self.description,
            displaytype=self.displaytype,
            hypervisor=self.hypervisor,
            id=self.id,
            name=self.name,
            password=self.password,
            server=self.server,
            setconsolepassword=self.setconsolepassword,
            url=self.url,
            user=self.user)


def get_computeresource(name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputeresourceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getComputeresource:getComputeresource', __args__, opts=opts, typ=GetComputeresourceResult).value

    return AwaitableGetComputeresourceResult(
        cachingenabled=pulumi.get(__ret__, 'cachingenabled'),
        datacenter=pulumi.get(__ret__, 'datacenter'),
        description=pulumi.get(__ret__, 'description'),
        displaytype=pulumi.get(__ret__, 'displaytype'),
        hypervisor=pulumi.get(__ret__, 'hypervisor'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        password=pulumi.get(__ret__, 'password'),
        server=pulumi.get(__ret__, 'server'),
        setconsolepassword=pulumi.get(__ret__, 'setconsolepassword'),
        url=pulumi.get(__ret__, 'url'),
        user=pulumi.get(__ret__, 'user'))
def get_computeresource_output(name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetComputeresourceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getComputeresource:getComputeresource', __args__, opts=opts, typ=GetComputeresourceResult)
    return __ret__.apply(lambda __response__: GetComputeresourceResult(
        cachingenabled=pulumi.get(__response__, 'cachingenabled'),
        datacenter=pulumi.get(__response__, 'datacenter'),
        description=pulumi.get(__response__, 'description'),
        displaytype=pulumi.get(__response__, 'displaytype'),
        hypervisor=pulumi.get(__response__, 'hypervisor'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        password=pulumi.get(__response__, 'password'),
        server=pulumi.get(__response__, 'server'),
        setconsolepassword=pulumi.get(__response__, 'setconsolepassword'),
        url=pulumi.get(__response__, 'url'),
        user=pulumi.get(__response__, 'user')))
