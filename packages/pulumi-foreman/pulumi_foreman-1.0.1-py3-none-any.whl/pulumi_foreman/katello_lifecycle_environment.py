# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['KatelloLifecycleEnvironmentArgs', 'KatelloLifecycleEnvironment']

@pulumi.input_type
class KatelloLifecycleEnvironmentArgs:
    def __init__(__self__, *,
                 organization_id: pulumi.Input[int],
                 prior_id: pulumi.Input[int],
                 description: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a KatelloLifecycleEnvironment resource.
        :param pulumi.Input[int] organization_id: @EXAMPLE 1
        :param pulumi.Input[int] prior_id: ID of the prior lifecycle environment. Use '1' to refer to the built-in 'Library' root environment. @EXAMPLE
               data.foreman_katello_lifecycle_environment.library.id
        :param pulumi.Input[str] description: Description for the lifecycle environment
        :param pulumi.Input[str] label: Label for the lifecycle environment. Cannot be changed after creation. By default set to the name, with underscores as
               spaces replacement. @EXAMPLE
        :param pulumi.Input[str] name: Name of the lifecycle environment. @EXAMPLE "My new env"
        """
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "prior_id", prior_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[int]:
        """
        @EXAMPLE 1
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="priorId")
    def prior_id(self) -> pulumi.Input[int]:
        """
        ID of the prior lifecycle environment. Use '1' to refer to the built-in 'Library' root environment. @EXAMPLE
        data.foreman_katello_lifecycle_environment.library.id
        """
        return pulumi.get(self, "prior_id")

    @prior_id.setter
    def prior_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "prior_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the lifecycle environment
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the lifecycle environment. Cannot be changed after creation. By default set to the name, with underscores as
        spaces replacement. @EXAMPLE
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the lifecycle environment. @EXAMPLE "My new env"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _KatelloLifecycleEnvironmentState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 library: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[int]] = None,
                 prior_id: Optional[pulumi.Input[int]] = None,
                 successor_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering KatelloLifecycleEnvironment resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY Lifecycle environments group hosts into logical stages, example dev/test/prod.
        :param pulumi.Input[str] description: Description for the lifecycle environment
        :param pulumi.Input[str] label: Label for the lifecycle environment. Cannot be changed after creation. By default set to the name, with underscores as
               spaces replacement. @EXAMPLE
        :param pulumi.Input[bool] library: Specifies if this environment is the special 'Library' root environment.
        :param pulumi.Input[str] name: Name of the lifecycle environment. @EXAMPLE "My new env"
        :param pulumi.Input[int] organization_id: @EXAMPLE 1
        :param pulumi.Input[int] prior_id: ID of the prior lifecycle environment. Use '1' to refer to the built-in 'Library' root environment. @EXAMPLE
               data.foreman_katello_lifecycle_environment.library.id
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if library is not None:
            pulumi.set(__self__, "library", library)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if prior_id is not None:
            pulumi.set(__self__, "prior_id", prior_id)
        if successor_id is not None:
            pulumi.set(__self__, "successor_id", successor_id)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY Lifecycle environments group hosts into logical stages, example dev/test/prod.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the lifecycle environment
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the lifecycle environment. Cannot be changed after creation. By default set to the name, with underscores as
        spaces replacement. @EXAMPLE
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def library(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if this environment is the special 'Library' root environment.
        """
        return pulumi.get(self, "library")

    @library.setter
    def library(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "library", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the lifecycle environment. @EXAMPLE "My new env"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[int]]:
        """
        @EXAMPLE 1
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="priorId")
    def prior_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the prior lifecycle environment. Use '1' to refer to the built-in 'Library' root environment. @EXAMPLE
        data.foreman_katello_lifecycle_environment.library.id
        """
        return pulumi.get(self, "prior_id")

    @prior_id.setter
    def prior_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prior_id", value)

    @property
    @pulumi.getter(name="successorId")
    def successor_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "successor_id")

    @successor_id.setter
    def successor_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "successor_id", value)


class KatelloLifecycleEnvironment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[int]] = None,
                 prior_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a KatelloLifecycleEnvironment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description for the lifecycle environment
        :param pulumi.Input[str] label: Label for the lifecycle environment. Cannot be changed after creation. By default set to the name, with underscores as
               spaces replacement. @EXAMPLE
        :param pulumi.Input[str] name: Name of the lifecycle environment. @EXAMPLE "My new env"
        :param pulumi.Input[int] organization_id: @EXAMPLE 1
        :param pulumi.Input[int] prior_id: ID of the prior lifecycle environment. Use '1' to refer to the built-in 'Library' root environment. @EXAMPLE
               data.foreman_katello_lifecycle_environment.library.id
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KatelloLifecycleEnvironmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a KatelloLifecycleEnvironment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KatelloLifecycleEnvironmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KatelloLifecycleEnvironmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[int]] = None,
                 prior_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KatelloLifecycleEnvironmentArgs.__new__(KatelloLifecycleEnvironmentArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["label"] = label
            __props__.__dict__["name"] = name
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            if prior_id is None and not opts.urn:
                raise TypeError("Missing required property 'prior_id'")
            __props__.__dict__["prior_id"] = prior_id
            __props__.__dict__["__meta_"] = None
            __props__.__dict__["library"] = None
            __props__.__dict__["successor_id"] = None
        super(KatelloLifecycleEnvironment, __self__).__init__(
            'foreman:index/katelloLifecycleEnvironment:KatelloLifecycleEnvironment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            label: Optional[pulumi.Input[str]] = None,
            library: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization_id: Optional[pulumi.Input[int]] = None,
            prior_id: Optional[pulumi.Input[int]] = None,
            successor_id: Optional[pulumi.Input[int]] = None) -> 'KatelloLifecycleEnvironment':
        """
        Get an existing KatelloLifecycleEnvironment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY Lifecycle environments group hosts into logical stages, example dev/test/prod.
        :param pulumi.Input[str] description: Description for the lifecycle environment
        :param pulumi.Input[str] label: Label for the lifecycle environment. Cannot be changed after creation. By default set to the name, with underscores as
               spaces replacement. @EXAMPLE
        :param pulumi.Input[bool] library: Specifies if this environment is the special 'Library' root environment.
        :param pulumi.Input[str] name: Name of the lifecycle environment. @EXAMPLE "My new env"
        :param pulumi.Input[int] organization_id: @EXAMPLE 1
        :param pulumi.Input[int] prior_id: ID of the prior lifecycle environment. Use '1' to refer to the built-in 'Library' root environment. @EXAMPLE
               data.foreman_katello_lifecycle_environment.library.id
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KatelloLifecycleEnvironmentState.__new__(_KatelloLifecycleEnvironmentState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["description"] = description
        __props__.__dict__["label"] = label
        __props__.__dict__["library"] = library
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["prior_id"] = prior_id
        __props__.__dict__["successor_id"] = successor_id
        return KatelloLifecycleEnvironment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY Lifecycle environments group hosts into logical stages, example dev/test/prod.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description for the lifecycle environment
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def label(self) -> pulumi.Output[str]:
        """
        Label for the lifecycle environment. Cannot be changed after creation. By default set to the name, with underscores as
        spaces replacement. @EXAMPLE
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def library(self) -> pulumi.Output[bool]:
        """
        Specifies if this environment is the special 'Library' root environment.
        """
        return pulumi.get(self, "library")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the lifecycle environment. @EXAMPLE "My new env"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[int]:
        """
        @EXAMPLE 1
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="priorId")
    def prior_id(self) -> pulumi.Output[int]:
        """
        ID of the prior lifecycle environment. Use '1' to refer to the built-in 'Library' root environment. @EXAMPLE
        data.foreman_katello_lifecycle_environment.library.id
        """
        return pulumi.get(self, "prior_id")

    @property
    @pulumi.getter(name="successorId")
    def successor_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "successor_id")

