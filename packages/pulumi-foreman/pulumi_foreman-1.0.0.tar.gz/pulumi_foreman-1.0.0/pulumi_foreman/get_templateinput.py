# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTemplateinputResult',
    'AwaitableGetTemplateinputResult',
    'get_templateinput',
    'get_templateinput_output',
]

@pulumi.output_type
class GetTemplateinputResult:
    """
    A collection of values returned by getTemplateinput.
    """
    def __init__(__self__, advanced=None, default=None, description=None, fact_name=None, hidden_value=None, id=None, input_type=None, name=None, puppet_class_name=None, puppet_parameter_name=None, required=None, resource_type=None, template_id=None, value_type=None, variable_name=None):
        if advanced and not isinstance(advanced, bool):
            raise TypeError("Expected argument 'advanced' to be a bool")
        pulumi.set(__self__, "advanced", advanced)
        if default and not isinstance(default, str):
            raise TypeError("Expected argument 'default' to be a str")
        pulumi.set(__self__, "default", default)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if fact_name and not isinstance(fact_name, str):
            raise TypeError("Expected argument 'fact_name' to be a str")
        pulumi.set(__self__, "fact_name", fact_name)
        if hidden_value and not isinstance(hidden_value, bool):
            raise TypeError("Expected argument 'hidden_value' to be a bool")
        pulumi.set(__self__, "hidden_value", hidden_value)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if input_type and not isinstance(input_type, str):
            raise TypeError("Expected argument 'input_type' to be a str")
        pulumi.set(__self__, "input_type", input_type)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if puppet_class_name and not isinstance(puppet_class_name, str):
            raise TypeError("Expected argument 'puppet_class_name' to be a str")
        pulumi.set(__self__, "puppet_class_name", puppet_class_name)
        if puppet_parameter_name and not isinstance(puppet_parameter_name, str):
            raise TypeError("Expected argument 'puppet_parameter_name' to be a str")
        pulumi.set(__self__, "puppet_parameter_name", puppet_parameter_name)
        if required and not isinstance(required, bool):
            raise TypeError("Expected argument 'required' to be a bool")
        pulumi.set(__self__, "required", required)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if template_id and not isinstance(template_id, int):
            raise TypeError("Expected argument 'template_id' to be a int")
        pulumi.set(__self__, "template_id", template_id)
        if value_type and not isinstance(value_type, str):
            raise TypeError("Expected argument 'value_type' to be a str")
        pulumi.set(__self__, "value_type", value_type)
        if variable_name and not isinstance(variable_name, str):
            raise TypeError("Expected argument 'variable_name' to be a str")
        pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def advanced(self) -> bool:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="factName")
    def fact_name(self) -> str:
        return pulumi.get(self, "fact_name")

    @property
    @pulumi.getter(name="hiddenValue")
    def hidden_value(self) -> bool:
        return pulumi.get(self, "hidden_value")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> str:
        return pulumi.get(self, "input_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="puppetClassName")
    def puppet_class_name(self) -> str:
        return pulumi.get(self, "puppet_class_name")

    @property
    @pulumi.getter(name="puppetParameterName")
    def puppet_parameter_name(self) -> str:
        return pulumi.get(self, "puppet_parameter_name")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> int:
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> str:
        return pulumi.get(self, "variable_name")


class AwaitableGetTemplateinputResult(GetTemplateinputResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTemplateinputResult(
            advanced=self.advanced,
            default=self.default,
            description=self.description,
            fact_name=self.fact_name,
            hidden_value=self.hidden_value,
            id=self.id,
            input_type=self.input_type,
            name=self.name,
            puppet_class_name=self.puppet_class_name,
            puppet_parameter_name=self.puppet_parameter_name,
            required=self.required,
            resource_type=self.resource_type,
            template_id=self.template_id,
            value_type=self.value_type,
            variable_name=self.variable_name)


def get_templateinput(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTemplateinputResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getTemplateinput:getTemplateinput', __args__, opts=opts, typ=GetTemplateinputResult).value

    return AwaitableGetTemplateinputResult(
        advanced=pulumi.get(__ret__, 'advanced'),
        default=pulumi.get(__ret__, 'default'),
        description=pulumi.get(__ret__, 'description'),
        fact_name=pulumi.get(__ret__, 'fact_name'),
        hidden_value=pulumi.get(__ret__, 'hidden_value'),
        id=pulumi.get(__ret__, 'id'),
        input_type=pulumi.get(__ret__, 'input_type'),
        name=pulumi.get(__ret__, 'name'),
        puppet_class_name=pulumi.get(__ret__, 'puppet_class_name'),
        puppet_parameter_name=pulumi.get(__ret__, 'puppet_parameter_name'),
        required=pulumi.get(__ret__, 'required'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        template_id=pulumi.get(__ret__, 'template_id'),
        value_type=pulumi.get(__ret__, 'value_type'),
        variable_name=pulumi.get(__ret__, 'variable_name'))
def get_templateinput_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTemplateinputResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getTemplateinput:getTemplateinput', __args__, opts=opts, typ=GetTemplateinputResult)
    return __ret__.apply(lambda __response__: GetTemplateinputResult(
        advanced=pulumi.get(__response__, 'advanced'),
        default=pulumi.get(__response__, 'default'),
        description=pulumi.get(__response__, 'description'),
        fact_name=pulumi.get(__response__, 'fact_name'),
        hidden_value=pulumi.get(__response__, 'hidden_value'),
        id=pulumi.get(__response__, 'id'),
        input_type=pulumi.get(__response__, 'input_type'),
        name=pulumi.get(__response__, 'name'),
        puppet_class_name=pulumi.get(__response__, 'puppet_class_name'),
        puppet_parameter_name=pulumi.get(__response__, 'puppet_parameter_name'),
        required=pulumi.get(__response__, 'required'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        template_id=pulumi.get(__response__, 'template_id'),
        value_type=pulumi.get(__response__, 'value_type'),
        variable_name=pulumi.get(__response__, 'variable_name')))
