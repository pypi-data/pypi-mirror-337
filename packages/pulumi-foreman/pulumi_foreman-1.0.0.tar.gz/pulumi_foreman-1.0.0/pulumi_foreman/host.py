# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HostArgs', 'Host']

@pulumi.input_type
class HostArgs:
    def __init__(__self__, *,
                 architecture_id: Optional[pulumi.Input[int]] = None,
                 bmc_success: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 compute_attributes: Optional[pulumi.Input[str]] = None,
                 compute_profile_id: Optional[pulumi.Input[int]] = None,
                 compute_resource_id: Optional[pulumi.Input[int]] = None,
                 config_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 domain_id: Optional[pulumi.Input[int]] = None,
                 enable_bmc: Optional[pulumi.Input[bool]] = None,
                 environment_id: Optional[pulumi.Input[int]] = None,
                 hostgroup_id: Optional[pulumi.Input[int]] = None,
                 image_id: Optional[pulumi.Input[int]] = None,
                 interfaces_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['HostInterfacesAttributeArgs']]]] = None,
                 manage_power_operations: Optional[pulumi.Input[bool]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 medium_id: Optional[pulumi.Input[int]] = None,
                 model_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 owner_id: Optional[pulumi.Input[int]] = None,
                 owner_type: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 provision_method: Optional[pulumi.Input[str]] = None,
                 ptable_id: Optional[pulumi.Input[int]] = None,
                 puppet_class_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 set_build_flag: Optional[pulumi.Input[bool]] = None,
                 shortname: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Host resource.
        :param pulumi.Input[int] architecture_id: ID of the architecture of this host
        :param pulumi.Input[str] comment: Add additional information about this host.Note: Changes to this attribute will trigger a host rebuild.
        :param pulumi.Input[str] compute_attributes: Hypervisor specific VM options. Must be a JSON string, as every compute provider has different attributes schema
        :param pulumi.Input[Sequence[pulumi.Input[int]]] config_group_ids: IDs of the applied config groups.
        :param pulumi.Input[int] domain_id: ID of the domain to assign to the host.
        :param pulumi.Input[bool] enable_bmc: Enables PMI/BMC functionality. On create and update calls, having this enabled will force a host to poweroff, set next
               boot to PXE and power on. Defaults to `false`.
        :param pulumi.Input[int] environment_id: ID of the environment to assign to the host.
        :param pulumi.Input[int] hostgroup_id: ID of the hostgroup to assign to the host.
        :param pulumi.Input[int] image_id: ID of an image to be used as base for this host when cloning
        :param pulumi.Input[Sequence[pulumi.Input['HostInterfacesAttributeArgs']]] interfaces_attributes: Host interface information.
        :param pulumi.Input[bool] manage_power_operations: Manage power operations, e.g. power on, if host's build flag will be enabled.
        :param pulumi.Input[bool] managed: Whether or not this host is managed by Foreman. Create host only, don't set build status or manage power states.
        :param pulumi.Input[int] medium_id: ID of the medium mounted on the host.
        :param pulumi.Input[int] model_id: ID of the hardware model if applicable
        :param pulumi.Input[str] name: Name of this host as stored in Foreman. Can be short name or FQDN, depending on your Foreman settings (especially the
               setting 'append_domain_name_for_hosts').
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system to put on the host.
        :param pulumi.Input[int] owner_id: ID of the user or usergroup that owns the host.
        :param pulumi.Input[str] owner_type: Owner of the host, must be either User ot Usergroup
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters that will be saved as host parameters in the machine config.
        :param pulumi.Input[str] provision_method: Sets the provision method in Foreman for this host: either network-based ('build') or image-based ('image')
        :param pulumi.Input[int] ptable_id: ID of the partition table the host should use
        :param pulumi.Input[Sequence[pulumi.Input[int]]] puppet_class_ids: IDs of the applied puppet classes.
        :param pulumi.Input[int] retry_count: Number of times to retry on a failed attempt to register or delete a host in foreman.
        :param pulumi.Input[str] root_password: Default root password
        :param pulumi.Input[bool] set_build_flag: Sets the Foreman-internal 'build' flag on this host - even if it is already built completely.
        :param pulumi.Input[str] shortname: The short name of this host. Example: when the FQDN is 'host01.example.org', then 'host01' is the short name.
        :param pulumi.Input[int] subnet_id: ID of the subnet the host should be placed in
        """
        if architecture_id is not None:
            pulumi.set(__self__, "architecture_id", architecture_id)
        if bmc_success is not None:
            warnings.warn("""The feature no longer exists""", DeprecationWarning)
            pulumi.log.warn("""bmc_success is deprecated: The feature no longer exists""")
        if bmc_success is not None:
            pulumi.set(__self__, "bmc_success", bmc_success)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if compute_attributes is not None:
            pulumi.set(__self__, "compute_attributes", compute_attributes)
        if compute_profile_id is not None:
            pulumi.set(__self__, "compute_profile_id", compute_profile_id)
        if compute_resource_id is not None:
            pulumi.set(__self__, "compute_resource_id", compute_resource_id)
        if config_group_ids is not None:
            pulumi.set(__self__, "config_group_ids", config_group_ids)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if enable_bmc is not None:
            pulumi.set(__self__, "enable_bmc", enable_bmc)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if hostgroup_id is not None:
            pulumi.set(__self__, "hostgroup_id", hostgroup_id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if interfaces_attributes is not None:
            pulumi.set(__self__, "interfaces_attributes", interfaces_attributes)
        if manage_power_operations is not None:
            pulumi.set(__self__, "manage_power_operations", manage_power_operations)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if medium_id is not None:
            pulumi.set(__self__, "medium_id", medium_id)
        if model_id is not None:
            pulumi.set(__self__, "model_id", model_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operatingsystem_id is not None:
            pulumi.set(__self__, "operatingsystem_id", operatingsystem_id)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if owner_type is not None:
            pulumi.set(__self__, "owner_type", owner_type)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if provision_method is not None:
            pulumi.set(__self__, "provision_method", provision_method)
        if ptable_id is not None:
            pulumi.set(__self__, "ptable_id", ptable_id)
        if puppet_class_ids is not None:
            pulumi.set(__self__, "puppet_class_ids", puppet_class_ids)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if set_build_flag is not None:
            pulumi.set(__self__, "set_build_flag", set_build_flag)
        if shortname is not None:
            pulumi.set(__self__, "shortname", shortname)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="architectureId")
    def architecture_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the architecture of this host
        """
        return pulumi.get(self, "architecture_id")

    @architecture_id.setter
    def architecture_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "architecture_id", value)

    @property
    @pulumi.getter(name="bmcSuccess")
    @_utilities.deprecated("""The feature no longer exists""")
    def bmc_success(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bmc_success")

    @bmc_success.setter
    def bmc_success(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bmc_success", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Add additional information about this host.Note: Changes to this attribute will trigger a host rebuild.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="computeAttributes")
    def compute_attributes(self) -> Optional[pulumi.Input[str]]:
        """
        Hypervisor specific VM options. Must be a JSON string, as every compute provider has different attributes schema
        """
        return pulumi.get(self, "compute_attributes")

    @compute_attributes.setter
    def compute_attributes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compute_attributes", value)

    @property
    @pulumi.getter(name="computeProfileId")
    def compute_profile_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compute_profile_id")

    @compute_profile_id.setter
    def compute_profile_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute_profile_id", value)

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compute_resource_id")

    @compute_resource_id.setter
    def compute_resource_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute_resource_id", value)

    @property
    @pulumi.getter(name="configGroupIds")
    def config_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the applied config groups.
        """
        return pulumi.get(self, "config_group_ids")

    @config_group_ids.setter
    def config_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "config_group_ids", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the domain to assign to the host.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="enableBmc")
    def enable_bmc(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables PMI/BMC functionality. On create and update calls, having this enabled will force a host to poweroff, set next
        boot to PXE and power on. Defaults to `false`.
        """
        return pulumi.get(self, "enable_bmc")

    @enable_bmc.setter
    def enable_bmc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_bmc", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the environment to assign to the host.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter(name="hostgroupId")
    def hostgroup_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the hostgroup to assign to the host.
        """
        return pulumi.get(self, "hostgroup_id")

    @hostgroup_id.setter
    def hostgroup_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hostgroup_id", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of an image to be used as base for this host when cloning
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="interfacesAttributes")
    def interfaces_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostInterfacesAttributeArgs']]]]:
        """
        Host interface information.
        """
        return pulumi.get(self, "interfaces_attributes")

    @interfaces_attributes.setter
    def interfaces_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostInterfacesAttributeArgs']]]]):
        pulumi.set(self, "interfaces_attributes", value)

    @property
    @pulumi.getter(name="managePowerOperations")
    def manage_power_operations(self) -> Optional[pulumi.Input[bool]]:
        """
        Manage power operations, e.g. power on, if host's build flag will be enabled.
        """
        return pulumi.get(self, "manage_power_operations")

    @manage_power_operations.setter
    def manage_power_operations(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_power_operations", value)

    @property
    @pulumi.getter
    def managed(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not this host is managed by Foreman. Create host only, don't set build status or manage power states.
        """
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter(name="mediumId")
    def medium_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the medium mounted on the host.
        """
        return pulumi.get(self, "medium_id")

    @medium_id.setter
    def medium_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "medium_id", value)

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the hardware model if applicable
        """
        return pulumi.get(self, "model_id")

    @model_id.setter
    def model_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "model_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of this host as stored in Foreman. Can be short name or FQDN, depending on your Foreman settings (especially the
        setting 'append_domain_name_for_hosts').
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the operating system to put on the host.
        """
        return pulumi.get(self, "operatingsystem_id")

    @operatingsystem_id.setter
    def operatingsystem_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "operatingsystem_id", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the user or usergroup that owns the host.
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="ownerType")
    def owner_type(self) -> Optional[pulumi.Input[str]]:
        """
        Owner of the host, must be either User ot Usergroup
        """
        return pulumi.get(self, "owner_type")

    @owner_type.setter
    def owner_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_type", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters that will be saved as host parameters in the machine config.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="provisionMethod")
    def provision_method(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the provision method in Foreman for this host: either network-based ('build') or image-based ('image')
        """
        return pulumi.get(self, "provision_method")

    @provision_method.setter
    def provision_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provision_method", value)

    @property
    @pulumi.getter(name="ptableId")
    def ptable_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the partition table the host should use
        """
        return pulumi.get(self, "ptable_id")

    @ptable_id.setter
    def ptable_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ptable_id", value)

    @property
    @pulumi.getter(name="puppetClassIds")
    def puppet_class_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the applied puppet classes.
        """
        return pulumi.get(self, "puppet_class_ids")

    @puppet_class_ids.setter
    def puppet_class_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "puppet_class_ids", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of times to retry on a failed attempt to register or delete a host in foreman.
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        """
        Default root password
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter(name="setBuildFlag")
    def set_build_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Sets the Foreman-internal 'build' flag on this host - even if it is already built completely.
        """
        return pulumi.get(self, "set_build_flag")

    @set_build_flag.setter
    def set_build_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_build_flag", value)

    @property
    @pulumi.getter
    def shortname(self) -> Optional[pulumi.Input[str]]:
        """
        The short name of this host. Example: when the FQDN is 'host01.example.org', then 'host01' is the short name.
        """
        return pulumi.get(self, "shortname")

    @shortname.setter
    def shortname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shortname", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the subnet the host should be placed in
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class _HostState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 architecture_id: Optional[pulumi.Input[int]] = None,
                 bmc_success: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 compute_attributes: Optional[pulumi.Input[str]] = None,
                 compute_profile_id: Optional[pulumi.Input[int]] = None,
                 compute_resource_id: Optional[pulumi.Input[int]] = None,
                 config_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 domain_id: Optional[pulumi.Input[int]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 enable_bmc: Optional[pulumi.Input[bool]] = None,
                 environment_id: Optional[pulumi.Input[int]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 hostgroup_id: Optional[pulumi.Input[int]] = None,
                 image_id: Optional[pulumi.Input[int]] = None,
                 interfaces_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['HostInterfacesAttributeArgs']]]] = None,
                 manage_power_operations: Optional[pulumi.Input[bool]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 medium_id: Optional[pulumi.Input[int]] = None,
                 model_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 owner_id: Optional[pulumi.Input[int]] = None,
                 owner_type: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 provision_method: Optional[pulumi.Input[str]] = None,
                 ptable_id: Optional[pulumi.Input[int]] = None,
                 puppet_class_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 set_build_flag: Optional[pulumi.Input[bool]] = None,
                 shortname: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[int]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Host resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY A host managed by Foreman.
        :param pulumi.Input[int] architecture_id: ID of the architecture of this host
        :param pulumi.Input[str] comment: Add additional information about this host.Note: Changes to this attribute will trigger a host rebuild.
        :param pulumi.Input[str] compute_attributes: Hypervisor specific VM options. Must be a JSON string, as every compute provider has different attributes schema
        :param pulumi.Input[Sequence[pulumi.Input[int]]] config_group_ids: IDs of the applied config groups.
        :param pulumi.Input[int] domain_id: ID of the domain to assign to the host.
        :param pulumi.Input[str] domain_name: The domain name of the host.
        :param pulumi.Input[bool] enable_bmc: Enables PMI/BMC functionality. On create and update calls, having this enabled will force a host to poweroff, set next
               boot to PXE and power on. Defaults to `false`.
        :param pulumi.Input[int] environment_id: ID of the environment to assign to the host.
        :param pulumi.Input[str] fqdn: Host fully qualified domain name. Read-only value to be used in variables. @EXAMPLE "compute01.dc1.company.com"
        :param pulumi.Input[int] hostgroup_id: ID of the hostgroup to assign to the host.
        :param pulumi.Input[int] image_id: ID of an image to be used as base for this host when cloning
        :param pulumi.Input[Sequence[pulumi.Input['HostInterfacesAttributeArgs']]] interfaces_attributes: Host interface information.
        :param pulumi.Input[bool] manage_power_operations: Manage power operations, e.g. power on, if host's build flag will be enabled.
        :param pulumi.Input[bool] managed: Whether or not this host is managed by Foreman. Create host only, don't set build status or manage power states.
        :param pulumi.Input[int] medium_id: ID of the medium mounted on the host.
        :param pulumi.Input[int] model_id: ID of the hardware model if applicable
        :param pulumi.Input[str] name: Name of this host as stored in Foreman. Can be short name or FQDN, depending on your Foreman settings (especially the
               setting 'append_domain_name_for_hosts').
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system to put on the host.
        :param pulumi.Input[int] owner_id: ID of the user or usergroup that owns the host.
        :param pulumi.Input[str] owner_type: Owner of the host, must be either User ot Usergroup
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters that will be saved as host parameters in the machine config.
        :param pulumi.Input[str] provision_method: Sets the provision method in Foreman for this host: either network-based ('build') or image-based ('image')
        :param pulumi.Input[int] ptable_id: ID of the partition table the host should use
        :param pulumi.Input[Sequence[pulumi.Input[int]]] puppet_class_ids: IDs of the applied puppet classes.
        :param pulumi.Input[int] retry_count: Number of times to retry on a failed attempt to register or delete a host in foreman.
        :param pulumi.Input[str] root_password: Default root password
        :param pulumi.Input[bool] set_build_flag: Sets the Foreman-internal 'build' flag on this host - even if it is already built completely.
        :param pulumi.Input[str] shortname: The short name of this host. Example: when the FQDN is 'host01.example.org', then 'host01' is the short name.
        :param pulumi.Input[int] subnet_id: ID of the subnet the host should be placed in
        :param pulumi.Input[str] token: Build token. Can be used to signal to Foreman that a host build is complete.
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if architecture_id is not None:
            pulumi.set(__self__, "architecture_id", architecture_id)
        if bmc_success is not None:
            warnings.warn("""The feature no longer exists""", DeprecationWarning)
            pulumi.log.warn("""bmc_success is deprecated: The feature no longer exists""")
        if bmc_success is not None:
            pulumi.set(__self__, "bmc_success", bmc_success)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if compute_attributes is not None:
            pulumi.set(__self__, "compute_attributes", compute_attributes)
        if compute_profile_id is not None:
            pulumi.set(__self__, "compute_profile_id", compute_profile_id)
        if compute_resource_id is not None:
            pulumi.set(__self__, "compute_resource_id", compute_resource_id)
        if config_group_ids is not None:
            pulumi.set(__self__, "config_group_ids", config_group_ids)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if enable_bmc is not None:
            pulumi.set(__self__, "enable_bmc", enable_bmc)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if hostgroup_id is not None:
            pulumi.set(__self__, "hostgroup_id", hostgroup_id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if interfaces_attributes is not None:
            pulumi.set(__self__, "interfaces_attributes", interfaces_attributes)
        if manage_power_operations is not None:
            pulumi.set(__self__, "manage_power_operations", manage_power_operations)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if medium_id is not None:
            pulumi.set(__self__, "medium_id", medium_id)
        if model_id is not None:
            pulumi.set(__self__, "model_id", model_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operatingsystem_id is not None:
            pulumi.set(__self__, "operatingsystem_id", operatingsystem_id)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if owner_type is not None:
            pulumi.set(__self__, "owner_type", owner_type)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if provision_method is not None:
            pulumi.set(__self__, "provision_method", provision_method)
        if ptable_id is not None:
            pulumi.set(__self__, "ptable_id", ptable_id)
        if puppet_class_ids is not None:
            pulumi.set(__self__, "puppet_class_ids", puppet_class_ids)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if set_build_flag is not None:
            pulumi.set(__self__, "set_build_flag", set_build_flag)
        if shortname is not None:
            pulumi.set(__self__, "shortname", shortname)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY A host managed by Foreman.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter(name="architectureId")
    def architecture_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the architecture of this host
        """
        return pulumi.get(self, "architecture_id")

    @architecture_id.setter
    def architecture_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "architecture_id", value)

    @property
    @pulumi.getter(name="bmcSuccess")
    @_utilities.deprecated("""The feature no longer exists""")
    def bmc_success(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bmc_success")

    @bmc_success.setter
    def bmc_success(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bmc_success", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Add additional information about this host.Note: Changes to this attribute will trigger a host rebuild.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="computeAttributes")
    def compute_attributes(self) -> Optional[pulumi.Input[str]]:
        """
        Hypervisor specific VM options. Must be a JSON string, as every compute provider has different attributes schema
        """
        return pulumi.get(self, "compute_attributes")

    @compute_attributes.setter
    def compute_attributes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compute_attributes", value)

    @property
    @pulumi.getter(name="computeProfileId")
    def compute_profile_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compute_profile_id")

    @compute_profile_id.setter
    def compute_profile_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute_profile_id", value)

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compute_resource_id")

    @compute_resource_id.setter
    def compute_resource_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute_resource_id", value)

    @property
    @pulumi.getter(name="configGroupIds")
    def config_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the applied config groups.
        """
        return pulumi.get(self, "config_group_ids")

    @config_group_ids.setter
    def config_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "config_group_ids", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the domain to assign to the host.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        The domain name of the host.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="enableBmc")
    def enable_bmc(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables PMI/BMC functionality. On create and update calls, having this enabled will force a host to poweroff, set next
        boot to PXE and power on. Defaults to `false`.
        """
        return pulumi.get(self, "enable_bmc")

    @enable_bmc.setter
    def enable_bmc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_bmc", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the environment to assign to the host.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Host fully qualified domain name. Read-only value to be used in variables. @EXAMPLE "compute01.dc1.company.com"
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="hostgroupId")
    def hostgroup_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the hostgroup to assign to the host.
        """
        return pulumi.get(self, "hostgroup_id")

    @hostgroup_id.setter
    def hostgroup_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hostgroup_id", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of an image to be used as base for this host when cloning
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="interfacesAttributes")
    def interfaces_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostInterfacesAttributeArgs']]]]:
        """
        Host interface information.
        """
        return pulumi.get(self, "interfaces_attributes")

    @interfaces_attributes.setter
    def interfaces_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostInterfacesAttributeArgs']]]]):
        pulumi.set(self, "interfaces_attributes", value)

    @property
    @pulumi.getter(name="managePowerOperations")
    def manage_power_operations(self) -> Optional[pulumi.Input[bool]]:
        """
        Manage power operations, e.g. power on, if host's build flag will be enabled.
        """
        return pulumi.get(self, "manage_power_operations")

    @manage_power_operations.setter
    def manage_power_operations(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_power_operations", value)

    @property
    @pulumi.getter
    def managed(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not this host is managed by Foreman. Create host only, don't set build status or manage power states.
        """
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter(name="mediumId")
    def medium_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the medium mounted on the host.
        """
        return pulumi.get(self, "medium_id")

    @medium_id.setter
    def medium_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "medium_id", value)

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the hardware model if applicable
        """
        return pulumi.get(self, "model_id")

    @model_id.setter
    def model_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "model_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of this host as stored in Foreman. Can be short name or FQDN, depending on your Foreman settings (especially the
        setting 'append_domain_name_for_hosts').
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the operating system to put on the host.
        """
        return pulumi.get(self, "operatingsystem_id")

    @operatingsystem_id.setter
    def operatingsystem_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "operatingsystem_id", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the user or usergroup that owns the host.
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="ownerType")
    def owner_type(self) -> Optional[pulumi.Input[str]]:
        """
        Owner of the host, must be either User ot Usergroup
        """
        return pulumi.get(self, "owner_type")

    @owner_type.setter
    def owner_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_type", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters that will be saved as host parameters in the machine config.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="provisionMethod")
    def provision_method(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the provision method in Foreman for this host: either network-based ('build') or image-based ('image')
        """
        return pulumi.get(self, "provision_method")

    @provision_method.setter
    def provision_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provision_method", value)

    @property
    @pulumi.getter(name="ptableId")
    def ptable_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the partition table the host should use
        """
        return pulumi.get(self, "ptable_id")

    @ptable_id.setter
    def ptable_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ptable_id", value)

    @property
    @pulumi.getter(name="puppetClassIds")
    def puppet_class_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the applied puppet classes.
        """
        return pulumi.get(self, "puppet_class_ids")

    @puppet_class_ids.setter
    def puppet_class_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "puppet_class_ids", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of times to retry on a failed attempt to register or delete a host in foreman.
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        """
        Default root password
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter(name="setBuildFlag")
    def set_build_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Sets the Foreman-internal 'build' flag on this host - even if it is already built completely.
        """
        return pulumi.get(self, "set_build_flag")

    @set_build_flag.setter
    def set_build_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_build_flag", value)

    @property
    @pulumi.getter
    def shortname(self) -> Optional[pulumi.Input[str]]:
        """
        The short name of this host. Example: when the FQDN is 'host01.example.org', then 'host01' is the short name.
        """
        return pulumi.get(self, "shortname")

    @shortname.setter
    def shortname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shortname", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the subnet the host should be placed in
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Build token. Can be used to signal to Foreman that a host build is complete.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


class Host(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture_id: Optional[pulumi.Input[int]] = None,
                 bmc_success: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 compute_attributes: Optional[pulumi.Input[str]] = None,
                 compute_profile_id: Optional[pulumi.Input[int]] = None,
                 compute_resource_id: Optional[pulumi.Input[int]] = None,
                 config_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 domain_id: Optional[pulumi.Input[int]] = None,
                 enable_bmc: Optional[pulumi.Input[bool]] = None,
                 environment_id: Optional[pulumi.Input[int]] = None,
                 hostgroup_id: Optional[pulumi.Input[int]] = None,
                 image_id: Optional[pulumi.Input[int]] = None,
                 interfaces_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HostInterfacesAttributeArgs', 'HostInterfacesAttributeArgsDict']]]]] = None,
                 manage_power_operations: Optional[pulumi.Input[bool]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 medium_id: Optional[pulumi.Input[int]] = None,
                 model_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 owner_id: Optional[pulumi.Input[int]] = None,
                 owner_type: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 provision_method: Optional[pulumi.Input[str]] = None,
                 ptable_id: Optional[pulumi.Input[int]] = None,
                 puppet_class_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 set_build_flag: Optional[pulumi.Input[bool]] = None,
                 shortname: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Host resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] architecture_id: ID of the architecture of this host
        :param pulumi.Input[str] comment: Add additional information about this host.Note: Changes to this attribute will trigger a host rebuild.
        :param pulumi.Input[str] compute_attributes: Hypervisor specific VM options. Must be a JSON string, as every compute provider has different attributes schema
        :param pulumi.Input[Sequence[pulumi.Input[int]]] config_group_ids: IDs of the applied config groups.
        :param pulumi.Input[int] domain_id: ID of the domain to assign to the host.
        :param pulumi.Input[bool] enable_bmc: Enables PMI/BMC functionality. On create and update calls, having this enabled will force a host to poweroff, set next
               boot to PXE and power on. Defaults to `false`.
        :param pulumi.Input[int] environment_id: ID of the environment to assign to the host.
        :param pulumi.Input[int] hostgroup_id: ID of the hostgroup to assign to the host.
        :param pulumi.Input[int] image_id: ID of an image to be used as base for this host when cloning
        :param pulumi.Input[Sequence[pulumi.Input[Union['HostInterfacesAttributeArgs', 'HostInterfacesAttributeArgsDict']]]] interfaces_attributes: Host interface information.
        :param pulumi.Input[bool] manage_power_operations: Manage power operations, e.g. power on, if host's build flag will be enabled.
        :param pulumi.Input[bool] managed: Whether or not this host is managed by Foreman. Create host only, don't set build status or manage power states.
        :param pulumi.Input[int] medium_id: ID of the medium mounted on the host.
        :param pulumi.Input[int] model_id: ID of the hardware model if applicable
        :param pulumi.Input[str] name: Name of this host as stored in Foreman. Can be short name or FQDN, depending on your Foreman settings (especially the
               setting 'append_domain_name_for_hosts').
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system to put on the host.
        :param pulumi.Input[int] owner_id: ID of the user or usergroup that owns the host.
        :param pulumi.Input[str] owner_type: Owner of the host, must be either User ot Usergroup
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters that will be saved as host parameters in the machine config.
        :param pulumi.Input[str] provision_method: Sets the provision method in Foreman for this host: either network-based ('build') or image-based ('image')
        :param pulumi.Input[int] ptable_id: ID of the partition table the host should use
        :param pulumi.Input[Sequence[pulumi.Input[int]]] puppet_class_ids: IDs of the applied puppet classes.
        :param pulumi.Input[int] retry_count: Number of times to retry on a failed attempt to register or delete a host in foreman.
        :param pulumi.Input[str] root_password: Default root password
        :param pulumi.Input[bool] set_build_flag: Sets the Foreman-internal 'build' flag on this host - even if it is already built completely.
        :param pulumi.Input[str] shortname: The short name of this host. Example: when the FQDN is 'host01.example.org', then 'host01' is the short name.
        :param pulumi.Input[int] subnet_id: ID of the subnet the host should be placed in
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[HostArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Host resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HostArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HostArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture_id: Optional[pulumi.Input[int]] = None,
                 bmc_success: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 compute_attributes: Optional[pulumi.Input[str]] = None,
                 compute_profile_id: Optional[pulumi.Input[int]] = None,
                 compute_resource_id: Optional[pulumi.Input[int]] = None,
                 config_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 domain_id: Optional[pulumi.Input[int]] = None,
                 enable_bmc: Optional[pulumi.Input[bool]] = None,
                 environment_id: Optional[pulumi.Input[int]] = None,
                 hostgroup_id: Optional[pulumi.Input[int]] = None,
                 image_id: Optional[pulumi.Input[int]] = None,
                 interfaces_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HostInterfacesAttributeArgs', 'HostInterfacesAttributeArgsDict']]]]] = None,
                 manage_power_operations: Optional[pulumi.Input[bool]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 medium_id: Optional[pulumi.Input[int]] = None,
                 model_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 owner_id: Optional[pulumi.Input[int]] = None,
                 owner_type: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 provision_method: Optional[pulumi.Input[str]] = None,
                 ptable_id: Optional[pulumi.Input[int]] = None,
                 puppet_class_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 set_build_flag: Optional[pulumi.Input[bool]] = None,
                 shortname: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HostArgs.__new__(HostArgs)

            __props__.__dict__["architecture_id"] = architecture_id
            __props__.__dict__["bmc_success"] = bmc_success
            __props__.__dict__["comment"] = comment
            __props__.__dict__["compute_attributes"] = compute_attributes
            __props__.__dict__["compute_profile_id"] = compute_profile_id
            __props__.__dict__["compute_resource_id"] = compute_resource_id
            __props__.__dict__["config_group_ids"] = config_group_ids
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["enable_bmc"] = enable_bmc
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["hostgroup_id"] = hostgroup_id
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["interfaces_attributes"] = interfaces_attributes
            __props__.__dict__["manage_power_operations"] = manage_power_operations
            __props__.__dict__["managed"] = managed
            __props__.__dict__["medium_id"] = medium_id
            __props__.__dict__["model_id"] = model_id
            __props__.__dict__["name"] = name
            __props__.__dict__["operatingsystem_id"] = operatingsystem_id
            __props__.__dict__["owner_id"] = owner_id
            __props__.__dict__["owner_type"] = owner_type
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["provision_method"] = provision_method
            __props__.__dict__["ptable_id"] = ptable_id
            __props__.__dict__["puppet_class_ids"] = puppet_class_ids
            __props__.__dict__["retry_count"] = retry_count
            __props__.__dict__["root_password"] = None if root_password is None else pulumi.Output.secret(root_password)
            __props__.__dict__["set_build_flag"] = set_build_flag
            __props__.__dict__["shortname"] = shortname
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["__meta_"] = None
            __props__.__dict__["domain_name"] = None
            __props__.__dict__["fqdn"] = None
            __props__.__dict__["token"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["rootPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Host, __self__).__init__(
            'foreman:index/host:Host',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            architecture_id: Optional[pulumi.Input[int]] = None,
            bmc_success: Optional[pulumi.Input[bool]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            compute_attributes: Optional[pulumi.Input[str]] = None,
            compute_profile_id: Optional[pulumi.Input[int]] = None,
            compute_resource_id: Optional[pulumi.Input[int]] = None,
            config_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            domain_id: Optional[pulumi.Input[int]] = None,
            domain_name: Optional[pulumi.Input[str]] = None,
            enable_bmc: Optional[pulumi.Input[bool]] = None,
            environment_id: Optional[pulumi.Input[int]] = None,
            fqdn: Optional[pulumi.Input[str]] = None,
            hostgroup_id: Optional[pulumi.Input[int]] = None,
            image_id: Optional[pulumi.Input[int]] = None,
            interfaces_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HostInterfacesAttributeArgs', 'HostInterfacesAttributeArgsDict']]]]] = None,
            manage_power_operations: Optional[pulumi.Input[bool]] = None,
            managed: Optional[pulumi.Input[bool]] = None,
            medium_id: Optional[pulumi.Input[int]] = None,
            model_id: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            operatingsystem_id: Optional[pulumi.Input[int]] = None,
            owner_id: Optional[pulumi.Input[int]] = None,
            owner_type: Optional[pulumi.Input[str]] = None,
            parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            provision_method: Optional[pulumi.Input[str]] = None,
            ptable_id: Optional[pulumi.Input[int]] = None,
            puppet_class_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            retry_count: Optional[pulumi.Input[int]] = None,
            root_password: Optional[pulumi.Input[str]] = None,
            set_build_flag: Optional[pulumi.Input[bool]] = None,
            shortname: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[int]] = None,
            token: Optional[pulumi.Input[str]] = None) -> 'Host':
        """
        Get an existing Host resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY A host managed by Foreman.
        :param pulumi.Input[int] architecture_id: ID of the architecture of this host
        :param pulumi.Input[str] comment: Add additional information about this host.Note: Changes to this attribute will trigger a host rebuild.
        :param pulumi.Input[str] compute_attributes: Hypervisor specific VM options. Must be a JSON string, as every compute provider has different attributes schema
        :param pulumi.Input[Sequence[pulumi.Input[int]]] config_group_ids: IDs of the applied config groups.
        :param pulumi.Input[int] domain_id: ID of the domain to assign to the host.
        :param pulumi.Input[str] domain_name: The domain name of the host.
        :param pulumi.Input[bool] enable_bmc: Enables PMI/BMC functionality. On create and update calls, having this enabled will force a host to poweroff, set next
               boot to PXE and power on. Defaults to `false`.
        :param pulumi.Input[int] environment_id: ID of the environment to assign to the host.
        :param pulumi.Input[str] fqdn: Host fully qualified domain name. Read-only value to be used in variables. @EXAMPLE "compute01.dc1.company.com"
        :param pulumi.Input[int] hostgroup_id: ID of the hostgroup to assign to the host.
        :param pulumi.Input[int] image_id: ID of an image to be used as base for this host when cloning
        :param pulumi.Input[Sequence[pulumi.Input[Union['HostInterfacesAttributeArgs', 'HostInterfacesAttributeArgsDict']]]] interfaces_attributes: Host interface information.
        :param pulumi.Input[bool] manage_power_operations: Manage power operations, e.g. power on, if host's build flag will be enabled.
        :param pulumi.Input[bool] managed: Whether or not this host is managed by Foreman. Create host only, don't set build status or manage power states.
        :param pulumi.Input[int] medium_id: ID of the medium mounted on the host.
        :param pulumi.Input[int] model_id: ID of the hardware model if applicable
        :param pulumi.Input[str] name: Name of this host as stored in Foreman. Can be short name or FQDN, depending on your Foreman settings (especially the
               setting 'append_domain_name_for_hosts').
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system to put on the host.
        :param pulumi.Input[int] owner_id: ID of the user or usergroup that owns the host.
        :param pulumi.Input[str] owner_type: Owner of the host, must be either User ot Usergroup
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters that will be saved as host parameters in the machine config.
        :param pulumi.Input[str] provision_method: Sets the provision method in Foreman for this host: either network-based ('build') or image-based ('image')
        :param pulumi.Input[int] ptable_id: ID of the partition table the host should use
        :param pulumi.Input[Sequence[pulumi.Input[int]]] puppet_class_ids: IDs of the applied puppet classes.
        :param pulumi.Input[int] retry_count: Number of times to retry on a failed attempt to register or delete a host in foreman.
        :param pulumi.Input[str] root_password: Default root password
        :param pulumi.Input[bool] set_build_flag: Sets the Foreman-internal 'build' flag on this host - even if it is already built completely.
        :param pulumi.Input[str] shortname: The short name of this host. Example: when the FQDN is 'host01.example.org', then 'host01' is the short name.
        :param pulumi.Input[int] subnet_id: ID of the subnet the host should be placed in
        :param pulumi.Input[str] token: Build token. Can be used to signal to Foreman that a host build is complete.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HostState.__new__(_HostState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["architecture_id"] = architecture_id
        __props__.__dict__["bmc_success"] = bmc_success
        __props__.__dict__["comment"] = comment
        __props__.__dict__["compute_attributes"] = compute_attributes
        __props__.__dict__["compute_profile_id"] = compute_profile_id
        __props__.__dict__["compute_resource_id"] = compute_resource_id
        __props__.__dict__["config_group_ids"] = config_group_ids
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["enable_bmc"] = enable_bmc
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["fqdn"] = fqdn
        __props__.__dict__["hostgroup_id"] = hostgroup_id
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["interfaces_attributes"] = interfaces_attributes
        __props__.__dict__["manage_power_operations"] = manage_power_operations
        __props__.__dict__["managed"] = managed
        __props__.__dict__["medium_id"] = medium_id
        __props__.__dict__["model_id"] = model_id
        __props__.__dict__["name"] = name
        __props__.__dict__["operatingsystem_id"] = operatingsystem_id
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["owner_type"] = owner_type
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["provision_method"] = provision_method
        __props__.__dict__["ptable_id"] = ptable_id
        __props__.__dict__["puppet_class_ids"] = puppet_class_ids
        __props__.__dict__["retry_count"] = retry_count
        __props__.__dict__["root_password"] = root_password
        __props__.__dict__["set_build_flag"] = set_build_flag
        __props__.__dict__["shortname"] = shortname
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["token"] = token
        return Host(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY A host managed by Foreman.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter(name="architectureId")
    def architecture_id(self) -> pulumi.Output[int]:
        """
        ID of the architecture of this host
        """
        return pulumi.get(self, "architecture_id")

    @property
    @pulumi.getter(name="bmcSuccess")
    @_utilities.deprecated("""The feature no longer exists""")
    def bmc_success(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "bmc_success")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[str]:
        """
        Add additional information about this host.Note: Changes to this attribute will trigger a host rebuild.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="computeAttributes")
    def compute_attributes(self) -> pulumi.Output[str]:
        """
        Hypervisor specific VM options. Must be a JSON string, as every compute provider has different attributes schema
        """
        return pulumi.get(self, "compute_attributes")

    @property
    @pulumi.getter(name="computeProfileId")
    def compute_profile_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "compute_profile_id")

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "compute_resource_id")

    @property
    @pulumi.getter(name="configGroupIds")
    def config_group_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        IDs of the applied config groups.
        """
        return pulumi.get(self, "config_group_ids")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[int]:
        """
        ID of the domain to assign to the host.
        """
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[str]:
        """
        The domain name of the host.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="enableBmc")
    def enable_bmc(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables PMI/BMC functionality. On create and update calls, having this enabled will force a host to poweroff, set next
        boot to PXE and power on. Defaults to `false`.
        """
        return pulumi.get(self, "enable_bmc")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[int]:
        """
        ID of the environment to assign to the host.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Output[str]:
        """
        Host fully qualified domain name. Read-only value to be used in variables. @EXAMPLE "compute01.dc1.company.com"
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="hostgroupId")
    def hostgroup_id(self) -> pulumi.Output[int]:
        """
        ID of the hostgroup to assign to the host.
        """
        return pulumi.get(self, "hostgroup_id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[int]:
        """
        ID of an image to be used as base for this host when cloning
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="interfacesAttributes")
    def interfaces_attributes(self) -> pulumi.Output[Sequence['outputs.HostInterfacesAttribute']]:
        """
        Host interface information.
        """
        return pulumi.get(self, "interfaces_attributes")

    @property
    @pulumi.getter(name="managePowerOperations")
    def manage_power_operations(self) -> pulumi.Output[Optional[bool]]:
        """
        Manage power operations, e.g. power on, if host's build flag will be enabled.
        """
        return pulumi.get(self, "manage_power_operations")

    @property
    @pulumi.getter
    def managed(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether or not this host is managed by Foreman. Create host only, don't set build status or manage power states.
        """
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter(name="mediumId")
    def medium_id(self) -> pulumi.Output[int]:
        """
        ID of the medium mounted on the host.
        """
        return pulumi.get(self, "medium_id")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> pulumi.Output[int]:
        """
        ID of the hardware model if applicable
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of this host as stored in Foreman. Can be short name or FQDN, depending on your Foreman settings (especially the
        setting 'append_domain_name_for_hosts').
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> pulumi.Output[int]:
        """
        ID of the operating system to put on the host.
        """
        return pulumi.get(self, "operatingsystem_id")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[int]:
        """
        ID of the user or usergroup that owns the host.
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="ownerType")
    def owner_type(self) -> pulumi.Output[str]:
        """
        Owner of the host, must be either User ot Usergroup
        """
        return pulumi.get(self, "owner_type")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A map of parameters that will be saved as host parameters in the machine config.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="provisionMethod")
    def provision_method(self) -> pulumi.Output[Optional[str]]:
        """
        Sets the provision method in Foreman for this host: either network-based ('build') or image-based ('image')
        """
        return pulumi.get(self, "provision_method")

    @property
    @pulumi.getter(name="ptableId")
    def ptable_id(self) -> pulumi.Output[int]:
        """
        ID of the partition table the host should use
        """
        return pulumi.get(self, "ptable_id")

    @property
    @pulumi.getter(name="puppetClassIds")
    def puppet_class_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        IDs of the applied puppet classes.
        """
        return pulumi.get(self, "puppet_class_ids")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> pulumi.Output[Optional[int]]:
        """
        Number of times to retry on a failed attempt to register or delete a host in foreman.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> pulumi.Output[Optional[str]]:
        """
        Default root password
        """
        return pulumi.get(self, "root_password")

    @property
    @pulumi.getter(name="setBuildFlag")
    def set_build_flag(self) -> pulumi.Output[Optional[bool]]:
        """
        Sets the Foreman-internal 'build' flag on this host - even if it is already built completely.
        """
        return pulumi.get(self, "set_build_flag")

    @property
    @pulumi.getter
    def shortname(self) -> pulumi.Output[str]:
        """
        The short name of this host. Example: when the FQDN is 'host01.example.org', then 'host01' is the short name.
        """
        return pulumi.get(self, "shortname")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[int]:
        """
        ID of the subnet the host should be placed in
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        """
        Build token. Can be used to signal to Foreman that a host build is complete.
        """
        return pulumi.get(self, "token")

