from typing import List, Optional, Dict, Any, Union

class GitError(Exception): ...
class GitExecutionError(GitError): ...
class GitTimeoutError(GitError): ...
class GitInvalidUrlError(GitError): ...
class GitInvalidRefNameError(GitError): ...
class GitInvalidCommitHashError(GitError): ...
class GitProviderError(GitError): ...
class GitIOError(GitError): ...

class Repository:
    def __init__(self) -> None: ...
    
    @classmethod
    def init(cls, path: str) -> "Repository": ...
    
    @classmethod
    def open(cls, path: str) -> "Repository": ...
    
    @classmethod
    def clone(cls, url: str, path: str) -> "Repository": ...
    
    def add(self, paths: List[str]) -> None: ...
    
    def commit_all(self, message: str) -> None: ...
    
    def create_branch(self, name: str) -> None: ...
    
    def list_branches(self) -> List[str]: ...
    
    def get_hash(self, short: bool = True) -> str: ...
    
    def run_command(
        self,
        command: str,
        args: List[str],
        timeout: Optional[float] = None,
        operation: Optional[str] = None
    ) -> str: ...
    
    def run_command_with_details(
        self,
        command: str,
        args: List[str],
        timeout: Optional[float] = None,
        operation: Optional[str] = None
    ) -> Dict[str, Any]: ...

__all__ = [
    "Repository",
    "GitError",
    "GitExecutionError",
    "GitTimeoutError",
    "GitInvalidUrlError",
    "GitInvalidRefNameError",
    "GitInvalidCommitHashError",
    "GitProviderError",
    "GitIOError",
] 