{"src/lib/components/Downloader.react.tsx":{"displayName":"Downloader.react","description":"Downloader is a React component based on StreamSaver.\n*\nThe StreamSaver.js project provides a customizable way to access and download\nan online stream. This is the recommended downloader for practical uses. It has\nthe optimized performance for triggering multiple downloading events.","props":{"url":{"description":"The URL used to access the data to be downloaded.\n\nEach time when this value is set, a download event will be triggered. After\ntriggering the download event, this value will be reset by a blank string.","required":false,"defaultValue":{"value":"''","computed":false},"type":{"name":"union","value":[{"name":"string","raw":"string"},{"name":"shape","value":{"url":{"description":"The URL used to access the data to be downloaded.","required":true,"name":"string","raw":"string"},"file_name_fallback":{"description":"A maunally configured file name. If this file name is configured, it will\nbe used when the file name cannot be parsed in the headers. This configuration\nis useful when the URL is from a cross-origin site.","required":true,"name":"string","raw":"string"}},"raw":"Required<InferProps<{ url: Validator<string>; file_name_fallback: Requireable<string>; }>>"}],"raw":"NonNullable<string | Required<InferProps<{ url: Validator<string>; file_name_fallback: Requireable<string>; }>>>"}},"id":{"description":"The ID used to identify this component in Dash callbacks.","required":false,"defaultValue":{"value":"PropTypes.string","computed":false},"type":{"name":"string","raw":"string"}},"headers":{"description":"The extra headers to be used when submitting the request of the downloading\nevent.\n\nThis property may need to be configured when the downloading event needs to\nadd authentication information.","required":false,"defaultValue":{"value":"PropTypes.object","computed":false},"type":{"name":"object","raw":"object"}},"allow_cross_origin":{"description":"A flag determineing whether the cross-origin downloading link can be used.\n\nIf the data to be downloaded is from a cross-domain site, need to configure this\nvalue as `True` while the remote site needs to configure the headers\nAccess-Control-Allow-Origin","required":false,"defaultValue":{"value":"false","computed":false},"type":{"name":"bool","raw":"boolean"}},"status":{"description":"The status code when a downloading event is finalized.\n\nIf multiple downloading events are triggered by the same downloader, the later\nevent will overwrite the status from the former events.","required":false,"defaultValue":{"value":"PropTypes.exact({\n    /**\n     * The status code of the event. If the event is successful, this value should\n     * be \"success\" once the downloading event is finalized.\n     */\n    code: PropTypes.oneOf([\n      \"success\",\n      \"error-connect\",\n      \"error-config\",\n      \"error-io\",\n      \"error-unknown\",\n    ]),\n\n    /**\n     * The HTTP code from the response. If the event is successful, this value should\n     * be in the range of 200-299.\n     */\n    http_code: PropTypes.number,\n  })","computed":false},"type":{"name":"shape","value":{"code":{"description":"The status code of the event. If the event is successful, this value should\nbe \"success\" once the downloading event is finalized.","required":true,"name":"string","raw":"string"},"http_code":{"description":"The HTTP code from the response. If the event is successful, this value should\nbe in the range of 200-299.","required":true,"name":"number","raw":"number"}},"raw":"Required<InferProps<{ code: Requireable<string>; http_code: Requireable<number>; }>>"}},"mitm":{"description":"The MITM-IFrame used for maintaining the status of the downloader. It prevents\nthe downloader to be closed when the broswer is idle. See details here:\nhttps://github.com/jimmywarting/StreamSaver.js/blob/master/README.md#best-practice\nIf not specified, will use the default MITM service of StreamSaver.js, which\nneeds the internet.","required":false,"defaultValue":{"value":"undefined","computed":false},"type":{"name":"string","raw":"string"}},"setProps":{"description":"Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks.","required":false,"defaultValue":{"value":"PropTypes.func","computed":false},"type":{"name":"func","raw":"(...args: any[]) => any"}},"loading_state":{"description":"Object that holds the loading state object coming from dash-renderer","required":false,"defaultValue":{"value":"PropTypes.shape({\n    /**\n     * Determines if the component is loading or not\n     */\n    is_loading: PropTypes.bool,\n    /**\n     * Holds which property is loading\n     */\n    prop_name: PropTypes.string,\n    /**\n     * Holds the name of the component that is loading\n     */\n    component_name: PropTypes.string,\n  })","computed":false},"type":{"name":"union","value":[{"name":"shape","value":{},"raw":"InferPropsInner<Pick<{ is_loading: Requireable<boolean>; prop_name: Requireable<string>; component_name: Requireable<string>; }, never>>"},{"name":"shape","value":{"is_loading":{"description":"Determines if the component is loading or not","required":false,"name":"bool","raw":"boolean"},"prop_name":{"description":"Holds which property is loading","required":false,"name":"string","raw":"string"},"component_name":{"description":"Holds the name of the component that is loading","required":false,"name":"string","raw":"string"}},"raw":"Partial<InferPropsInner<Pick<{ is_loading: Requireable<boolean>; prop_name: Requireable<string>; component_name: Requireable<string>; }, \"is_loading\" | \"prop_name\" | \"component_name\">>>"}],"raw":"InferProps<{ is_loading: Requireable<boolean>; prop_name: Requireable<string>; component_name: Requireable<string>; }>"}}},"isContext":false},"src/lib/components/PlainDownloader.react.tsx":{"displayName":"PlainDownloader.react","description":"PlainDownloader is a plain and native React component.\n*\nThis component is implemented by a temporarily created magic link referring to a\ngiven URL.\n*\nSince the implementation of this PlainDownloader is simply based on the HTML `<a>`\ntag, the request headers and authentication of this downloader is not customizable.","props":{"url":{"description":"The URL used to access the data to be downloaded.\n\nEach time when this value is set, a download event will be triggered. After\ntriggering the download event, this value will be reset by a blank string.","required":false,"defaultValue":{"value":"''","computed":false},"type":{"name":"string","raw":"string"}},"id":{"description":"The ID used to identify this component in Dash callbacks.","required":false,"defaultValue":{"value":"PropTypes.string","computed":false},"type":{"name":"string","raw":"string"}},"setProps":{"description":"Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks.","required":false,"defaultValue":{"value":"PropTypes.func","computed":false},"type":{"name":"func","raw":"(...args: any[]) => any"}},"loading_state":{"description":"Object that holds the loading state object coming from dash-renderer","required":false,"defaultValue":{"value":"PropTypes.shape({\n    /**\n     * Determines if the component is loading or not\n     */\n    is_loading: PropTypes.bool,\n    /**\n     * Holds which property is loading\n     */\n    prop_name: PropTypes.string,\n    /**\n     * Holds the name of the component that is loading\n     */\n    component_name: PropTypes.string,\n  })","computed":false},"type":{"name":"union","value":[{"name":"shape","value":{},"raw":"InferPropsInner<Pick<{ is_loading: Requireable<boolean>; prop_name: Requireable<string>; component_name: Requireable<string>; }, never>>"},{"name":"shape","value":{"is_loading":{"description":"Determines if the component is loading or not","required":false,"name":"bool","raw":"boolean"},"prop_name":{"description":"Holds which property is loading","required":false,"name":"string","raw":"string"},"component_name":{"description":"Holds the name of the component that is loading","required":false,"name":"string","raw":"string"}},"raw":"Partial<InferPropsInner<Pick<{ is_loading: Requireable<boolean>; prop_name: Requireable<string>; component_name: Requireable<string>; }, \"is_loading\" | \"prop_name\" | \"component_name\">>>"}],"raw":"InferProps<{ is_loading: Requireable<boolean>; prop_name: Requireable<string>; component_name: Requireable<string>; }>"}}},"isContext":false}}