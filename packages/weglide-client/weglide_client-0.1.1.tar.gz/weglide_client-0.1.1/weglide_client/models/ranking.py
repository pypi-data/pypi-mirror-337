# coding: utf-8

"""
    WeGlide

    Quantifying airsports

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from weglide_client.models.contest import Contest
from weglide_client.models.ranking_category import RankingCategory
from weglide_client.models.ranking_order import RankingOrder
from weglide_client.models.ranking_scoring_class import RankingScoringClass
from weglide_client.models.ranking_user import RankingUser
from typing import Optional, Set
from typing_extensions import Self

class Ranking(BaseModel):
    """
    Ranking
    """ # noqa: E501
    contest: Optional[Contest] = None
    category: Optional[RankingCategory] = None
    sc_class: Optional[RankingScoringClass] = None
    user: Optional[RankingUser] = None
    count: Optional[StrictInt] = 1
    season: Optional[StrictInt] = None
    country: Optional[StrictStr] = None
    region: Optional[StrictStr] = None
    multi_region: Optional[StrictStr] = None
    continent: Optional[StrictStr] = None
    club: Optional[StrictStr] = None
    airport: Optional[StrictStr] = None
    month: Optional[StrictStr] = None
    keyword: Optional[StrictStr] = None
    travel_min_days: Optional[StrictInt] = None
    travel_max_days: Optional[StrictInt] = None
    order_by: Optional[RankingOrder] = None
    __properties: ClassVar[List[str]] = ["contest", "category", "sc_class", "user", "count", "season", "country", "region", "multi_region", "continent", "club", "airport", "month", "keyword", "travel_min_days", "travel_max_days", "order_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Ranking from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contest
        if self.contest:
            _dict['contest'] = self.contest.to_dict()
        # set to None if season (nullable) is None
        # and model_fields_set contains the field
        if self.season is None and "season" in self.model_fields_set:
            _dict['season'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict['region'] = None

        # set to None if multi_region (nullable) is None
        # and model_fields_set contains the field
        if self.multi_region is None and "multi_region" in self.model_fields_set:
            _dict['multi_region'] = None

        # set to None if continent (nullable) is None
        # and model_fields_set contains the field
        if self.continent is None and "continent" in self.model_fields_set:
            _dict['continent'] = None

        # set to None if club (nullable) is None
        # and model_fields_set contains the field
        if self.club is None and "club" in self.model_fields_set:
            _dict['club'] = None

        # set to None if airport (nullable) is None
        # and model_fields_set contains the field
        if self.airport is None and "airport" in self.model_fields_set:
            _dict['airport'] = None

        # set to None if month (nullable) is None
        # and model_fields_set contains the field
        if self.month is None and "month" in self.model_fields_set:
            _dict['month'] = None

        # set to None if keyword (nullable) is None
        # and model_fields_set contains the field
        if self.keyword is None and "keyword" in self.model_fields_set:
            _dict['keyword'] = None

        # set to None if travel_min_days (nullable) is None
        # and model_fields_set contains the field
        if self.travel_min_days is None and "travel_min_days" in self.model_fields_set:
            _dict['travel_min_days'] = None

        # set to None if travel_max_days (nullable) is None
        # and model_fields_set contains the field
        if self.travel_max_days is None and "travel_max_days" in self.model_fields_set:
            _dict['travel_max_days'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Ranking from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contest": Contest.from_dict(obj["contest"]) if obj.get("contest") is not None else None,
            "category": obj.get("category"),
            "sc_class": obj.get("sc_class"),
            "user": obj.get("user"),
            "count": obj.get("count") if obj.get("count") is not None else 1,
            "season": obj.get("season"),
            "country": obj.get("country"),
            "region": obj.get("region"),
            "multi_region": obj.get("multi_region"),
            "continent": obj.get("continent"),
            "club": obj.get("club"),
            "airport": obj.get("airport"),
            "month": obj.get("month"),
            "keyword": obj.get("keyword"),
            "travel_min_days": obj.get("travel_min_days"),
            "travel_max_days": obj.get("travel_max_days"),
            "order_by": obj.get("order_by")
        })
        return _obj


