# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 3.16.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersonSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logic': 'str',
        'expression': 'BooleanExpression',
        'subsets': 'list[PersonSet]',
        'enabled': 'bool'
    }

    attribute_map = {
        'logic': 'logic',
        'expression': 'expression',
        'subsets': 'subsets',
        'enabled': 'enabled'
    }

    def __init__(self, logic=None, expression=None, subsets=None, enabled=None):  # noqa: E501
        """PersonSet - a model defined in Swagger"""  # noqa: E501
        self._logic = None
        self._expression = None
        self._subsets = None
        self._enabled = None
        self.discriminator = None
        if logic is not None:
            self.logic = logic
        if expression is not None:
            self.expression = expression
        if subsets is not None:
            self.subsets = subsets
        if enabled is not None:
            self.enabled = enabled

    @property
    def logic(self):
        """Gets the logic of this PersonSet.  # noqa: E501


        :return: The logic of this PersonSet.  # noqa: E501
        :rtype: str
        """
        return self._logic

    @logic.setter
    def logic(self, logic):
        """Sets the logic of this PersonSet.


        :param logic: The logic of this PersonSet.  # noqa: E501
        :type: str
        """
        allowed_values = ["and", "or", "minus", "left", "right"]  # noqa: E501
        if logic not in allowed_values:
            raise ValueError(
                "Invalid value for `logic` ({0}), must be one of {1}"  # noqa: E501
                .format(logic, allowed_values)
            )

        self._logic = logic

    @property
    def expression(self):
        """Gets the expression of this PersonSet.  # noqa: E501


        :return: The expression of this PersonSet.  # noqa: E501
        :rtype: BooleanExpression
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this PersonSet.


        :param expression: The expression of this PersonSet.  # noqa: E501
        :type: BooleanExpression
        """

        self._expression = expression

    @property
    def subsets(self):
        """Gets the subsets of this PersonSet.  # noqa: E501


        :return: The subsets of this PersonSet.  # noqa: E501
        :rtype: list[PersonSet]
        """
        return self._subsets

    @subsets.setter
    def subsets(self, subsets):
        """Sets the subsets of this PersonSet.


        :param subsets: The subsets of this PersonSet.  # noqa: E501
        :type: list[PersonSet]
        """

        self._subsets = subsets

    @property
    def enabled(self):
        """Gets the enabled of this PersonSet.  # noqa: E501


        :return: The enabled of this PersonSet.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PersonSet.


        :param enabled: The enabled of this PersonSet.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
