# ===========================================
# ðŸ“¦ Cadvas pyproject file
# ===========================================
# This file is used for 2d caddravings

# ========================================================================================
# ðŸ”¹ Build System
# ========================================================================================
[build-system]
requires = ["setuptools>=61.2",  "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
version_scheme = "post-release"
local_scheme = "node-and-date"

# === setup tools  ===
[tool.setuptools]
zip-safe = false
include-package-data = true
package-dir = {"" = "src"}
platforms = ["any"]

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests"]
namespaces = true

# ========================================================================================
# ðŸ”¹ PROJECT METADATA
# ========================================================================================
[project]
name = "cadvas"
dynamic = ["version"]
authors = [
    { name="Ruben de Bruin", email="ruben@davelab.nl" },
]
description = "Uitility for 2D cad-drawings"
readme = "README.md"
keywords = ['python']
requires-python = ">=3.10,<4.0"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

license = "LicenseRef-Proprietary"
license-files = [
    "LICENSE*",
]

# === Package Dependencies ===

dependencies = [
    "pyqtgraph>=0.13.7",
    "pyside6-essentials>=6.8.3",
]
[project.urls]
Repository = "https://github.com/dave-Lab-and-Engineering/python-build-utils"

[dependency-groups]
dev = [
    "pytest>=7.2.0",
    "pytest-cov>=6.0.0",
    "coverage[toml]>=7.6.1",
    "pytest-pretty>=1.2.0",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "mypy>=0.991",
    "ruff>=0.9.2",
    "deptry>=0.22.0",
    "coveralls>=4.0.1",
    "mkdocs>=1.4.2",
    "mkdocs-material>=8.5.10",
    "mkdocstrings[python]>=0.26.1",
    "mkdocstrings-python>=1.16.0",
]
docs = [
    "sphinx>=8.1.3",
]


# ========================================================================================
# ðŸ”¹ FORMATTING & LINTING
# ========================================================================================

[tool.deptry]
exclude = ["docs", ".venv", ".tox", ".eggs", "build", "dist", "examples"]
ignore = [
    "cadvas",
    "tests",
    "docs",
    "setup.py",
    "setup.cfg",
    "pyproject.toml",
    ".coveragerc",
    ".env",
    ".envrc",
    ".direnv",
    ".gitignore",
    ".pre-commit-config.yaml",
]

[tool.mypy]
files = ["src"]
exclude = "docs/conf.py"
ignore_missing_imports = true
disallow_untyped_defs = false
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

# === devpi  ===
[tool.devpi.upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = "1"
formats = "bdist_wheel"

# === ruff ===
[tool.ruff]
# Assume Python 3.11
target-version = "py311"
# Same as Black.
line-length = 120
indent-width = 4

# True, so that Ruff will automatically fix issues that can be fixed.
fix = true

# Exclude a variety of commonly ignored directories.
exclude = [
    ".direnv",
    ".eggs",
    ".git",
    ".mypy_cache",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    ".idea-out",
    "build",
    "dist",
    "site-packages",
    "venv",
    "resources"
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
]
extend-select = [
    "Q",
    "RUF100",
    "C90",
    "UP",
    "I",
    "D",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.flake8]
exclude = [
    ".coveragerc",
]

[tool.pylint]
ignore = [
    ".coveragerc",
]

# ========================================================================================
# ðŸ”¹ PYTEST and COVERAGE
# ========================================================================================

# === coverage  ===
[tool.coverage.run]
source = ["tests", "src"]
branch = true

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@overload",
]

# === pytest  ===
[tool.pytest.ini_options]
addopts = [
    "--cov=cadvas",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--verbose",
    "--import-mode=importlib",
    "-m", "not interactive"
]
markers = [
    "interactive: mark tests as interactive (skipped by default)",
    "gui: mark tests that launch a GUI (skipped by default)"
]
testpaths = ["tests"]
norecursedirs = [
    "dist",
    "build",
    ".tox",
]



# ========================================================================================
# ðŸ”¹ TOX
# ========================================================================================

[tool.tox]
requires = ["tox>4", "tox-uv>=1.11.3"]
isolated_build = true
# environment other then the py environment don't work yet as they are # just running pytest
# (inherit from env_run_base), in stead of overriding with the command
# as an example, only the 'fix' environment is added here, but in stead of running pre-commit
# as defined in the commands, it is just running pytest with python version 3.13 (the default)
env_list = ["py311", "fix", "dev", "type", "build"]

# === testenv to run pytest over all your environment ===
[tool.tox.env_run_base]
# this section runs the python tests using pytest, and coverage fo the python version given in your env_list
# to run one of the environments, use `tox -e py39` for example
# to run all environments, use `tox`
description = "Invoke pytest to run automated tests under {env_name} with coverage"
changedir = "{toxinidir}"
allowlist_externals = ["pytest", "uv"]
dependency_groups = ["dev"]
commands = [["pytest"]]

[tool.tox.env.build]
description = "Build the package using uv"
changedir = "{toxinidir}"
commands = [["uv",  "build"]]
allowlist_externals = ["uv"]

[tool.tox.env.fix]
runner = "uv-venv-runner"
description = "run code formatter and linter (auto-fix)"
skip_install = true
dependency_groups = ["dev"]
deps = ["pre-commit-uv >= 4.1.1"]
commands = [["pre-commit", "run", "--all-files", "--show-diff-on-failure"]]

[tool.tox.env.type]
runner = "uv-venv-lock-runner"
description = "run type checker via mypy"
dependency_groups = [
    "dev",
]
commands = [["mypy",  "{posargs:src}"]]

[tool.tox.env.dev]
runner = "uv-venv-lock-runner"
description = "dev environment"
dependency_groups = [
    "dev",
]
commands = [["uv", "pip", "tree"]]
