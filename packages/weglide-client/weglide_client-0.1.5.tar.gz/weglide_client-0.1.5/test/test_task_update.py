# coding: utf-8

"""
    WeGlide

    Quantifying airsports

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from weglide_client.models.task_update import TaskUpdate

class TestTaskUpdate(unittest.TestCase):
    """TaskUpdate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TaskUpdate:
        """Test TaskUpdate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TaskUpdate`
        """
        model = TaskUpdate()
        if include_optional:
            return TaskUpdate(
                point_features = [
                    weglide_client.models.turnpoint_feature.TurnpointFeature(
                        type = '', 
                        properties = weglide_client.models.properties.Properties(
                            name = '', 
                            radius = 1.337, 
                            kind = 'LINE', ), 
                        geometry = weglide_client.models.geo_json_point.GeoJSONPoint(
                            type = '', 
                            coordinates = [
                                null
                                ], ), )
                    ],
                name = '',
                min_time = 56,
                ruleset = 'D',
                description = '',
                private = True,
                scoring_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                scoring_airport_id = 56,
                user_group_id = 56,
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return TaskUpdate(
        )
        """

    def testTaskUpdate(self):
        """Test TaskUpdate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
