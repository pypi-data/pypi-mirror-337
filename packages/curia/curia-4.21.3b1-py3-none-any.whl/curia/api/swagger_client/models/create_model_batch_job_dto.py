# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 3.2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateModelBatchJobDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_batch_id': 'str',
        'project_id': 'str',
        'type': 'str',
        'status': 'str',
        'config': 'object',
        'analysis_job_id': 'str',
        'cohort_id': 'str',
        'partial_model_population_id': 'str'
    }

    attribute_map = {
        'model_batch_id': 'modelBatchId',
        'project_id': 'projectId',
        'type': 'type',
        'status': 'status',
        'config': 'config',
        'analysis_job_id': 'analysisJobId',
        'cohort_id': 'cohortId',
        'partial_model_population_id': 'partialModelPopulationId'
    }

    def __init__(self, model_batch_id=None, project_id=None, type=None, status=None, config=None, analysis_job_id=None, cohort_id=None, partial_model_population_id=None):  # noqa: E501
        """CreateModelBatchJobDto - a model defined in Swagger"""  # noqa: E501
        self._model_batch_id = None
        self._project_id = None
        self._type = None
        self._status = None
        self._config = None
        self._analysis_job_id = None
        self._cohort_id = None
        self._partial_model_population_id = None
        self.discriminator = None
        if model_batch_id is not None:
            self.model_batch_id = model_batch_id
        self.project_id = project_id
        self.type = type
        if status is not None:
            self.status = status
        if config is not None:
            self.config = config
        if analysis_job_id is not None:
            self.analysis_job_id = analysis_job_id
        self.cohort_id = cohort_id
        if partial_model_population_id is not None:
            self.partial_model_population_id = partial_model_population_id

    @property
    def model_batch_id(self):
        """Gets the model_batch_id of this CreateModelBatchJobDto.  # noqa: E501


        :return: The model_batch_id of this CreateModelBatchJobDto.  # noqa: E501
        :rtype: str
        """
        return self._model_batch_id

    @model_batch_id.setter
    def model_batch_id(self, model_batch_id):
        """Sets the model_batch_id of this CreateModelBatchJobDto.


        :param model_batch_id: The model_batch_id of this CreateModelBatchJobDto.  # noqa: E501
        :type: str
        """

        self._model_batch_id = model_batch_id

    @property
    def project_id(self):
        """Gets the project_id of this CreateModelBatchJobDto.  # noqa: E501


        :return: The project_id of this CreateModelBatchJobDto.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this CreateModelBatchJobDto.


        :param project_id: The project_id of this CreateModelBatchJobDto.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def type(self):
        """Gets the type of this CreateModelBatchJobDto.  # noqa: E501


        :return: The type of this CreateModelBatchJobDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateModelBatchJobDto.


        :param type: The type of this CreateModelBatchJobDto.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["train", "predict"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self):
        """Gets the status of this CreateModelBatchJobDto.  # noqa: E501


        :return: The status of this CreateModelBatchJobDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateModelBatchJobDto.


        :param status: The status of this CreateModelBatchJobDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def config(self):
        """Gets the config of this CreateModelBatchJobDto.  # noqa: E501


        :return: The config of this CreateModelBatchJobDto.  # noqa: E501
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this CreateModelBatchJobDto.


        :param config: The config of this CreateModelBatchJobDto.  # noqa: E501
        :type: object
        """

        self._config = config

    @property
    def analysis_job_id(self):
        """Gets the analysis_job_id of this CreateModelBatchJobDto.  # noqa: E501


        :return: The analysis_job_id of this CreateModelBatchJobDto.  # noqa: E501
        :rtype: str
        """
        return self._analysis_job_id

    @analysis_job_id.setter
    def analysis_job_id(self, analysis_job_id):
        """Sets the analysis_job_id of this CreateModelBatchJobDto.


        :param analysis_job_id: The analysis_job_id of this CreateModelBatchJobDto.  # noqa: E501
        :type: str
        """

        self._analysis_job_id = analysis_job_id

    @property
    def cohort_id(self):
        """Gets the cohort_id of this CreateModelBatchJobDto.  # noqa: E501


        :return: The cohort_id of this CreateModelBatchJobDto.  # noqa: E501
        :rtype: str
        """
        return self._cohort_id

    @cohort_id.setter
    def cohort_id(self, cohort_id):
        """Sets the cohort_id of this CreateModelBatchJobDto.


        :param cohort_id: The cohort_id of this CreateModelBatchJobDto.  # noqa: E501
        :type: str
        """
        if cohort_id is None:
            raise ValueError("Invalid value for `cohort_id`, must not be `None`")  # noqa: E501

        self._cohort_id = cohort_id

    @property
    def partial_model_population_id(self):
        """Gets the partial_model_population_id of this CreateModelBatchJobDto.  # noqa: E501


        :return: The partial_model_population_id of this CreateModelBatchJobDto.  # noqa: E501
        :rtype: str
        """
        return self._partial_model_population_id

    @partial_model_population_id.setter
    def partial_model_population_id(self, partial_model_population_id):
        """Sets the partial_model_population_id of this CreateModelBatchJobDto.


        :param partial_model_population_id: The partial_model_population_id of this CreateModelBatchJobDto.  # noqa: E501
        :type: str
        """

        self._partial_model_population_id = partial_model_population_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateModelBatchJobDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateModelBatchJobDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
