# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from ...types.general_agent_request import GeneralAgentRequest
from ...core.request_options import RequestOptions
from ...types.general_agent_response import GeneralAgentResponse
from ...core.serialization import convert_and_respect_annotation_metadata
from ...core.pydantic_utilities import parse_obj_as
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GeneralClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def batch(
        self, *, request: typing.Sequence[GeneralAgentRequest], request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[GeneralAgentResponse]:
        """
        Coming soon! Call the general agent with batched requests and return the results.

        Parameters
        ----------
        request : typing.Sequence[GeneralAgentRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[GeneralAgentResponse]
            Successful Response

        Examples
        --------
        from athena import Athena, GeneralAgentConfig, GeneralAgentRequest

        client = Athena(
            api_key="YOUR_API_KEY",
        )
        client.agents.general.batch(
            request=[
                GeneralAgentRequest(
                    config=GeneralAgentConfig(
                        enabled_tools=["search"],
                    ),
                    messages=[
                        {
                            "content": "Please call the search tool for AAPL news.",
                            "type": "user",
                        }
                    ],
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v0/agents/general/batch",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[GeneralAgentRequest], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[GeneralAgentResponse],
                    parse_obj_as(
                        type_=typing.List[GeneralAgentResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def invoke(
        self, *, request: GeneralAgentRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralAgentResponse:
        """
        Call the general Athena agent synchronously.

        Call the agent with the messages list, wait for the agent to complete,
        and return the result.

        Parameters
        ----------
        request : GeneralAgentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralAgentResponse
            Successful Response

        Examples
        --------
        from athena import Athena, GeneralAgentConfig, GeneralAgentRequest

        client = Athena(
            api_key="YOUR_API_KEY",
        )
        client.agents.general.invoke(
            request=GeneralAgentRequest(
                config=GeneralAgentConfig(
                    enabled_tools=["search"],
                ),
                messages=[
                    {
                        "content": "Please call the search tool for AAPL news.",
                        "type": "user",
                    }
                ],
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v0/agents/general/invoke",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=GeneralAgentRequest, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralAgentResponse,
                    parse_obj_as(
                        type_=GeneralAgentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def stream_events(
        self, *, request: GeneralAgentRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralAgentResponse:
        """
        Coming soon! Call the general agent and stream events for real-time chat applications.

        Parameters
        ----------
        request : GeneralAgentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralAgentResponse
            Successful Response

        Examples
        --------
        from athena import Athena, GeneralAgentConfig, GeneralAgentRequest

        client = Athena(
            api_key="YOUR_API_KEY",
        )
        client.agents.general.stream_events(
            request=GeneralAgentRequest(
                config=GeneralAgentConfig(
                    enabled_tools=["search"],
                ),
                messages=[
                    {
                        "content": "Please call the search tool for AAPL news.",
                        "type": "user",
                    }
                ],
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v0/agents/general/stream_events",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=GeneralAgentRequest, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralAgentResponse,
                    parse_obj_as(
                        type_=GeneralAgentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncGeneralClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def batch(
        self, *, request: typing.Sequence[GeneralAgentRequest], request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[GeneralAgentResponse]:
        """
        Coming soon! Call the general agent with batched requests and return the results.

        Parameters
        ----------
        request : typing.Sequence[GeneralAgentRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[GeneralAgentResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from athena import AsyncAthena, GeneralAgentConfig, GeneralAgentRequest

        client = AsyncAthena(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.agents.general.batch(
                request=[
                    GeneralAgentRequest(
                        config=GeneralAgentConfig(
                            enabled_tools=["search"],
                        ),
                        messages=[
                            {
                                "content": "Please call the search tool for AAPL news.",
                                "type": "user",
                            }
                        ],
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v0/agents/general/batch",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[GeneralAgentRequest], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[GeneralAgentResponse],
                    parse_obj_as(
                        type_=typing.List[GeneralAgentResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def invoke(
        self, *, request: GeneralAgentRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralAgentResponse:
        """
        Call the general Athena agent synchronously.

        Call the agent with the messages list, wait for the agent to complete,
        and return the result.

        Parameters
        ----------
        request : GeneralAgentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralAgentResponse
            Successful Response

        Examples
        --------
        import asyncio

        from athena import AsyncAthena, GeneralAgentConfig, GeneralAgentRequest

        client = AsyncAthena(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.agents.general.invoke(
                request=GeneralAgentRequest(
                    config=GeneralAgentConfig(
                        enabled_tools=["search"],
                    ),
                    messages=[
                        {
                            "content": "Please call the search tool for AAPL news.",
                            "type": "user",
                        }
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v0/agents/general/invoke",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=GeneralAgentRequest, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralAgentResponse,
                    parse_obj_as(
                        type_=GeneralAgentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def stream_events(
        self, *, request: GeneralAgentRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneralAgentResponse:
        """
        Coming soon! Call the general agent and stream events for real-time chat applications.

        Parameters
        ----------
        request : GeneralAgentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneralAgentResponse
            Successful Response

        Examples
        --------
        import asyncio

        from athena import AsyncAthena, GeneralAgentConfig, GeneralAgentRequest

        client = AsyncAthena(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.agents.general.stream_events(
                request=GeneralAgentRequest(
                    config=GeneralAgentConfig(
                        enabled_tools=["search"],
                    ),
                    messages=[
                        {
                            "content": "Please call the search tool for AAPL news.",
                            "type": "user",
                        }
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v0/agents/general/stream_events",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=GeneralAgentRequest, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GeneralAgentResponse,
                    parse_obj_as(
                        type_=GeneralAgentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
