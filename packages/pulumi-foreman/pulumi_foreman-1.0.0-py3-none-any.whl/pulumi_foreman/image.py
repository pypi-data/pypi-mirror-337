# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ImageArgs', 'Image']

@pulumi.input_type
class ImageArgs:
    def __init__(__self__, *,
                 architecture_id: pulumi.Input[int],
                 compute_resource_id: pulumi.Input[int],
                 operatingsystem_id: pulumi.Input[int],
                 username: pulumi.Input[str],
                 uuid: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Image resource.
        :param pulumi.Input[int] architecture_id: ID of the architecture in Foreman
        :param pulumi.Input[int] compute_resource_id: ID of the compute resource in Foreman
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system in Foreman
        :param pulumi.Input[str] username: Username used to log into the newly created machine that is based on this image
        :param pulumi.Input[str] uuid: UUID of the image from the compute resource
        :param pulumi.Input[str] name: Name of the image to be used in Foreman
        :param pulumi.Input[bool] user_data: Does the image support user data (cloud-init etc.)?
        """
        pulumi.set(__self__, "architecture_id", architecture_id)
        pulumi.set(__self__, "compute_resource_id", compute_resource_id)
        pulumi.set(__self__, "operatingsystem_id", operatingsystem_id)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "uuid", uuid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="architectureId")
    def architecture_id(self) -> pulumi.Input[int]:
        """
        ID of the architecture in Foreman
        """
        return pulumi.get(self, "architecture_id")

    @architecture_id.setter
    def architecture_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "architecture_id", value)

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> pulumi.Input[int]:
        """
        ID of the compute resource in Foreman
        """
        return pulumi.get(self, "compute_resource_id")

    @compute_resource_id.setter
    def compute_resource_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "compute_resource_id", value)

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> pulumi.Input[int]:
        """
        ID of the operating system in Foreman
        """
        return pulumi.get(self, "operatingsystem_id")

    @operatingsystem_id.setter
    def operatingsystem_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "operatingsystem_id", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Username used to log into the newly created machine that is based on this image
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Input[str]:
        """
        UUID of the image from the compute resource
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the image to be used in Foreman
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[bool]]:
        """
        Does the image support user data (cloud-init etc.)?
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class _ImageState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 architecture_id: Optional[pulumi.Input[int]] = None,
                 compute_resource_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 user_data: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Image resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY Foreman representation of image.
        :param pulumi.Input[int] architecture_id: ID of the architecture in Foreman
        :param pulumi.Input[int] compute_resource_id: ID of the compute resource in Foreman
        :param pulumi.Input[str] name: Name of the image to be used in Foreman
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system in Foreman
        :param pulumi.Input[bool] user_data: Does the image support user data (cloud-init etc.)?
        :param pulumi.Input[str] username: Username used to log into the newly created machine that is based on this image
        :param pulumi.Input[str] uuid: UUID of the image from the compute resource
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if architecture_id is not None:
            pulumi.set(__self__, "architecture_id", architecture_id)
        if compute_resource_id is not None:
            pulumi.set(__self__, "compute_resource_id", compute_resource_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operatingsystem_id is not None:
            pulumi.set(__self__, "operatingsystem_id", operatingsystem_id)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY Foreman representation of image.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter(name="architectureId")
    def architecture_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the architecture in Foreman
        """
        return pulumi.get(self, "architecture_id")

    @architecture_id.setter
    def architecture_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "architecture_id", value)

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the compute resource in Foreman
        """
        return pulumi.get(self, "compute_resource_id")

    @compute_resource_id.setter
    def compute_resource_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute_resource_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the image to be used in Foreman
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the operating system in Foreman
        """
        return pulumi.get(self, "operatingsystem_id")

    @operatingsystem_id.setter
    def operatingsystem_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "operatingsystem_id", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[bool]]:
        """
        Does the image support user data (cloud-init etc.)?
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username used to log into the newly created machine that is based on this image
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        UUID of the image from the compute resource
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class Image(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture_id: Optional[pulumi.Input[int]] = None,
                 compute_resource_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 user_data: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Image resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] architecture_id: ID of the architecture in Foreman
        :param pulumi.Input[int] compute_resource_id: ID of the compute resource in Foreman
        :param pulumi.Input[str] name: Name of the image to be used in Foreman
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system in Foreman
        :param pulumi.Input[bool] user_data: Does the image support user data (cloud-init etc.)?
        :param pulumi.Input[str] username: Username used to log into the newly created machine that is based on this image
        :param pulumi.Input[str] uuid: UUID of the image from the compute resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Image resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture_id: Optional[pulumi.Input[int]] = None,
                 compute_resource_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 user_data: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageArgs.__new__(ImageArgs)

            if architecture_id is None and not opts.urn:
                raise TypeError("Missing required property 'architecture_id'")
            __props__.__dict__["architecture_id"] = architecture_id
            if compute_resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'compute_resource_id'")
            __props__.__dict__["compute_resource_id"] = compute_resource_id
            __props__.__dict__["name"] = name
            if operatingsystem_id is None and not opts.urn:
                raise TypeError("Missing required property 'operatingsystem_id'")
            __props__.__dict__["operatingsystem_id"] = operatingsystem_id
            __props__.__dict__["user_data"] = user_data
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            if uuid is None and not opts.urn:
                raise TypeError("Missing required property 'uuid'")
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["__meta_"] = None
        super(Image, __self__).__init__(
            'foreman:index/image:Image',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            architecture_id: Optional[pulumi.Input[int]] = None,
            compute_resource_id: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            operatingsystem_id: Optional[pulumi.Input[int]] = None,
            user_data: Optional[pulumi.Input[bool]] = None,
            username: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'Image':
        """
        Get an existing Image resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY Foreman representation of image.
        :param pulumi.Input[int] architecture_id: ID of the architecture in Foreman
        :param pulumi.Input[int] compute_resource_id: ID of the compute resource in Foreman
        :param pulumi.Input[str] name: Name of the image to be used in Foreman
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system in Foreman
        :param pulumi.Input[bool] user_data: Does the image support user data (cloud-init etc.)?
        :param pulumi.Input[str] username: Username used to log into the newly created machine that is based on this image
        :param pulumi.Input[str] uuid: UUID of the image from the compute resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageState.__new__(_ImageState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["architecture_id"] = architecture_id
        __props__.__dict__["compute_resource_id"] = compute_resource_id
        __props__.__dict__["name"] = name
        __props__.__dict__["operatingsystem_id"] = operatingsystem_id
        __props__.__dict__["user_data"] = user_data
        __props__.__dict__["username"] = username
        __props__.__dict__["uuid"] = uuid
        return Image(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY Foreman representation of image.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter(name="architectureId")
    def architecture_id(self) -> pulumi.Output[int]:
        """
        ID of the architecture in Foreman
        """
        return pulumi.get(self, "architecture_id")

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> pulumi.Output[int]:
        """
        ID of the compute resource in Foreman
        """
        return pulumi.get(self, "compute_resource_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the image to be used in Foreman
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> pulumi.Output[int]:
        """
        ID of the operating system in Foreman
        """
        return pulumi.get(self, "operatingsystem_id")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[bool]]:
        """
        Does the image support user data (cloud-init etc.)?
        """
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Username used to log into the newly created machine that is based on this image
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        UUID of the image from the compute resource
        """
        return pulumi.get(self, "uuid")

