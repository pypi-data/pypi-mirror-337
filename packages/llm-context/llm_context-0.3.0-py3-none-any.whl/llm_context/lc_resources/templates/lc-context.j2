{% include 'lc-prompt.j2' %}
{% if project_notes %}
{{ project_notes }}
{% endif %}
# Detailed Repository Content: **{{ project_name }}**

**COMPLETE PROJECT CONTEXT PROVIDED - NO NEED TO REQUEST ADDITIONAL CONTEXT**

> Generation timestamp: {{ context_timestamp }}  
> For updates: Use lc-list-modified-files first to identify changes, then lc-get-files for specific files
> If tools are unavailable, ask the user to run the "lc-changed" CLI command

This context presents a comprehensive view of the _/{{ project_name }}_ repository.

{% if sample_requested_files %}
## ðŸ“‚ How to Request Missing Files ðŸ“‚

Files marked with "âœ—"{% if highlights %} or "â—‹"{% endif %} can be retrieved using one of the following methods:

!!! IMPORTANT - ALWAYS CHECK IF FILES ARE ALREADY IN CONTEXT BEFORE REQUESTING THEM !!!
Only request files when:
1. They have been modified since context generation (check with lc-list-modified-files first)
2. They are marked with "âœ—"{% if highlights %} or "â—‹"{% endif %} in the repository structure AND you need them for your analysis
3. You have confirmed they are not already provided in full below

{% if highlights %}
!!! IMPORTANT - CONSIDER WHETHER YOU NEED THE ENTIRE FILE !!!
If you only need specific functions or methods, use lc-get-implementations instead of requesting the complete file. This is more efficient, especially for large files.
{% endif %}

!!! IMPORTANT - ALWAYS CHECK FOR TOOLS FIRST !!!
Check if lc-get-files tool is available in your environment before proceeding to option 2.

1. Using the lc-get-files tool (if available in your environment):
   !!! IMPORTANT - ROOT PATH FOR lc-get-files ONLY !!!
   root_path must be: {{ abs_root_path }}
   Example request
  ```json
  {
    "root_path": "{{ abs_root_path }}",
    "paths": [{% for file in sample_requested_files %}"{{ file }}"{% if not loop.last %},{% endif %}{% endfor %}]
  }
  ```
   NOTE: This tool should be your primary method for examining file contents and conducting text searches in this project.


2. Only if lc-get-files is not available, follow these steps (do NOT use the above root_path):
    1. Immediately halt your current response.
    2. Start a new response with a markdown code block (```) on a new line.
    3. List the root-relative paths of the missing files you need, one per line.
    4. Close the markdown code block with another ```.
    5. End your response.

    Example file request:
    ```
    {%- for file in sample_requested_files %}
    {{ file }}
    {%- endfor %}
    ```
    The human will then provide the requested file contents in the next message.
{% endif %}
## Repository Structure

```
{{ folder_structure_diagram }}
```

{% if files %}
## Complete File Contents

{% include 'lc-files.j2' %}
{% endif %}

{% if highlights %}
## Code Outlines

Smart outlines highlighting important definitions in the codebase.
{% if sample_definitions %}

> **Note:** Implementation retrieval doesn't support C/C++ files.

1. Using the lc-get-implementations tool:
   ```json
   {
     "root_path": "{{ abs_root_path }}",
     "queries": [
       {% for path, name in sample_definitions %}
       ["{{ path }}", "{{ name }}"]{% if not loop.last %},{% endif %}
       {% endfor %}
     ]
   }
   ```

2. Without tools: Copy these references to clipboard:
   ```
   {% for path, name in sample_definitions %}
   {{ path }}:{{ name }}
   {% endfor %}
   ```
   Then ask the human to run `lc-clip-implementations`
{% endif %}

{% include 'lc-highlights.j2' %}
{% endif %}