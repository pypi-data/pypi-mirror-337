# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProvisioningtemplateArgs', 'Provisioningtemplate']

@pulumi.input_type
class ProvisioningtemplateArgs:
    def __init__(__self__, *,
                 template: pulumi.Input[str],
                 audit_comment: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 snippet: Optional[pulumi.Input[bool]] = None,
                 template_combinations_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['ProvisioningtemplateTemplateCombinationsAttributeArgs']]]] = None,
                 template_kind_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Provisioningtemplate resource.
        :param pulumi.Input[str] template: The markup and code of the provisioning template. @EXAMPLE "void"
        :param pulumi.Input[str] audit_comment: Notes and comments for auditing purposes.
        :param pulumi.Input[str] description: A description of the provisioning template.
        :param pulumi.Input[bool] locked: Whether or not the template is locked for editing.
        :param pulumi.Input[str] name: Name of the provisioning template. @EXAMPLE "AutoYaST default"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] operatingsystem_ids: IDs of the operating systems associated with this provisioning template.
        :param pulumi.Input[bool] snippet: Whether or not the provisioning template is a snippet be used by other templates.
        :param pulumi.Input[Sequence[pulumi.Input['ProvisioningtemplateTemplateCombinationsAttributeArgs']]] template_combinations_attributes: How templates are determined: When editing a template, you must assign a list of operating systems which this template
               can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
               requests a template, Foreman will select the best match from the available templates of that type in the following
               order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
               combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
               provisioning template selection described above.
        :param pulumi.Input[int] template_kind_id: ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
        """
        pulumi.set(__self__, "template", template)
        if audit_comment is not None:
            pulumi.set(__self__, "audit_comment", audit_comment)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operatingsystem_ids is not None:
            pulumi.set(__self__, "operatingsystem_ids", operatingsystem_ids)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)
        if template_combinations_attributes is not None:
            pulumi.set(__self__, "template_combinations_attributes", template_combinations_attributes)
        if template_kind_id is not None:
            pulumi.set(__self__, "template_kind_id", template_kind_id)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input[str]:
        """
        The markup and code of the provisioning template. @EXAMPLE "void"
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input[str]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="auditComment")
    def audit_comment(self) -> Optional[pulumi.Input[str]]:
        """
        Notes and comments for auditing purposes.
        """
        return pulumi.get(self, "audit_comment")

    @audit_comment.setter
    def audit_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_comment", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the provisioning template.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the template is locked for editing.
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the provisioning template. @EXAMPLE "AutoYaST default"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingsystemIds")
    def operatingsystem_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the operating systems associated with this provisioning template.
        """
        return pulumi.get(self, "operatingsystem_ids")

    @operatingsystem_ids.setter
    def operatingsystem_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "operatingsystem_ids", value)

    @property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the provisioning template is a snippet be used by other templates.
        """
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snippet", value)

    @property
    @pulumi.getter(name="templateCombinationsAttributes")
    def template_combinations_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProvisioningtemplateTemplateCombinationsAttributeArgs']]]]:
        """
        How templates are determined: When editing a template, you must assign a list of operating systems which this template
        can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
        requests a template, Foreman will select the best match from the available templates of that type in the following
        order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
        combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
        provisioning template selection described above.
        """
        return pulumi.get(self, "template_combinations_attributes")

    @template_combinations_attributes.setter
    def template_combinations_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProvisioningtemplateTemplateCombinationsAttributeArgs']]]]):
        pulumi.set(self, "template_combinations_attributes", value)

    @property
    @pulumi.getter(name="templateKindId")
    def template_kind_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
        """
        return pulumi.get(self, "template_kind_id")

    @template_kind_id.setter
    def template_kind_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "template_kind_id", value)


@pulumi.input_type
class _ProvisioningtemplateState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 audit_comment: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 snippet: Optional[pulumi.Input[bool]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 template_combinations_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['ProvisioningtemplateTemplateCombinationsAttributeArgs']]]] = None,
                 template_kind_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Provisioningtemplate resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY Provisioning templates are scripts used to describe how to bootstrap and install the operating system on the
               host.
        :param pulumi.Input[str] audit_comment: Notes and comments for auditing purposes.
        :param pulumi.Input[str] description: A description of the provisioning template.
        :param pulumi.Input[bool] locked: Whether or not the template is locked for editing.
        :param pulumi.Input[str] name: Name of the provisioning template. @EXAMPLE "AutoYaST default"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] operatingsystem_ids: IDs of the operating systems associated with this provisioning template.
        :param pulumi.Input[bool] snippet: Whether or not the provisioning template is a snippet be used by other templates.
        :param pulumi.Input[str] template: The markup and code of the provisioning template. @EXAMPLE "void"
        :param pulumi.Input[Sequence[pulumi.Input['ProvisioningtemplateTemplateCombinationsAttributeArgs']]] template_combinations_attributes: How templates are determined: When editing a template, you must assign a list of operating systems which this template
               can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
               requests a template, Foreman will select the best match from the available templates of that type in the following
               order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
               combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
               provisioning template selection described above.
        :param pulumi.Input[int] template_kind_id: ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if audit_comment is not None:
            pulumi.set(__self__, "audit_comment", audit_comment)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operatingsystem_ids is not None:
            pulumi.set(__self__, "operatingsystem_ids", operatingsystem_ids)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_combinations_attributes is not None:
            pulumi.set(__self__, "template_combinations_attributes", template_combinations_attributes)
        if template_kind_id is not None:
            pulumi.set(__self__, "template_kind_id", template_kind_id)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY Provisioning templates are scripts used to describe how to bootstrap and install the operating system on the
        host.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter(name="auditComment")
    def audit_comment(self) -> Optional[pulumi.Input[str]]:
        """
        Notes and comments for auditing purposes.
        """
        return pulumi.get(self, "audit_comment")

    @audit_comment.setter
    def audit_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_comment", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the provisioning template.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the template is locked for editing.
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the provisioning template. @EXAMPLE "AutoYaST default"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingsystemIds")
    def operatingsystem_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the operating systems associated with this provisioning template.
        """
        return pulumi.get(self, "operatingsystem_ids")

    @operatingsystem_ids.setter
    def operatingsystem_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "operatingsystem_ids", value)

    @property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the provisioning template is a snippet be used by other templates.
        """
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snippet", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        """
        The markup and code of the provisioning template. @EXAMPLE "void"
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="templateCombinationsAttributes")
    def template_combinations_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProvisioningtemplateTemplateCombinationsAttributeArgs']]]]:
        """
        How templates are determined: When editing a template, you must assign a list of operating systems which this template
        can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
        requests a template, Foreman will select the best match from the available templates of that type in the following
        order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
        combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
        provisioning template selection described above.
        """
        return pulumi.get(self, "template_combinations_attributes")

    @template_combinations_attributes.setter
    def template_combinations_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProvisioningtemplateTemplateCombinationsAttributeArgs']]]]):
        pulumi.set(self, "template_combinations_attributes", value)

    @property
    @pulumi.getter(name="templateKindId")
    def template_kind_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
        """
        return pulumi.get(self, "template_kind_id")

    @template_kind_id.setter
    def template_kind_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "template_kind_id", value)


class Provisioningtemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit_comment: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 snippet: Optional[pulumi.Input[bool]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 template_combinations_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProvisioningtemplateTemplateCombinationsAttributeArgs', 'ProvisioningtemplateTemplateCombinationsAttributeArgsDict']]]]] = None,
                 template_kind_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Provisioningtemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] audit_comment: Notes and comments for auditing purposes.
        :param pulumi.Input[str] description: A description of the provisioning template.
        :param pulumi.Input[bool] locked: Whether or not the template is locked for editing.
        :param pulumi.Input[str] name: Name of the provisioning template. @EXAMPLE "AutoYaST default"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] operatingsystem_ids: IDs of the operating systems associated with this provisioning template.
        :param pulumi.Input[bool] snippet: Whether or not the provisioning template is a snippet be used by other templates.
        :param pulumi.Input[str] template: The markup and code of the provisioning template. @EXAMPLE "void"
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProvisioningtemplateTemplateCombinationsAttributeArgs', 'ProvisioningtemplateTemplateCombinationsAttributeArgsDict']]]] template_combinations_attributes: How templates are determined: When editing a template, you must assign a list of operating systems which this template
               can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
               requests a template, Foreman will select the best match from the available templates of that type in the following
               order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
               combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
               provisioning template selection described above.
        :param pulumi.Input[int] template_kind_id: ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProvisioningtemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Provisioningtemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProvisioningtemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProvisioningtemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit_comment: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 snippet: Optional[pulumi.Input[bool]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 template_combinations_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProvisioningtemplateTemplateCombinationsAttributeArgs', 'ProvisioningtemplateTemplateCombinationsAttributeArgsDict']]]]] = None,
                 template_kind_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProvisioningtemplateArgs.__new__(ProvisioningtemplateArgs)

            __props__.__dict__["audit_comment"] = audit_comment
            __props__.__dict__["description"] = description
            __props__.__dict__["locked"] = locked
            __props__.__dict__["name"] = name
            __props__.__dict__["operatingsystem_ids"] = operatingsystem_ids
            __props__.__dict__["snippet"] = snippet
            if template is None and not opts.urn:
                raise TypeError("Missing required property 'template'")
            __props__.__dict__["template"] = template
            __props__.__dict__["template_combinations_attributes"] = template_combinations_attributes
            __props__.__dict__["template_kind_id"] = template_kind_id
            __props__.__dict__["__meta_"] = None
        super(Provisioningtemplate, __self__).__init__(
            'foreman:index/provisioningtemplate:Provisioningtemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            audit_comment: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            locked: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            operatingsystem_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            snippet: Optional[pulumi.Input[bool]] = None,
            template: Optional[pulumi.Input[str]] = None,
            template_combinations_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProvisioningtemplateTemplateCombinationsAttributeArgs', 'ProvisioningtemplateTemplateCombinationsAttributeArgsDict']]]]] = None,
            template_kind_id: Optional[pulumi.Input[int]] = None) -> 'Provisioningtemplate':
        """
        Get an existing Provisioningtemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY Provisioning templates are scripts used to describe how to bootstrap and install the operating system on the
               host.
        :param pulumi.Input[str] audit_comment: Notes and comments for auditing purposes.
        :param pulumi.Input[str] description: A description of the provisioning template.
        :param pulumi.Input[bool] locked: Whether or not the template is locked for editing.
        :param pulumi.Input[str] name: Name of the provisioning template. @EXAMPLE "AutoYaST default"
        :param pulumi.Input[Sequence[pulumi.Input[int]]] operatingsystem_ids: IDs of the operating systems associated with this provisioning template.
        :param pulumi.Input[bool] snippet: Whether or not the provisioning template is a snippet be used by other templates.
        :param pulumi.Input[str] template: The markup and code of the provisioning template. @EXAMPLE "void"
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProvisioningtemplateTemplateCombinationsAttributeArgs', 'ProvisioningtemplateTemplateCombinationsAttributeArgsDict']]]] template_combinations_attributes: How templates are determined: When editing a template, you must assign a list of operating systems which this template
               can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
               requests a template, Foreman will select the best match from the available templates of that type in the following
               order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
               combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
               provisioning template selection described above.
        :param pulumi.Input[int] template_kind_id: ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProvisioningtemplateState.__new__(_ProvisioningtemplateState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["audit_comment"] = audit_comment
        __props__.__dict__["description"] = description
        __props__.__dict__["locked"] = locked
        __props__.__dict__["name"] = name
        __props__.__dict__["operatingsystem_ids"] = operatingsystem_ids
        __props__.__dict__["snippet"] = snippet
        __props__.__dict__["template"] = template
        __props__.__dict__["template_combinations_attributes"] = template_combinations_attributes
        __props__.__dict__["template_kind_id"] = template_kind_id
        return Provisioningtemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY Provisioning templates are scripts used to describe how to bootstrap and install the operating system on the
        host.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter(name="auditComment")
    def audit_comment(self) -> pulumi.Output[Optional[str]]:
        """
        Notes and comments for auditing purposes.
        """
        return pulumi.get(self, "audit_comment")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A description of the provisioning template.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether or not the template is locked for editing.
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the provisioning template. @EXAMPLE "AutoYaST default"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingsystemIds")
    def operatingsystem_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        IDs of the operating systems associated with this provisioning template.
        """
        return pulumi.get(self, "operatingsystem_ids")

    @property
    @pulumi.getter
    def snippet(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether or not the provisioning template is a snippet be used by other templates.
        """
        return pulumi.get(self, "snippet")

    @property
    @pulumi.getter
    def template(self) -> pulumi.Output[str]:
        """
        The markup and code of the provisioning template. @EXAMPLE "void"
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="templateCombinationsAttributes")
    def template_combinations_attributes(self) -> pulumi.Output[Optional[Sequence['outputs.ProvisioningtemplateTemplateCombinationsAttribute']]]:
        """
        How templates are determined: When editing a template, you must assign a list of operating systems which this template
        can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
        requests a template, Foreman will select the best match from the available templates of that type in the following
        order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
        combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
        provisioning template selection described above.
        """
        return pulumi.get(self, "template_combinations_attributes")

    @property
    @pulumi.getter(name="templateKindId")
    def template_kind_id(self) -> pulumi.Output[Optional[int]]:
        """
        ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
        """
        return pulumi.get(self, "template_kind_id")

