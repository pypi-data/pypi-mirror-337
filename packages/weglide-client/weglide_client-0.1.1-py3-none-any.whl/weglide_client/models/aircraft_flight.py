# coding: utf-8

"""
    WeGlide

    Quantifying airsports

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AircraftFlight(BaseModel):
    """
    AircraftFlight
    """ # noqa: E501
    id: StrictInt
    name: StrictStr
    wingarea: Optional[Union[StrictFloat, StrictInt]] = None
    double_seater: StrictBool
    kind: StrictStr
    sc_class: StrictStr
    encoded_coeffs: Optional[List[Union[StrictFloat, StrictInt]]] = None
    min_speed_m_s: Optional[Union[StrictFloat, StrictInt]] = None
    reference_mass: Optional[StrictInt] = None
    empty_mass: Optional[StrictInt] = None
    mtow: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "name", "wingarea", "double_seater", "kind", "sc_class", "encoded_coeffs", "min_speed_m_s", "reference_mass", "empty_mass", "mtow"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AircraftFlight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if wingarea (nullable) is None
        # and model_fields_set contains the field
        if self.wingarea is None and "wingarea" in self.model_fields_set:
            _dict['wingarea'] = None

        # set to None if encoded_coeffs (nullable) is None
        # and model_fields_set contains the field
        if self.encoded_coeffs is None and "encoded_coeffs" in self.model_fields_set:
            _dict['encoded_coeffs'] = None

        # set to None if min_speed_m_s (nullable) is None
        # and model_fields_set contains the field
        if self.min_speed_m_s is None and "min_speed_m_s" in self.model_fields_set:
            _dict['min_speed_m_s'] = None

        # set to None if reference_mass (nullable) is None
        # and model_fields_set contains the field
        if self.reference_mass is None and "reference_mass" in self.model_fields_set:
            _dict['reference_mass'] = None

        # set to None if empty_mass (nullable) is None
        # and model_fields_set contains the field
        if self.empty_mass is None and "empty_mass" in self.model_fields_set:
            _dict['empty_mass'] = None

        # set to None if mtow (nullable) is None
        # and model_fields_set contains the field
        if self.mtow is None and "mtow" in self.model_fields_set:
            _dict['mtow'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AircraftFlight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "wingarea": obj.get("wingarea"),
            "double_seater": obj.get("double_seater"),
            "kind": obj.get("kind"),
            "sc_class": obj.get("sc_class"),
            "encoded_coeffs": obj.get("encoded_coeffs"),
            "min_speed_m_s": obj.get("min_speed_m_s"),
            "reference_mass": obj.get("reference_mass"),
            "empty_mass": obj.get("empty_mass"),
            "mtow": obj.get("mtow")
        })
        return _obj


