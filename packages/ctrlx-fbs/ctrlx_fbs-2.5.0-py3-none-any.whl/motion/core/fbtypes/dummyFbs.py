# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# dummy flatbuffer for tests
class dummyFbs(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dummyFbs()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdummyFbs(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dummyFbs
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dummyFbs
    def DummyByte(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # dummyFbs
    def DummyByte2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # dummyFbs
    def DummyByte3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # dummyFbs
    def DummyByte4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # dummyFbs
    def DummyStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dummyFbs
    def DummyInt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dummyFbs
    def DummyDouble(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # dummyFbs
    def DummyDoublePtr(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # dummyFbs
    def DummyDoublePtrAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # dummyFbs
    def DummyDoublePtrLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dummyFbs
    def DummyDoublePtrIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def dummyFbsStart(builder): builder.StartObject(8)
def Start(builder):
    return dummyFbsStart(builder)
def dummyFbsAddDummyByte(builder, dummyByte): builder.PrependInt8Slot(0, dummyByte, 0)
def AddDummyByte(builder, dummyByte):
    return dummyFbsAddDummyByte(builder, dummyByte)
def dummyFbsAddDummyByte2(builder, dummyByte2): builder.PrependInt8Slot(1, dummyByte2, 0)
def AddDummyByte2(builder, dummyByte2):
    return dummyFbsAddDummyByte2(builder, dummyByte2)
def dummyFbsAddDummyByte3(builder, dummyByte3): builder.PrependInt8Slot(2, dummyByte3, 0)
def AddDummyByte3(builder, dummyByte3):
    return dummyFbsAddDummyByte3(builder, dummyByte3)
def dummyFbsAddDummyByte4(builder, dummyByte4): builder.PrependInt8Slot(3, dummyByte4, 0)
def AddDummyByte4(builder, dummyByte4):
    return dummyFbsAddDummyByte4(builder, dummyByte4)
def dummyFbsAddDummyStr(builder, dummyStr): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dummyStr), 0)
def AddDummyStr(builder, dummyStr):
    return dummyFbsAddDummyStr(builder, dummyStr)
def dummyFbsAddDummyInt(builder, dummyInt): builder.PrependInt32Slot(5, dummyInt, 0)
def AddDummyInt(builder, dummyInt):
    return dummyFbsAddDummyInt(builder, dummyInt)
def dummyFbsAddDummyDouble(builder, dummyDouble): builder.PrependFloat64Slot(6, dummyDouble, 0.0)
def AddDummyDouble(builder, dummyDouble):
    return dummyFbsAddDummyDouble(builder, dummyDouble)
def dummyFbsAddDummyDoublePtr(builder, dummyDoublePtr): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(dummyDoublePtr), 0)
def AddDummyDoublePtr(builder, dummyDoublePtr):
    return dummyFbsAddDummyDoublePtr(builder, dummyDoublePtr)
def dummyFbsStartDummyDoublePtrVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartDummyDoublePtrVector(builder, numElems):
    return dummyFbsStartDummyDoublePtrVector(builder, numElems)
def dummyFbsEnd(builder): return builder.EndObject()
def End(builder):
    return dummyFbsEnd(builder)
try:
    from typing import List
except:
    pass

class dummyFbsT(object):

    # dummyFbsT
    def __init__(self):
        self.dummyByte = 0  # type: int
        self.dummyByte2 = 0  # type: int
        self.dummyByte3 = 0  # type: int
        self.dummyByte4 = 0  # type: int
        self.dummyStr = None  # type: str
        self.dummyInt = 0  # type: int
        self.dummyDouble = 0.0  # type: float
        self.dummyDoublePtr = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dummyFbs = dummyFbs()
        dummyFbs.Init(buf, pos)
        return cls.InitFromObj(dummyFbs)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dummyFbs):
        x = dummyFbsT()
        x._UnPack(dummyFbs)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dummyByte == other.dummyByte and \
            self.dummyByte2 == other.dummyByte2 and \
            self.dummyByte3 == other.dummyByte3 and \
            self.dummyByte4 == other.dummyByte4 and \
            self.dummyStr == other.dummyStr and \
            self.dummyInt == other.dummyInt and \
            self.dummyDouble == other.dummyDouble and \
            self.dummyDoublePtr == other.dummyDoublePtr

    # dummyFbsT
    def _UnPack(self, dummyFbs):
        if dummyFbs is None:
            return
        self.dummyByte = dummyFbs.DummyByte()
        self.dummyByte2 = dummyFbs.DummyByte2()
        self.dummyByte3 = dummyFbs.DummyByte3()
        self.dummyByte4 = dummyFbs.DummyByte4()
        self.dummyStr = dummyFbs.DummyStr()
        self.dummyInt = dummyFbs.DummyInt()
        self.dummyDouble = dummyFbs.DummyDouble()
        if not dummyFbs.DummyDoublePtrIsNone():
            if np is None:
                self.dummyDoublePtr = []
                for i in range(dummyFbs.DummyDoublePtrLength()):
                    self.dummyDoublePtr.append(dummyFbs.DummyDoublePtr(i))
            else:
                self.dummyDoublePtr = dummyFbs.DummyDoublePtrAsNumpy()

    # dummyFbsT
    def Pack(self, builder):
        if self.dummyStr is not None:
            dummyStr = builder.CreateString(self.dummyStr)
        if self.dummyDoublePtr is not None:
            if np is not None and type(self.dummyDoublePtr) is np.ndarray:
                dummyDoublePtr = builder.CreateNumpyVector(self.dummyDoublePtr)
            else:
                dummyFbsStartDummyDoublePtrVector(builder, len(self.dummyDoublePtr))
                for i in reversed(range(len(self.dummyDoublePtr))):
                    builder.PrependFloat64(self.dummyDoublePtr[i])
                dummyDoublePtr = builder.EndVector()
        dummyFbsStart(builder)
        dummyFbsAddDummyByte(builder, self.dummyByte)
        dummyFbsAddDummyByte2(builder, self.dummyByte2)
        dummyFbsAddDummyByte3(builder, self.dummyByte3)
        dummyFbsAddDummyByte4(builder, self.dummyByte4)
        if self.dummyStr is not None:
            dummyFbsAddDummyStr(builder, dummyStr)
        dummyFbsAddDummyInt(builder, self.dummyInt)
        dummyFbsAddDummyDouble(builder, self.dummyDouble)
        if self.dummyDoublePtr is not None:
            dummyFbsAddDummyDoublePtr(builder, dummyDoublePtr)
        dummyFbs = dummyFbsEnd(builder)
        return dummyFbs
