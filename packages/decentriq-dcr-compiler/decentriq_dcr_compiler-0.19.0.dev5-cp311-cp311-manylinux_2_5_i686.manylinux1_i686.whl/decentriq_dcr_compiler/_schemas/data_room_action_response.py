# generated by datamodel-codegen:
#   filename:  data_room_action_response.json

from __future__ import annotations

from enum import Enum
from typing import Any, Mapping, Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class Kind(Enum):
    BASE = 'BASE'


class AudienceReference7(BaseModel):
    kind: Kind


class Kind14(Enum):
    CUSTOM = 'CUSTOM'


class AudienceReference8(BaseModel):
    id: str
    kind: Kind14


class Kind15(Enum):
    SEED = 'SEED'


class AudienceReference9(BaseModel):
    audienceType: str
    kind: Kind15


class AudienceReference(
    RootModel[Union[AudienceReference7, AudienceReference8, AudienceReference9]]
):
    root: Union[AudienceReference7, AudienceReference8, AudienceReference9]


class BooleanOp(Enum):
    AND = 'AND'
    OR = 'OR'


class CombineOperator(Enum):
    INTERSECT = 'INTERSECT'
    UNION = 'UNION'
    DIFF = 'DIFF'


class Kind16(Enum):
    LOOKALIKE = 'LOOKALIKE'


class CustomAudienceDefinition6(BaseModel):
    excludeSeedAudience: Optional[bool] = None
    kind: Kind16
    reach: conint(ge=0)
    sourceRef: AudienceReference


class Kind17(Enum):
    RULE_BASED = 'RULE_BASED'


class FilterOperator(Enum):
    CONTAINS_ANY_OF = 'CONTAINS_ANY_OF'
    CONTAINS_NONE_OF = 'CONTAINS_NONE_OF'
    CONTAINS_ALL_OF = 'CONTAINS_ALL_OF'
    EMPTY = 'EMPTY'
    NOT_EMPTY = 'NOT_EMPTY'


class MediaDcrActionResponse1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    provisionBaseAudiencePolicyIds: Mapping[str, Any]


class MediaDcrActionResponse2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deprovisionBaseAudiencePolicyIds: Mapping[str, Any]


class MediaDcrActionResponse3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    provisionSeedAudiencePolicyIds: Mapping[str, Any]


class MediaDcrActionResponse4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deprovisionSeedAudiencePolicyIds: Mapping[str, Any]


class DeleteCustomAudience(BaseModel):
    numDeletedAudiences: conint(ge=0)


class MediaDcrActionResponse6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deleteCustomAudience: DeleteCustomAudience


class AudienceFilter(BaseModel):
    attribute: str
    operator: FilterOperator
    values: Optional[Sequence[str]] = None


class AudienceFilters(BaseModel):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class AudienceCombinator(BaseModel):
    filters: Optional[AudienceFilters] = None
    operator: CombineOperator
    sourceRef: AudienceReference


class CustomAudienceDefinition7(BaseModel):
    combine: Optional[Sequence[AudienceCombinator]] = None
    filters: Optional[AudienceFilters] = None
    kind: Kind17
    sourceRef: AudienceReference


class CustomAudienceDefinition(
    RootModel[Union[CustomAudienceDefinition6, CustomAudienceDefinition7]]
):
    root: Union[CustomAudienceDefinition6, CustomAudienceDefinition7]


class CustomAudience(BaseModel):
    createdAt: str
    createdBy: str
    definition: CustomAudienceDefinition
    doesAudienceDependOnLookalikeAudience: Optional[bool] = False
    id: str
    isStale: Optional[bool] = Field(
        False,
        description='Whether this audience cannot be generated with the current data provisioned to the MDCR. NOTE: This is added here so that the types we generate are correct. This value can only be set in the Python computation get_audiences that has access to the actual data.',
    )
    name: str
    sharedWith: Optional[Sequence[str]] = []


class DeleteCustomAudiences(BaseModel):
    conflictingAudiences: Sequence[CustomAudience]


class MediaDcrActionResponse5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deleteCustomAudiences: DeleteCustomAudiences


class GetAudiencePrerequisites(BaseModel):
    audiences: Sequence[CustomAudience]


class MediaDcrActionResponse7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    getAudiencePrerequisites: GetAudiencePrerequisites


class CreateCustomAudience(BaseModel):
    audience: CustomAudience


class MediaDcrActionResponse8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createCustomAudience: CreateCustomAudience


class UpdateCustomAudience(BaseModel):
    audience: Optional[CustomAudience] = None


class MediaDcrActionResponse9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    updateCustomAudience: UpdateCustomAudience


class MediaDcrActionResponse(
    RootModel[
        Union[
            MediaDcrActionResponse1,
            MediaDcrActionResponse2,
            MediaDcrActionResponse3,
            MediaDcrActionResponse4,
            MediaDcrActionResponse5,
            MediaDcrActionResponse6,
            MediaDcrActionResponse7,
            MediaDcrActionResponse8,
            MediaDcrActionResponse9,
        ]
    ]
):
    root: Union[
        MediaDcrActionResponse1,
        MediaDcrActionResponse2,
        MediaDcrActionResponse3,
        MediaDcrActionResponse4,
        MediaDcrActionResponse5,
        MediaDcrActionResponse6,
        MediaDcrActionResponse7,
        MediaDcrActionResponse8,
        MediaDcrActionResponse9,
    ]


class DataRoomActionResponse1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    media: MediaDcrActionResponse


class DataRoomActionResponse(RootModel[DataRoomActionResponse1]):
    root: DataRoomActionResponse1 = Field(..., title='DataRoomActionResponse')
