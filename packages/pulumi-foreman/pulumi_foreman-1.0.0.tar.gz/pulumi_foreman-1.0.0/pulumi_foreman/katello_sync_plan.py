# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['KatelloSyncPlanArgs', 'KatelloSyncPlan']

@pulumi.input_type
class KatelloSyncPlanArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 interval: pulumi.Input[str],
                 sync_date: pulumi.Input[str],
                 cron_expression: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a KatelloSyncPlan resource.
        :param pulumi.Input[bool] enabled: Enables or disables synchronization.@EXAMPLE true
        :param pulumi.Input[str] interval: How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
               "daily"
        :param pulumi.Input[str] sync_date: Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
               difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
        :param pulumi.Input[str] cron_expression: Custom cron logic for sync plan.@EXAMPLE "*/5 * * * *"
        :param pulumi.Input[str] description: Sync plan description.@EXAMPLE "A sync plan description"
        :param pulumi.Input[str] name: Sync plan name.@EXAMPLE "daily"
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "sync_date", sync_date)
        if cron_expression is not None:
            pulumi.set(__self__, "cron_expression", cron_expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enables or disables synchronization.@EXAMPLE true
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Input[str]:
        """
        How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
        "daily"
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[str]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="syncDate")
    def sync_date(self) -> pulumi.Input[str]:
        """
        Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
        difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
        """
        return pulumi.get(self, "sync_date")

    @sync_date.setter
    def sync_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "sync_date", value)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> Optional[pulumi.Input[str]]:
        """
        Custom cron logic for sync plan.@EXAMPLE "*/5 * * * *"
        """
        return pulumi.get(self, "cron_expression")

    @cron_expression.setter
    def cron_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cron_expression", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Sync plan description.@EXAMPLE "A sync plan description"
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Sync plan name.@EXAMPLE "daily"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _KatelloSyncPlanState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 cron_expression: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sync_date: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering KatelloSyncPlan resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY A sync plan is used to schedule a synchronization of a product in katello
        :param pulumi.Input[str] cron_expression: Custom cron logic for sync plan.@EXAMPLE "*/5 * * * *"
        :param pulumi.Input[str] description: Sync plan description.@EXAMPLE "A sync plan description"
        :param pulumi.Input[bool] enabled: Enables or disables synchronization.@EXAMPLE true
        :param pulumi.Input[str] interval: How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
               "daily"
        :param pulumi.Input[str] name: Sync plan name.@EXAMPLE "daily"
        :param pulumi.Input[str] sync_date: Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
               difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if cron_expression is not None:
            pulumi.set(__self__, "cron_expression", cron_expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sync_date is not None:
            pulumi.set(__self__, "sync_date", sync_date)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY A sync plan is used to schedule a synchronization of a product in katello
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> Optional[pulumi.Input[str]]:
        """
        Custom cron logic for sync plan.@EXAMPLE "*/5 * * * *"
        """
        return pulumi.get(self, "cron_expression")

    @cron_expression.setter
    def cron_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cron_expression", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Sync plan description.@EXAMPLE "A sync plan description"
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables synchronization.@EXAMPLE true
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        """
        How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
        "daily"
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Sync plan name.@EXAMPLE "daily"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="syncDate")
    def sync_date(self) -> Optional[pulumi.Input[str]]:
        """
        Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
        difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
        """
        return pulumi.get(self, "sync_date")

    @sync_date.setter
    def sync_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_date", value)


class KatelloSyncPlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cron_expression: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sync_date: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a KatelloSyncPlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cron_expression: Custom cron logic for sync plan.@EXAMPLE "*/5 * * * *"
        :param pulumi.Input[str] description: Sync plan description.@EXAMPLE "A sync plan description"
        :param pulumi.Input[bool] enabled: Enables or disables synchronization.@EXAMPLE true
        :param pulumi.Input[str] interval: How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
               "daily"
        :param pulumi.Input[str] name: Sync plan name.@EXAMPLE "daily"
        :param pulumi.Input[str] sync_date: Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
               difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KatelloSyncPlanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a KatelloSyncPlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KatelloSyncPlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KatelloSyncPlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cron_expression: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sync_date: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KatelloSyncPlanArgs.__new__(KatelloSyncPlanArgs)

            __props__.__dict__["cron_expression"] = cron_expression
            __props__.__dict__["description"] = description
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if interval is None and not opts.urn:
                raise TypeError("Missing required property 'interval'")
            __props__.__dict__["interval"] = interval
            __props__.__dict__["name"] = name
            if sync_date is None and not opts.urn:
                raise TypeError("Missing required property 'sync_date'")
            __props__.__dict__["sync_date"] = sync_date
            __props__.__dict__["__meta_"] = None
        super(KatelloSyncPlan, __self__).__init__(
            'foreman:index/katelloSyncPlan:KatelloSyncPlan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            cron_expression: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            interval: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            sync_date: Optional[pulumi.Input[str]] = None) -> 'KatelloSyncPlan':
        """
        Get an existing KatelloSyncPlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY A sync plan is used to schedule a synchronization of a product in katello
        :param pulumi.Input[str] cron_expression: Custom cron logic for sync plan.@EXAMPLE "*/5 * * * *"
        :param pulumi.Input[str] description: Sync plan description.@EXAMPLE "A sync plan description"
        :param pulumi.Input[bool] enabled: Enables or disables synchronization.@EXAMPLE true
        :param pulumi.Input[str] interval: How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
               "daily"
        :param pulumi.Input[str] name: Sync plan name.@EXAMPLE "daily"
        :param pulumi.Input[str] sync_date: Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
               difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KatelloSyncPlanState.__new__(_KatelloSyncPlanState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["cron_expression"] = cron_expression
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["interval"] = interval
        __props__.__dict__["name"] = name
        __props__.__dict__["sync_date"] = sync_date
        return KatelloSyncPlan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY A sync plan is used to schedule a synchronization of a product in katello
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> pulumi.Output[Optional[str]]:
        """
        Custom cron logic for sync plan.@EXAMPLE "*/5 * * * *"
        """
        return pulumi.get(self, "cron_expression")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Sync plan description.@EXAMPLE "A sync plan description"
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Enables or disables synchronization.@EXAMPLE true
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[str]:
        """
        How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
        "daily"
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Sync plan name.@EXAMPLE "daily"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="syncDate")
    def sync_date(self) -> pulumi.Output[str]:
        """
        Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
        difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
        """
        return pulumi.get(self, "sync_date")

