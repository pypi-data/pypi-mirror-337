"use strict";(self.webpackChunkpyquibbler_labextension=self.webpackChunkpyquibbler_labextension||[]).push([[667],{667:(e,n,o)=>{o.r(n),o.d(n,{default:()=>p});var t=o(824),a=o(215),r=o.n(a),s=o(760),i=o.n(s);const l=e=>{r().fire({icon:"error",title:"Oops...",text:e})},c=e=>{const n=e.shell.widgets("main");let o=n.next();for(;o;){if(o.sessionContext&&"notebook"===o.sessionContext.type&&o.isVisible)return o;o=n.next()}return null};var u=o(684),d=o(422);class b{constructor(e,n){this.label=e,this.callback=n,this.button=new d.ToolbarButton}createNew(e){const n=new d.ToolbarButton({label:this.label,onClick:this.callback});return e.toolbar.insertItem(10,this.label,n),n.enabled=!1,this.button=n,n}}var g=o(231);let h=!0;const m=()=>h,p={id:"quibbler:plugin",autoStart:!0,requires:[t.INotebookTracker,u.IDocumentManager],activate:(e,n,o)=>{console.log("Starting quibbler plugin...");const{commands:t}=e,a=new Map,s=new b("Undo",(()=>v("undo",{}))),u=new b("Redo",(()=>v("redo",{})));e.docRegistry.addWidgetExtension("Notebook",u),e.docRegistry.addWidgetExtension("Notebook",s);const d=(e,n)=>{var t;e.content.model.metadata.set("quibs_archive",n),null===(t=o.contextForWidget(e))||void 0===t||t.save()},p=e=>{var n,o;const t=null===(n=e.sessionContext.session)||void 0===n?void 0:n.kernel;if(Window.pyquibblerKernel=null===(o=e.sessionContext.session)||void 0===o?void 0:o.kernel,null==t)throw new Error("No kernel exists for panel");return a.has(t.id)||a.set(t.id,((e,n,o,t,a)=>{let s=null,l=null;n.statusChanged.connect(((e,n)=>{"terminating"!==n&&"restarting"!==n&&"autorestarting"!==n||c().request("cleanup",{})}));const c=()=>{if(null==l)throw new Error("Jupyter is not connected with pyquibbler.  Run `initialize_quibbler(jupyterlab_extension=True)` to connect.");return l},u=()=>{if(null===s)throw new Error("No comm available yet!");l=(e=>{const n=new Map,o=new Map,t=e=>{n.delete(e),o.delete(e)};return{request:(t,a)=>{console.log("Sending action",t);const r=(0,g.v4)();return new Promise(((s,i)=>{n.set(r,s),o.set(r,i);const l=n.size>1?100:0;setTimeout((()=>{try{e.send({action:t,parameters:a,requestId:r})}catch(e){throw console.log("Failed with error",e),new Error(`Cannot send ${t} - is pyquibbler running? (You need to run \`initialize_quibbler\`)`)}}),l)}))},handleSuccessResponse:(e,o)=>{console.log("Resolving",e,n),n.has(e)&&n.get(e)(o),t(e)},handleErrorResponse:(e,a)=>{n.has(e)&&o.get(e)(a),t(e)},cancelPendingRequests:()=>{n.clear(),o.clear()}}})(s),s.onMsg=n=>{const s=n.content.data;console.log("Received message",s);const l=s.type,u=s.data;switch(l){case"dialog":d=u,r().fire(d);break;case"requestDialog":(async(e,n,o,t)=>{let a="";Object.keys(o).forEach((e=>{a+=e+": "+o[e]+"\n"}));const{value:s}=await r().fire({title:e,input:"text",inputLabel:`${n}\n${a}`,inputValue:o,showCancelButton:!1,icon:"warning",inputPlaceholder:"Choose a number (e.g. 1) from the options",allowOutsideClick:!1,inputValidator:e=>{if(!(e in o))return"You must choose from the given options"}});await i().post(`http://localhost:${t}/answer`,{option:s})})(u.title,u.message,u.options,u.port);break;case"quibsArchiveUpdate":a(e,u);break;case"setUndoRedoButtons":o.button.enabled="True"==u.undoEnabled,t.button.enabled="True"==u.redoEnabled;break;case"response":c().handleSuccessResponse(s.requestId,u);break;case"error":c().handleErrorResponse(s.requestId,u)}var d;return new Promise((e=>e()))}};return(async()=>{const e=(await n.requestCommInfo({target_name:"pyquibbler"})).content.comms,o=Object.keys(e).find((n=>"pyquibbler"===e[n].target_name));console.log("Registering comm target for pyquibbler"),n.registerCommTarget("pyquibbler",(e=>{s=e,console.log("Callback: registering comm"),u()})),o&&(console.log("Found existing comm id, recreating and reregistering"),s=n.createComm("pyquibbler",o),u())})(),{runAction:(e,n)=>c().request(e,n)}})(e,t,s,u,d)),a.get(t.id)},v=async(n,o,t)=>{let a;console.log("Running",n),t=!1!==t;try{a=p(c(e))}catch(e){if(t)return void l(e);throw e}try{await a.runAction(n,o)}catch(e){if(t)return void l(e);throw e}};[{command:"save",label:"Save Quibs",action:"save"},{command:"load",label:"Load Quibs",action:"load"},{command:"sync",label:"Sync Quibs",action:"sync"}].map((({command:n,action:a,label:r})=>{t.addCommand(`quibbler:${n}`,{label:r,execute:n=>{var t;const r=c(e);null!=r?null===(t=o.contextForWidget(r))||void 0===t||t.save().then((()=>{v(a,{})})):l("There is no open notebook!")}})})),t.addCommand("quibbler:save-in-notebook",{label:"Save/Load inside Notebook",execute:e=>{var n;n=!m(),h=n;for(let e of a.values())e.runAction("setShouldSaveLoadWithinNotebook",{should_save_load_within_notebook:m()})},isToggled:()=>m()}),t.addCommand("quibbler:clear-data",{label:"Clear Quib Data in Notebook",execute:n=>{var t;const a=c(e);null!=a?(d(a,null),null===(t=o.contextForWidget(a))||void 0===t||t.save().then((()=>{v("clearData",{},!1).catch((e=>{console.log(`Not sending clear data to server, because of error ${e}`)}))}))):l("There is no open notebook!")}}),n.widgetAdded.connect(((e,n)=>{n.sessionContext.ready.then((()=>{console.log("Session context ready- preparing session..."),p(n)})),n.sessionContext.sessionChanged.connect(((e,n)=>{e.kernelChanged.connect(((e,n)=>{null===n.newValue&&a.delete(n.oldValue.id)}))}))}))}}}}]);