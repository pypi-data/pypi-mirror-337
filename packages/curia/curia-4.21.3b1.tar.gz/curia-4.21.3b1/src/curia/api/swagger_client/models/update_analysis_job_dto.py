# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 3.2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateAnalysisJobDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analysis_id': 'str',
        'type': 'str',
        'project_id': 'str',
        'execution_id': 'str',
        'status': 'str',
        'config': 'AnalysisJobConfig',
        'started_at': 'datetime',
        'ended_at': 'datetime'
    }

    attribute_map = {
        'analysis_id': 'analysisId',
        'type': 'type',
        'project_id': 'projectId',
        'execution_id': 'executionId',
        'status': 'status',
        'config': 'config',
        'started_at': 'startedAt',
        'ended_at': 'endedAt'
    }

    def __init__(self, analysis_id=None, type=None, project_id=None, execution_id=None, status=None, config=None, started_at=None, ended_at=None):  # noqa: E501
        """UpdateAnalysisJobDto - a model defined in Swagger"""  # noqa: E501
        self._analysis_id = None
        self._type = None
        self._project_id = None
        self._execution_id = None
        self._status = None
        self._config = None
        self._started_at = None
        self._ended_at = None
        self.discriminator = None
        if analysis_id is not None:
            self.analysis_id = analysis_id
        if type is not None:
            self.type = type
        if project_id is not None:
            self.project_id = project_id
        if execution_id is not None:
            self.execution_id = execution_id
        if status is not None:
            self.status = status
        if config is not None:
            self.config = config
        if started_at is not None:
            self.started_at = started_at
        if ended_at is not None:
            self.ended_at = ended_at

    @property
    def analysis_id(self):
        """Gets the analysis_id of this UpdateAnalysisJobDto.  # noqa: E501


        :return: The analysis_id of this UpdateAnalysisJobDto.  # noqa: E501
        :rtype: str
        """
        return self._analysis_id

    @analysis_id.setter
    def analysis_id(self, analysis_id):
        """Sets the analysis_id of this UpdateAnalysisJobDto.


        :param analysis_id: The analysis_id of this UpdateAnalysisJobDto.  # noqa: E501
        :type: str
        """

        self._analysis_id = analysis_id

    @property
    def type(self):
        """Gets the type of this UpdateAnalysisJobDto.  # noqa: E501


        :return: The type of this UpdateAnalysisJobDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateAnalysisJobDto.


        :param type: The type of this UpdateAnalysisJobDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["train", "predict"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def project_id(self):
        """Gets the project_id of this UpdateAnalysisJobDto.  # noqa: E501


        :return: The project_id of this UpdateAnalysisJobDto.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this UpdateAnalysisJobDto.


        :param project_id: The project_id of this UpdateAnalysisJobDto.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def execution_id(self):
        """Gets the execution_id of this UpdateAnalysisJobDto.  # noqa: E501


        :return: The execution_id of this UpdateAnalysisJobDto.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this UpdateAnalysisJobDto.


        :param execution_id: The execution_id of this UpdateAnalysisJobDto.  # noqa: E501
        :type: str
        """

        self._execution_id = execution_id

    @property
    def status(self):
        """Gets the status of this UpdateAnalysisJobDto.  # noqa: E501


        :return: The status of this UpdateAnalysisJobDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateAnalysisJobDto.


        :param status: The status of this UpdateAnalysisJobDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def config(self):
        """Gets the config of this UpdateAnalysisJobDto.  # noqa: E501


        :return: The config of this UpdateAnalysisJobDto.  # noqa: E501
        :rtype: AnalysisJobConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this UpdateAnalysisJobDto.


        :param config: The config of this UpdateAnalysisJobDto.  # noqa: E501
        :type: AnalysisJobConfig
        """

        self._config = config

    @property
    def started_at(self):
        """Gets the started_at of this UpdateAnalysisJobDto.  # noqa: E501


        :return: The started_at of this UpdateAnalysisJobDto.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this UpdateAnalysisJobDto.


        :param started_at: The started_at of this UpdateAnalysisJobDto.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def ended_at(self):
        """Gets the ended_at of this UpdateAnalysisJobDto.  # noqa: E501


        :return: The ended_at of this UpdateAnalysisJobDto.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this UpdateAnalysisJobDto.


        :param ended_at: The ended_at of this UpdateAnalysisJobDto.  # noqa: E501
        :type: datetime
        """

        self._ended_at = ended_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateAnalysisJobDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAnalysisJobDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
