Metadata-Version: 2.3
Name: zipline-arrow
Version: 3.2.1
Summary: A Pythonic backtester for trading algorithms
License: Apache-2.0
Keywords: backtester,trading,algorithms,finance
Author: Quantopian Inc
Author-email: pm@ml4trading.io
Maintainer: Jim White
Maintainer-email: jim@fovi.com
Requires-Python: >=3.10,<4
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Office/Business :: Financial :: Investment
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Topic :: System :: Distributed Computing
Provides-Extra: dev
Provides-Extra: docs
Provides-Extra: test
Requires-Dist: alembic (>=0.7.7)
Requires-Dist: bcolz-zipline (>=1.2.6)
Requires-Dist: black (>=24.0b1) ; extra == "dev"
Requires-Dist: bottleneck (>=1.0.0)
Requires-Dist: click (>=4.0.0)
Requires-Dist: click ; extra == "test"
Requires-Dist: coverage ; extra == "test"
Requires-Dist: cython (>=0.29.21) ; extra == "dev"
Requires-Dist: cython ; extra == "docs"
Requires-Dist: empyrical-reloaded (>=0.5.7)
Requires-Dist: exchange-calendars (>=4.10)
Requires-Dist: flake8 (>=3.9.1) ; extra == "dev"
Requires-Dist: flake8 (>=3.9.1) ; extra == "test"
Requires-Dist: h5py (>=2.7.1)
Requires-Dist: intervaltree (>=2.1.0)
Requires-Dist: iso3166 (>=2.1.1)
Requires-Dist: iso4217 (>=1.6.20180829)
Requires-Dist: lru-dict (>=1.1.4)
Requires-Dist: m2r2 ; extra == "docs"
Requires-Dist: matplotlib (>=1.5.3) ; extra == "test"
Requires-Dist: multipledispatch (>=0.6.0)
Requires-Dist: networkx (>=2.0)
Requires-Dist: numexpr (>=2.6.1)
Requires-Dist: numpy (>=1.23.5) ; python_version < "3.12"
Requires-Dist: numpy (>=1.26.0) ; python_version >= "3.12"
Requires-Dist: numpydoc (>=0.5.0) ; extra == "docs"
Requires-Dist: pandas (>=1.3.0,<3.0)
Requires-Dist: pandas-datareader (>=0.2.1) ; extra == "test"
Requires-Dist: parameterized (>=0.6.1) ; extra == "test"
Requires-Dist: patsy (>=0.4.0)
Requires-Dist: pre-commit (>=2.12.1) ; extra == "dev"
Requires-Dist: pydata-sphinx-theme ; extra == "docs"
Requires-Dist: pytest (>=7.2.0) ; extra == "test"
Requires-Dist: pytest-cov (>=3.0.0) ; extra == "test"
Requires-Dist: pytest-rerunfailures ; extra == "test"
Requires-Dist: pytest-timeout (>=1.4.2) ; extra == "test"
Requires-Dist: pytest-xdist (>=2.5.0) ; extra == "test"
Requires-Dist: python-dateutil (>=2.4.2)
Requires-Dist: python-interface (>=1.5.3)
Requires-Dist: pytz (>=2018.5)
Requires-Dist: requests (>=2.9.1)
Requires-Dist: responses (>=0.9.0) ; extra == "test"
Requires-Dist: ruff ; extra == "dev"
Requires-Dist: scipy (>=0.17.1)
Requires-Dist: six (>=1.10.0)
Requires-Dist: sphinx (>=1.3.2) ; extra == "docs"
Requires-Dist: sphinx-autobuild (>=0.6.0) ; extra == "docs"
Requires-Dist: sphinx_markdown_tables ; extra == "docs"
Requires-Dist: sqlalchemy (>=2)
Requires-Dist: statsmodels (>=0.6.1)
Requires-Dist: tables (>=3.4.3)
Requires-Dist: testfixtures (>=4.1.2) ; extra == "test"
Requires-Dist: toolz (>=0.8.2)
Requires-Dist: tox ; extra == "test"
Project-URL: Documentation, https://wiki3.ai/zipline-arrow/
Project-URL: Homepage, https://github.com/fovi-llc/zipline-arrow
Project-URL: Repository, https://github.com/fovi-llc/zipline-arrow
Description-Content-Type: text/markdown

<p align="center">
<a href="https://zipline.ml4trading.io">
<img src="https://i.imgur.com/DDetr8I.png" width="25%">
</a>
</p>

# Backtest your Trading Strategies

| Version Info        | [![Python](https://img.shields.io/pypi/pyversions/zipline-reloaded.svg?cacheSeconds=2592000)](https://pypi.python.org/pypi/zipline-reloaded) [![Anaconda-Server Badge](https://anaconda.org/ml4t/zipline-reloaded/badges/platforms.svg)](https://anaconda.org/ml4t/zipline-reloaded) ![PyPI](https://img.shields.io/pypi/v/zipline-reloaded) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/zipline-reloaded/badges/version.svg)](https://anaconda.org/conda-forge/zipline-reloaded)                                                                                                                                                                                                 |
| ------------------- | ---------- |
| **Test** **Status** | [![CI Tests](https://github.com/stefan-jansen/zipline-reloaded/actions/workflows/ci_tests_full.yml/badge.svg)](https://github.com/stefan-jansen/zipline-reloaded/actions/workflows/unit_tests.yml) [![PyPI](https://github.com/stefan-jansen/zipline-reloaded/actions/workflows/build_wheels.yml/badge.svg)](https://github.com/stefan-jansen/zipline-reloaded/actions/workflows/build_wheels.yml)  [![codecov](https://codecov.io/gh/stefan-jansen/zipline-reloaded/branch/main/graph/badge.svg)](https://codecov.io/gh/stefan-jansen/zipline-reloaded) |
| **Community**       | [![Discourse](https://img.shields.io/discourse/topics?server=https%3A%2F%2Fexchange.ml4trading.io%2F)](https://exchange.ml4trading.io) [![ML4T](https://img.shields.io/badge/Powered%20by-ML4Trading-blue)](https://ml4trading.io) [![Twitter](https://img.shields.io/twitter/follow/ml4trading.svg?style=social)](https://twitter.com/ml4trading)                                                                                                                                                                                                                                                                                                                                                                                                          |

Zipline is a Pythonic event-driven system for backtesting, developed and used as the backtesting and live-trading engine by [crowd-sourced investment fund Quantopian](https://www.bizjournals.com/boston/news/2020/11/10/quantopian-shuts-down-cofounders-head-elsewhere.html). Since it closed late 2020, the domain that had hosted these docs expired. The library is used extensively in the book [Machine Larning for Algorithmic Trading](https://ml4trading.io)
by [Stefan Jansen](https://www.linkedin.com/in/applied-ai/) who is trying to keep the library up to date and available to his readers and the wider Python algotrading community.
- [Join our Community!](https://exchange.ml4trading.io)
- [Documentation](https://zipline.ml4trading.io)

## Features

- **Ease of Use:** Zipline tries to get out of your way so that you can focus on algorithm development. See below for a code example.
- **Batteries Included:** many common statistics like moving average and linear regression can be readily accessed from within a user-written algorithm.
- **PyData Integration:** Input of historical data and output of performance statistics are based on Pandas DataFrames to integrate nicely into the existing PyData ecosystem.
- **Statistics and Machine Learning Libraries:** You can use libraries like matplotlib, scipy, statsmodels, and scikit-klearn to support development, analysis, and visualization of state-of-the-art trading systems.

> **Note:** Release 3.05 makes Zipline compatible with Numpy 2.0, which requires Pandas 2.2.2 or higher. If you are using an older version of Pandas, you will need to upgrade it. Other packages may also still take more time to catch up with the latest Numpy release.

> **Note:** Release 3.0 updates Zipline to use [pandas](https://pandas.pydata.org/pandas-docs/stable/whatsnew/v2.0.0.html) >= 2.0 and [SQLAlchemy](https://docs.sqlalchemy.org/en/20/) > 2.0. These are major version updates that may break existing code; please review the linked docs.

> **Note:** Release 2.4 updates Zipline to use [exchange_calendars](https://github.com/gerrymanoim/exchange_calendars) >= 4.2. This is a major version update and may break existing code (which we have tried to avoid but cannot guarantee). Please review the changes [here](https://github.com/gerrymanoim/exchange_calendars/issues/61).

## Installation

Zipline supports Python >= 3.9 and is compatible with current versions of the relevant [NumFOCUS](https://numfocus.org/sponsored-projects?_sft_project_category=python-interface) libraries, including [pandas](https://pandas.pydata.org/) and [scikit-learn](https://scikit-learn.org/stable/index.html).

### Using `pip`

If your system meets the pre-requisites described in the [installation instructions](https://zipline.ml4trading.io/install.html), you can install Zipline using `pip` by running:

```bash
pip install zipline-reloaded
```

### Using `conda`

If you are using the [Anaconda](https://www.anaconda.com/products/individual) or [miniconda](https://docs.conda.io/en/latest/miniconda.html) distributions, you install `zipline-reloaded` from the channel `conda-forge` like so:

```bash
conda install -c conda-forge zipline-reloaded
```

You can also [enable](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html) `conda-forge` by listing it in your `.condarc`.

In case you are installing `zipline-reloaded` alongside other packages and encounter [conflict errors](https://github.com/conda/conda/issues/9707), consider using [mamba](https://github.com/mamba-org/mamba) instead.

See the [installation](https://zipline.ml4trading.io/install.html) section of the docs for more detailed instructions and the corresponding [conda-forge site](https://github.com/conda-forge/zipline-reloaded-feedstock).

## Quickstart

See our [getting started tutorial](https://zipline.ml4trading.io/beginner-tutorial).

The following code implements a simple dual moving average algorithm.

```python
from zipline.api import order_target, record, symbol


def initialize(context):
    context.i = 0
    context.asset = symbol('AAPL')


def handle_data(context, data):
    # Skip first 300 days to get full windows
    context.i += 1
    if context.i < 300:
        return

    # Compute averages
    # data.history() has to be called with the same params
    # from above and returns a pandas dataframe.
    short_mavg = data.history(context.asset, 'price', bar_count=100, frequency="1d").mean()
    long_mavg = data.history(context.asset, 'price', bar_count=300, frequency="1d").mean()

    # Trading logic
    if short_mavg > long_mavg:
        # order_target orders as many shares as needed to
        # achieve the desired number of shares.
        order_target(context.asset, 100)
    elif short_mavg < long_mavg:
        order_target(context.asset, 0)

    # Save values for later inspection
    record(AAPL=data.current(context.asset, 'price'),
           short_mavg=short_mavg,
           long_mavg=long_mavg)
```

You can then run this algorithm using the Zipline CLI. But first, you need to download some market data with historical prices and trading volumes.

This will download asset pricing data from [NASDAQ](https://data.nasdaq.com/databases/WIKIP) (formerly [Quandl](https://www.nasdaq.com/about/press-center/nasdaq-acquires-quandl-advance-use-alternative-data)).

> This requires an API key, which you can get for free by signing up at [NASDAQ Data Link](https://data.nasdaq.com).

```bash
$ export QUANDL_API_KEY="your_key_here"
$ zipline ingest -b quandl
````

The following will 
- stream the through the algorithm over the specified time range. 
- save the resulting performance DataFrame as `dma.pickle`, which you can load and analyze from Python using, e.g., [pyfolio-reloaded](https://github.com/stefan-jansen/pyfolio-reloaded).

```bash
$ zipline run -f dual_moving_average.py --start 2014-1-1 --end 2018-1-1 -o dma.pickle --no-benchmark
```

You can find other examples in the [zipline/examples](https://github.com/stefan-jansen/zipline-reloaded/tree/main/src/zipline/examples) directory.

## Questions, suggestions, bugs?

If you find a bug or have other questions about the library, feel free to [open an issue](https://github.com/stefan-jansen/zipline/issues/new) and fill out the template.

