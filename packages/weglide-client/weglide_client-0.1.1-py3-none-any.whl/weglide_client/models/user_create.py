# coding: utf-8

"""
    WeGlide

    Quantifying airsports

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from weglide_client.models.gender import Gender
from weglide_client.models.unit import Unit
from typing import Optional, Set
from typing_extensions import Self

class UserCreate(BaseModel):
    """
    UserCreate
    """ # noqa: E501
    name: Annotated[str, Field(min_length=6, strict=True, max_length=60)]
    skysight_email: Optional[StrictStr] = None
    skysight_password: Optional[StrictStr] = None
    newsletter_language: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = None
    magazine_language: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = None
    bio: Optional[Annotated[str, Field(strict=True, max_length=160)]] = None
    ssa_id: Optional[StrictInt] = None
    password: Annotated[str, Field(min_length=6, strict=True, max_length=60)]
    email: StrictStr
    date_of_birth: date
    gender: Gender
    club_id: Optional[StrictInt] = None
    second_club_id: Optional[StrictInt] = None
    unit: Optional[Unit] = None
    language: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = 'en'
    __properties: ClassVar[List[str]] = ["name", "skysight_email", "skysight_password", "newsletter_language", "magazine_language", "bio", "ssa_id", "password", "email", "date_of_birth", "gender", "club_id", "second_club_id", "unit", "language"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if skysight_email (nullable) is None
        # and model_fields_set contains the field
        if self.skysight_email is None and "skysight_email" in self.model_fields_set:
            _dict['skysight_email'] = None

        # set to None if skysight_password (nullable) is None
        # and model_fields_set contains the field
        if self.skysight_password is None and "skysight_password" in self.model_fields_set:
            _dict['skysight_password'] = None

        # set to None if newsletter_language (nullable) is None
        # and model_fields_set contains the field
        if self.newsletter_language is None and "newsletter_language" in self.model_fields_set:
            _dict['newsletter_language'] = None

        # set to None if magazine_language (nullable) is None
        # and model_fields_set contains the field
        if self.magazine_language is None and "magazine_language" in self.model_fields_set:
            _dict['magazine_language'] = None

        # set to None if bio (nullable) is None
        # and model_fields_set contains the field
        if self.bio is None and "bio" in self.model_fields_set:
            _dict['bio'] = None

        # set to None if ssa_id (nullable) is None
        # and model_fields_set contains the field
        if self.ssa_id is None and "ssa_id" in self.model_fields_set:
            _dict['ssa_id'] = None

        # set to None if club_id (nullable) is None
        # and model_fields_set contains the field
        if self.club_id is None and "club_id" in self.model_fields_set:
            _dict['club_id'] = None

        # set to None if second_club_id (nullable) is None
        # and model_fields_set contains the field
        if self.second_club_id is None and "second_club_id" in self.model_fields_set:
            _dict['second_club_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "skysight_email": obj.get("skysight_email"),
            "skysight_password": obj.get("skysight_password"),
            "newsletter_language": obj.get("newsletter_language"),
            "magazine_language": obj.get("magazine_language"),
            "bio": obj.get("bio"),
            "ssa_id": obj.get("ssa_id"),
            "password": obj.get("password"),
            "email": obj.get("email"),
            "date_of_birth": obj.get("date_of_birth"),
            "gender": obj.get("gender"),
            "club_id": obj.get("club_id"),
            "second_club_id": obj.get("second_club_id"),
            "unit": obj.get("unit"),
            "language": obj.get("language") if obj.get("language") is not None else 'en'
        })
        return _obj


