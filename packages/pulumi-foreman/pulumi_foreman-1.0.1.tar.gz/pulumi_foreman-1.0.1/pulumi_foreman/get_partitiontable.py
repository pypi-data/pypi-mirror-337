# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPartitiontableResult',
    'AwaitableGetPartitiontableResult',
    'get_partitiontable',
    'get_partitiontable_output',
]

@pulumi.output_type
class GetPartitiontableResult:
    """
    A collection of values returned by getPartitiontable.
    """
    def __init__(__self__, audit_comment=None, description=None, host_ids=None, hostgroup_ids=None, id=None, layout=None, locked=None, name=None, operatingsystem_ids=None, os_family=None, snippet=None):
        if audit_comment and not isinstance(audit_comment, str):
            raise TypeError("Expected argument 'audit_comment' to be a str")
        pulumi.set(__self__, "audit_comment", audit_comment)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if host_ids and not isinstance(host_ids, list):
            raise TypeError("Expected argument 'host_ids' to be a list")
        pulumi.set(__self__, "host_ids", host_ids)
        if hostgroup_ids and not isinstance(hostgroup_ids, list):
            raise TypeError("Expected argument 'hostgroup_ids' to be a list")
        pulumi.set(__self__, "hostgroup_ids", hostgroup_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if layout and not isinstance(layout, str):
            raise TypeError("Expected argument 'layout' to be a str")
        pulumi.set(__self__, "layout", layout)
        if locked and not isinstance(locked, bool):
            raise TypeError("Expected argument 'locked' to be a bool")
        pulumi.set(__self__, "locked", locked)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operatingsystem_ids and not isinstance(operatingsystem_ids, list):
            raise TypeError("Expected argument 'operatingsystem_ids' to be a list")
        pulumi.set(__self__, "operatingsystem_ids", operatingsystem_ids)
        if os_family and not isinstance(os_family, str):
            raise TypeError("Expected argument 'os_family' to be a str")
        pulumi.set(__self__, "os_family", os_family)
        if snippet and not isinstance(snippet, bool):
            raise TypeError("Expected argument 'snippet' to be a bool")
        pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter(name="auditComment")
    def audit_comment(self) -> str:
        return pulumi.get(self, "audit_comment")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> Sequence[int]:
        return pulumi.get(self, "host_ids")

    @property
    @pulumi.getter(name="hostgroupIds")
    def hostgroup_ids(self) -> Sequence[int]:
        return pulumi.get(self, "hostgroup_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def layout(self) -> str:
        return pulumi.get(self, "layout")

    @property
    @pulumi.getter
    def locked(self) -> bool:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingsystemIds")
    def operatingsystem_ids(self) -> Sequence[int]:
        return pulumi.get(self, "operatingsystem_ids")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def snippet(self) -> bool:
        return pulumi.get(self, "snippet")


class AwaitableGetPartitiontableResult(GetPartitiontableResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPartitiontableResult(
            audit_comment=self.audit_comment,
            description=self.description,
            host_ids=self.host_ids,
            hostgroup_ids=self.hostgroup_ids,
            id=self.id,
            layout=self.layout,
            locked=self.locked,
            name=self.name,
            operatingsystem_ids=self.operatingsystem_ids,
            os_family=self.os_family,
            snippet=self.snippet)


def get_partitiontable(name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPartitiontableResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getPartitiontable:getPartitiontable', __args__, opts=opts, typ=GetPartitiontableResult).value

    return AwaitableGetPartitiontableResult(
        audit_comment=pulumi.get(__ret__, 'audit_comment'),
        description=pulumi.get(__ret__, 'description'),
        host_ids=pulumi.get(__ret__, 'host_ids'),
        hostgroup_ids=pulumi.get(__ret__, 'hostgroup_ids'),
        id=pulumi.get(__ret__, 'id'),
        layout=pulumi.get(__ret__, 'layout'),
        locked=pulumi.get(__ret__, 'locked'),
        name=pulumi.get(__ret__, 'name'),
        operatingsystem_ids=pulumi.get(__ret__, 'operatingsystem_ids'),
        os_family=pulumi.get(__ret__, 'os_family'),
        snippet=pulumi.get(__ret__, 'snippet'))
def get_partitiontable_output(name: Optional[pulumi.Input[str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPartitiontableResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getPartitiontable:getPartitiontable', __args__, opts=opts, typ=GetPartitiontableResult)
    return __ret__.apply(lambda __response__: GetPartitiontableResult(
        audit_comment=pulumi.get(__response__, 'audit_comment'),
        description=pulumi.get(__response__, 'description'),
        host_ids=pulumi.get(__response__, 'host_ids'),
        hostgroup_ids=pulumi.get(__response__, 'hostgroup_ids'),
        id=pulumi.get(__response__, 'id'),
        layout=pulumi.get(__response__, 'layout'),
        locked=pulumi.get(__response__, 'locked'),
        name=pulumi.get(__response__, 'name'),
        operatingsystem_ids=pulumi.get(__response__, 'operatingsystem_ids'),
        os_family=pulumi.get(__response__, 'os_family'),
        snippet=pulumi.get(__response__, 'snippet')))
