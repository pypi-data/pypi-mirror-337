# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.sync_dag import SyncDag
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.dag_node_create import DagNodeCreate
from ..types.dag_edge_create import DagEdgeCreate
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DagClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_sync_dag(self, sync_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> SyncDag:
        """
        Get the DAG definition for a sync.

        Parameters
        ----------
        sync_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncDag
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.dag.get_sync_dag(
            sync_id="sync_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"dag/sync/{jsonable_encoder(sync_id)}/dag/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncDag,
                    parse_obj_as(
                        type_=SyncDag,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_sync_dag(
        self,
        sync_id: str,
        *,
        name: str,
        sync_dag_create_sync_id: str,
        nodes: typing.Sequence[DagNodeCreate],
        edges: typing.Sequence[DagEdgeCreate],
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncDag:
        """
        Create a new DAG definition for a sync.

        Parameters
        ----------
        sync_id : str

        name : str

        sync_dag_create_sync_id : str

        nodes : typing.Sequence[DagNodeCreate]

        edges : typing.Sequence[DagEdgeCreate]

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncDag
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK, DagEdgeCreate, DagNodeCreate

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.dag.create_sync_dag(
            sync_id="sync_id",
            name="name",
            sync_dag_create_sync_id="sync_id",
            nodes=[
                DagNodeCreate(
                    type="source",
                    name="name",
                )
            ],
            edges=[
                DagEdgeCreate(
                    from_node_id="from_node_id",
                    to_node_id="to_node_id",
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"dag/sync/{jsonable_encoder(sync_id)}/dag/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "sync_id": sync_dag_create_sync_id,
                "nodes": convert_and_respect_annotation_metadata(
                    object_=nodes, annotation=typing.Sequence[DagNodeCreate], direction="write"
                ),
                "edges": convert_and_respect_annotation_metadata(
                    object_=edges, annotation=typing.Sequence[DagEdgeCreate], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncDag,
                    parse_obj_as(
                        type_=SyncDag,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_sync_dag(
        self,
        sync_id: str,
        *,
        name: str,
        sync_dag_update_sync_id: str,
        description: typing.Optional[str] = OMIT,
        nodes: typing.Optional[typing.Sequence[DagNodeCreate]] = OMIT,
        edges: typing.Optional[typing.Sequence[DagEdgeCreate]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncDag:
        """
        Update a DAG definition for a sync.

        Parameters
        ----------
        sync_id : str

        name : str

        sync_dag_update_sync_id : str

        description : typing.Optional[str]

        nodes : typing.Optional[typing.Sequence[DagNodeCreate]]

        edges : typing.Optional[typing.Sequence[DagEdgeCreate]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncDag
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.dag.update_sync_dag(
            sync_id="sync_id",
            name="name",
            sync_dag_update_sync_id="sync_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"dag/sync/{jsonable_encoder(sync_id)}/dag/",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "sync_id": sync_dag_update_sync_id,
                "nodes": convert_and_respect_annotation_metadata(
                    object_=nodes, annotation=typing.Sequence[DagNodeCreate], direction="write"
                ),
                "edges": convert_and_respect_annotation_metadata(
                    object_=edges, annotation=typing.Sequence[DagEdgeCreate], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncDag,
                    parse_obj_as(
                        type_=SyncDag,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def initialize_dag(self, *, sync_id: str, request_options: typing.Optional[RequestOptions] = None) -> SyncDag:
        """
        Initialize a new DAG with source, entities, and destination.

        Parameters
        ----------
        sync_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncDag
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.dag.initialize_dag(
            sync_id="sync_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "dag/init",
            method="GET",
            params={
                "sync_id": sync_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncDag,
                    parse_obj_as(
                        type_=SyncDag,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDagClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_sync_dag(self, sync_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> SyncDag:
        """
        Get the DAG definition for a sync.

        Parameters
        ----------
        sync_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncDag
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.dag.get_sync_dag(
                sync_id="sync_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"dag/sync/{jsonable_encoder(sync_id)}/dag/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncDag,
                    parse_obj_as(
                        type_=SyncDag,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_sync_dag(
        self,
        sync_id: str,
        *,
        name: str,
        sync_dag_create_sync_id: str,
        nodes: typing.Sequence[DagNodeCreate],
        edges: typing.Sequence[DagEdgeCreate],
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncDag:
        """
        Create a new DAG definition for a sync.

        Parameters
        ----------
        sync_id : str

        name : str

        sync_dag_create_sync_id : str

        nodes : typing.Sequence[DagNodeCreate]

        edges : typing.Sequence[DagEdgeCreate]

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncDag
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK, DagEdgeCreate, DagNodeCreate

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.dag.create_sync_dag(
                sync_id="sync_id",
                name="name",
                sync_dag_create_sync_id="sync_id",
                nodes=[
                    DagNodeCreate(
                        type="source",
                        name="name",
                    )
                ],
                edges=[
                    DagEdgeCreate(
                        from_node_id="from_node_id",
                        to_node_id="to_node_id",
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"dag/sync/{jsonable_encoder(sync_id)}/dag/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "sync_id": sync_dag_create_sync_id,
                "nodes": convert_and_respect_annotation_metadata(
                    object_=nodes, annotation=typing.Sequence[DagNodeCreate], direction="write"
                ),
                "edges": convert_and_respect_annotation_metadata(
                    object_=edges, annotation=typing.Sequence[DagEdgeCreate], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncDag,
                    parse_obj_as(
                        type_=SyncDag,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_sync_dag(
        self,
        sync_id: str,
        *,
        name: str,
        sync_dag_update_sync_id: str,
        description: typing.Optional[str] = OMIT,
        nodes: typing.Optional[typing.Sequence[DagNodeCreate]] = OMIT,
        edges: typing.Optional[typing.Sequence[DagEdgeCreate]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncDag:
        """
        Update a DAG definition for a sync.

        Parameters
        ----------
        sync_id : str

        name : str

        sync_dag_update_sync_id : str

        description : typing.Optional[str]

        nodes : typing.Optional[typing.Sequence[DagNodeCreate]]

        edges : typing.Optional[typing.Sequence[DagEdgeCreate]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncDag
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.dag.update_sync_dag(
                sync_id="sync_id",
                name="name",
                sync_dag_update_sync_id="sync_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"dag/sync/{jsonable_encoder(sync_id)}/dag/",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "sync_id": sync_dag_update_sync_id,
                "nodes": convert_and_respect_annotation_metadata(
                    object_=nodes, annotation=typing.Sequence[DagNodeCreate], direction="write"
                ),
                "edges": convert_and_respect_annotation_metadata(
                    object_=edges, annotation=typing.Sequence[DagEdgeCreate], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncDag,
                    parse_obj_as(
                        type_=SyncDag,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def initialize_dag(self, *, sync_id: str, request_options: typing.Optional[RequestOptions] = None) -> SyncDag:
        """
        Initialize a new DAG with source, entities, and destination.

        Parameters
        ----------
        sync_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncDag
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.dag.initialize_dag(
                sync_id="sync_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "dag/init",
            method="GET",
            params={
                "sync_id": sync_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncDag,
                    parse_obj_as(
                        type_=SyncDag,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
