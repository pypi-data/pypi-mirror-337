# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetJobtemplateResult',
    'AwaitableGetJobtemplateResult',
    'get_jobtemplate',
    'get_jobtemplate_output',
]

@pulumi.output_type
class GetJobtemplateResult:
    """
    A collection of values returned by getJobtemplate.
    """
    def __init__(__self__, description=None, description_format=None, id=None, job_category=None, locked=None, name=None, provider_type=None, snippet=None, template=None, template_inputs=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if description_format and not isinstance(description_format, str):
            raise TypeError("Expected argument 'description_format' to be a str")
        pulumi.set(__self__, "description_format", description_format)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_category and not isinstance(job_category, str):
            raise TypeError("Expected argument 'job_category' to be a str")
        pulumi.set(__self__, "job_category", job_category)
        if locked and not isinstance(locked, bool):
            raise TypeError("Expected argument 'locked' to be a bool")
        pulumi.set(__self__, "locked", locked)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_type and not isinstance(provider_type, str):
            raise TypeError("Expected argument 'provider_type' to be a str")
        pulumi.set(__self__, "provider_type", provider_type)
        if snippet and not isinstance(snippet, bool):
            raise TypeError("Expected argument 'snippet' to be a bool")
        pulumi.set(__self__, "snippet", snippet)
        if template and not isinstance(template, str):
            raise TypeError("Expected argument 'template' to be a str")
        pulumi.set(__self__, "template", template)
        if template_inputs and not isinstance(template_inputs, list):
            raise TypeError("Expected argument 'template_inputs' to be a list")
        pulumi.set(__self__, "template_inputs", template_inputs)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="descriptionFormat")
    def description_format(self) -> str:
        return pulumi.get(self, "description_format")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobCategory")
    def job_category(self) -> str:
        return pulumi.get(self, "job_category")

    @property
    @pulumi.getter
    def locked(self) -> bool:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> str:
        return pulumi.get(self, "provider_type")

    @property
    @pulumi.getter
    def snippet(self) -> bool:
        return pulumi.get(self, "snippet")

    @property
    @pulumi.getter
    def template(self) -> str:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="templateInputs")
    def template_inputs(self) -> Sequence['outputs.GetJobtemplateTemplateInputResult']:
        return pulumi.get(self, "template_inputs")


class AwaitableGetJobtemplateResult(GetJobtemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetJobtemplateResult(
            description=self.description,
            description_format=self.description_format,
            id=self.id,
            job_category=self.job_category,
            locked=self.locked,
            name=self.name,
            provider_type=self.provider_type,
            snippet=self.snippet,
            template=self.template,
            template_inputs=self.template_inputs)


def get_jobtemplate(name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetJobtemplateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getJobtemplate:getJobtemplate', __args__, opts=opts, typ=GetJobtemplateResult).value

    return AwaitableGetJobtemplateResult(
        description=pulumi.get(__ret__, 'description'),
        description_format=pulumi.get(__ret__, 'description_format'),
        id=pulumi.get(__ret__, 'id'),
        job_category=pulumi.get(__ret__, 'job_category'),
        locked=pulumi.get(__ret__, 'locked'),
        name=pulumi.get(__ret__, 'name'),
        provider_type=pulumi.get(__ret__, 'provider_type'),
        snippet=pulumi.get(__ret__, 'snippet'),
        template=pulumi.get(__ret__, 'template'),
        template_inputs=pulumi.get(__ret__, 'template_inputs'))
def get_jobtemplate_output(name: Optional[pulumi.Input[str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetJobtemplateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getJobtemplate:getJobtemplate', __args__, opts=opts, typ=GetJobtemplateResult)
    return __ret__.apply(lambda __response__: GetJobtemplateResult(
        description=pulumi.get(__response__, 'description'),
        description_format=pulumi.get(__response__, 'description_format'),
        id=pulumi.get(__response__, 'id'),
        job_category=pulumi.get(__response__, 'job_category'),
        locked=pulumi.get(__response__, 'locked'),
        name=pulumi.get(__response__, 'name'),
        provider_type=pulumi.get(__response__, 'provider_type'),
        snippet=pulumi.get(__response__, 'snippet'),
        template=pulumi.get(__response__, 'template'),
        template_inputs=pulumi.get(__response__, 'template_inputs')))
