# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _smc600
else:
    import _smc600

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _smc600.delete_SwigPyIterator

    def value(self):
        return _smc600.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _smc600.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _smc600.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _smc600.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _smc600.SwigPyIterator_equal(self, x)

    def copy(self):
        return _smc600.SwigPyIterator_copy(self)

    def next(self):
        return _smc600.SwigPyIterator_next(self)

    def __next__(self):
        return _smc600.SwigPyIterator___next__(self)

    def previous(self):
        return _smc600.SwigPyIterator_previous(self)

    def advance(self, n):
        return _smc600.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _smc600.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _smc600.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _smc600.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _smc600.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _smc600.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _smc600.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _smc600:
_smc600.SwigPyIterator_swigregister(SwigPyIterator)
class vectori(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _smc600.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _smc600.vectori___nonzero__(self)

    def __bool__(self):
        return _smc600.vectori___bool__(self)

    def __len__(self):
        return _smc600.vectori___len__(self)

    def __getslice__(self, i, j):
        return _smc600.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _smc600.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _smc600.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _smc600.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _smc600.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _smc600.vectori___setitem__(self, *args)

    def pop(self):
        return _smc600.vectori_pop(self)

    def append(self, x):
        return _smc600.vectori_append(self, x)

    def empty(self):
        return _smc600.vectori_empty(self)

    def size(self):
        return _smc600.vectori_size(self)

    def swap(self, v):
        return _smc600.vectori_swap(self, v)

    def begin(self):
        return _smc600.vectori_begin(self)

    def end(self):
        return _smc600.vectori_end(self)

    def rbegin(self):
        return _smc600.vectori_rbegin(self)

    def rend(self):
        return _smc600.vectori_rend(self)

    def clear(self):
        return _smc600.vectori_clear(self)

    def get_allocator(self):
        return _smc600.vectori_get_allocator(self)

    def pop_back(self):
        return _smc600.vectori_pop_back(self)

    def erase(self, *args):
        return _smc600.vectori_erase(self, *args)

    def __init__(self, *args):
        _smc600.vectori_swiginit(self, _smc600.new_vectori(*args))

    def push_back(self, x):
        return _smc600.vectori_push_back(self, x)

    def front(self):
        return _smc600.vectori_front(self)

    def back(self):
        return _smc600.vectori_back(self)

    def assign(self, n, x):
        return _smc600.vectori_assign(self, n, x)

    def resize(self, *args):
        return _smc600.vectori_resize(self, *args)

    def insert(self, *args):
        return _smc600.vectori_insert(self, *args)

    def reserve(self, n):
        return _smc600.vectori_reserve(self, n)

    def capacity(self):
        return _smc600.vectori_capacity(self)
    __swig_destroy__ = _smc600.delete_vectori

# Register vectori in _smc600:
_smc600.vectori_swigregister(vectori)
class vectord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _smc600.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _smc600.vectord___nonzero__(self)

    def __bool__(self):
        return _smc600.vectord___bool__(self)

    def __len__(self):
        return _smc600.vectord___len__(self)

    def __getslice__(self, i, j):
        return _smc600.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _smc600.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _smc600.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _smc600.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _smc600.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _smc600.vectord___setitem__(self, *args)

    def pop(self):
        return _smc600.vectord_pop(self)

    def append(self, x):
        return _smc600.vectord_append(self, x)

    def empty(self):
        return _smc600.vectord_empty(self)

    def size(self):
        return _smc600.vectord_size(self)

    def swap(self, v):
        return _smc600.vectord_swap(self, v)

    def begin(self):
        return _smc600.vectord_begin(self)

    def end(self):
        return _smc600.vectord_end(self)

    def rbegin(self):
        return _smc600.vectord_rbegin(self)

    def rend(self):
        return _smc600.vectord_rend(self)

    def clear(self):
        return _smc600.vectord_clear(self)

    def get_allocator(self):
        return _smc600.vectord_get_allocator(self)

    def pop_back(self):
        return _smc600.vectord_pop_back(self)

    def erase(self, *args):
        return _smc600.vectord_erase(self, *args)

    def __init__(self, *args):
        _smc600.vectord_swiginit(self, _smc600.new_vectord(*args))

    def push_back(self, x):
        return _smc600.vectord_push_back(self, x)

    def front(self):
        return _smc600.vectord_front(self)

    def back(self):
        return _smc600.vectord_back(self)

    def assign(self, n, x):
        return _smc600.vectord_assign(self, n, x)

    def resize(self, *args):
        return _smc600.vectord_resize(self, *args)

    def insert(self, *args):
        return _smc600.vectord_insert(self, *args)

    def reserve(self, n):
        return _smc600.vectord_reserve(self, n)

    def capacity(self):
        return _smc600.vectord_capacity(self)
    __swig_destroy__ = _smc600.delete_vectord

# Register vectord in _smc600:
_smc600.vectord_swigregister(vectord)

def new_doublep():
    return _smc600.new_doublep()

def copy_doublep(value):
    return _smc600.copy_doublep(value)

def delete_doublep(obj):
    return _smc600.delete_doublep(obj)

def doublep_assign(obj, value):
    return _smc600.doublep_assign(obj, value)

def doublep_value(obj):
    return _smc600.doublep_value(obj)

def new_unsigned_short_p():
    return _smc600.new_unsigned_short_p()

def copy_unsigned_short_p(value):
    return _smc600.copy_unsigned_short_p(value)

def delete_unsigned_short_p(obj):
    return _smc600.delete_unsigned_short_p(obj)

def unsigned_short_p_assign(obj, value):
    return _smc600.unsigned_short_p_assign(obj, value)

def unsigned_short_p_value(obj):
    return _smc600.unsigned_short_p_value(obj)

def new_unsigned_long_p():
    return _smc600.new_unsigned_long_p()

def copy_unsigned_long_p(value):
    return _smc600.copy_unsigned_long_p(value)

def delete_unsigned_long_p(obj):
    return _smc600.delete_unsigned_long_p(obj)

def unsigned_long_p_assign(obj, value):
    return _smc600.unsigned_long_p_assign(obj, value)

def unsigned_long_p_value(obj):
    return _smc600.unsigned_long_p_value(obj)

def board_init_e(CardNo, type, pconnectstring, dwBaudRate):
    return _smc600.board_init_e(CardNo, type, pconnectstring, dwBaudRate)

def board_reset_e(CardNo):
    return _smc600.board_reset_e(CardNo)

def board_close_e(CardNo):
    return _smc600.board_close_e(CardNo)

def get_card_version_list(CardNo, card_version_list):
    return _smc600.get_card_version_list(CardNo, card_version_list)

def get_equiv(CardNo, axis, equiv):
    return _smc600.get_equiv(CardNo, axis, equiv)

def set_equiv_e(CardNo, axis, equiv):
    return _smc600.set_equiv_e(CardNo, axis, equiv)

def set_alm_mode_e(CardNo, axis, enable, alm_logic, alm_action):
    return _smc600.set_alm_mode_e(CardNo, axis, enable, alm_logic, alm_action)

def write_sevon_pin_e(CardNo, axis, on_off):
    return _smc600.write_sevon_pin_e(CardNo, axis, on_off)

def set_pulse_outmode_e(CardNo, axis, outmode):
    return _smc600.set_pulse_outmode_e(CardNo, axis, outmode)

def set_profile_e(CardNo, axis, Min_Vel, Max_Vel, Tacc, Tdec, Stop_Vel):
    return _smc600.set_profile_e(CardNo, axis, Min_Vel, Max_Vel, Tacc, Tdec, Stop_Vel)

def set_s_profile_e(CardNo, axis, s_mode, s_para):
    return _smc600.set_s_profile_e(CardNo, axis, s_mode, s_para)

def set_homemode_e(CardNo, axis, home_dir, vel_mode, mode, EZ_count):
    return _smc600.set_homemode_e(CardNo, axis, home_dir, vel_mode, mode, EZ_count)

def set_home_profile_e(CardNo, axis, Min_Vel, Max_Vel, Tacc, Tdec):
    return _smc600.set_home_profile_e(CardNo, axis, Min_Vel, Max_Vel, Tacc, Tdec)

def set_home_position_e(CardNo, axis, enable, position):
    return _smc600.set_home_position_e(CardNo, axis, enable, position)

def home_move_e(CardNo, axis):
    return _smc600.home_move_e(CardNo, axis)

def pmove_e(CardNo, axis, Dist, posi_mode):
    return _smc600.pmove_e(CardNo, axis, Dist, posi_mode)

def check_done(CardNo, axis):
    return _smc600.check_done(CardNo, axis)

def get_position(CardNo, axis, pos):
    return _smc600.get_position(CardNo, axis, pos)

def set_position_e(CardNo, axis, current_position):
    return _smc600.set_position_e(CardNo, axis, current_position)

def get_encoder_unit(ConnectNo, axis, pos):
    return _smc600.get_encoder_unit(ConnectNo, axis, pos)

def set_encoder_unit_e(ConnectNo, axis, encoder_value):
    return _smc600.set_encoder_unit_e(ConnectNo, axis, encoder_value)

def get_counter_inmode(ConnectNo, axis, mode):
    return _smc600.get_counter_inmode(ConnectNo, axis, mode)

def set_counter_inmode_e(ConnectNo, axis, mode):
    return _smc600.set_counter_inmode_e(ConnectNo, axis, mode)

def get_backlash_unit(ConnectNo, axis, backlash):
    return _smc600.get_backlash_unit(ConnectNo, axis, backlash)

def set_backlash_unit_e(ConnectNo, axis, backlash):
    return _smc600.set_backlash_unit_e(ConnectNo, axis, backlash)

def stop_e(CardNo, axis, stop_mode):
    return _smc600.stop_e(CardNo, axis, stop_mode)

def emg_stop_e(CardNo):
    return _smc600.emg_stop_e(CardNo)

def update_target_position_e(CardNo, axis, dst):
    return _smc600.update_target_position_e(CardNo, axis, dst)

def reset_target_position_e(CardNo, axis, dist):
    return _smc600.reset_target_position_e(CardNo, axis, dist)

def read_org_pin(CardNo, axis):
    return _smc600.read_org_pin(CardNo, axis)

def read_elp_pin(CardNo, axis):
    return _smc600.read_elp_pin(CardNo, axis)

def read_eln_pin(CardNo, axis):
    return _smc600.read_eln_pin(CardNo, axis)

def axis_io_status(CardNo, axis):
    return _smc600.axis_io_status(CardNo, axis)

