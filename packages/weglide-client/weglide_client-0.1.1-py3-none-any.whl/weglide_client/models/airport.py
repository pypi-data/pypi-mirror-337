# coding: utf-8

"""
    WeGlide

    Quantifying airsports

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from weglide_client.models.geom_value import GeomValue
from typing import Optional, Set
from typing_extensions import Self

class Airport(BaseModel):
    """
    Airport
    """ # noqa: E501
    id: StrictInt
    name: StrictStr
    region: StrictStr
    openaip_id: Optional[StrictStr] = None
    icao: Optional[StrictStr] = None
    kind: StrictStr
    openaip_name: StrictStr
    launches: Optional[StrictInt] = None
    launches_2019: Optional[StrictInt] = None
    geom: Dict[str, GeomValue]
    elevation: Optional[Union[StrictFloat, StrictInt]] = None
    timezone: Optional[StrictStr] = None
    reign: Optional[StrictInt] = None
    radio_category: Optional[StrictStr] = None
    radio_frequency: Optional[StrictStr] = None
    radio_type: Optional[StrictStr] = None
    radio_description: Optional[StrictStr] = None
    rwy_name: Optional[StrictStr] = None
    rwy_sfc: Optional[StrictStr] = None
    rwy_direction: Optional[StrictInt] = None
    rwy_length: Optional[Union[StrictFloat, StrictInt]] = None
    rwy_width: Optional[Union[StrictFloat, StrictInt]] = None
    rwy_strength: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "name", "region", "openaip_id", "icao", "kind", "openaip_name", "launches", "launches_2019", "geom", "elevation", "timezone", "reign", "radio_category", "radio_frequency", "radio_type", "radio_description", "rwy_name", "rwy_sfc", "rwy_direction", "rwy_length", "rwy_width", "rwy_strength"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Airport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in geom (dict)
        _field_dict = {}
        if self.geom:
            for _key_geom in self.geom:
                if self.geom[_key_geom]:
                    _field_dict[_key_geom] = self.geom[_key_geom].to_dict()
            _dict['geom'] = _field_dict
        # set to None if openaip_id (nullable) is None
        # and model_fields_set contains the field
        if self.openaip_id is None and "openaip_id" in self.model_fields_set:
            _dict['openaip_id'] = None

        # set to None if icao (nullable) is None
        # and model_fields_set contains the field
        if self.icao is None and "icao" in self.model_fields_set:
            _dict['icao'] = None

        # set to None if launches (nullable) is None
        # and model_fields_set contains the field
        if self.launches is None and "launches" in self.model_fields_set:
            _dict['launches'] = None

        # set to None if launches_2019 (nullable) is None
        # and model_fields_set contains the field
        if self.launches_2019 is None and "launches_2019" in self.model_fields_set:
            _dict['launches_2019'] = None

        # set to None if elevation (nullable) is None
        # and model_fields_set contains the field
        if self.elevation is None and "elevation" in self.model_fields_set:
            _dict['elevation'] = None

        # set to None if timezone (nullable) is None
        # and model_fields_set contains the field
        if self.timezone is None and "timezone" in self.model_fields_set:
            _dict['timezone'] = None

        # set to None if reign (nullable) is None
        # and model_fields_set contains the field
        if self.reign is None and "reign" in self.model_fields_set:
            _dict['reign'] = None

        # set to None if radio_category (nullable) is None
        # and model_fields_set contains the field
        if self.radio_category is None and "radio_category" in self.model_fields_set:
            _dict['radio_category'] = None

        # set to None if radio_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.radio_frequency is None and "radio_frequency" in self.model_fields_set:
            _dict['radio_frequency'] = None

        # set to None if radio_type (nullable) is None
        # and model_fields_set contains the field
        if self.radio_type is None and "radio_type" in self.model_fields_set:
            _dict['radio_type'] = None

        # set to None if radio_description (nullable) is None
        # and model_fields_set contains the field
        if self.radio_description is None and "radio_description" in self.model_fields_set:
            _dict['radio_description'] = None

        # set to None if rwy_name (nullable) is None
        # and model_fields_set contains the field
        if self.rwy_name is None and "rwy_name" in self.model_fields_set:
            _dict['rwy_name'] = None

        # set to None if rwy_sfc (nullable) is None
        # and model_fields_set contains the field
        if self.rwy_sfc is None and "rwy_sfc" in self.model_fields_set:
            _dict['rwy_sfc'] = None

        # set to None if rwy_direction (nullable) is None
        # and model_fields_set contains the field
        if self.rwy_direction is None and "rwy_direction" in self.model_fields_set:
            _dict['rwy_direction'] = None

        # set to None if rwy_length (nullable) is None
        # and model_fields_set contains the field
        if self.rwy_length is None and "rwy_length" in self.model_fields_set:
            _dict['rwy_length'] = None

        # set to None if rwy_width (nullable) is None
        # and model_fields_set contains the field
        if self.rwy_width is None and "rwy_width" in self.model_fields_set:
            _dict['rwy_width'] = None

        # set to None if rwy_strength (nullable) is None
        # and model_fields_set contains the field
        if self.rwy_strength is None and "rwy_strength" in self.model_fields_set:
            _dict['rwy_strength'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Airport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "region": obj.get("region"),
            "openaip_id": obj.get("openaip_id"),
            "icao": obj.get("icao"),
            "kind": obj.get("kind"),
            "openaip_name": obj.get("openaip_name"),
            "launches": obj.get("launches"),
            "launches_2019": obj.get("launches_2019"),
            "geom": dict(
                (_k, GeomValue.from_dict(_v))
                for _k, _v in obj["geom"].items()
            )
            if obj.get("geom") is not None
            else None,
            "elevation": obj.get("elevation"),
            "timezone": obj.get("timezone"),
            "reign": obj.get("reign"),
            "radio_category": obj.get("radio_category"),
            "radio_frequency": obj.get("radio_frequency"),
            "radio_type": obj.get("radio_type"),
            "radio_description": obj.get("radio_description"),
            "rwy_name": obj.get("rwy_name"),
            "rwy_sfc": obj.get("rwy_sfc"),
            "rwy_direction": obj.get("rwy_direction"),
            "rwy_length": obj.get("rwy_length"),
            "rwy_width": obj.get("rwy_width"),
            "rwy_strength": obj.get("rwy_strength")
        })
        return _obj


