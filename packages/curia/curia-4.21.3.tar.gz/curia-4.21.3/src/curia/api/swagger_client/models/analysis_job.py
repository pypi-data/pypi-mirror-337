# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 3.2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalysisJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'analysis_id': 'str',
        'analysis': 'Analysis',
        'type': 'str',
        'project_id': 'str',
        'project': 'Project',
        'execution_id': 'str',
        'status': 'str',
        'statuses': 'list[AnalysisJobStatus]',
        'outputs': 'list[AnalysisJobOutput]',
        'model_batch_jobs': 'list[ModelBatchJob]',
        'process_jobs': 'list[ProcessJob]',
        'feature_sub_categories': 'list[FeatureSubCategory]',
        'config': 'AnalysisJobConfig',
        'last_updated_by': 'str',
        'started_at': 'datetime',
        'ended_at': 'datetime',
        'created_by': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'archived_at': 'datetime',
        'version': 'float'
    }

    attribute_map = {
        'id': 'id',
        'analysis_id': 'analysisId',
        'analysis': 'analysis',
        'type': 'type',
        'project_id': 'projectId',
        'project': 'project',
        'execution_id': 'executionId',
        'status': 'status',
        'statuses': 'statuses',
        'outputs': 'outputs',
        'model_batch_jobs': 'modelBatchJobs',
        'process_jobs': 'processJobs',
        'feature_sub_categories': 'featureSubCategories',
        'config': 'config',
        'last_updated_by': 'lastUpdatedBy',
        'started_at': 'startedAt',
        'ended_at': 'endedAt',
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'archived_at': 'archivedAt',
        'version': 'version'
    }

    def __init__(self, id=None, analysis_id=None, analysis=None, type=None, project_id=None, project=None, execution_id=None, status=None, statuses=None, outputs=None, model_batch_jobs=None, process_jobs=None, feature_sub_categories=None, config=None, last_updated_by=None, started_at=None, ended_at=None, created_by=None, created_at=None, updated_at=None, archived_at=None, version=None):  # noqa: E501
        """AnalysisJob - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._analysis_id = None
        self._analysis = None
        self._type = None
        self._project_id = None
        self._project = None
        self._execution_id = None
        self._status = None
        self._statuses = None
        self._outputs = None
        self._model_batch_jobs = None
        self._process_jobs = None
        self._feature_sub_categories = None
        self._config = None
        self._last_updated_by = None
        self._started_at = None
        self._ended_at = None
        self._created_by = None
        self._created_at = None
        self._updated_at = None
        self._archived_at = None
        self._version = None
        self.discriminator = None
        self.id = id
        self.analysis_id = analysis_id
        if analysis is not None:
            self.analysis = analysis
        self.type = type
        self.project_id = project_id
        if project is not None:
            self.project = project
        if execution_id is not None:
            self.execution_id = execution_id
        if status is not None:
            self.status = status
        if statuses is not None:
            self.statuses = statuses
        if outputs is not None:
            self.outputs = outputs
        if model_batch_jobs is not None:
            self.model_batch_jobs = model_batch_jobs
        if process_jobs is not None:
            self.process_jobs = process_jobs
        self.feature_sub_categories = feature_sub_categories
        if config is not None:
            self.config = config
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if started_at is not None:
            self.started_at = started_at
        if ended_at is not None:
            self.ended_at = ended_at
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if archived_at is not None:
            self.archived_at = archived_at
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this AnalysisJob.  # noqa: E501


        :return: The id of this AnalysisJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalysisJob.


        :param id: The id of this AnalysisJob.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def analysis_id(self):
        """Gets the analysis_id of this AnalysisJob.  # noqa: E501


        :return: The analysis_id of this AnalysisJob.  # noqa: E501
        :rtype: str
        """
        return self._analysis_id

    @analysis_id.setter
    def analysis_id(self, analysis_id):
        """Sets the analysis_id of this AnalysisJob.


        :param analysis_id: The analysis_id of this AnalysisJob.  # noqa: E501
        :type: str
        """
        if analysis_id is None:
            raise ValueError("Invalid value for `analysis_id`, must not be `None`")  # noqa: E501

        self._analysis_id = analysis_id

    @property
    def analysis(self):
        """Gets the analysis of this AnalysisJob.  # noqa: E501


        :return: The analysis of this AnalysisJob.  # noqa: E501
        :rtype: Analysis
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this AnalysisJob.


        :param analysis: The analysis of this AnalysisJob.  # noqa: E501
        :type: Analysis
        """

        self._analysis = analysis

    @property
    def type(self):
        """Gets the type of this AnalysisJob.  # noqa: E501


        :return: The type of this AnalysisJob.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnalysisJob.


        :param type: The type of this AnalysisJob.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["train", "predict"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def project_id(self):
        """Gets the project_id of this AnalysisJob.  # noqa: E501


        :return: The project_id of this AnalysisJob.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AnalysisJob.


        :param project_id: The project_id of this AnalysisJob.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def project(self):
        """Gets the project of this AnalysisJob.  # noqa: E501


        :return: The project of this AnalysisJob.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AnalysisJob.


        :param project: The project of this AnalysisJob.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def execution_id(self):
        """Gets the execution_id of this AnalysisJob.  # noqa: E501


        :return: The execution_id of this AnalysisJob.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this AnalysisJob.


        :param execution_id: The execution_id of this AnalysisJob.  # noqa: E501
        :type: str
        """

        self._execution_id = execution_id

    @property
    def status(self):
        """Gets the status of this AnalysisJob.  # noqa: E501


        :return: The status of this AnalysisJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AnalysisJob.


        :param status: The status of this AnalysisJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def statuses(self):
        """Gets the statuses of this AnalysisJob.  # noqa: E501


        :return: The statuses of this AnalysisJob.  # noqa: E501
        :rtype: list[AnalysisJobStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this AnalysisJob.


        :param statuses: The statuses of this AnalysisJob.  # noqa: E501
        :type: list[AnalysisJobStatus]
        """

        self._statuses = statuses

    @property
    def outputs(self):
        """Gets the outputs of this AnalysisJob.  # noqa: E501


        :return: The outputs of this AnalysisJob.  # noqa: E501
        :rtype: list[AnalysisJobOutput]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this AnalysisJob.


        :param outputs: The outputs of this AnalysisJob.  # noqa: E501
        :type: list[AnalysisJobOutput]
        """

        self._outputs = outputs

    @property
    def model_batch_jobs(self):
        """Gets the model_batch_jobs of this AnalysisJob.  # noqa: E501


        :return: The model_batch_jobs of this AnalysisJob.  # noqa: E501
        :rtype: list[ModelBatchJob]
        """
        return self._model_batch_jobs

    @model_batch_jobs.setter
    def model_batch_jobs(self, model_batch_jobs):
        """Sets the model_batch_jobs of this AnalysisJob.


        :param model_batch_jobs: The model_batch_jobs of this AnalysisJob.  # noqa: E501
        :type: list[ModelBatchJob]
        """

        self._model_batch_jobs = model_batch_jobs

    @property
    def process_jobs(self):
        """Gets the process_jobs of this AnalysisJob.  # noqa: E501


        :return: The process_jobs of this AnalysisJob.  # noqa: E501
        :rtype: list[ProcessJob]
        """
        return self._process_jobs

    @process_jobs.setter
    def process_jobs(self, process_jobs):
        """Sets the process_jobs of this AnalysisJob.


        :param process_jobs: The process_jobs of this AnalysisJob.  # noqa: E501
        :type: list[ProcessJob]
        """

        self._process_jobs = process_jobs

    @property
    def feature_sub_categories(self):
        """Gets the feature_sub_categories of this AnalysisJob.  # noqa: E501


        :return: The feature_sub_categories of this AnalysisJob.  # noqa: E501
        :rtype: list[FeatureSubCategory]
        """
        return self._feature_sub_categories

    @feature_sub_categories.setter
    def feature_sub_categories(self, feature_sub_categories):
        """Sets the feature_sub_categories of this AnalysisJob.


        :param feature_sub_categories: The feature_sub_categories of this AnalysisJob.  # noqa: E501
        :type: list[FeatureSubCategory]
        """
        if feature_sub_categories is None:
            raise ValueError("Invalid value for `feature_sub_categories`, must not be `None`")  # noqa: E501

        self._feature_sub_categories = feature_sub_categories

    @property
    def config(self):
        """Gets the config of this AnalysisJob.  # noqa: E501


        :return: The config of this AnalysisJob.  # noqa: E501
        :rtype: AnalysisJobConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this AnalysisJob.


        :param config: The config of this AnalysisJob.  # noqa: E501
        :type: AnalysisJobConfig
        """

        self._config = config

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this AnalysisJob.  # noqa: E501


        :return: The last_updated_by of this AnalysisJob.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this AnalysisJob.


        :param last_updated_by: The last_updated_by of this AnalysisJob.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def started_at(self):
        """Gets the started_at of this AnalysisJob.  # noqa: E501


        :return: The started_at of this AnalysisJob.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this AnalysisJob.


        :param started_at: The started_at of this AnalysisJob.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def ended_at(self):
        """Gets the ended_at of this AnalysisJob.  # noqa: E501


        :return: The ended_at of this AnalysisJob.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this AnalysisJob.


        :param ended_at: The ended_at of this AnalysisJob.  # noqa: E501
        :type: datetime
        """

        self._ended_at = ended_at

    @property
    def created_by(self):
        """Gets the created_by of this AnalysisJob.  # noqa: E501


        :return: The created_by of this AnalysisJob.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AnalysisJob.


        :param created_by: The created_by of this AnalysisJob.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this AnalysisJob.  # noqa: E501


        :return: The created_at of this AnalysisJob.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AnalysisJob.


        :param created_at: The created_at of this AnalysisJob.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AnalysisJob.  # noqa: E501


        :return: The updated_at of this AnalysisJob.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AnalysisJob.


        :param updated_at: The updated_at of this AnalysisJob.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def archived_at(self):
        """Gets the archived_at of this AnalysisJob.  # noqa: E501


        :return: The archived_at of this AnalysisJob.  # noqa: E501
        :rtype: datetime
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this AnalysisJob.


        :param archived_at: The archived_at of this AnalysisJob.  # noqa: E501
        :type: datetime
        """

        self._archived_at = archived_at

    @property
    def version(self):
        """Gets the version of this AnalysisJob.  # noqa: E501


        :return: The version of this AnalysisJob.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AnalysisJob.


        :param version: The version of this AnalysisJob.  # noqa: E501
        :type: float
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalysisJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
