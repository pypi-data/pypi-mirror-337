# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ComputeprofileComputeAttributeArgs',
    'ComputeprofileComputeAttributeArgsDict',
    'HostInterfacesAttributeArgs',
    'HostInterfacesAttributeArgsDict',
    'JobtemplateTemplateInputArgs',
    'JobtemplateTemplateInputArgsDict',
    'KatelloContentViewFilterArgs',
    'KatelloContentViewFilterArgsDict',
    'KatelloContentViewFilterRuleArgs',
    'KatelloContentViewFilterRuleArgsDict',
    'ProvisioningtemplateTemplateCombinationsAttributeArgs',
    'ProvisioningtemplateTemplateCombinationsAttributeArgsDict',
]

MYPY = False

if not MYPY:
    class ComputeprofileComputeAttributeArgsDict(TypedDict):
        compute_resource_id: pulumi.Input[int]
        """
        ID of the compute resource
        """
        id: NotRequired[pulumi.Input[int]]
        """
        ID of the compute_attribute
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Auto-generated name of the compute attribute
        """
        vm_attrs: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        VM attributes as JSON
        """
elif False:
    ComputeprofileComputeAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ComputeprofileComputeAttributeArgs:
    def __init__(__self__, *,
                 compute_resource_id: pulumi.Input[int],
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vm_attrs: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] compute_resource_id: ID of the compute resource
        :param pulumi.Input[int] id: ID of the compute_attribute
        :param pulumi.Input[str] name: Auto-generated name of the compute attribute
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vm_attrs: VM attributes as JSON
        """
        pulumi.set(__self__, "compute_resource_id", compute_resource_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vm_attrs is not None:
            pulumi.set(__self__, "vm_attrs", vm_attrs)

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> pulumi.Input[int]:
        """
        ID of the compute resource
        """
        return pulumi.get(self, "compute_resource_id")

    @compute_resource_id.setter
    def compute_resource_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "compute_resource_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the compute_attribute
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-generated name of the compute attribute
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="vmAttrs")
    def vm_attrs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        VM attributes as JSON
        """
        return pulumi.get(self, "vm_attrs")

    @vm_attrs.setter
    def vm_attrs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vm_attrs", value)


if not MYPY:
    class HostInterfacesAttributeArgsDict(TypedDict):
        attached_devices: NotRequired[pulumi.Input[str]]
        """
        Identifiers of attached interfaces, e.g. 'eth1', 'eth2' as comma-separated list
        """
        attached_to: NotRequired[pulumi.Input[str]]
        """
        Identifier of the interface to which this interface belongs.
        """
        bmc_provider: NotRequired[pulumi.Input[str]]
        """
        Provider used for BMC/IMPI functionality. Values include: `"IPMI"`
        """
        compute_attributes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Hypervisor specific interface options
        """
        id: NotRequired[pulumi.Input[int]]
        """
        Unique identifier for the interface.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        Identifier of this interface local to the host.
        """
        ip: NotRequired[pulumi.Input[str]]
        """
        IP address associated with the interface.
        """
        mac: NotRequired[pulumi.Input[str]]
        """
        MAC address associated with the interface.
        """
        managed: NotRequired[pulumi.Input[bool]]
        """
        Whether or not this interface is managed by Foreman.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the interface
        """
        password: NotRequired[pulumi.Input[str]]
        """
        Associated password used for BMC/IPMI functionality.
        """
        primary: NotRequired[pulumi.Input[bool]]
        """
        Whether or not this is the primary interface.
        """
        provision: NotRequired[pulumi.Input[bool]]
        """
        Whether or not this interface is used to provision the host.
        """
        subnet_id: NotRequired[pulumi.Input[int]]
        """
        ID of the subnet to associate with this interface.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of interface. Values include: `"interface"`, `"bmc"`, `"bond"`, `"bridge"`.
        """
        username: NotRequired[pulumi.Input[str]]
        """
        Username used for BMC/IPMI functionality.
        """
        virtual: NotRequired[pulumi.Input[bool]]
        """
        Whether or not this is a virtual interface.
        """
elif False:
    HostInterfacesAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HostInterfacesAttributeArgs:
    def __init__(__self__, *,
                 attached_devices: Optional[pulumi.Input[str]] = None,
                 attached_to: Optional[pulumi.Input[str]] = None,
                 bmc_provider: Optional[pulumi.Input[str]] = None,
                 compute_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 provision: Optional[pulumi.Input[bool]] = None,
                 subnet_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 virtual: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] attached_devices: Identifiers of attached interfaces, e.g. 'eth1', 'eth2' as comma-separated list
        :param pulumi.Input[str] attached_to: Identifier of the interface to which this interface belongs.
        :param pulumi.Input[str] bmc_provider: Provider used for BMC/IMPI functionality. Values include: `"IPMI"`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] compute_attributes: Hypervisor specific interface options
        :param pulumi.Input[int] id: Unique identifier for the interface.
        :param pulumi.Input[str] identifier: Identifier of this interface local to the host.
        :param pulumi.Input[str] ip: IP address associated with the interface.
        :param pulumi.Input[str] mac: MAC address associated with the interface.
        :param pulumi.Input[bool] managed: Whether or not this interface is managed by Foreman.
        :param pulumi.Input[str] name: Name of the interface
        :param pulumi.Input[str] password: Associated password used for BMC/IPMI functionality.
        :param pulumi.Input[bool] primary: Whether or not this is the primary interface.
        :param pulumi.Input[bool] provision: Whether or not this interface is used to provision the host.
        :param pulumi.Input[int] subnet_id: ID of the subnet to associate with this interface.
        :param pulumi.Input[str] type: The type of interface. Values include: `"interface"`, `"bmc"`, `"bond"`, `"bridge"`.
        :param pulumi.Input[str] username: Username used for BMC/IPMI functionality.
        :param pulumi.Input[bool] virtual: Whether or not this is a virtual interface.
        """
        if attached_devices is not None:
            pulumi.set(__self__, "attached_devices", attached_devices)
        if attached_to is not None:
            pulumi.set(__self__, "attached_to", attached_to)
        if bmc_provider is not None:
            pulumi.set(__self__, "bmc_provider", bmc_provider)
        if compute_attributes is not None:
            pulumi.set(__self__, "compute_attributes", compute_attributes)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if provision is not None:
            pulumi.set(__self__, "provision", provision)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if virtual is not None:
            pulumi.set(__self__, "virtual", virtual)

    @property
    @pulumi.getter(name="attachedDevices")
    def attached_devices(self) -> Optional[pulumi.Input[str]]:
        """
        Identifiers of attached interfaces, e.g. 'eth1', 'eth2' as comma-separated list
        """
        return pulumi.get(self, "attached_devices")

    @attached_devices.setter
    def attached_devices(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attached_devices", value)

    @property
    @pulumi.getter(name="attachedTo")
    def attached_to(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the interface to which this interface belongs.
        """
        return pulumi.get(self, "attached_to")

    @attached_to.setter
    def attached_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attached_to", value)

    @property
    @pulumi.getter(name="bmcProvider")
    def bmc_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Provider used for BMC/IMPI functionality. Values include: `"IPMI"`
        """
        return pulumi.get(self, "bmc_provider")

    @bmc_provider.setter
    def bmc_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bmc_provider", value)

    @property
    @pulumi.getter(name="computeAttributes")
    def compute_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Hypervisor specific interface options
        """
        return pulumi.get(self, "compute_attributes")

    @compute_attributes.setter
    def compute_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "compute_attributes", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Unique identifier for the interface.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of this interface local to the host.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address associated with the interface.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address associated with the interface.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def managed(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not this interface is managed by Foreman.
        """
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the interface
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Associated password used for BMC/IPMI functionality.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not this is the primary interface.
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def provision(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not this interface is used to provision the host.
        """
        return pulumi.get(self, "provision")

    @provision.setter
    def provision(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provision", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the subnet to associate with this interface.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of interface. Values include: `"interface"`, `"bmc"`, `"bond"`, `"bridge"`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username used for BMC/IPMI functionality.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def virtual(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not this is a virtual interface.
        """
        return pulumi.get(self, "virtual")

    @virtual.setter
    def virtual(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "virtual", value)


if not MYPY:
    class JobtemplateTemplateInputArgsDict(TypedDict):
        default: pulumi.Input[str]
        name: pulumi.Input[str]
        """
        The name of the template input
        """
        __meta_: NotRequired[pulumi.Input[bool]]
        """
        @SUMMARY Foreman representation of a template input.
        """
        advanced: NotRequired[pulumi.Input[bool]]
        description: NotRequired[pulumi.Input[str]]
        fact_name: NotRequired[pulumi.Input[str]]
        hidden_value: NotRequired[pulumi.Input[bool]]
        id: NotRequired[pulumi.Input[str]]
        input_type: NotRequired[pulumi.Input[str]]
        puppet_class_name: NotRequired[pulumi.Input[str]]
        puppet_parameter_name: NotRequired[pulumi.Input[str]]
        required: NotRequired[pulumi.Input[bool]]
        resource_type: NotRequired[pulumi.Input[str]]
        template_id: NotRequired[pulumi.Input[int]]
        value_type: NotRequired[pulumi.Input[str]]
        variable_name: NotRequired[pulumi.Input[str]]
elif False:
    JobtemplateTemplateInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobtemplateTemplateInputArgs:
    def __init__(__self__, *,
                 default: pulumi.Input[str],
                 name: pulumi.Input[str],
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 advanced: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fact_name: Optional[pulumi.Input[str]] = None,
                 hidden_value: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 input_type: Optional[pulumi.Input[str]] = None,
                 puppet_class_name: Optional[pulumi.Input[str]] = None,
                 puppet_parameter_name: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None,
                 value_type: Optional[pulumi.Input[str]] = None,
                 variable_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the template input
        :param pulumi.Input[bool] __meta_: @SUMMARY Foreman representation of a template input.
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "name", name)
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fact_name is not None:
            pulumi.set(__self__, "fact_name", fact_name)
        if hidden_value is not None:
            pulumi.set(__self__, "hidden_value", hidden_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_type is not None:
            pulumi.set(__self__, "input_type", input_type)
        if puppet_class_name is not None:
            pulumi.set(__self__, "puppet_class_name", puppet_class_name)
        if puppet_parameter_name is not None:
            pulumi.set(__self__, "puppet_parameter_name", puppet_parameter_name)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def default(self) -> pulumi.Input[str]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: pulumi.Input[str]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the template input
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY Foreman representation of a template input.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "advanced")

    @advanced.setter
    def advanced(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "advanced", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="factName")
    def fact_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fact_name")

    @fact_name.setter
    def fact_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fact_name", value)

    @property
    @pulumi.getter(name="hiddenValue")
    def hidden_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden_value")

    @hidden_value.setter
    def hidden_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden_value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_type")

    @input_type.setter
    def input_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_type", value)

    @property
    @pulumi.getter(name="puppetClassName")
    def puppet_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "puppet_class_name")

    @puppet_class_name.setter
    def puppet_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puppet_class_name", value)

    @property
    @pulumi.getter(name="puppetParameterName")
    def puppet_parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "puppet_parameter_name")

    @puppet_parameter_name.setter
    def puppet_parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puppet_parameter_name", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_type", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_name", value)


if not MYPY:
    class KatelloContentViewFilterArgsDict(TypedDict):
        name: pulumi.Input[str]
        type: pulumi.Input[str]
        """
        Type of this filter, e.g. DEB or RPM
        """
        description: NotRequired[pulumi.Input[str]]
        id: NotRequired[pulumi.Input[int]]
        inclusion: NotRequired[pulumi.Input[bool]]
        """
        specifies if content should be included or excluded, default: inclusion=false
        """
        rules: NotRequired[pulumi.Input[Sequence[pulumi.Input['KatelloContentViewFilterRuleArgsDict']]]]
elif False:
    KatelloContentViewFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KatelloContentViewFilterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 inclusion: Optional[pulumi.Input[bool]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['KatelloContentViewFilterRuleArgs']]]] = None):
        """
        :param pulumi.Input[str] type: Type of this filter, e.g. DEB or RPM
        :param pulumi.Input[bool] inclusion: specifies if content should be included or excluded, default: inclusion=false
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inclusion is not None:
            pulumi.set(__self__, "inclusion", inclusion)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of this filter, e.g. DEB or RPM
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def inclusion(self) -> Optional[pulumi.Input[bool]]:
        """
        specifies if content should be included or excluded, default: inclusion=false
        """
        return pulumi.get(self, "inclusion")

    @inclusion.setter
    def inclusion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inclusion", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KatelloContentViewFilterRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KatelloContentViewFilterRuleArgs']]]]):
        pulumi.set(self, "rules", value)


if not MYPY:
    class KatelloContentViewFilterRuleArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Filter pattern of this filter @EXAMPLE apt*
        """
        architecture: NotRequired[pulumi.Input[str]]
        id: NotRequired[pulumi.Input[int]]
elif False:
    KatelloContentViewFilterRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KatelloContentViewFilterRuleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 architecture: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: Filter pattern of this filter @EXAMPLE apt*
        """
        pulumi.set(__self__, "name", name)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Filter pattern of this filter @EXAMPLE apt*
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class ProvisioningtemplateTemplateCombinationsAttributeArgsDict(TypedDict):
        environment_id: NotRequired[pulumi.Input[int]]
        """
        The environment ID for this template combination.
        """
        hostgroup_id: NotRequired[pulumi.Input[int]]
        """
        The hostgroup ID for this template combination.
        """
        id: NotRequired[pulumi.Input[int]]
        """
        Template combination unique identifier.
        """
elif False:
    ProvisioningtemplateTemplateCombinationsAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProvisioningtemplateTemplateCombinationsAttributeArgs:
    def __init__(__self__, *,
                 environment_id: Optional[pulumi.Input[int]] = None,
                 hostgroup_id: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] environment_id: The environment ID for this template combination.
        :param pulumi.Input[int] hostgroup_id: The hostgroup ID for this template combination.
        :param pulumi.Input[int] id: Template combination unique identifier.
        """
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if hostgroup_id is not None:
            pulumi.set(__self__, "hostgroup_id", hostgroup_id)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[int]]:
        """
        The environment ID for this template combination.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter(name="hostgroupId")
    def hostgroup_id(self) -> Optional[pulumi.Input[int]]:
        """
        The hostgroup ID for this template combination.
        """
        return pulumi.get(self, "hostgroup_id")

    @hostgroup_id.setter
    def hostgroup_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hostgroup_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Template combination unique identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


