# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDefaulttemplateResult',
    'AwaitableGetDefaulttemplateResult',
    'get_defaulttemplate',
    'get_defaulttemplate_output',
]

@pulumi.output_type
class GetDefaulttemplateResult:
    """
    A collection of values returned by getDefaulttemplate.
    """
    def __init__(__self__, id=None, name=None, operatingsystem_id=None, provisioningtemplate_id=None, templatekind_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operatingsystem_id and not isinstance(operatingsystem_id, int):
            raise TypeError("Expected argument 'operatingsystem_id' to be a int")
        pulumi.set(__self__, "operatingsystem_id", operatingsystem_id)
        if provisioningtemplate_id and not isinstance(provisioningtemplate_id, int):
            raise TypeError("Expected argument 'provisioningtemplate_id' to be a int")
        pulumi.set(__self__, "provisioningtemplate_id", provisioningtemplate_id)
        if templatekind_id and not isinstance(templatekind_id, int):
            raise TypeError("Expected argument 'templatekind_id' to be a int")
        pulumi.set(__self__, "templatekind_id", templatekind_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> int:
        return pulumi.get(self, "operatingsystem_id")

    @property
    @pulumi.getter(name="provisioningtemplateId")
    def provisioningtemplate_id(self) -> int:
        return pulumi.get(self, "provisioningtemplate_id")

    @property
    @pulumi.getter(name="templatekindId")
    def templatekind_id(self) -> int:
        return pulumi.get(self, "templatekind_id")


class AwaitableGetDefaulttemplateResult(GetDefaulttemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDefaulttemplateResult(
            id=self.id,
            name=self.name,
            operatingsystem_id=self.operatingsystem_id,
            provisioningtemplate_id=self.provisioningtemplate_id,
            templatekind_id=self.templatekind_id)


def get_defaulttemplate(name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDefaulttemplateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getDefaulttemplate:getDefaulttemplate', __args__, opts=opts, typ=GetDefaulttemplateResult).value

    return AwaitableGetDefaulttemplateResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        operatingsystem_id=pulumi.get(__ret__, 'operatingsystem_id'),
        provisioningtemplate_id=pulumi.get(__ret__, 'provisioningtemplate_id'),
        templatekind_id=pulumi.get(__ret__, 'templatekind_id'))
def get_defaulttemplate_output(name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDefaulttemplateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getDefaulttemplate:getDefaulttemplate', __args__, opts=opts, typ=GetDefaulttemplateResult)
    return __ret__.apply(lambda __response__: GetDefaulttemplateResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        operatingsystem_id=pulumi.get(__response__, 'operatingsystem_id'),
        provisioningtemplate_id=pulumi.get(__response__, 'provisioningtemplate_id'),
        templatekind_id=pulumi.get(__response__, 'templatekind_id')))
