# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['HostgroupArgs', 'Hostgroup']

@pulumi.input_type
class HostgroupArgs:
    def __init__(__self__, *,
                 architecture_id: Optional[pulumi.Input[int]] = None,
                 compute_profile_id: Optional[pulumi.Input[int]] = None,
                 compute_resource_id: Optional[pulumi.Input[int]] = None,
                 config_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 content_source_id: Optional[pulumi.Input[int]] = None,
                 content_view_id: Optional[pulumi.Input[int]] = None,
                 domain_id: Optional[pulumi.Input[int]] = None,
                 environment_id: Optional[pulumi.Input[int]] = None,
                 lifecycle_environment_id: Optional[pulumi.Input[int]] = None,
                 medium_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 parent_id: Optional[pulumi.Input[int]] = None,
                 ptable_id: Optional[pulumi.Input[int]] = None,
                 puppet_ca_proxy_id: Optional[pulumi.Input[int]] = None,
                 puppet_class_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 puppet_proxy_id: Optional[pulumi.Input[int]] = None,
                 pxe_loader: Optional[pulumi.Input[str]] = None,
                 realm_id: Optional[pulumi.Input[int]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Hostgroup resource.
        :param pulumi.Input[int] architecture_id: ID of the architecture associated with this hostgroup.
        :param pulumi.Input[int] compute_profile_id: ID of the compute profile associated with this hostgroup.
        :param pulumi.Input[int] compute_resource_id: ID of the compute resource associated with this hostgroup.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] config_group_ids: IDs of the applied config groups.
        :param pulumi.Input[int] content_source_id: ID of the content source associated with this hostgroup.
        :param pulumi.Input[int] content_view_id: ID of the content view associated with this hostgroup.
        :param pulumi.Input[int] domain_id: ID of the domain associated with this hostgroup.
        :param pulumi.Input[int] environment_id: ID of the environment associated with this hostgroup.
        :param pulumi.Input[int] lifecycle_environment_id: ID of the lifecycle environment associated with this hostgroup.
        :param pulumi.Input[int] medium_id: ID of the media associated with this hostgroup.
        :param pulumi.Input[str] name: Hostgroup name. @EXAMPLE "compute"
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system associated with this hostgroup.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters that will be saved as hostgroup parameters in the group config.
        :param pulumi.Input[int] parent_id: ID of the parent hostgroup.
        :param pulumi.Input[int] ptable_id: ID of the partition table associated with this hostgroup.
        :param pulumi.Input[int] puppet_ca_proxy_id: ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] puppet_class_ids: IDs of the applied puppet classes.
        :param pulumi.Input[int] puppet_proxy_id: ID of the smart proxy acting as the puppet proxy server for this hostgroup.
        :param pulumi.Input[str] pxe_loader: Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
               UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
               HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
        :param pulumi.Input[int] realm_id: ID of the realm associated with this hostgroup.
        :param pulumi.Input[str] root_password: Default root password
        :param pulumi.Input[int] subnet_id: ID of the subnet associated with the hostgroup.
        """
        if architecture_id is not None:
            pulumi.set(__self__, "architecture_id", architecture_id)
        if compute_profile_id is not None:
            pulumi.set(__self__, "compute_profile_id", compute_profile_id)
        if compute_resource_id is not None:
            pulumi.set(__self__, "compute_resource_id", compute_resource_id)
        if config_group_ids is not None:
            pulumi.set(__self__, "config_group_ids", config_group_ids)
        if content_source_id is not None:
            pulumi.set(__self__, "content_source_id", content_source_id)
        if content_view_id is not None:
            pulumi.set(__self__, "content_view_id", content_view_id)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if lifecycle_environment_id is not None:
            pulumi.set(__self__, "lifecycle_environment_id", lifecycle_environment_id)
        if medium_id is not None:
            pulumi.set(__self__, "medium_id", medium_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operatingsystem_id is not None:
            pulumi.set(__self__, "operatingsystem_id", operatingsystem_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if ptable_id is not None:
            pulumi.set(__self__, "ptable_id", ptable_id)
        if puppet_ca_proxy_id is not None:
            pulumi.set(__self__, "puppet_ca_proxy_id", puppet_ca_proxy_id)
        if puppet_class_ids is not None:
            pulumi.set(__self__, "puppet_class_ids", puppet_class_ids)
        if puppet_proxy_id is not None:
            pulumi.set(__self__, "puppet_proxy_id", puppet_proxy_id)
        if pxe_loader is not None:
            pulumi.set(__self__, "pxe_loader", pxe_loader)
        if realm_id is not None:
            pulumi.set(__self__, "realm_id", realm_id)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="architectureId")
    def architecture_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the architecture associated with this hostgroup.
        """
        return pulumi.get(self, "architecture_id")

    @architecture_id.setter
    def architecture_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "architecture_id", value)

    @property
    @pulumi.getter(name="computeProfileId")
    def compute_profile_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the compute profile associated with this hostgroup.
        """
        return pulumi.get(self, "compute_profile_id")

    @compute_profile_id.setter
    def compute_profile_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute_profile_id", value)

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the compute resource associated with this hostgroup.
        """
        return pulumi.get(self, "compute_resource_id")

    @compute_resource_id.setter
    def compute_resource_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute_resource_id", value)

    @property
    @pulumi.getter(name="configGroupIds")
    def config_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the applied config groups.
        """
        return pulumi.get(self, "config_group_ids")

    @config_group_ids.setter
    def config_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "config_group_ids", value)

    @property
    @pulumi.getter(name="contentSourceId")
    def content_source_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the content source associated with this hostgroup.
        """
        return pulumi.get(self, "content_source_id")

    @content_source_id.setter
    def content_source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_source_id", value)

    @property
    @pulumi.getter(name="contentViewId")
    def content_view_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the content view associated with this hostgroup.
        """
        return pulumi.get(self, "content_view_id")

    @content_view_id.setter
    def content_view_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_view_id", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the domain associated with this hostgroup.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the environment associated with this hostgroup.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter(name="lifecycleEnvironmentId")
    def lifecycle_environment_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the lifecycle environment associated with this hostgroup.
        """
        return pulumi.get(self, "lifecycle_environment_id")

    @lifecycle_environment_id.setter
    def lifecycle_environment_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lifecycle_environment_id", value)

    @property
    @pulumi.getter(name="mediumId")
    def medium_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the media associated with this hostgroup.
        """
        return pulumi.get(self, "medium_id")

    @medium_id.setter
    def medium_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "medium_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Hostgroup name. @EXAMPLE "compute"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the operating system associated with this hostgroup.
        """
        return pulumi.get(self, "operatingsystem_id")

    @operatingsystem_id.setter
    def operatingsystem_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "operatingsystem_id", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters that will be saved as hostgroup parameters in the group config.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the parent hostgroup.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="ptableId")
    def ptable_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the partition table associated with this hostgroup.
        """
        return pulumi.get(self, "ptable_id")

    @ptable_id.setter
    def ptable_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ptable_id", value)

    @property
    @pulumi.getter(name="puppetCaProxyId")
    def puppet_ca_proxy_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
        """
        return pulumi.get(self, "puppet_ca_proxy_id")

    @puppet_ca_proxy_id.setter
    def puppet_ca_proxy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "puppet_ca_proxy_id", value)

    @property
    @pulumi.getter(name="puppetClassIds")
    def puppet_class_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the applied puppet classes.
        """
        return pulumi.get(self, "puppet_class_ids")

    @puppet_class_ids.setter
    def puppet_class_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "puppet_class_ids", value)

    @property
    @pulumi.getter(name="puppetProxyId")
    def puppet_proxy_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the smart proxy acting as the puppet proxy server for this hostgroup.
        """
        return pulumi.get(self, "puppet_proxy_id")

    @puppet_proxy_id.setter
    def puppet_proxy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "puppet_proxy_id", value)

    @property
    @pulumi.getter(name="pxeLoader")
    def pxe_loader(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
        UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
        HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
        """
        return pulumi.get(self, "pxe_loader")

    @pxe_loader.setter
    def pxe_loader(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pxe_loader", value)

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the realm associated with this hostgroup.
        """
        return pulumi.get(self, "realm_id")

    @realm_id.setter
    def realm_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "realm_id", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        """
        Default root password
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the subnet associated with the hostgroup.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class _HostgroupState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 architecture_id: Optional[pulumi.Input[int]] = None,
                 compute_profile_id: Optional[pulumi.Input[int]] = None,
                 compute_resource_id: Optional[pulumi.Input[int]] = None,
                 config_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 content_source_id: Optional[pulumi.Input[int]] = None,
                 content_view_id: Optional[pulumi.Input[int]] = None,
                 domain_id: Optional[pulumi.Input[int]] = None,
                 environment_id: Optional[pulumi.Input[int]] = None,
                 lifecycle_environment_id: Optional[pulumi.Input[int]] = None,
                 medium_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 parent_id: Optional[pulumi.Input[int]] = None,
                 ptable_id: Optional[pulumi.Input[int]] = None,
                 puppet_ca_proxy_id: Optional[pulumi.Input[int]] = None,
                 puppet_class_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 puppet_proxy_id: Optional[pulumi.Input[int]] = None,
                 pxe_loader: Optional[pulumi.Input[str]] = None,
                 realm_id: Optional[pulumi.Input[int]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[int]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Hostgroup resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY Hostgroups are organized in a tree-like structure and inherit values from their parent hostgroup(s). When hosts
               get associated with a hostgroup, it will inherit attributes from the hostgroup. This allows for easy, shared
               configuration of various hosts based on common attributes.
        :param pulumi.Input[int] architecture_id: ID of the architecture associated with this hostgroup.
        :param pulumi.Input[int] compute_profile_id: ID of the compute profile associated with this hostgroup.
        :param pulumi.Input[int] compute_resource_id: ID of the compute resource associated with this hostgroup.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] config_group_ids: IDs of the applied config groups.
        :param pulumi.Input[int] content_source_id: ID of the content source associated with this hostgroup.
        :param pulumi.Input[int] content_view_id: ID of the content view associated with this hostgroup.
        :param pulumi.Input[int] domain_id: ID of the domain associated with this hostgroup.
        :param pulumi.Input[int] environment_id: ID of the environment associated with this hostgroup.
        :param pulumi.Input[int] lifecycle_environment_id: ID of the lifecycle environment associated with this hostgroup.
        :param pulumi.Input[int] medium_id: ID of the media associated with this hostgroup.
        :param pulumi.Input[str] name: Hostgroup name. @EXAMPLE "compute"
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system associated with this hostgroup.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters that will be saved as hostgroup parameters in the group config.
        :param pulumi.Input[int] parent_id: ID of the parent hostgroup.
        :param pulumi.Input[int] ptable_id: ID of the partition table associated with this hostgroup.
        :param pulumi.Input[int] puppet_ca_proxy_id: ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] puppet_class_ids: IDs of the applied puppet classes.
        :param pulumi.Input[int] puppet_proxy_id: ID of the smart proxy acting as the puppet proxy server for this hostgroup.
        :param pulumi.Input[str] pxe_loader: Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
               UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
               HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
        :param pulumi.Input[int] realm_id: ID of the realm associated with this hostgroup.
        :param pulumi.Input[str] root_password: Default root password
        :param pulumi.Input[int] subnet_id: ID of the subnet associated with the hostgroup.
        :param pulumi.Input[str] title: The title is the fullname of the hostgroup. A hostgroup's title is a path-like string from the head of the hostgroup
               tree down to this hostgroup. The title will be in the form of: "<parent 1>/<parent 2>/.../<name>".
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if architecture_id is not None:
            pulumi.set(__self__, "architecture_id", architecture_id)
        if compute_profile_id is not None:
            pulumi.set(__self__, "compute_profile_id", compute_profile_id)
        if compute_resource_id is not None:
            pulumi.set(__self__, "compute_resource_id", compute_resource_id)
        if config_group_ids is not None:
            pulumi.set(__self__, "config_group_ids", config_group_ids)
        if content_source_id is not None:
            pulumi.set(__self__, "content_source_id", content_source_id)
        if content_view_id is not None:
            pulumi.set(__self__, "content_view_id", content_view_id)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if lifecycle_environment_id is not None:
            pulumi.set(__self__, "lifecycle_environment_id", lifecycle_environment_id)
        if medium_id is not None:
            pulumi.set(__self__, "medium_id", medium_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operatingsystem_id is not None:
            pulumi.set(__self__, "operatingsystem_id", operatingsystem_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if ptable_id is not None:
            pulumi.set(__self__, "ptable_id", ptable_id)
        if puppet_ca_proxy_id is not None:
            pulumi.set(__self__, "puppet_ca_proxy_id", puppet_ca_proxy_id)
        if puppet_class_ids is not None:
            pulumi.set(__self__, "puppet_class_ids", puppet_class_ids)
        if puppet_proxy_id is not None:
            pulumi.set(__self__, "puppet_proxy_id", puppet_proxy_id)
        if pxe_loader is not None:
            pulumi.set(__self__, "pxe_loader", pxe_loader)
        if realm_id is not None:
            pulumi.set(__self__, "realm_id", realm_id)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY Hostgroups are organized in a tree-like structure and inherit values from their parent hostgroup(s). When hosts
        get associated with a hostgroup, it will inherit attributes from the hostgroup. This allows for easy, shared
        configuration of various hosts based on common attributes.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter(name="architectureId")
    def architecture_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the architecture associated with this hostgroup.
        """
        return pulumi.get(self, "architecture_id")

    @architecture_id.setter
    def architecture_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "architecture_id", value)

    @property
    @pulumi.getter(name="computeProfileId")
    def compute_profile_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the compute profile associated with this hostgroup.
        """
        return pulumi.get(self, "compute_profile_id")

    @compute_profile_id.setter
    def compute_profile_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute_profile_id", value)

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the compute resource associated with this hostgroup.
        """
        return pulumi.get(self, "compute_resource_id")

    @compute_resource_id.setter
    def compute_resource_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute_resource_id", value)

    @property
    @pulumi.getter(name="configGroupIds")
    def config_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the applied config groups.
        """
        return pulumi.get(self, "config_group_ids")

    @config_group_ids.setter
    def config_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "config_group_ids", value)

    @property
    @pulumi.getter(name="contentSourceId")
    def content_source_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the content source associated with this hostgroup.
        """
        return pulumi.get(self, "content_source_id")

    @content_source_id.setter
    def content_source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_source_id", value)

    @property
    @pulumi.getter(name="contentViewId")
    def content_view_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the content view associated with this hostgroup.
        """
        return pulumi.get(self, "content_view_id")

    @content_view_id.setter
    def content_view_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_view_id", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the domain associated with this hostgroup.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the environment associated with this hostgroup.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter(name="lifecycleEnvironmentId")
    def lifecycle_environment_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the lifecycle environment associated with this hostgroup.
        """
        return pulumi.get(self, "lifecycle_environment_id")

    @lifecycle_environment_id.setter
    def lifecycle_environment_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lifecycle_environment_id", value)

    @property
    @pulumi.getter(name="mediumId")
    def medium_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the media associated with this hostgroup.
        """
        return pulumi.get(self, "medium_id")

    @medium_id.setter
    def medium_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "medium_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Hostgroup name. @EXAMPLE "compute"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the operating system associated with this hostgroup.
        """
        return pulumi.get(self, "operatingsystem_id")

    @operatingsystem_id.setter
    def operatingsystem_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "operatingsystem_id", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of parameters that will be saved as hostgroup parameters in the group config.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the parent hostgroup.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="ptableId")
    def ptable_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the partition table associated with this hostgroup.
        """
        return pulumi.get(self, "ptable_id")

    @ptable_id.setter
    def ptable_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ptable_id", value)

    @property
    @pulumi.getter(name="puppetCaProxyId")
    def puppet_ca_proxy_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
        """
        return pulumi.get(self, "puppet_ca_proxy_id")

    @puppet_ca_proxy_id.setter
    def puppet_ca_proxy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "puppet_ca_proxy_id", value)

    @property
    @pulumi.getter(name="puppetClassIds")
    def puppet_class_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of the applied puppet classes.
        """
        return pulumi.get(self, "puppet_class_ids")

    @puppet_class_ids.setter
    def puppet_class_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "puppet_class_ids", value)

    @property
    @pulumi.getter(name="puppetProxyId")
    def puppet_proxy_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the smart proxy acting as the puppet proxy server for this hostgroup.
        """
        return pulumi.get(self, "puppet_proxy_id")

    @puppet_proxy_id.setter
    def puppet_proxy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "puppet_proxy_id", value)

    @property
    @pulumi.getter(name="pxeLoader")
    def pxe_loader(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
        UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
        HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
        """
        return pulumi.get(self, "pxe_loader")

    @pxe_loader.setter
    def pxe_loader(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pxe_loader", value)

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the realm associated with this hostgroup.
        """
        return pulumi.get(self, "realm_id")

    @realm_id.setter
    def realm_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "realm_id", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        """
        Default root password
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the subnet associated with the hostgroup.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title is the fullname of the hostgroup. A hostgroup's title is a path-like string from the head of the hostgroup
        tree down to this hostgroup. The title will be in the form of: "<parent 1>/<parent 2>/.../<name>".
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


class Hostgroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture_id: Optional[pulumi.Input[int]] = None,
                 compute_profile_id: Optional[pulumi.Input[int]] = None,
                 compute_resource_id: Optional[pulumi.Input[int]] = None,
                 config_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 content_source_id: Optional[pulumi.Input[int]] = None,
                 content_view_id: Optional[pulumi.Input[int]] = None,
                 domain_id: Optional[pulumi.Input[int]] = None,
                 environment_id: Optional[pulumi.Input[int]] = None,
                 lifecycle_environment_id: Optional[pulumi.Input[int]] = None,
                 medium_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 parent_id: Optional[pulumi.Input[int]] = None,
                 ptable_id: Optional[pulumi.Input[int]] = None,
                 puppet_ca_proxy_id: Optional[pulumi.Input[int]] = None,
                 puppet_class_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 puppet_proxy_id: Optional[pulumi.Input[int]] = None,
                 pxe_loader: Optional[pulumi.Input[str]] = None,
                 realm_id: Optional[pulumi.Input[int]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Hostgroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] architecture_id: ID of the architecture associated with this hostgroup.
        :param pulumi.Input[int] compute_profile_id: ID of the compute profile associated with this hostgroup.
        :param pulumi.Input[int] compute_resource_id: ID of the compute resource associated with this hostgroup.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] config_group_ids: IDs of the applied config groups.
        :param pulumi.Input[int] content_source_id: ID of the content source associated with this hostgroup.
        :param pulumi.Input[int] content_view_id: ID of the content view associated with this hostgroup.
        :param pulumi.Input[int] domain_id: ID of the domain associated with this hostgroup.
        :param pulumi.Input[int] environment_id: ID of the environment associated with this hostgroup.
        :param pulumi.Input[int] lifecycle_environment_id: ID of the lifecycle environment associated with this hostgroup.
        :param pulumi.Input[int] medium_id: ID of the media associated with this hostgroup.
        :param pulumi.Input[str] name: Hostgroup name. @EXAMPLE "compute"
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system associated with this hostgroup.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters that will be saved as hostgroup parameters in the group config.
        :param pulumi.Input[int] parent_id: ID of the parent hostgroup.
        :param pulumi.Input[int] ptable_id: ID of the partition table associated with this hostgroup.
        :param pulumi.Input[int] puppet_ca_proxy_id: ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] puppet_class_ids: IDs of the applied puppet classes.
        :param pulumi.Input[int] puppet_proxy_id: ID of the smart proxy acting as the puppet proxy server for this hostgroup.
        :param pulumi.Input[str] pxe_loader: Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
               UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
               HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
        :param pulumi.Input[int] realm_id: ID of the realm associated with this hostgroup.
        :param pulumi.Input[str] root_password: Default root password
        :param pulumi.Input[int] subnet_id: ID of the subnet associated with the hostgroup.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[HostgroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Hostgroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HostgroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HostgroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture_id: Optional[pulumi.Input[int]] = None,
                 compute_profile_id: Optional[pulumi.Input[int]] = None,
                 compute_resource_id: Optional[pulumi.Input[int]] = None,
                 config_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 content_source_id: Optional[pulumi.Input[int]] = None,
                 content_view_id: Optional[pulumi.Input[int]] = None,
                 domain_id: Optional[pulumi.Input[int]] = None,
                 environment_id: Optional[pulumi.Input[int]] = None,
                 lifecycle_environment_id: Optional[pulumi.Input[int]] = None,
                 medium_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operatingsystem_id: Optional[pulumi.Input[int]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 parent_id: Optional[pulumi.Input[int]] = None,
                 ptable_id: Optional[pulumi.Input[int]] = None,
                 puppet_ca_proxy_id: Optional[pulumi.Input[int]] = None,
                 puppet_class_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 puppet_proxy_id: Optional[pulumi.Input[int]] = None,
                 pxe_loader: Optional[pulumi.Input[str]] = None,
                 realm_id: Optional[pulumi.Input[int]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HostgroupArgs.__new__(HostgroupArgs)

            __props__.__dict__["architecture_id"] = architecture_id
            __props__.__dict__["compute_profile_id"] = compute_profile_id
            __props__.__dict__["compute_resource_id"] = compute_resource_id
            __props__.__dict__["config_group_ids"] = config_group_ids
            __props__.__dict__["content_source_id"] = content_source_id
            __props__.__dict__["content_view_id"] = content_view_id
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["lifecycle_environment_id"] = lifecycle_environment_id
            __props__.__dict__["medium_id"] = medium_id
            __props__.__dict__["name"] = name
            __props__.__dict__["operatingsystem_id"] = operatingsystem_id
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["parent_id"] = parent_id
            __props__.__dict__["ptable_id"] = ptable_id
            __props__.__dict__["puppet_ca_proxy_id"] = puppet_ca_proxy_id
            __props__.__dict__["puppet_class_ids"] = puppet_class_ids
            __props__.__dict__["puppet_proxy_id"] = puppet_proxy_id
            __props__.__dict__["pxe_loader"] = pxe_loader
            __props__.__dict__["realm_id"] = realm_id
            __props__.__dict__["root_password"] = None if root_password is None else pulumi.Output.secret(root_password)
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["__meta_"] = None
            __props__.__dict__["title"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["rootPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Hostgroup, __self__).__init__(
            'foreman:index/hostgroup:Hostgroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            architecture_id: Optional[pulumi.Input[int]] = None,
            compute_profile_id: Optional[pulumi.Input[int]] = None,
            compute_resource_id: Optional[pulumi.Input[int]] = None,
            config_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            content_source_id: Optional[pulumi.Input[int]] = None,
            content_view_id: Optional[pulumi.Input[int]] = None,
            domain_id: Optional[pulumi.Input[int]] = None,
            environment_id: Optional[pulumi.Input[int]] = None,
            lifecycle_environment_id: Optional[pulumi.Input[int]] = None,
            medium_id: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            operatingsystem_id: Optional[pulumi.Input[int]] = None,
            parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            parent_id: Optional[pulumi.Input[int]] = None,
            ptable_id: Optional[pulumi.Input[int]] = None,
            puppet_ca_proxy_id: Optional[pulumi.Input[int]] = None,
            puppet_class_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            puppet_proxy_id: Optional[pulumi.Input[int]] = None,
            pxe_loader: Optional[pulumi.Input[str]] = None,
            realm_id: Optional[pulumi.Input[int]] = None,
            root_password: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[int]] = None,
            title: Optional[pulumi.Input[str]] = None) -> 'Hostgroup':
        """
        Get an existing Hostgroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY Hostgroups are organized in a tree-like structure and inherit values from their parent hostgroup(s). When hosts
               get associated with a hostgroup, it will inherit attributes from the hostgroup. This allows for easy, shared
               configuration of various hosts based on common attributes.
        :param pulumi.Input[int] architecture_id: ID of the architecture associated with this hostgroup.
        :param pulumi.Input[int] compute_profile_id: ID of the compute profile associated with this hostgroup.
        :param pulumi.Input[int] compute_resource_id: ID of the compute resource associated with this hostgroup.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] config_group_ids: IDs of the applied config groups.
        :param pulumi.Input[int] content_source_id: ID of the content source associated with this hostgroup.
        :param pulumi.Input[int] content_view_id: ID of the content view associated with this hostgroup.
        :param pulumi.Input[int] domain_id: ID of the domain associated with this hostgroup.
        :param pulumi.Input[int] environment_id: ID of the environment associated with this hostgroup.
        :param pulumi.Input[int] lifecycle_environment_id: ID of the lifecycle environment associated with this hostgroup.
        :param pulumi.Input[int] medium_id: ID of the media associated with this hostgroup.
        :param pulumi.Input[str] name: Hostgroup name. @EXAMPLE "compute"
        :param pulumi.Input[int] operatingsystem_id: ID of the operating system associated with this hostgroup.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A map of parameters that will be saved as hostgroup parameters in the group config.
        :param pulumi.Input[int] parent_id: ID of the parent hostgroup.
        :param pulumi.Input[int] ptable_id: ID of the partition table associated with this hostgroup.
        :param pulumi.Input[int] puppet_ca_proxy_id: ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] puppet_class_ids: IDs of the applied puppet classes.
        :param pulumi.Input[int] puppet_proxy_id: ID of the smart proxy acting as the puppet proxy server for this hostgroup.
        :param pulumi.Input[str] pxe_loader: Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
               UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
               HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
        :param pulumi.Input[int] realm_id: ID of the realm associated with this hostgroup.
        :param pulumi.Input[str] root_password: Default root password
        :param pulumi.Input[int] subnet_id: ID of the subnet associated with the hostgroup.
        :param pulumi.Input[str] title: The title is the fullname of the hostgroup. A hostgroup's title is a path-like string from the head of the hostgroup
               tree down to this hostgroup. The title will be in the form of: "<parent 1>/<parent 2>/.../<name>".
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HostgroupState.__new__(_HostgroupState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["architecture_id"] = architecture_id
        __props__.__dict__["compute_profile_id"] = compute_profile_id
        __props__.__dict__["compute_resource_id"] = compute_resource_id
        __props__.__dict__["config_group_ids"] = config_group_ids
        __props__.__dict__["content_source_id"] = content_source_id
        __props__.__dict__["content_view_id"] = content_view_id
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["lifecycle_environment_id"] = lifecycle_environment_id
        __props__.__dict__["medium_id"] = medium_id
        __props__.__dict__["name"] = name
        __props__.__dict__["operatingsystem_id"] = operatingsystem_id
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["ptable_id"] = ptable_id
        __props__.__dict__["puppet_ca_proxy_id"] = puppet_ca_proxy_id
        __props__.__dict__["puppet_class_ids"] = puppet_class_ids
        __props__.__dict__["puppet_proxy_id"] = puppet_proxy_id
        __props__.__dict__["pxe_loader"] = pxe_loader
        __props__.__dict__["realm_id"] = realm_id
        __props__.__dict__["root_password"] = root_password
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["title"] = title
        return Hostgroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY Hostgroups are organized in a tree-like structure and inherit values from their parent hostgroup(s). When hosts
        get associated with a hostgroup, it will inherit attributes from the hostgroup. This allows for easy, shared
        configuration of various hosts based on common attributes.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter(name="architectureId")
    def architecture_id(self) -> pulumi.Output[int]:
        """
        ID of the architecture associated with this hostgroup.
        """
        return pulumi.get(self, "architecture_id")

    @property
    @pulumi.getter(name="computeProfileId")
    def compute_profile_id(self) -> pulumi.Output[int]:
        """
        ID of the compute profile associated with this hostgroup.
        """
        return pulumi.get(self, "compute_profile_id")

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> pulumi.Output[int]:
        """
        ID of the compute resource associated with this hostgroup.
        """
        return pulumi.get(self, "compute_resource_id")

    @property
    @pulumi.getter(name="configGroupIds")
    def config_group_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        IDs of the applied config groups.
        """
        return pulumi.get(self, "config_group_ids")

    @property
    @pulumi.getter(name="contentSourceId")
    def content_source_id(self) -> pulumi.Output[int]:
        """
        ID of the content source associated with this hostgroup.
        """
        return pulumi.get(self, "content_source_id")

    @property
    @pulumi.getter(name="contentViewId")
    def content_view_id(self) -> pulumi.Output[int]:
        """
        ID of the content view associated with this hostgroup.
        """
        return pulumi.get(self, "content_view_id")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[int]:
        """
        ID of the domain associated with this hostgroup.
        """
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[int]:
        """
        ID of the environment associated with this hostgroup.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter(name="lifecycleEnvironmentId")
    def lifecycle_environment_id(self) -> pulumi.Output[int]:
        """
        ID of the lifecycle environment associated with this hostgroup.
        """
        return pulumi.get(self, "lifecycle_environment_id")

    @property
    @pulumi.getter(name="mediumId")
    def medium_id(self) -> pulumi.Output[int]:
        """
        ID of the media associated with this hostgroup.
        """
        return pulumi.get(self, "medium_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Hostgroup name. @EXAMPLE "compute"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> pulumi.Output[int]:
        """
        ID of the operating system associated with this hostgroup.
        """
        return pulumi.get(self, "operatingsystem_id")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A map of parameters that will be saved as hostgroup parameters in the group config.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[Optional[int]]:
        """
        ID of the parent hostgroup.
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter(name="ptableId")
    def ptable_id(self) -> pulumi.Output[int]:
        """
        ID of the partition table associated with this hostgroup.
        """
        return pulumi.get(self, "ptable_id")

    @property
    @pulumi.getter(name="puppetCaProxyId")
    def puppet_ca_proxy_id(self) -> pulumi.Output[Optional[int]]:
        """
        ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
        """
        return pulumi.get(self, "puppet_ca_proxy_id")

    @property
    @pulumi.getter(name="puppetClassIds")
    def puppet_class_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        IDs of the applied puppet classes.
        """
        return pulumi.get(self, "puppet_class_ids")

    @property
    @pulumi.getter(name="puppetProxyId")
    def puppet_proxy_id(self) -> pulumi.Output[Optional[int]]:
        """
        ID of the smart proxy acting as the puppet proxy server for this hostgroup.
        """
        return pulumi.get(self, "puppet_proxy_id")

    @property
    @pulumi.getter(name="pxeLoader")
    def pxe_loader(self) -> pulumi.Output[str]:
        """
        Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
        UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
        HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
        """
        return pulumi.get(self, "pxe_loader")

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> pulumi.Output[int]:
        """
        ID of the realm associated with this hostgroup.
        """
        return pulumi.get(self, "realm_id")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> pulumi.Output[Optional[str]]:
        """
        Default root password
        """
        return pulumi.get(self, "root_password")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[int]:
        """
        ID of the subnet associated with the hostgroup.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        The title is the fullname of the hostgroup. A hostgroup's title is a path-like string from the head of the hostgroup
        tree down to this hostgroup. The title will be in the form of: "<parent 1>/<parent 2>/.../<name>".
        """
        return pulumi.get(self, "title")

