# generated by datamodel-codegen:
#   filename:  data_room_action_response.json

from __future__ import annotations

from typing import Any, Mapping, Optional, Sequence, Union

from typing_extensions import Literal, NotRequired, TypedDict


class AudienceReference7(TypedDict):
    kind: Literal['BASE']


class AudienceReference8(TypedDict):
    id: str
    kind: Literal['CUSTOM']


class AudienceReference9(TypedDict):
    audienceType: str
    kind: Literal['SEED']


AudienceReference = Union[AudienceReference7, AudienceReference8, AudienceReference9]


BooleanOp = Literal['AND', 'OR']


CombineOperator = Literal['INTERSECT', 'UNION', 'DIFF']


class CustomAudienceDefinition6(TypedDict):
    excludeSeedAudience: NotRequired[Optional[bool]]
    kind: Literal['LOOKALIKE']
    reach: int
    sourceRef: AudienceReference


FilterOperator = Literal[
    'CONTAINS_ANY_OF', 'CONTAINS_NONE_OF', 'CONTAINS_ALL_OF', 'EMPTY', 'NOT_EMPTY'
]


class MediaDcrActionResponse1(TypedDict):
    provisionBaseAudiencePolicyIds: Mapping[str, Any]


class MediaDcrActionResponse2(TypedDict):
    deprovisionBaseAudiencePolicyIds: Mapping[str, Any]


class MediaDcrActionResponse3(TypedDict):
    provisionSeedAudiencePolicyIds: Mapping[str, Any]


class MediaDcrActionResponse4(TypedDict):
    deprovisionSeedAudiencePolicyIds: Mapping[str, Any]


class DeleteCustomAudience(TypedDict):
    numDeletedAudiences: int


class MediaDcrActionResponse6(TypedDict):
    deleteCustomAudience: DeleteCustomAudience


class AudienceFilter(TypedDict):
    attribute: str
    operator: FilterOperator
    values: NotRequired[Sequence[str]]


class AudienceFilters(TypedDict):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class AudienceCombinator(TypedDict):
    filters: NotRequired[Optional[AudienceFilters]]
    operator: CombineOperator
    sourceRef: AudienceReference


class CustomAudienceDefinition7(TypedDict):
    combine: NotRequired[Sequence[AudienceCombinator]]
    filters: NotRequired[Optional[AudienceFilters]]
    kind: Literal['RULE_BASED']
    sourceRef: AudienceReference


CustomAudienceDefinition = Union[CustomAudienceDefinition6, CustomAudienceDefinition7]


class CustomAudience(TypedDict):
    createdAt: str
    createdBy: str
    definition: CustomAudienceDefinition
    doesAudienceDependOnLookalikeAudience: NotRequired[bool]
    id: str
    isStale: NotRequired[bool]
    name: str
    sharedWith: NotRequired[Sequence[str]]


class DeleteCustomAudiences(TypedDict):
    conflictingAudiences: Sequence[CustomAudience]


class MediaDcrActionResponse5(TypedDict):
    deleteCustomAudiences: DeleteCustomAudiences


class GetAudiencePrerequisites(TypedDict):
    audiences: Sequence[CustomAudience]


class MediaDcrActionResponse7(TypedDict):
    getAudiencePrerequisites: GetAudiencePrerequisites


class CreateCustomAudience(TypedDict):
    audience: CustomAudience


class MediaDcrActionResponse8(TypedDict):
    createCustomAudience: CreateCustomAudience


class UpdateCustomAudience(TypedDict):
    audience: NotRequired[Optional[CustomAudience]]


class MediaDcrActionResponse9(TypedDict):
    updateCustomAudience: UpdateCustomAudience


MediaDcrActionResponse = Union[
    MediaDcrActionResponse1,
    MediaDcrActionResponse2,
    MediaDcrActionResponse3,
    MediaDcrActionResponse4,
    MediaDcrActionResponse5,
    MediaDcrActionResponse6,
    MediaDcrActionResponse7,
    MediaDcrActionResponse8,
    MediaDcrActionResponse9,
]


class DataRoomActionResponse1(TypedDict):
    media: MediaDcrActionResponse


DataRoomActionResponse = DataRoomActionResponse1
