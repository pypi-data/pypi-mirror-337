import zipfile

from tqdm import tqdm
import tempfile
import pandas as pd
import inspect
import re
import os
import PyPDF2 as pdf

import pdfplumber

from SakiPy.DatasDeal.dealBankCCB import DealBankCCB
# 引入资源路径
from SakiPy._version import __base_path__

#
from SakiPy.Core.core import ErrorDeal

# 引入时间处理格式
from SakiPy.DatasDeal.dealDateAndTime import DealDateAndTime

# 引入数据样式处理包
from SakiPy.DatasDeal.changeData import ChangeData


# 实例化
changeData= ChangeData()


from SakiPy.DatasDeal.signDeal import deal_sign_turnover

from SakiPy.Core.findDuplicates import FindDuplicates

findDuplicates= FindDuplicates()

# switch函数模块
from SakiPy.Core.core import Switch,get_encoding
# 处理路径的模块
from SakiPy.DatasDeal.pathDeal import PathDeal


from SakiPy.DatasDeal.specialDeal import *

from SakiPy.DatasDeal.pdfDeal import read_pdf_GDYH_GR

# 设置选项以启用未来的默认行为
try:
    pd.set_option('future.no_silent_downcasting', True)
    print("配置项已成功设置")
except KeyError as e:
    print(f"配置项设置失败: {e}")


class DataDeal:
    """
    数据合并处理的方法
    目前支持xlsx，xls，et，txt，pdf
    """
    def __init__(self):
        # 保存未处理文件路径
        self.nodeal_files_path = []
        # 保存未处理文件路径
        # 置空数据
        self.na_valuesList = ["/","--", "空值","@N","无","(null)", "（补）", "1对多交易,系统无法查找", "null", "未查询到相关交易", "不详", "nan",r"\N","查无开户信息"]

        # 交易明细
        self.bank_trades = pd.DataFrame()
        # 关联子账户信息
        self.bank_sub_accounts = pd.DataFrame()
        # 人员信息
        self.bank_id_info = pd.DataFrame()
        # 账户信息
        self.bank_accounts_info = pd.DataFrame()
        # 强制措施信息
        self.bank_cure_info = pd.DataFrame()
        # 联系方式信息
        self.bank_contact_info = pd.DataFrame()
        # 任务信息
        self.bank_task_info = pd.DataFrame()
        # 住址信息
        self.address_info = pd.DataFrame()
        # 优先权信息
        self.bank_priority_info = pd.DataFrame()

        # 微信注册信息
        self.wechat_reg = pd.DataFrame()
        # 微信交易明细信息
        self.wechat_trades = pd.DataFrame()
        # 微信个人信息
        self.wechat_info = pd.DataFrame()
        # 微信群
        self.wechat_groups = pd.DataFrame()
        # 微信登录轨迹
        self.wechat_login_track = pd.DataFrame()
        # 微信朋友
        self.wechat_friend = pd.DataFrame()
        # 微信告知
        self.wechat_inform = pd.DataFrame()

        # 关于表头映射字典
        path = os.path.join(__base_path__, "Resources", "字典mapping表.xlsx")
        columns_df = pd.read_excel(path, header=0).ffill()
        self.columns_dict = columns_df.set_index('key')['value'].to_dict()
        """合并后表头统一的字典"""

        # 保存可能出现错误的类型
        self.error_map = {}
        """保存可能出现错误的类型"""

        self.csv_type_dict = {
            '交易明细信息': 'bank_trades',
            '个人交易明细': 'bank_trades',
            '交易流水信息': 'bank_trades',
            'transaction-details':'bank_trades',
            '银行流水': 'bank_trades',
            '交易流水': 'bank_trades',
            "流水": "bank_trades",
            '数字人民币':'bank_trades',
            '关联子账户信息': 'bank_sub_accounts',
            '关联子账号信息': 'bank_sub_accounts',
            '人员信息': 'bank_id_info',
            '一代户口查询':'bank_id_info',
            '个人客户信息': 'bank_id_info',
            '账户信息': 'bank_accounts_info',
            '客户资料': 'bank_accounts_info',
            'account-information':'bank_accounts_info',
            "开户": "bank_accounts_info",
            '账户查询结果信息': 'bank_accounts_info',
            '强制措施': 'bank_cure_info',
            '联系方式信息': 'bank_contact_info',
            '任务信息': 'bank_task_info',
            '人员住址信息': 'address_info',
            'TenpayRegInfo': 'wechat_reg',
            'TenpayTrades': 'wechat_trades',
            'WXRegInfo': 'wechat_info',
            'WXGroups': 'wechat_groups',
            'WX登录轨迹': 'wechat_login_track',
            'WXFriends': 'wechat_friend',
            'readme': 'wechat_inform',
            '优先权信息': 'bank_priority_info',
        }
        """相关文件名分类的字典【模糊方法】"""
        # 创建对应的文件处理方法
        self.dealFunc= Switch()
        """储存指定后缀，文件内容处理文件的逻辑的函数载体"""
        self.dealFunc.register("wechat_reg_txt", self.deal_wechat_reg_txt)
        self.dealFunc.register("wechat_trades_txt", self.deal_wechat_trades_txt)
        self.dealFunc.register("wechat_info_txt", self.deal_wechat_info_txt)
        self.dealFunc.register("wechat_groups_txt", self.deal_wechat_groups_txt)
        self.dealFunc.register("wechat_login_track_txt", self.deal_wechat_login_track_txt)
        self.dealFunc.register("wechat_friend_txt", self.deal_wechat_friend_txt)
        self.dealFunc.register("wechat_inform_txt", self.deal_wechat_inform_txt)

        self.dealFunc.register("bank_priority_info_csv", self.deal_bank_priority_info_csv)
        self.dealFunc.register("bank_trades_csv", self.deal_bank_trades_csv)
        self.dealFunc.register("bank_id_info_csv", self.deal_bank_id_info_csv)
        self.dealFunc.register("bank_accounts_info_csv", self.deal_bank_accounts_info_csv)
        self.dealFunc.register("bank_sub_accounts_csv", self.deal_bank_sub_accounts_csv)
        self.dealFunc.register("bank_cure_info_csv", self.deal_bank_cure_info_csv)
        self.dealFunc.register("bank_contact_info_csv", self.deal_bank_contact_info_csv)
        self.dealFunc.register("bank_task_info_csv", self.deal_bank_task_info_csv)
        self.dealFunc.register("bank_address_info_csv", self.deal_bank_address_info_csv)
        # 处理excel
        self.dealFunc.register("bank_trades_excel", self.deal_bank_trades_excel)
        self.dealFunc.register("bank_accounts_info_excel", self.readExcelRow)
        self.dealFunc.register("bank_sub_accounts_excel", self.readExcelRow)

        self.dealFunc.register("class_luohu_3_excel",self.deal_class_luohu_3_excel)

        # 处理线下建设银行
        self.dealFunc.register("bank_CCB_excel",self.deal_bank_CCB_excel)
        self.dealFunc.register("bank_CCB2_excel", self.deal_bank_CCB_excel)

        self.pdf_type_dict = {
            "中国光大银行对私客户对账单(本对账单仅供参考)": "read_pdf_GDYH_GR"
        }
        """简单pdf对应的识别规则字典"""

        self.dealPDF = Switch()
        """处理pdf文件的注册方法，通过自定义字典函数确定识别到的pdf处理逻辑"""
        self.dealPDF.register("read_pdf_GDYH_GR", read_pdf_GDYH_GR)
        # TODO: 继续注册pdf类型解析方法


        self.cleaningRules1_list = [
            [r' +', ' '],  # 多空格保留一个
            [r'\t', ''],
            [r'\\N', ''],
            [r"^'", '']
        ]
        """清洗数据一些符合的规则【保留一个空格】"""
        self.cleaningRules2_list = [
            [r' ', ''],  # 空格全部移除
            [r'\t', ''],
            [r'\\N', ''],
            [r"^'", '']
        ]
        """清洗数据一些符合的规则【不保留空格】"""
        # 保存未知模板
        self.noknow_template = {}
        # 强制合并未知模板的
        self.fail_data = pd.DataFrame()

        """保存未知模板:如果模板未识别会被记录在这里并且该文件处理跳过"""
        # 模板
        self.template_columns = {
            # 交易明细
            "bank_trades": [
                ['交易卡号', '交易账号', '查询反馈结果原因', '交易户名', '交易证件号码', '交易时间', '交易金额',
                 '交易余额', '收付标志', '交易对手账卡号', '现金标志', '对手户名', '对手身份证号', '对手开户银行',
                 '摘要说明', '交易币种', '交易网点名称', '交易发生地', '交易是否成功', '传票号', 'IP地址', 'MAC地址',
                 '对手交易余额', '交易流水号', '日志号', '凭证种类', '凭证号', '交易柜员号', '备注',
                 '商户名称', '商户代码', '交易类型'],
                ['交易卡号', '交易账号', '查询反馈结果原因', '交易户名', '交易证件号码', '交易时间', '交易金额',
                 '交易余额', '收付标志', '交易对手账卡号', '现金标志', '对手户名', '对手身份证号',
                 '对手开户银行', '摘要说明', '交易币种', '交易网点名称', '交易发生地', '交易是否成功', '传票号',
                 'IP地址', 'MAC地址', '对手交易余额', '交易流水号', '日志号', '凭证种类', '凭证号',
                 '交易柜员号', '备注', '商户名称', '商户代码', '交易类型', '来源行', '数据来源'],
                ['交易卡号', '交易账号', '交易方户名', '交易方证件号码', '交易时间', '交易金额','交易余额','收付标志','交易对手账卡号',
                 '现金标志','对手户名','对手身份证号','对手开户银行','摘要说明','交易币种','交易网点名称','交易发生地',
                 '交易是否成功','传票号','IP地址','MAC地址','对手交易余额','交易流水号','日志号','凭证种类','凭证号','交易柜员号','备注',
                 '商户名称','交易类型','查询反馈结果原因'],
                ['交易卡号', '交易账号', '交易方户名', '交易方证件号码', '交易时间', '交易金额', '交易余额', '收付标志',
                 '交易对手账卡号', '对手户名', '对手身份证号', '摘要说明', '交易流水号', '备注', '交易类型', '数据来源'],
                ['交易卡号', '交易账号', '交易方户名', '交易方证件号码', '交易时间', '交易金额', '交易余额', '收付标志',
                 '交易对手账卡号', '现金标志', '"对手户名', '对手身份证号', '对手开户银行', '摘要说明', '交易币种',
                 '交易网点名称', '交易发生地', '交易是否成功', '传票号', 'IP地址', 'MAC地址', '对手交易余额',
                 '交易流水号', '日志号', '凭证种类', '凭证号', '交易柜员号', '备注', '商户名称', '交易类型', '数据来源'],
                ['交易卡号', '交易账号', '交易方户名', '交易方证件号码', '交易时间', '交易金额', '交易余额', '收付标志',
                 '交易对手账卡号', '现金标志', '对手户名', '对手身份证号', '对手开户银行', '摘要说明', '交易币种',
                 '交易网点名称', '交易发生地', '交易是否成功', '传票号', 'IP地址', 'MAC地址', '对手交易余额',
                 '交易流水号', '日志号', '凭证种类', '凭证号', '交易柜员号', '备注', '商户名称', '交易类型', '数据来源',
                 '来源行'],
                ['司法编号', '序号', '交易日期', '交易时间', '客户号', '客户名称', '交易卡号', '交易流水', '交易套号',
                 '交易机构', '账户代码', '交易方向(D:借|C:贷)', '币种名称', '交易金额', '联机余额', '摘要名称',
                 '文字摘要', '交易渠道', '冲补账标记', '经办柜员', '对方帐号', '对方客户名称', '对方帐号开户机构名称',
                 '对手公私标识', '对手客户证件国别', '对手客户证件类型', '对手客户证件号码', '对方开户机构号',
                 '对手开户机构国别代码', '对方开户地区', '对手方账户类别', '代办人', '网上交易IP地址', '网银MAC地址',
                 '网银设备号', '代办人证件国别', '代办人证件类型', '代办人证件号码', '跨境交易标识', '交易方式标识',
                 'ATM机具编号', '账户类型', '账户类别', '客户序号(客户号+户口序号唯一标识一个户口[识别新旧卡])',
                 'ATM所属机构编号', '对方客户号', '交易地区编码', '交易代码', '交易摘要', '交易地区名称',
                 '交易机构编号', '币种', '渠道名称', '证件号', '手机号', '是否手机号转账标识', '户口名称', '账号'],
                ['备注', '终端号', '交易网点代码', '凭证种类', '交易日期', '对手交易后余额1：现钞2：外汇', '交易种类',
                 '嫌疑人姓名', '承办单位', '证照类型代码', 'ID', '公章名称（用于打印公章）', '用于业务表关联',
                 '交易对方账号开户行行号', '批准人', '交易对方开户证件类型', '修改人', '文书状态', '日志号', '传票号',
                 '请求单号', '交易柜员号', '填发人姓名', '证照号码', '承办人', '嫌疑人编号', '商户号', '交易网点',
                 '交易流水号', '交易对方卡号', '文书号', '修订次数', '查询卡号', 'MAC地址', '数据状态', '备用字段1',
                 '案件编号', '银行主机数据时间', '客户名称', '交易对方通讯地址', '承办单位名称', '数据是否逻辑删除',
                 '交易金额', '被查询账（卡）号', '币种', '交易余额', '交易场所', '修改时间', '录入时间',
                 '公章落款（用于打印公章落款）', '交易对方账号', '交易对方联系电话', '对方科目名称', '录入人',
                 '查询反馈结果原因', '承办单位区域', '任务流水号', '交易摘要', '案件名称', '承办人姓名', '回执时间',
                 '查询反馈结果', '交易是否成功', '填发人', '数据版本号(yyyymmddhhmiss)', '借贷方向（资金流向）',
                 '备用字段3', '查控主体类别', '凭证号', '交易对方邮政编码', '承办单位简称', 'IP地址', '商户名称',
                 '创建时间', '修改人', '备用字段2', '交易对方姓名/名称', '批准时间', '交易对方开户证件号码', '错误信息',
                 '错误状态', '交易发生地', '交易对方账号开户行', '批准人姓名', '创建人', '结果ID（主键无意义）',
                 '填发时间', '序号', '修改时间', '协助编号', '资金往来序号', '来源行', '数据来源'],
                ['备注', '终端号', '交易网点代码', '凭证种类', '交易日期', '对手交易后余额1：现钞2：外汇', '交易种类',
                 '嫌疑人姓名', '承办单位', '证照类型代码', 'ID', '公章名称（用于打印公章）', '用于业务表关联',
                 '交易对方账号开户行行号', '批准人', '交易对方开户证件类型', '修改人', '文书状态', '日志号', '传票号',
                 '请求单号', '交易柜员号', '填发人姓名', '证照号码', '承办人', '嫌疑人编号', '商户号', '交易网点',
                 '交易流水号', '交易对方卡号', '文书号', '修订次数', '查询卡号', 'MAC地址', '数据状态', '备用字段1',
                 '案件编号', '银行主机数据时间', '客户名称', '交易对方通讯地址', '承办单位名称', '数据是否逻辑删除',
                 '交易金额', '被查询账（卡）号', '币种', '交易余额', '交易场所', '修改时间', '录入时间',
                 '公章落款（用于打印公章落款）', '交易对方账号', '交易对方联系电话', '对方科目名称', '录入人',
                 '查询反馈结果原因', '承办单位区域', '任务流水号', '交易摘要', '案件名称', '承办人姓名', '回执时间',
                 '查询反馈结果', '交易是否成功', '填发人', '数据版本号(yyyymmddhhmiss)', '借贷方向（资金流向）',
                 '备用字段3', '查控主体类别', '凭证号', '交易对方邮政编码', '承办单位简称', 'IP地址', '商户名称',
                 '创建时间', '修改人', '备用字段2', '交易对方姓名/名称', '批准时间', '交易对方开户证件号码', '错误信息',
                 '错误状态', '交易发生地', '交易对方账号开户行', '批准人姓名', '创建人', '结果ID（主键无意义）',
                 '填发时间', '序号', '修改时间', '协助编号', '资金往来序号'],
                ['交易流水号', 'D/C', '交易日期', '交易时间', '交易金额', '可用余额', '交易机构', '经办柜员', '摘要',
                 '备注', '交易对手名称', '交易对手账号', '交易对手开户行', '交易对手开户分行'],
                ['交易时间', '交易账号', '交易卡号', '交易类型', '借贷标志', '币种', '交易金额', '交易后余额',
                 '交易对方名称', '交易对方账卡号', '交易对方账号开户行', '现金标志', '冲正交易标识', '交易发生地',
                 '交易柜员号', '交易网点名称', '交易网点代码', '商户名称', '商户号', '终端号', 'IP地址', 'MAC地址',
                 '第三方支付流水号', '清算平台类型', '第三方支付交易类型', '快捷支付标识', 'MCC码', '信用卡交易状态码',
                 '银行交易流水号', '交易摘要', '备注', '交易是否成功', '反馈日期'],
                ['帐号', '户名', '交易卡号', '币种', '钞汇标志', '交易日期', '交易时间', '交易地区', '交易网点',
                 '柜员号', '交易代码', '借贷标志', '发生额元', '余额元', '现金注释', '摘要', '对方行名', '对方账号',
                 '对方户名', '场所'],
                ['帐号', '户名', '交易卡号', '币种', '钞汇标志', '交易日期', '交易时间', '交易地区', '交易网点',
                 '柜员号', '交易代码', '借贷标志', '发生额元', '余额元', '现金注释', '摘要', '对方行名', '对方账号',
                 '对方户名'],
                ['序号', '交易日期', '交易时间', '账号', '借贷标志', '交易金额', '账户余额', '客户账号', '摘要代码',
                 '摘要代码2', '账户中文名', '对方账号', '对方户名', '对方行号', '对方行名', '对手备注信息'],
                ['序号', '交易日期', '交易时间', '交易账号', '借贷标志', '交易金额', '账户余额', '交易卡号', '摘要代码',
                 '摘要代码2', '账户中文名', '对方账号', '对方户名', '对方行号', '对方行名', '对手备注信息'],
                ['查询卡号', '交易时间', '交易类型', '借贷标志', '交易金额', '交易余额', '交易对方名称', '交易对方账号',
                 '交易对方账卡号', '交易对方账号开户行', '交易摘要', 'IP地址', 'MAC地址', '交易渠道', '交易户名','交易账号'],
                ['交易卡号', '交易时间', '交易类型', '借贷标志', '交易金额', '交易余额', '交易对方名称', '交易对方账号',
                 '交易对方账卡号', '交易对方账号开户行', '交易摘要', 'IP地址', 'MAC地址', '交易渠道', '交易户名','交易账号'],
                ['交易账号', '主账户账号', '卡号', '交易日期', '交易流水号', '交易货币英文码', '交易金额', '交易后余额',
                 '交易后可用余额', '备注', '用途', '附言', '摘要', '对方账号', '对方银行名称', '对方账户名',
                 '外围系统UUID', '交易性质', '交易属性', '交易类型', '交易类型描述', '交易时间', '交易柜员',
                 '交易机构号', '交易机构名称', '提示码', '提示码描述', '交易渠道', '交易汇率', '借贷标识', '冲正标识'],
                ['交易日期', '借贷标识', '交易金额', '账户余额', '对手账号', '对手名称', '对手行名', '交易机构',
                 '交易柜员', '交易渠道', '摘要代码', '凭证号', '附言信息', '交易卡号', '交易账号', '交易户名', '币种'],
                ['重命名', '交易卡号', '交易账号', '交易方户名', '交易方证件号码', '开户行', '交易时间', '交易金额',
                 '交易余额', '收付标志', '交易对手账卡号', '现金标志', '对手户名', '对手身份证号', '对手开户银行',
                 '摘要说明', '交易币种', '交易网点名称', '交易发生地', '交易是否成功', '传票号', 'IP地址', 'MAC地址',
                 '对手交易余额', '交易流水号', '日志号', '凭证种类', '凭证号', '交易柜员号', '备注', '商户名称',
                 '交易类型', '查询反馈结果原因'],
                ['交易卡号', '交易账号', '交易方户名', '交易方证件号码', '开户行', '交易时间', '交易金额', '交易余额',
                 '收付标志', '交易对手账卡号', '现金标志', '对手户名', '对手身份证号', '对手开户银行', '摘要说明',
                 '交易币种', '交易网点名称', '交易发生地', '交易是否成功', '传票号', 'IP地址', 'MAC地址',
                 '对手交易余额', '交易流水号', '日志号', '凭证种类', '凭证号', '交易柜员号', '备注', '商户名称',
                 '交易类型', '查询反馈结果原因'],
                ['司法编号', '序号', '交易日期', '交易时间', '客户号', '客户名称', '交易卡号', '交易流水', '交易套号',
                 '交易机构', '账户代码', '交易方向(D:借|C:贷)', '币种名称', '交易金额', '联机余额', '摘要名称',
                 '文字摘要', '交易渠道', '冲补账标记', '经办柜员', '对方帐号', '对方客户名称', '对方帐号开户机构名称',
                 '对手公私标识', '对手客户证件国别', '对手客户证件类型', '对手客户证件号码', '对方开户机构号',
                 '对手开户机构国别代码', '对方开户地区', '对手方账户类别', '代办人', '网上交易IP地址', '网银MAC地址',
                 '网银设备号', '代办人证件国别', '代办人证件类型', '代办人证件号码', '跨境交易标识', '交易方式标识',
                 'ATM机具编号', '账户类型', '账户类别', '客户序号(客户号+户口序号唯一标识一个户口[识别新旧卡])',
                 'ATM所属机构编号', '对方客户号', '交易地区编码', '交易代码', '交易摘要', '交易地区名称',
                 '交易机构编号', '币种', '渠道名称', '证件号', '手机号', '是否手机号转账标识', '户口名称'],
                ['流水号', '户名', '账号', '身份证号', '开户行', '交易日期（YYYYMMDD）', '交易时间（HHMMSS）',
                 '借贷标志（借方：1，贷方：2）', '金额（元）', '账户余额', '对方账号', '对方户名', '对方行名', 'IP地址',
                 '摘要'],
                ['交易流水号', 'D/C', '交易日期', '交易时间', '交易金额', '可用余额', '交易机构', '经办柜员', '摘要',
                 '备注', '交易对手名称', '交易对手账号', '交易对手开户行', '交易对手开户分行', '交易卡号', '交易户名',
                 '交易账号', '币种'],
                ['司法编号', '序号', '交易日期', '交易时间', '客户号', '客户名称', '交易卡号', '交易流水',
                 '开户地（区号）', '帐号', '部门号', '借贷方向', '货币号', '交易金额', '联机余额', '发生地', '科目',
                 '业务类别', '分析码1', '分析码2', '交易码', '交易描述', '处理码', '交易注解', '交易类别', '套录号',
                 '冲帐标记', '我方摘要', '你方摘要', '经办柜员', '状态', '收付方帐号', '收付方名称', '收付方行名',
                 '摘要', '交易机构号', '交易机构名称', '异地交易实际用户号'],
                ['序号', '户名', '账号', '身份证号', '开户行', '交易日期（YYYYMMDD）', '交易时间（HHMMSS）',
                 '借贷标志（借方：1，贷方：2）', '金额（元）', '账户余额', '对方账号', '对方户名', '对方行名', '摘要',
                 'IP地址'],
                ['序号', '交易时间', '交易类型', '现转标志', '借贷标志', '币种', '交易金额', '余额', '对方名称',
                 '对方账号', '对方卡号', '对方银行名称', '摘要', 'IP地址', '交易户名', '交易卡号', '交易账号'],
                ['序号', '户名', '账号', '身份证号', '开户行', '交易日期（YYYYMMDD）', '交易时间（HHMMSS）',
                 '借贷标志（借方：1，贷方：2）', '金额（元）', '账户余额', '对方账号', '对方户名', '对方行名', '摘要',
                 'IP地址', 'MAC地址'],
                ['交易日期', '借贷标识', '交易金额', '账户余额', '对手账号', '对手名称', '对手行名', '交易机构',
                 '交易柜员','币种','子账号','账/卡号','户名','交易渠道', '摘要代码', '凭证号', '附言信息'],
                ['序号', '客户名称', '账号', '币种', '钞汇', '册号', '笔号', '交易日期', '交易时间',
                 '活期存款账户明细号', '交易卡号', '摘要', '借贷方向', '交易金额', '账户余额', '柜员号', '交易机构号',
                 '交易机构名称', '对方账号', '对方户名', '对方行名', '交易流水号', '交易渠道', '自助设备编号',
                 '扩充备注', 'IP地址', 'MAC地址', '第三方订单号', '商户号', '商户名称'],
                ['序号', '客户名称', '账号', '币种', '钞汇', '册号', '笔号', '交易日期', '交易时间',
                 '活期存款账户明细号', '交易卡号', '摘要', '借贷方向', '交易金额', '账户余额', '柜员号', '交易机构号',
                 '交易机构名称', '对方账号', '对方户名', '对方行名', '交易流水号', '交易渠道', '自助设备编号',
                 '扩充备注', 'IP地址', 'MAC地址', '第三方订单号', '商户号', '商户名称', 'Unnamed: 30', 'Unnamed: 31',
                 'Unnamed: 32', 'Unnamed: 33'],
                ['序号', '客户名称', '账号', '币种', '钞汇', '册号', '笔号', '交易日期', '交易时间',
                 '活期存款账户明细号', '交易卡号', '摘要', '借贷方向', '交易金额', '账户余额', '柜员号', '交易机构号',
                 '交易机构名称', '对方账号', '对方户名', '对方行名', '交易流水号', '交易渠道', '自助设备编号',
                 '扩充备注', 'IP地址', 'MAC地址', '第三方订单号', '商户号', '商户名称', 'Unnamed: 30', 'Unnamed: 31',
                 'Unnamed: 32'],
                ['序号', '客户名称', '账号', '币种', '钞汇', '册号', '笔号', '交易日期', '交易时间',
                 '活期存款账户明细号', '交易卡号', '摘要', '借贷方向', '交易金额', '账户余额', '柜员号', '交易机构号',
                 '交易机构名称', '对方账号', '对方户名', '对方行名', '交易流水号', '交易渠道', '自助设备编号',
                 '扩充备注', 'IP地址', 'MAC地址', '第三方订单号', '商户号', '商户名称', 'Unnamed: 30', 'Unnamed: 31'],
                ['序号', '客户名称', '账号', '币种', '钞汇', '册号', '笔号', '交易日期', '交易时间',
                 '活期存款账户明细号', '交易卡号', '摘要', '借贷方向', '交易金额', '账户余额', '柜员号', '交易机构号',
                 '交易机构名称', '对方账号', '对方户名', '对方行名', '交易流水号', '交易渠道', '自助设备编号',
                 '扩充备注', 'IP地址', 'MAC地址', '第三方订单号', '商户号', '商户名称', 'Unnamed: 30'],
                ['交易卡号', '交易时间', '交易类型', '借贷标志', '交易金额', '交易余额', '交易对方名称', '交易对方账号',
                 '交易对方账卡号', '交易对方账号开户行', '交易摘要', 'IP地址', 'MAC地址', '交易渠道'],
                ['交易卡号', '交易时间', '交易类型', '借贷标志', '交易金额', '交易余额', '交易对方名称', '交易对方账号',
                 '交易对方账卡号', '交易对方账号开户行', '交易摘要', 'IP地址', 'MAC地址', '交易渠道', '交易账号'],
                ['序号', '客户姓名', '账号', '币种', '钞汇', '交易日期', '交易时间', '交易日志号', '传票号', '交易行名',
                 '交易码', '交易日期时间', '交易类型', '交易金额', '交易余额', '交易渠道', '摘要', '对手方账号',
                 '对手方户名', '对手方行名'],
                ['序号', '客户姓名', '账号', '币种', '钞汇', '交易日期', '交易时间', '交易日志号', '传票号', '交易行名',
                 '交易码', '交易金额', '交易余额', '交易渠道', '摘要', '对手方账号', '对手方户名', '对手方行名',
                 '交易证件号码'],
                # TODO 数字人民币
                ['司法编号', '序号', '交易批次号', '账户号码', '钱包ID', '用户号码', '钱包类型', '钱包类型名称',
                 '钱包等级', '钱包等级名称', '记账交易流水', '交易时间', '记账日期', '交易类型', '交易方向', '交易货币',
                 '交易金额', '联机余额', '冲补标志', '操作柜员', '操作机构', '摘要代码', '客户摘要', '银行摘要',
                 '对手方账户号码', '对手方账户户名', '对手方金融机构代码', '对手方金融机构名称', '对手方开户机构代码',
                 '业务类型编码', '业务种类编码', '交易发生所在地', '交易渠道', '交易状态', '钱包名称', '钱包状态',
                 '开立日期', '注销日期', '开户机构', '开立方式', '绑定卡', '钱包手机号', '开户人证件号', '证件类型',
                 '证件名称', '开户的设备号', 'IP地址', 'MAC地址', '商户号', '商户名称', '红包信息', '退款'],
                ['交易日', '时间', '记账日期', '网点', '柜员', '币别', '交易名称', '金额', '余额', '存期', '摘要',
                 '对方账号', '交易卡号', '交易户名', '交易账号'],
                ['开户银行', '账号/卡号', '户名', '交易流水号', '交易时间', '交易金额', '借贷方向（资金流向）', '余额',
                 '币种', '交易类型', '证件类型', '对方账号', '对方卡号', '对方户名', '对方开户行机构号',
                 '交易对方账号开户行名', '对方证件号码', '对方证件类型', '交易网点', '交易网点代码'],
                ['明细序号', '证件类型', '证件号码', '名称', '卡号', '账号', '子账户序号', '交易日期', '交易时间',
                 '收入支出', '币种', '交易金额', '账户余额', '对方账号', '对方客户名', '对方行名', '商户号', '商户名称',
                 '摘要描述', 'ip地址', 'mac地址', '备注'],
                # Special_Type17
                ['序号', '交易日期', '交易时间', '交易渠道', '终端号', '币种代码', '交易代码描述', '交易卡号', '借贷标志',
                 '交易金额', '账户余额', '余额方向', '现转标志', '开销户状态代码', '被冲账标志', '冲补标志', '凭证代号',
                 '交易账号', '客户账号类型代码', '客户账号类型描述', '摘要代码', '摘要代码2', '借据号', '现金代码',
                 '业务编号','客户号', '余额性质', '账户中文名', '事件状态', '对方账号', '对方户名', '对方行号', '对方行名',
                 '对手备注信息', '对手来源系统流水', '系统处理日期', 'IP地址', 'MAC', '代理人姓名', '代理人联系方式',
                 '代理人证件类型', '代理人证件号', '全局流水号'],
                ['交易流水号', 'D/C', '交易日期', '交易时间', '交易金额', '账面余额', '交易机构', '经办柜员', '摘要',
                 '备注', '交易对手名称', '交易对手账号', '交易对手开户行', '交易对手开户分行', '交易卡号', '交易户名',
                 '交易账号'],
                ['交易日期', '交易时间', '交易机构编号', '渠道类型代码', '币种', '科目代码', '交易代码', '记账交易代码',
                 '现转标志', '交易柜员编号', '柜员流水号', '账号', '借贷标志', '交易金额', '冲账标志代码',
                 '冲补标志代码', '摘要信息代码', '账户余额', '对手账号', '对手户名', '对方行号', '对手开户行',
                 '交易名称', '摘要描述', '交易机构名称'],
                ['标记（账务）','标记（息差表）','金额','序号','交易日期','交易时间','借贷','借方发生额',
                 '贷方发生额','余额','摘要','对方账号','对方户名','用途','备注','凭证号','流水号','对实际方户名'],


            ],
            # 交易明细END

            # 关联子账户信息
            "bank_sub_accounts": [
                ['开户账号', '子账户账号', '余额', '可用余额', '子账户类别', '币种', '钞汇标识', '账户状态',
                 '账户序号'],
                ['银行名称', '开户账号', '子账户账号', '余额', '可用余额', '子账户类别', '子账户序号', '币种',
                 '钞汇标识', '账户状态', '账户人姓名', '账户序号', '备注'],
                ['账号', '卡号', '册号', '序号', '子账户类别', '子账户类别名称', '子账户账号', '币种', '钞汇标志',
                 '账户余额', '账户状态', '可用余额', '最后时间'],
                ['户名', '开户网点', '开户银行', '主账号', '关联子账号', '汇款标志', '币种', '余额', '可用余额', '备注',
                 '关联序号', '关联账号类别'],

            ],
            # 人员信息
            "bank_id_info": [
                ['客户名称', '证照类型', '证照号码', '单位地址', '单位电话', '工作单位', '邮箱地址', '代办人姓名',
                 '代办人证件类型', '代办人证件号码', '国税纳税号', '地税纳税号', '法人代表', '法人代表证件类型',
                 '法人代表证件号码', '出生日期', '户籍地址', '客户工商执照号码'],
                ['客户名称', '证照类型', '证照号码', '单位地址', '联系电话', '联系手机', '单位电话', '住宅电话',
                 '工作单位', '邮箱地址', '代办人姓名', '代办人证件类型', '代办人证件号码', '国税纳税号', '地税纳税号',
                 '法人代表', '法人代表证件类型', '法人代表证件号码', '出生日期', '户籍地址', '客户工商执照号码'],
                ['司法编号', '序号', '客户姓名', '户口号', '户口代码', '开户机构', '开户日期', '关户日期', '户口状态',
                 '证件类型', '证件号码', '联系地址', '家庭地址', '移动电话', '单位名称', '单位地址', '单位电话',
                 '开户用户', '维护日期', '活期帐户余额', '户口名称', '客户号'],
                ['数据来源渠道', '证件类型', '证件号码', '客户名称', '客户联系电话', '客户联系手机号码', '代办人姓名',
                 '代办人证件类型', '代办人证件号码', '客户住址地址', '客户住宅电话', '客户工作单位', '客户单位地址',
                 '客户单位电话', '客户邮箱地址', '法人代表', '法人代表证件类型', '法人代表证件号码'],
                ['客户号', '客户姓名', '国籍', '性别', '出生日期', '客户证件类型', '证件号码', '有效日期', '签发机构',
                 '住宅电话', '客户电话', '家庭电话', '家庭地址', '任职单位名称', '单位电话', '职位岗位', '职业',
                 '单位地址', '账单地址', '信息维护柜员', '创建日期'],
                ['序号', '客户姓名', '证件类型', '证件号码', '单位名称', '单位地址', '单位电话', '家庭地址', '家庭电话',
                 '手机号', '交易证件号码'],
                ['司法编号', '序号', '户口编号', '区域码', '客户号', '部门号', '客户类别', '证件号', '证件类别',
                 '客户称谓', '客户名称', '国家码', '邮编', '地址1', '地址2', '地址3', 'E-MAIL 地址', '电话(H)',
                 '电话(O)', '传真号', '凭证号', '开户日', '开户用户', '维护日', '维护用户', '关户日', '关户用户',
                 '冻结日', '冻结用户', '冻结原因', '状态'],
                ['明细序号', '证件类型', '证件号码', '姓名', '公司名称', '法人姓名'],
                ['客户号', '行业代码', '客户名称', '组织机构代码', '开户证件类型', '开户证件号码', '开户证件到期日',
                 '年检日期', '主营业务', '经营范围', '归属机构名称', '创建日期', '注册资本', '注册号', '注册资本币种',
                 '成立年份', '注册地址', '注册地址明细', '办公地址', '单位电话号码', '营业证明文件号码',
                 '金融机构类型代码', '统一社会信用代码', '营业执照号', '营业执照到期日', '国税税务登记号',
                 '地税税务登记证号', '纳税人名称', '纳税人识别号', '其他证明文件类型', '其他证明文件号码',
                 '其他证明文件到期日', '法人姓名', '法人国籍', '法人证件类型', '法人证件号码', '法人证件签发日',
                 '法人证件到期日', '法人联系方式', '法人座机号码', '实际控制人姓名', '实际控制人国籍',
                 '实际控制人证件类型', '实际控制人证件号码', '实际控人证件到期日', '受益人姓名', '受益人国籍',
                 '受益人证件类型', '受益人证件号码', '受益人证件到期日', '受益所有人地址', '控股股东姓名',
                 '控股股东国籍', '控股股东证件类型', '控股股东证件号码', '控股股东证件到期日'],

            ],
            # 人员信息END

            # 账户信息
            "bank_accounts_info": [
                ['账户开户名称', '开户人证件号码', '交易卡号', '交易账号', '账号开户时间', '账户余额', '可用余额',
                 '币种', '开户网点代码', '开户网点', '账户状态', '炒汇标志名称', '销户日期', '账户类型', '开户联系方式',
                 '通信地址', '联系电话', '代理人', '代理人电话', '备注', '开户省份', '开户城市', '账号开户银行',
                 '客户代码', '法人代表', '客户工商执照号码', '法人代表证件号码', '住宅地址', '邮政编码',
                 '代办人证件号码',
                 '邮箱地址', '关联资金账户', '地税纳税号', '单位电话', '代办人证件类型', '住宅电话', '法人代表证件类型',
                 '国税纳税号', '单位地址', '工作单位', '销户网点', '最后交易时间', '账户销户银行'],
                ['账户开户名称', '开户人证件号码', '交易卡号', '交易账号', '账号开户时间', '账户余额', '可用余额',
                 '币种', '开户网点代码', '开户网点', '账户状态', '钞汇标志名称', '开户人证件类型', '销户日期',
                 '账户类型', '开户联系方式', '通信地址', '联系电话', '代理人', '代理人电话', '备注', '开户省份',
                 '开户城市', '账号开户银行', '客户代码', '法人代表', '客户工商执照号码', '法人代表证件号码', '住宅地址',
                 '邮政编码', '代办人证件号码', '邮箱地址', '关联资金账户', '地税纳税号', '单位电话', '代办人证件类型',
                 '住宅电话', '法人代表证件类型', '国税纳税号', '单位地址', '工作单位', '销户网点', '最后交易时间',
                 '账户销户银行', '任务流水号'],
                ['司法编号', '序号', '客户姓名', '户口号', '户口代码', '开户机构', '开户日期', '关户日期', '户口状态',
                 '证件类型', '证件号码', '联系地址', '家庭地址', '移动电话', '单位名称', '单位地址', '单位电话',
                 '开户用户', '维护日期', '活期帐户余额', '户口名称', '客户号'],
                ['序号', '客户姓名', '户口号', '户口代码', '开户机构', '开户日期', '关户日期', '户口状态', '证件类型',
                 '证件号码', '联系地址', '家庭地址', '移动电话', '单位名称', '单位地址', '单位电话', '开户用户',
                 '维护日期', '活期帐户余额', '户口名称', '客户号'],
                ['请求单号', '证件类型', '证件号码', '被查询人姓名', '查询内容', '紧急程度', '明细起始时间',
                 '明细截止时间',
                 '执行结果', '执行结果说明', '反馈文件名', '银行账号', '银行卡号', '账户类别',
                 '账户状态', '开户网点', '开户网点代码', '开户日期', '销户日期', '币种', '交易余额', '最后交易时间',
                 '数据来源渠道', '交易户名', '客户联系手机号码', '客户住址地址', '客户住宅电话', '客户工作单位',
                 '客户单位地址','客户单位电话', '客户邮箱地址', '子账户册号', '子账户序号', '子账户类别', '子账户类别名称',
                 '子账户账号','子账户币种', '子账户账户余额', '子账户账户状态', '子账户可用余额', '子账户最后交易时间'],
                ['请求单号', '银行账号', '银行卡号', '账户类别', '账户状态', '开户网点', '开户网点代码', '开户日期',
                 '销户日期', '币种', '交易余额', '最后交易时间', '数据来源渠道', '证件类型', '证件号码', '交易户名',
                 '客户联系手机号码', '客户住址地址', '客户住宅电话', '客户工作单位', '客户单位地址', '客户单位电话',
                 '客户邮箱地址', '子账户册号', '子账户序号', '子账户类别', '子账户类别名称', '子账户账号', '子账户币种',
                 '子账户账户余额', '子账户账户状态', '子账户可用余额', '子账户最后交易时间'],
                ['请求单号', '银行账号', '银行卡号', '账户类别', '账户状态', '开户网点', '开户网点代码', '开户日期',
                 '销户日期', '币种', '交易余额', '最后交易时间', '数据来源渠道', '证件类型', '证件号码', '交易户名',
                 '客户联系手机号码', '客户住址地址', '客户住宅电话', '客户工作单位', '客户单位地址', '客户单位电话',
                 '客户邮箱地址', '子账户册号', '子账户序号', '子账户类别', '子账户类别名称', '子账户账号', '子账户币种',
                 '子账户账户余额', '子账户账户状态', '子账户可用余额', '子账户最后交易时间','来源行','数据来源'],
                ['请求单号', '交易账号', '交易卡号', '账户类别', '账户状态', '开户网点', '开户网点代码', '开户日期',
                 '销户日期', '币种', '交易余额', '最后交易时间', '数据来源渠道', '证件类型', '证件号码', '交易户名',
                 '客户联系手机号码', '客户住址地址', '客户住宅电话', '客户工作单位', '客户单位地址', '客户单位电话',
                 '客户邮箱地址', '子账户册号', '子账户序号', '子账户类别', '子账户类别名称', '子账户账号', '子账户币种',
                 '子账户账户余额', '子账户账户状态', '子账户可用余额', '子账户最后交易时间', '来源行', '数据来源'],
                ['请求单号', '交易账号', '交易卡号', '账户类别', '账户状态', '开户网点', '开户网点代码', '开户日期',
                 '销户日期', '币种', '交易余额', '最后交易时间', '数据来源渠道', '证件类型', '证件号码', '交易户名',
                 '客户联系手机号码', '客户住址地址', '客户住宅电话', '客户工作单位', '客户单位地址', '客户单位电话',
                 '客户邮箱地址', '子账户册号', '子账户序号', '子账户类别', '子账户类别名称', '子账户账号', '子账户币种',
                 '子账户账户余额', '子账户账户状态', '子账户可用余额', '子账户最后交易时间'],
                ['请求单号', '银行账号', '银行卡号', '账户类别', '账户状态', '开户网点', '开户网点代码', '开户日期',
                 '销户日期', '销户网点', '币种', '钞汇标志', '账户余额', '可用余额', '最后交易时间', '账户信息备注',
                 '数据来源渠道', '证件类型', '证件号码', '客户名称', '客户联系电话', '客户联系手机号码', '代办人姓名',
                 '代办人证件类型', '代办人证件号码', '客户住址地址', '客户住宅电话', '客户工作单位', '客户单位地址',
                 '客户单位电话', '客户邮箱地址', '法人代表', '法人代表证件类型', '法人代表证件号码', '措施序号',
                 '冻结账号', '冻结开始日', '冻结截止日', '冻结金额', '冻结措施类型', '冻结原因', '在先冻结备注',
                 '子账户册号', '子账户序号', '子账户类别', '子账户类别名称', '子账户账号', '子账户币种',
                 '子账户钞汇标志', '子账户账户余额', '子账户账户状态', '子账户可用余额', '子账户最后交易时间'],
                ['证件类型', '证件号码', '客户名称', '银行卡号', '银行账号', '账户类别', '账户状态', '开户网点',
                 '开户网点代码', '开户日期', '销户日期', '销户网点', '币种', '钞汇标志', '账户余额', '可用余额',
                 '最后交易时间', '备注'],
                ['户名', '证件类型', '证件号码', '客户信息号', '账号', '卡号', '账户类别', '账户状态', '币种',
                 '开户网点', '网点名称', '开户柜员', '开户日期'],
                ['查询类型', '查询内容', '客户号', '客户账号', '账户名称', '客户证件名称', '证件号', '业务类型名称',
                 '负债账号', '当前账户余额', '人行账户分类', '账户状态', '卡/折号', '开户柜员', '开户日期', '开户机构',
                 '开户渠道', '销户柜员', '销户日期', '销户机构', '客户状态字名称', '账户状态字名称',
                 '卡折状态字名称（包含折状态字）', '上次业务日期'],
                ['查询类型', '查询内容', '客户号', '客户账号', '账户名称', '客户证件名称', '证件号', '业务类型名称', '当前账户余额', '人行账户分类', '账户状态', '卡/折号', '开户柜员', '开户日期', '开户机构',
                 '开户渠道', '销户柜员', '销户日期', '销户机构', '客户状态字名称', '账户状态字名称',
                 '卡折状态字名称（包含折状态字）', '上次业务日期'],
                ['序号', '交易账号', '产品名称', '账户账号', '币种', '钞汇标志', '开户日期', '开户机构', '交易户名',
                 '交易证件号码', '联系手机', '工作单位', '住宅地址', '证件登记地址'],
                ['序号', '客户账号', '产品名称', '账户账号', '币种', '钞汇标志', '开户日期', '账户状态', '账户余额',
                 '可用余额', '销户日期', '开户机构', '交易户名', '交易证件号码', '联系手机', '工作单位', '住宅地址',
                 '证件登记地址'],
                ['序号', '交易卡号', '产品名称', '交易账号', '币种', '钞汇标志', '开户日期', '账户状态', '账户余额',
                 '可用余额', '销户日期', '开户机构', '交易户名', '交易证件号码', '联系手机', '工作单位', '住宅地址',
                 '证件登记地址'],
                ['序号', '账户名称', '客户编号', '证件类型', '证件号码', '账号', '账户类型', '借记卡主账户账号', '币种',
                 '钞汇', '册号', '笔号', '余额', '可用余额', '可冻结金额', '开户日期', '开户机构号', '开户机构名称',
                 '开户柜员号', '销户日期', '销户机构号', '销户机构名称', '存款种类', '上次交易日', '账户状态',
                 '借记卡介质状态', '借记卡挂失状态', '移动电话', '固定电话', '居住地址', '单位地址', '户籍地址',
                 '工作单位', '账户性质', '资金用途', '法人名称', '法人证件类型', '法人证件号码', '结算账户分类代码',
                 '可售产品编号', '可售产品名称', '备注'],
                ['序号', '账户名称', '客户编号', '证件类型', '证件号码', '账号', '账户类型', '借记卡主账户账号', '币种',
                 '钞汇', '余额', '可用余额', '开户日期', '开户机构号', '开户机构名称', '存款种类', '上次交易日',
                 '账户状态', '借记卡介质状态', '借记卡挂失状态', '移动电话', '固定电话', '居住地址', '单位地址',
                 '户籍地址', '工作单位', '资金用途', '结算账户分类代码', '可售产品编号', '可售产品名称', '来源行',
                 '数据来源'],
                ['序号', '账户名称', '客户编号', '证件类型', '证件号码', '账号', '账户类型', '借记卡主账户账号', '币种',
                 '钞汇', '余额', '可用余额', '开户日期', '开户机构号', '开户机构名称', '存款种类', '上次交易日',
                 '账户状态', '借记卡介质状态', '借记卡挂失状态', '移动电话', '固定电话', '居住地址', '单位地址',
                 '户籍地址', '工作单位', '资金用途', '结算账户分类代码', '可售产品编号', '可售产品名称'],
                ['序号', '客户姓名', '卡号', '存折号', '子账号', '开户日期', '销户日期', '开户网点', '账户状态',
                 '交易证件号码'],
                ['商业银行', '账号', '户名', '开户网点', '账户类型', '币种', '证件号码', '证件类型', '账户余额',
                 '账户状态', '申请时间', '开户日期', '最后交易日期', '关联子账号', '账户人联系地址', '账户人联系电话',
                 '是否支持网上冻结', '销户日期', '销户网点编号', '销户网点名称', '反馈日期'],
                ['客户号', '账户名称(中文)', '客户名称(中文)', '客户账号', '开户机构名称', '账户开户柜员', '开户日期',
                 '账户类别', '账户属性', '账户销户机构', '账户销户日期', '上次业务日期', '货币代号', '当前账户余额',
                 '财务主管姓名', '财务主管移动电话', '财务主管证件类型', '财务主管证件号码', '财务主管证件到期日',
                 '财务人员姓名', '财务人员移动电话', '财务人员证件类型', '财务人员证件号码', '财务人员证件到期日期',
                 '经办人名称', '经办人手机号', '经办人证件号码', '客户账户状态', '客户状态字', '账户状态字'],


            ],
            # 账户信息END

            # 强制措施信息
            "bank_cure_info": [
                ['账号', '冻结措施类型', '冻结金额', '冻结机关', '冻结开始日期', '冻结截止日期', '措施序号', '备注'],
                ['银行名称', '账号', '冻结措施类型', '冻结措施类型名称', '冻结金额', '冻结机关', '冻结开始日期',
                 '冻结截止日期', '措施序号', '备注', '任务流水号', '查控主体类别'],
                ['措施序号', '账号', '冻结开始日', '冻结截止日', '冻结金额', '冻结措施类型', '冻结原因', '备注'],

            ],
            # 联系方式信息
            "bank_contact_info": [
                ['开户名称', '证照类型', '证照号码', '联系电话'],
            ],
            # 任务信息
            "bank_task_info": [
                ['任务流水号', '银行名称', '主体类别', '证账号码', '账卡号', '发送时间', '反馈时间', '反馈结果',
                 '入库状态', '请求单号', '查询结果'],
                ['任务流水号','银行名称','主体类别','证账号码','账卡号','发送时间','反馈时间','反馈结果','反馈非明细结果','反馈明细结果','入库时间','入库状态','请求单号','查询结果'],
                ['请求单号', '账卡号', '证件类型', '证件号码', '被查询人姓名', '被查询IP地址', '被查询MAC地址/订单号','被查询手机号', '查询内容', '紧急程度', '明细起始时间', '明细截止时间', '执行结果', '执行结果说明',
                 '反馈文件名'],
            ],
            # 住址信息
            "bank_address_info": [
                ['开户名称', '证照类型', '证照号码', '住宅地址', '住宅电话'],
            ],
            # 共有权优先权
            "bank_priority_info":[
                ['账户人姓名','账号','证件类型代码','账户人证件号','权利类型','权利金额','权利序号','权利人联系方式','权利人通讯地址','权利人姓名'],
                ['账号', '权利类型', '证件类型', '证件号码', '权利人姓名', '权利金额', '权利人通讯地址','权利人联系方式', '备注'],
                ['账号', '权利序号', '权利类型', '证件类型', '证件号码', '权利人姓名', '权利金额', '权利人通讯地址',
                 '权利人联系方式'],
                ['银行名称', '账户人姓名', '账号', '证件类型代码', '账户人证件号', '权利类型', '权利金额', '权利序号',
                 '权利人联系方式', '权利人通讯地址', '权利人姓名', '证件号码'],
            ]

        }
        # 处理特殊多sheet表的配置函数
        self.sheet_type = {
            "class_luohu_3":{
                "sheets_num":3,
                "sheets_names":["主体身份信息","账户信息","交易明细"],
                "sheets_read":{
                    "主体身份信息":{
                        "header":9,
                        "map":{
                            "姓名、单位名称":"交易户名",
                            "证件类型":"证件类型",
                            "证件号码":"交易证件号码",
                            "主体/对手":"主体/对手",
                        },
                    },
                    "账户信息":{
                        "map":{
                            "账户名称":"交易户名",
                            "账户号码":"交易卡号",
                            "开户行":"交易开户行",
                            "代办人名称":"",
                            "代办人证件号":"代办人证件号",
                        },
                    }

                },
            },
            "bank_CCB":{
                "sheets_num": 5,
                "sheets_names": ["新一代个人账户信息", "个人活期明细信息-新一代", "个人定期明细信息-新一代","新一代电子现金","查询结果情况"],
                "sheets_read":{},
            },
            "bank_CCB2": {
                "sheets_num": 5,
                "sheets_names": ['企业账户信息', '企业活期明细信息', '企业定期明细信息', '查询结果情况'],
                "sheets_read": {},
            }

        }
        """
        处理特殊多sheet表的配置函数
        """
        bank_ccb = DealBankCCB()
        self.switchBankCCB= Switch()

        self.switchBankCCB.register("个人活期明细信息-新一代",bank_ccb.personalCurrentDetails)
        self.switchBankCCB.register("企业活期明细信息", bank_ccb.businessCurrentDetails)
        self.switchBankCCB.register("个人定期明细信息-新一代", bank_ccb.personalRegularDetails)
        self.switchBankCCB.register("企业定期明细信息", bank_ccb.businessRegularDetails)
        self.switchBankCCB.register("新一代个人账户信息", bank_ccb.personalCardInfo)
        self.switchBankCCB.register("企业账户信息", bank_ccb.businessCardInfo)






        self.switchCase = Switch()
        """
        特殊模板解析方法
        :param 通过解析文档的第一个单元格进行类型划分
        """
        self.switchCase.register("历史交易明细",Special_Type1)
        self.switchCase.register('Unnamed:0', Special_Type2)
        self.switchCase.register('Unnamed: 0', Special_Type2)
        self.switchCase.register('中国银行存款历史交易明细清单(CTIS)', Special_Type3)
        self.switchCase.register('深圳农商银行账户历史交易明细', Special_Type4)
        self.switchCase.register('司法个人客户信息查询', Special_Type5)
        self.switchCase.register('司法个人账户信息查询', Special_Type5)
        self.switchCase.register('中国邮政储蓄银行账户交易明细', Special_Type6)
        self.switchCase.register('中国邮政储蓄银行账户交易明细专用回单',Special_Type6)
        self.switchCase.register('中国民生银行账户交易明细清单', Special_Type7)
        self.switchCase.register('中国农业银行司法查询控制系统（JICS）个人账户活期交易明细导出表', Special_Type8)
        self.switchCase.register('存款金融交易明细查询（含对手信息）', Special_Type9)
        self.switchCase.register('活期明细列表', Special_Type10)
        self.switchCase.register('账户名称', Special_Type11)
        self.switchCase.register('根据账号卡号查询存款交易明细', Special_Type12)
        self.switchCase.register('根据账号/卡号查明细', Special_Type13)
        self.switchCase.register('账户交易明细表_doris', Special_Type14)
        self.switchCase.register('对公CTIS查询', Special_Type15)
        self.switchCase.register('账户开户名称', Special_Type16)# 针对部分浙江农村信用
        self.switchCase.register('交易对手批量查询导出', Special_Type17)
        self.switchCase.register('司法个人客户基本信息查询',Special_Type18)
        self.switchCase.register('司法个人账户基本信息查询', Special_Type18)
        self.switchCase.register('中国民生银行个人客户信息',Special_Type19)
        self.switchCase.register("深罗公(经)调证字",Special_Type20)
        self.switchCase.register("账/卡号",Special_Type21)
        self.switchCase.register("司法协查数字化查控平台交易明细（个人客户活期明细）", Special_Type22)
        self.switchCase.register("司法协查数字化查控平台客户信息（个人客户开户信息）", Special_Type23)
        self.switchCase.register("司法协查数字化查控平台客户信息（个人客户信息）", Special_Type24)
        self.switchCase.register("司法对公客户基本信息查询", Special_Type25)
        self.switchCase.register("司法对公账户基本信息查询",Special_Type26)


        self.run_log = {}
        self.sort_columns_dict = {
            "bank_trades": [],
            "bank_sub_accounts": [],
            "bank_id_info": [],
            "bank_cure_info": [],
            "bank_accounts_info": [],
            "bank_contact_info": [],
            "bank_task_info": [],
            "address_info": [],
            "bank_priority_info": [],
            "wechat_reg": [],
            "wechat_trades": ['标记', '跳转', '交易身份', '交易户名', '交易账号', '交易卡号', '对手身份', '对手户名',
                              '对手账号', '对手卡号', '进出标志', '交易金额', '交易余额', '交易时间', '对手方接收金额',
                              '商户名称', '第三方账户名称.1', '备注1', '备注2', '交易单号', '大单号', '交易业务类型',
                              '交易用途类型', '交易开户行', '用户侧网银联单号', '网联/银联', '对手开户行',
                              '对手侧网银联单号', '网联/银联.1', '对手方接收时间', '来源行', '数据来源'],
            "wechat_info": [],
            "wechat_groups": [],
            "wechat_login_track": [],
            "wechat_friend": [],
            "wechat_inform": [],
            "noknow_template": [],
            "error_map": [],
        }
        self.sheet_name = "unknown_template"
        """记录执行到那个工作表"""

    def deal_bank_CCB_excel(self,path,func_dict:dict={},sheets_dict:dict={},return_df = False,*args,**kwargs):
        """
        特殊多sheet表处理：建设银行
        :param path:
        :param func_dict:
        :param sheets_dict:
        :param return_df:
        :param args:
        :param kwargs:
        :return:
        """
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        for k, v in sheets_dict.items():
            df_dict = func_dict.get("sheets_read").get(v, False)
            if df_dict:
                header = df_dict.get('header', 0)
                columns_map = df_dict.get("map", {})
            else:
                header = 0
                columns_map = {}
            # 按照sheet表读取文件
            df = pd.read_excel(path, sheet_name=k, header=header)
            df = self.switchBankCCB.execute(k,df)

            if isinstance(df,bool):
                continue
            else:

                # 列名修改字典
                df.rename(columns=columns_map, inplace=True)
                # print("前",k)
                # print(df.columns.tolist())
                # TODO 待完善
                # 规则处理
                df = self.deal_rule(df,path)
                # print("后",k)
                # print(df.columns.tolist())

                if '来源行' not in df.columns.tolist():
                    df['来源行'] = df.index + 2
                    df['数据来源'] = path

                # 保存
                if "明细信息" in k:
                    self.save_bank_trades(df)
                    pass
                elif "账户信息" in k:
                    self.save_bank_accounts_info(df)
                    pass
                elif "电子现金" in k:
                    # TODO :电子现金未完成
                    self.save_bank_trades(df)
                    pass
                else:
                    pass



                pass


        pass

    def saveData(self,df,tem):
        pass
    def save_run_log(self,path,func_name):
        self.run_log[path] = self.run_log.get(path, [])
        self.run_log[path].append([func_name])
    def switchSuffix(self, path):
        """
        根据文件后缀选择处理逻辑
        :param path: 文件地址
        :return:
        """
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)

        file_name, file_extension = os.path.splitext(path)
        if file_extension in [".xlsx", ".xls", ".et"]:
            self.ReadFilesMerge_excel(path)
        elif file_extension in [".csv", ".CSV"]:
            self.ReadFilesMerge_csv(path)
        elif file_extension in [".txt"]:
            self.ReadFilesMerge_txt(path)
        elif file_extension in [".pdf"]:
            self.readFilesMerge_pdf(path)
        else:
            self.nodeal_files_path.append(path)

    # 执行批量合并函数起始
    def readFilesMerge(self, _path, include_strs: list = None, filter_strs: list = None, is_explore: bool = True,
                       return_path_type: bool = False, *args, **kwargs):
        """
        读取指定目录下的文件并合并
        :param _path: 文件或者文件夹或[文件路径]必须设置
        :param include_strs: 路径中必须包含的关键词
        :param filter_strs: 路径中必须排除的关键词
        :param is_explore: 路径下查找（默认不查找）
        :param return_path_type: 返回路径的样式结构（相对路径，绝对路径）
        :param args:
        :param kwargs:
        :return:
        """
        # self.save_run_log(_path, inspect.currentframe().f_code.co_name)
        # 判断是否是文件
        if isinstance(_path, list):
            files = _path
            progress_bar = tqdm(range(len(files)))
            for i in progress_bar:
                path = files[i]
                path_str = PathDeal.get_file_and_parent_folder(path)
                progress_bar.desc = str(path_str)
                if r"\~$" in files[i]:
                    continue
                self.switchSuffix(path)
        elif os.path.isfile(_path):
            # print("这是一个文件路径")
            self.switchSuffix(_path)
        elif os.path.isdir(_path):
            # print("这是一个文件夹路径")
            # 获取指定文件夹下的文件
            files, dirs = PathDeal.find_file_path_func(
                search_path=_path,
                include_strs=include_strs,
                filter_strs=filter_strs,
                is_explore=is_explore,
                return_path_type=return_path_type,
            )
            progress_bar = tqdm(range(len(files)))
            for i in progress_bar:
                path = files[i]
                path_str = PathDeal.get_file_and_parent_folder(path)
                progress_bar.desc = str(path_str)
                if r"\~$" in files[i]:
                    continue
                self.switchSuffix(path)
        else:
            print("这不是一个有效的文件或文件夹路径")
        self.printData()

    def cleanColumns(self, df, keep_spaces: bool = False, *args, **kwargs):
        """
        列名清洗：用于清洗列名中的问题字符【\t】【空格】
        :param df: Dataframe被处理的数据
        :param keep_spaces: 默认 False 【不保留所有空格】 True【去除首尾空格保留内部间隔可供一个】
        :param args:
        :param kwargs:
        :return: df
        """
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        columns_name = []

        if keep_spaces:
            for name in df.columns:
                try:
                    name = name.strip()  # 首尾空格去除
                    for i in self.cleaningRules1_list:
                        name = re.sub(i[0], i[1], name)
                except AttributeError as e:
                    if "datetime.datetime" in str(e):
                        print("数据表头出现datetime.datetime数据类型")
                    elif "'upper'" in str(e):
                        print("尝试调用了不存在的方法。")
                    else:
                        print(f"捕获到 AttributeError: {e}")

                columns_name.append(name)
        else:
            for name in df.columns:
                name = name.strip()  # 首尾空格去除
                for i in self.cleaningRules2_list:
                    name = re.sub(i[0], i[1], name)
                columns_name.append(name)

        df.columns = columns_name
        return df

    def cleanContent(self, datas, keep_spaces: bool = False, *args, **kwargs):
        '''
        var:
            :param datas:Dataframe
        return:
            datas:Dataframe
        '''
        # 确保数据类型都为字符串
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        if keep_spaces:
            for i in self.cleaningRules1_list:
                datas = datas.replace(i[0], i[1], regex=True)
        else:
            for i in self.cleaningRules2_list:
                datas = datas.replace(i[0], i[1], regex=True)

        # 使用applymap()和str.strip()方法去除所有字符串数据中的前后空格
        # 定义一个函数来去除前后空格
        def strip_spaces(x):
            if isinstance(x, str):
                return x.strip()
            return x

        # 使用 map 方法逐列应用 strip_spaces 函数
        for col in datas.columns:
            datas[col] = datas[col].map(strip_spaces)

        # 检验是否存在非法字符
        illegal_characters = ErrorDeal.findIllegalCharacters(datas)
        if len(illegal_characters) > 0:
            # 去除非法字符
            datas = ErrorDeal.dealIllegalCharacters(datas, illegal_characters)

        datas = datas.replace('', np.nan, regex=True)
        return datas

    def readFilesMerge_pdf(self, path:str):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        source = pdf.PdfReader(path)
        # 获取指定页对象【从0开始计数】
        page = source.pages[0]
        # 获取该页中内容
        text = page.extract_text(orientations=(90, 0, 180, 270))
        rows = text.split("\n")
        pdf_info = pdfplumber.open(path)
        if (pdf_info.pages[0].extract_text_lines()[1]["text"] == '微信支付交易明细证明') and (pdf_info.pages[0].extract_text_lines()[6]["text"] == '交易单号 交易时间 交易类型 收/支/其他 交易方式 金额(元) 交易对方 商户单号'):
            df = self.get_table_wx_pdf(pdf_info)
            df["来源行"] = df.index+2
            df["数据来源"] = path
            map_dict = {
                "收/支/其他":"进出标志",
                "交易方式":"交易业务类型",
                "交易类型":"交易用途类型",
                "金额(元)":"交易金额",
                "交易对方":"对手户名",
            }
            df.rename(columns=map_dict,inplace=True)
            self.wechat_trades = pd.concat([self.wechat_trades, df],ignore_index=True)
        else:
            try:
                self.save_run_log(path,self.pdf_type_dict.get(rows[0]))
            except:
                print("解析pdf无")
            df = self.dealPDF.execute(self.pdf_type_dict.get(rows[0]),path)
            # TODO :可能需要完善
            self.save_run_log(self.path,self.pdf_type_dict.get(rows[0]))

            if df.shape[0]<=0:
                return
            else:
                df = self.deal_rule(df,path)
                if '数据来源' not in df.columns.tolist():
                    df['数据来源'] = path
                self.save_bank_trades(df)

    def save_bank_trades(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.bank_trades = pd.concat([self.bank_trades, df], ignore_index=True)
    def get_table_wx_pdf(self,pdf_info):
        df = pd.DataFrame()
        # 定义正则表达式模式
        pattern = r"(\w+)\s*[(（]\s*身份证：\s*(\d{17}[\dXx])\s*[)）]\s*，\s*在其微信号：\s*(\w+)中的交易明细信息如下"

        # 使用re.search()查找匹配的内容
        match = re.search(pattern, pdf_info.pages[0].extract_text_lines()[2]["text"])
        try:
            # 获取每一页的表格中的文字，返回table、row、cell格式：[[[row1],[row2]]]
            for page in pdf_info.pages:
                for table in page.extract_tables():
                    for row in table:
                        # 对每个单元格的字符进行简单清洗处理
                        df = pd.concat([df, pd.Series(row).to_frame().T], ignore_index=True)
        except Exception as e:
            print('报错：', e)
        finally:
            df.columns = df.loc[2, :].tolist()
            df.drop(index=[0, 1, 2], inplace=True)
            df["交易户名"] = match.group(1)
            df["交易证件号码"] = match.group(2)
            df["交易账号"] = match.group(3)
            df["交易单号"] = df["交易单号"].replace("\n", "", regex=True)
            df["商户单号"] = df["商户单号"].replace("\n", "", regex=True)
            df["交易对方"] = df["交易对方"].replace("\n", "", regex=True)
            df["交易时间"] = df["交易时间"].replace("\n", " ", regex=True)
            return df

    def ReadFilesMerge_excel(self, path: str):
        # print("触发ReadFilesMerge_excel")
        # 先根据文件名来选择处理方法
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        file_name = os.path.basename(path)
        fail = True
        dealFcun = ""
        for k, v in self.csv_type_dict.items():
            if k in file_name:
                fail = False
                dealFcun = v
                break
            else:
                fail = True
        # print(fail)
        # 文件名未发现对应的文件名
        if fail:
            # 文件信息预读取
            f = pd.ExcelFile(path)
            old_sheet_names = f.sheet_names  # 读取文件的sheet名称
            # print(old_sheet_names)
            sheets_name = {}  # sheet名称去杂结果

            # 执行sheet名称去杂
            for name in old_sheet_names:
                new = name.strip()
                for i in self.cleaningRules2_list :
                    name = re.sub(i[0], i[1], name)
                sheets_name[name] = new
            # print(sheets_name)
            # 对应相关方法
            sheets_dict = {}
            # 验证工作表名等情况
            ok = False
            for k, v in self.sheet_type.items():
                if len(sheets_name) % v.get("sheets_num") == 0:
                    n = 0
                    for x, y in sheets_name.items():
                        if v.get("sheets_names")[n] in y:
                            sheets_dict[x] = v.get("sheets_names")[n]
                            n += 1
                            ok = True
                        else:
                            ok = False
                        if n == v.get("sheets_num"):
                            n = 0
                    if ok:
                        f.close()
                        # 传入文件路径与处理字典
                        self.save_run_log(path, "预处理：" + k + "_excel")
                        self.dealFunc.execute(k + "_excel",path = path,func_dict = v,sheets_dict = sheets_dict)
                        break
            if not ok:
                # 读取行才能判断的方法
                self.readExcelRow(path)
                # self.nodeal_files_path.append(path)
        else:
            self.save_run_log(path, "预处理："+ dealFcun + "_excel")
            self.dealFunc.execute(dealFcun + "_excel", path)
    def readExcelRow(self,path: str):
        self.path = path
        self.save_run_log(path, inspect.currentframe().f_code.co_name)
        # 不读取sheet表
        files_names = ["对公开户资料", "对私开户资料"]

        # 文件信息预读取
        f = pd.ExcelFile(path)
        old_sheet_names = f.sheet_names  # 读取文件的sheet名称
        #print(old_sheet_names)

        # 部分sheet不读取跳过函数
        def isReadSheet(sheet, sheets):
            skip = False
            for sheetname in sheets:
                if sheetname in sheet:
                    skip = True
                    #print("sheet表跳过：", sheetname)
                    break
                else:
                    skip = False
                    pass
            return skip
        for sheet in old_sheet_names:
            if isReadSheet(sheet, files_names):  # 判断表格是否不读取
                continue
            # 记录当前执行的工作表
            self.sheet_name = sheet
            df_detail = self.readExcel(path, sheet)
            # 检查是否为特殊样式
            try:
                columns_name = df_detail.columns[0]
                columns_name = self.validate_columns_anomalous(columns_name)
                # 记录通过的特殊处理
                self.save_run_log(path, self.switchCase.cases.get(columns_name).__name__)

            except :
                self.save_run_log(path, "switchCase跳过")

            OK = self.switchCase.execute(columns_name, df_detail)

            if isinstance(OK, pd.DataFrame):
                df_detail = OK
            # 模板验证
            template_name, tail = self.validate_columns(df_detail)
            # 列名在最后一行
            if tail:
                df_columns = df_detail.columns
                df_detail.columns = df_detail.iloc[-1, :]
                df_detail.iloc[-1, :] = df_columns

            if '来源行' not in df_detail.columns.tolist():
                df_detail['来源行'] = df_detail.index + 2
                df_detail['数据来源'] = path+"【"+self.sheet_name+"】"
            # 数据统一规则
            df_detail = self.deal_rule(df_detail, path)
            # self.bank_trades = pd.concat([self.bank_trades,df_detail], ignore_index=True)
            getattr(self,"save_"+template_name)(df_detail)
            # self.save_bank_trades(df_detail)
            # print("readExcelRow保存")
        f.close()
    def validate_columns_anomalous(self,df_columns):
        pattern = r"""
                ^                       # 字符串开始
                ([\u4e00-\u9fa5]{1,4}) # 可选区名(1-3个汉字)
                [\(|（][\u4e00-\u9fa5]{1,4}[\)|）]                # 固定公(经)部分
                ([\u4e00-\u9fa5]{1,4})               # 调证字/调字组合
                [\(|\[|（](\d{4,5})[\)|\]|）]      # 年份(支持4位标准年份或6位扩展编码)
                (\d{4,10})             # 编号(4-10位数字)
                号$                     # 固定结尾
            """
        match = re.fullmatch(pattern, df_columns, re.VERBOSE)
        if bool(match):
            return "深罗公(经)调证字"
        pattern = r"""
                ^                       # 字符串开始
                (账/卡号) # 可选区名(1-3个汉字)
                (：)                # 固定公(经)部分
                (\d+)             # 编号(4-10位数字)
                $                     # 固定结尾
            """
        match = re.fullmatch(pattern, df_columns, re.VERBOSE)
        if bool(match):
            return "账/卡号"
        else:
            return df_columns

    def readExcel(self,path: str,sheet,return_df=True):
        # 表格名称判断，特殊文件
        self.save_run_log(path, inspect.currentframe().f_code.co_name)
        try:
            df_detail = pd.read_excel(path, sheet_name=sheet, dtype=str, na_values=self.na_valuesList)
            # print(df_detail.columns)
        except zipfile.BadZipFile:
            # print("zipfile.BadZipFile特殊文件")
            f = pd.ExcelFile(path)
            df_detail = f.parse(sheet_name=sheet, header=0, dtype=str)
        # print("清洗列名前", df_detail.shape)
        df_detail = self.cleanColumns(df_detail, keep_spaces=True)
        # print("清洗内容前", df_detail.shape)
        df_detail = self.cleanContent(df_detail, keep_spaces=True)
        return df_detail

    def deal_bank_trades_excel(self, path: str, return_df = False):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 不读取sheet表
        files_names = ["对公开户资料", "对私开户资料"]

        # 文件信息预读取
        f = pd.ExcelFile(path)
        old_sheet_names = f.sheet_names  # 读取文件的sheet名称

        # 部分sheet不读取跳过函数
        def isReadSheet(sheet, sheets):
            skip = False
            for sheetname in sheets:
                if sheetname in sheet:
                    skip = True
                    # print("sheet表跳过：", sheetname)
                    break
                else:
                    skip = False
                    pass
            return skip

        for sheet in old_sheet_names:
            if isReadSheet(sheet, files_names):  # 判断表格是否不读取
                continue
            df_detail = self.readExcel(path, sheet)
            if df_detail.shape[0]<=1:
                continue
            OK = self.switchCase.execute(df_detail.columns[0], df_detail)
            try:
                self.save_run_log(self.path,self.switchCase.cases.get(df_detail.columns[0]).__name__)
            except:
                pass
            if isinstance(OK, pd.DataFrame):
                df_detail = OK
            if '来源行' not in df_detail.columns.tolist():
                df_detail['来源行'] = df_detail.index + 2
                df_detail['数据来源'] = path
            # 统一规则
            df_detail = self.deal_rule(df_detail,path)
            self.save_bank_trades(df_detail)
        if return_df:
            return df_detail

    def ReadFilesMerge_txt(self, path: str):
        self.save_run_log(path, inspect.currentframe().f_code.co_name)
        file_name = os.path.basename(path)
        fail = True
        dealFcun = ""
        for k, v in self.csv_type_dict.items():
            if k in file_name:
                fail = False
                dealFcun = v
                break
            else:
                fail = True
        if fail:
            self.nodeal_files_path.append(path)
        else:
            self.dealFunc.execute(dealFcun+"_txt", path)

    def ReadFilesMerge_csv(self, path: str):
        self.save_run_log(path, inspect.currentframe().f_code.co_name)
        # 先根据文件名来选择处理方法
        file_name = os.path.basename(path)
        fail = True
        dealFcun = ""
        for k, v in self.csv_type_dict.items():
            if k in file_name:
                fail = False
                dealFcun = v
                break
            else:
                fail = True
        if fail:
            self.nodeal_files_path.append(path)
        else:
            self.dealFunc.execute(dealFcun+"_csv", path)


    def readCsv(self,path:str,return_df=True):
        """
        仅单纯的读取数据与去除一些特殊字符，
        :param path:
        :param return_df:
        :return:
        """
        self.save_run_log(path, inspect.currentframe().f_code.co_name)
        # 读取文件编码
        encoding_type = get_encoding(path)
        # 执行内容读取
        try:
            df_detail = pd.read_csv(path, encoding=encoding_type, dtype=str, index_col=False,na_values=self.na_valuesList)
        except UnicodeDecodeError:
            if encoding_type == 'GB2312':  # GB2312编码读取时内容含有繁体会报错转用gbk能正常
                try:
                    df_detail = pd.read_csv(path, encoding='gbk', dtype=str, index_col=False,na_values=self.na_valuesList)
                except:
                    try:
                        df_detail = pd.read_csv(path, encoding='gb18030', dtype=str, index_col=False,na_values=self.na_valuesList)
                    except:
                        # 创建临时文件
                        with tempfile.NamedTemporaryFile(mode='w+b', delete=False) as temp_file:
                            temp_filename = temp_file.name
                        # 重新打开文件进行读取和处理
                        with open(path, 'rb') as file:
                            lines = file.readlines()
                        # 处理每一行
                        processed_lines = []
                        for line in lines:
                            try:
                                decoded_line = line.decode(encoding_type)
                            except UnicodeDecodeError as e:
                                decoded_line = line.decode(encoding_type, errors='replace')
                            # 将每行中的两个双引号替换为单个双引号
                            processed_line = decoded_line.replace('""', '"')
                            processed_line = processed_line.encode(encoding_type, errors='replace')
                            processed_lines.append(processed_line)
                        # 将处理后的数据写回临时文件
                        with open(temp_filename, 'wb') as temp_file:
                            temp_file.writelines(processed_lines)
                        df_detail = pd.read_csv(temp_filename, encoding=encoding_type, dtype=str, index_col=False,na_values=self.na_valuesList)
                        del file
                        del processed_lines
                        del temp_file
        df_detail = self.cleanColumns(df_detail, keep_spaces=True)
        # 处理内容
        df_detail = self.cleanContent(df_detail, keep_spaces=True)


        if return_df:
            return df_detail

    # 检查数据框的列是否与模板匹配
    def validate_columns(self,df, model="csv"):
        """
        验证文件列名是否有匹配模板，验证模板，模板验证
        :param df:
        :param model:默认csv 【excel，csv】
        :return:
        """
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 获取数据框的列名
        df_columns = df.columns.tolist()
        # 获取文件最后一行
        if df.shape[0]>=1:
            df_tail = df.iloc[-1, :].tolist()
        else:
            df_tail = []

        # 检查列名是否完全匹配
        template_name = "unknown_template"
        ok = False
        tail = False
        for k, v in self.template_columns.items():
            for i in v:
                if set(df_columns) == set(i):
                    ok = True
                    break
                if set(df_tail) == set(i):
                    ok = True
                    tail = True
                    break
            if ok:
                template_name = k
                break
        if template_name == "unknown_template":
            if len(df.columns.tolist())>=1:
                self.noknow_template[self.path] = {"template": self.sheet_name, "columns": df.columns.tolist()}
                self.sheet_name = "unknown_template"
        return template_name, tail

    ## 专门处理txt指定样式的文件
    def deal_wechat_reg_txt(self, path, return_df = False):
        """
        处理微信注册信息的方法
        :param path:
        :param return_df: 默认False 【不进行返回】
        :return: df
        """
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)

        df = pd.read_table(path, dtype=str)
        split_list = df.loc[df["账户状态"] == "注销信息", :].index.tolist()
        for i in split_list:
            # 正常账户
            df_logon = df.iloc[:i, :].copy()
            # 注销账户
            df_logoff = df.iloc[i + 2:, :].copy()
            df_logoff.columns = df.iloc[i + 1, :]
            df_logoff["账户状态"] = "注销"
            Merge_df = pd.concat([df_logon, df_logoff])
        Merge_df = Merge_df.ffill()
        Merge_df['来源行'] = Merge_df.index + 2
        Merge_df['数据来源'] = path
        self.save_wechat_reg(Merge_df)
        if return_df:
            return Merge_df
    def save_wechat_reg(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.wechat_reg = pd.concat([self.wechat_reg, df], ignore_index=True)
    def deal_wechat_trades_txt(self, path, return_df = False):
        # print("触发deal_wechat_trades_txt")
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        df = pd.read_table(path, dtype=str)
        # 金额单位统一(把角变为元)
        df["交易金额(分)"] = df["交易金额(分)"].astype(float)
        df["账户余额(分)"] = df["账户余额(分)"].astype(float)
        df["对手方接收金额(分)"] = df["对手方接收金额(分)"].astype(float)
        df["交易金额(分)"] = df["交易金额(分)"] / 100
        df["账户余额(分)"] = df["账户余额(分)"] / 100
        df["对手方接收金额(分)"] = df["对手方接收金额(分)"] / 100

        # 确定来源
        df['来源行'] = df.index + 2
        df['数据来源'] = path

        # 列名统一
        map_dict = {
            "用户ID":"交易账号",
            "借贷类型":"进出标志",
            "用户侧账号名称":"交易户名",
            "交易金额(分)":"交易金额",
            "账户余额(分)":"交易余额",
            "用户银行卡号":"交易卡号",
            "用户侧银行名称":"交易开户行",
            "第三方账户名称":"商户名称",
            "对手方ID":"对手账号",
            "对手侧账户名称":"对手户名",
            "对手方银行卡号":"对手卡号",
            "对手侧银行名称":"对手开户行",
            "对手方接收金额(分)":"对手方接收金额",
        }
        df.rename(columns=map_dict,inplace=True)

        self.save_wechat_trades(df)
        if return_df:
            return df
    def save_wechat_trades(self, df):
        """
        保存微信流水
        :param df:
        :return:
        """
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.wechat_trades = pd.concat([self.wechat_trades, df], ignore_index=True)

    def deal_wechat_info_txt(self, path, return_df = False):
        """
        处理微信个人信息的函数
        :param path:
        :param return_df:是否返回解析结果；默认不返回
        :return:
        """
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        df = pd.read_fwf(path,dtype=str)
        new_df = pd.DataFrame()
        key, value = df.columns[0].split("：")
        new_df.loc[0, key] = value
        ok = False
        for k, v in df.iterrows():
            if ok:
                key, value = v.iloc[0].split(": ")
            else:
                key, value = v.iloc[0].split("：", maxsplit=1)

            if key == "微信号变更记录":
                ok = True
                continue
            if ok:
                i = new_df.shape[0]
                new_df.loc[i, "变更后微信号"] = key
                new_df.loc[i, "微信号变更时间"] = value
            else:
                new_df.loc[0, key] = value
        new_df.ffill().drop_duplicates()
        new_df['来源行'] = df.index + 2
        new_df['数据来源'] = path
        self.save_wechat_info(new_df)
        if return_df:
            return new_df
    def save_wechat_info(self, df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.wechat_info = pd.concat([self.wechat_info, df], ignore_index=True)
    def deal_wechat_groups_txt(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)

        parent_dir = os.path.dirname(path)
        # 获取父目录的名称
        parent_folder_name = os.path.basename(parent_dir)
        df = pd.read_table(path, dtype=str,header=1)
        df = df.dropna(axis=1, how="all")
        df["所属账号"] = parent_folder_name
        df['来源行'] = df.index + 3
        df['数据来源'] = path
        self.save_wechat_groups(df)
        if return_df:
            return df
    def save_wechat_groups(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.wechat_groups = pd.concat([self.wechat_groups, df], ignore_index=True)
    def deal_wechat_login_track_txt(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        parent_dir = os.path.dirname(path)
        # 获取父目录的名称
        parent_folder_name = os.path.basename(parent_dir)
        df = pd.read_table(path, dtype=str, header=1)
        df = df.dropna(axis=1, how="all")
        df["所属账号"] = parent_folder_name
        df['来源行'] = df.index + 3
        df['数据来源'] = path
        self.save_wechat_login_track(df)
        if return_df:
            return df
    def save_wechat_login_track(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.wechat_login_track = pd.concat([self.wechat_login_track, df], ignore_index=True)
    def deal_wechat_friend_txt(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        parent_dir = os.path.dirname(path)
        # 获取父目录的名称
        parent_folder_name = os.path.basename(parent_dir)
        df = pd.read_table(path, dtype=str, header=1)
        df = df.dropna(axis=1, how="all")
        df["所属账号"] = parent_folder_name
        df['来源行'] = df.index + 3
        df['数据来源'] = path
        self.save_wechat_friend(df)
        if return_df:
            return df
    def save_wechat_friend(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.wechat_friend = pd.concat([self.wechat_friend, df], ignore_index=True)
    def deal_wechat_inform_txt(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        df = pd.read_csv(path,sep="\t", header=None)
        parent_dir = os.path.dirname(path)
        # 获取父目录的名称
        parent_folder_name = os.path.basename(parent_dir)
        df["查询对象"] = parent_folder_name
        df['来源行'] = df.index + 1
        df['数据来源'] = path
        # TODO :规则验证

        self.wechat_inform = pd.concat([self.wechat_inform, df], ignore_index=True)
        if return_df:
            return df

    def deal_bank_priority_info_csv(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 读取数据
        df_detail = self.readCsv(path)

        # 模板验证
        template_name,tail = self.validate_columns(df_detail)
        # 列名在最后一行
        if tail:
            df_columns = df_detail.columns
            df_detail.columns = df_detail.iloc[-1, :]
            df_detail.iloc[-1, :] = df_columns


        # 模板成功
        df_detail['来源行'] = df_detail.index + 2
        df_detail['数据来源'] = path
        df_detail = self.deal_rule(df_detail, path=path, return_df=True)
        self.path = path
        # 保存数据
        getattr(self, "save_" + template_name)(df_detail)
        if return_df:
            return df_detail
        # if template_name=="bank_priority_info":
        #     df_detail['来源行'] = df_detail.index + 2
        #     df_detail['数据来源'] = path
        #     df_detail = self.deal_rule(df_detail, path=path, return_df=True)
        #     self.bank_priority_info = pd.concat([self.bank_priority_info, df_detail], ignore_index=True)
        #     if return_df:
        #         return df_detail
        # else:
        #     # 保存未知模板
        #     self.noknow_template[path] = {"template":"bank_priority_info","columns":df_detail.columns.tolist()}
    def save_bank_priority_info(self,df):
        """
        保存数据
        :param df:
        :return:
        """

        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.bank_priority_info = pd.concat([self.bank_priority_info, df], ignore_index=True)

    def deal_bank_trades_csv(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 读取数据
        df_detail = self.readCsv(path)

        # 检查是否为特殊样式
        try:
            columns_name = df_detail.columns[0]
            columns_name = self.validate_columns_anomalous(columns_name)
            # 记录通过的特殊处理
            self.save_run_log(path, self.switchCase.cases.get(columns_name).__name__)
        except:
            self.save_run_log(path, "switchCase跳过")

        OK = self.switchCase.execute(columns_name, df_detail)
        if isinstance(OK, pd.DataFrame):
            df_detail = OK

        # 模板验证
        template_name, tail = self.validate_columns(df_detail)
        # 列名在最后一行
        if tail:
            df_columns = df_detail.columns
            df_detail.columns = df_detail.iloc[-1, :]
            df_detail.iloc[-1, :] = df_columns
        # 模板成功
        # 统一规则
        df_detail = self.deal_rule(df_detail, path=path, return_df=True)
        df_detail['来源行'] = df_detail.index + 2
        df_detail['数据来源'] = path
        self.path = path
        getattr(self, "save_" + template_name)(df_detail)
        if return_df:
            return df_detail

    def deal_bank_sub_accounts_csv(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 读取数据
        df_detail = self.readCsv(path)

        # 模板验证
        template_name, tail = self.validate_columns(df_detail)
        # 列名在最后一行
        if tail:
            df_columns = df_detail.columns
            df_detail.columns = df_detail.iloc[-1, :]
            df_detail.iloc[-1, :] = df_columns
        # 模板成功
        df_detail = self.deal_rule(df_detail, path=path, return_df=True)
        df_detail['来源行'] = df_detail.index + 2
        df_detail['数据来源'] = path
        getattr(self, "save_" + template_name)(df_detail)
        if return_df:
            return df_detail
    def deal_bank_sub_accounts_excel(self,path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 读取数据
        df_detail = self.readExcelRow(path)
        # 模板验证
        template_name, tail = self.validate_columns(df_detail)
        # 列名在最后一行
        if tail:
            df_columns = df_detail.columns
            df_detail.columns = df_detail.iloc[-1, :]
            df_detail.iloc[-1, :] = df_columns
        # 模板成功
        df_detail = self.deal_rule(df_detail, path=path, return_df=True)
        df_detail['来源行'] = df_detail.index + 2
        df_detail['数据来源'] = path
        getattr(self, "save_" + template_name)(df_detail)
        if return_df:
            return df_detail

    def save_bank_sub_accounts(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.bank_sub_accounts = pd.concat([self.bank_sub_accounts, df], ignore_index=True)
    def deal_bank_id_info_csv(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 读取数据
        df_detail = self.readCsv(path)

        # 模板验证
        template_name, tail = self.validate_columns(df_detail)
        # 列名在最后一行
        if tail:
            df_columns = df_detail.columns
            df_detail.columns = df_detail.iloc[-1, :]
            df_detail.iloc[-1, :] = df_columns
        # 模板成功
        df_detail = self.deal_rule(df_detail, path=path, return_df=True)
        df_detail['来源行'] = df_detail.index + 2
        df_detail['数据来源'] = path
        self.path = path
        getattr(self, "save_" + template_name)(df_detail)
        if return_df:
            return df_detail

    def save_bank_id_info(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.bank_id_info = pd.concat([self.bank_id_info, df], ignore_index=True)
    def deal_bank_accounts_info_csv(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 读取数据
        df_detail = self.readCsv(path)

        # 模板验证
        template_name, tail = self.validate_columns(df_detail)
        # 列名在最后一行
        if tail:
            df_columns = df_detail.columns
            df_detail.columns = df_detail.iloc[-1, :]
            df_detail.iloc[-1, :] = df_columns
        # 模板成功
        df_detail['来源行'] = df_detail.index + 2
        df_detail['数据来源'] = path
        df_detail = self.deal_rule(df_detail, path=path, return_df=True)
        self.path = path
        getattr(self,"save_"+template_name)(df_detail)
        if return_df:
            return df_detail
    def deal_bank_accounts_info_excel(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 读取数据
        df_detail = self.readExcelRow(path)

        # 模板验证
        template_name, tail = self.validate_columns(df_detail)
        # 列名在最后一行
        if tail:
            df_columns = df_detail.columns
            df_detail.columns = df_detail.iloc[-1, :]
            df_detail.iloc[-1, :] = df_columns
        # 模板成功
        df_detail['来源行'] = df_detail.index + 2
        df_detail['数据来源'] = path
        df_detail = self.deal_rule(df_detail, path=path, return_df=True)
        self.path = path
        getattr(self,"save_"+template_name)(df_detail)
        if return_df:
            return df_detail

    def save_unknown_template(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # self.noknow_template[self.path] = {"template": "unknown_template", "columns": df.columns.tolist()}
        self.fail_data = pd.concat([self.fail_data,df], ignore_index=True)

    def save_bank_accounts_info(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.bank_accounts_info = pd.concat([self.bank_accounts_info, df], ignore_index=True)
    def deal_bank_sub_accounts_csv(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 读取数据
        df_detail = self.readCsv(path)

        # 模板验证
        template_name, tail = self.validate_columns(df_detail)
        # 列名在最后一行
        if tail:
            df_columns = df_detail.columns
            df_detail.columns = df_detail.iloc[-1, :]
            df_detail.iloc[-1, :] = df_columns
        # 模板成功
        df_detail['来源行'] = df_detail.index + 2
        df_detail['数据来源'] = path

        self.path = path
        getattr(self, "save_" + template_name)(df_detail)
        if return_df:
            return df_detail
    def save_bank_sub_accounts(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.bank_sub_accounts = pd.concat([self.bank_sub_accounts, df], ignore_index=True)
    def deal_bank_cure_info_csv(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 读取数据
        df_detail = self.readCsv(path)

        # 模板验证
        template_name, tail = self.validate_columns(df_detail)
        # 列名在最后一行
        if tail:
            df_columns = df_detail.columns
            df_detail.columns = df_detail.iloc[-1, :]
            df_detail.iloc[-1, :] = df_columns
        # 模板成功
        df_detail['来源行'] = df_detail.index + 2
        df_detail['数据来源'] = path
        self.bank_cure_info = pd.concat([self.bank_cure_info, df_detail], ignore_index=True)
        self.path = path
        getattr(self, "save_" + template_name)(df_detail)
        if return_df:
            return df_detail

    def save_bank_cure_info(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.bank_cure_info = pd.concat([self.bank_cure_info, df], ignore_index=True)
    def deal_bank_contact_info_csv(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 读取数据
        df_detail = self.readCsv(path)

        # 模板验证
        template_name, tail = self.validate_columns(df_detail)
        # 列名在最后一行
        if tail:
            df_columns = df_detail.columns
            df_detail.columns = df_detail.iloc[-1, :]
            df_detail.iloc[-1, :] = df_columns
        # 模板成功
        df_detail = self.deal_rule(df_detail, path=path, return_df=True)
        df_detail['来源行'] = df_detail.index + 2
        df_detail['数据来源'] = path
        self.path = path
        getattr(self, "save_" + template_name)(df_detail)
        if return_df:
            return df_detail

    def save_bank_contact_info(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.bank_cure_info = pd.concat([self.bank_cure_info, df], ignore_index=True)
    def deal_bank_task_info_csv(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 读取数据
        df_detail = self.readCsv(path)

        # 模板验证
        template_name, tail = self.validate_columns(df_detail)
        # 列名在最后一行
        if tail:
            df_columns = df_detail.columns
            df_detail.columns = df_detail.iloc[-1, :]
            df_detail.iloc[-1, :] = df_columns
        # 模板成功
        df_detail = self.deal_rule(df_detail, path=path, return_df=True)
        df_detail['来源行'] = df_detail.index + 2
        df_detail['数据来源'] = path
        self.path = path
        getattr(self, "save_" + template_name)(df_detail)
        if return_df:
            return df_detail

    def save_bank_task_info(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.bank_cure_info = pd.concat([self.bank_cure_info, df], ignore_index=True)
    def deal_bank_address_info_csv(self, path, return_df = False):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 读取数据
        df_detail = self.readCsv(path)

        # 模板验证
        template_name, tail = self.validate_columns(df_detail)
        # 列名在最后一行
        if tail:
            df_columns = df_detail.columns
            df_detail.columns = df_detail.iloc[-1, :]
            df_detail.iloc[-1, :] = df_columns
        # 模板成功
        df_detail = self.deal_rule(df_detail, path=path, return_df=True)
        df_detail['来源行'] = df_detail.index + 2
        df_detail['数据来源'] = path
        self.path = path
        getattr(self, "save_" + template_name)(df_detail)
        if return_df:
            return df_detail
    def save_bank_address_info(self,df):
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        self.bank_cure_info = pd.concat([self.bank_cure_info, df], ignore_index=True)
    def deal_class_luohu_3_excel(self, path,func_dict:dict,sheets_dict:dict,return_df = False,*args,**kwargs):
        """
        指定特殊格式处理与读取逻辑
        :param path:
        :param func_dict:
        :param return_df:
        :param args:
        :param kwargs:
        :return:
        """
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        for k,v in sheets_dict.items():
            df_dict = func_dict.get("sheets_read").get(v, False)
            if df_dict:
                header =df_dict.get('header',0)
                columns_map = df_dict.get("map", {})
            else:
                header = 0
                columns_map = {}
            df = pd.read_excel(path, sheet_name=k,header=header)

            # 列名修改字典

            df.rename(columns=columns_map,inplace=True)

            if v == "主体身份信息":
                df["数据来源"] = path+"【"+v+"】"
                self.bank_id_info = pd.concat([self.bank_id_info, df], ignore_index=True)
                bank_id_info_temp = df.copy()
            elif v == "账户信息":
                self.bank_accounts_info = pd.concat([self.bank_accounts_info, df], ignore_index=True)
                self.save_bank_accounts_info(df)
                bank_accounts_info = df.copy()
            else:
                df["来源行"] = df.index+2
                df1 = df[df["付款方证件号码"].notna()].copy()
                df1["进出方向"] = "出"
                df1.rename(columns={
                    "交易日期":"交易时间",
                    "交易方式":"交易方式",
                    "付款方账号":"交易卡号",
                    "付款方名称":"交易户名",
                    "付款方证件号码":"交易证件号码",
                    "付款方银行":"交易开户行",
                    "收款方账号":"对手卡号",
                    "收款方名称":"对手户名",
                    "收款方证件号码":"对手证件号码",
                    "收款方银行":"对手开户行",
                    "货币名称":"币种",
                    "原币金额":"交易金额",
                    "交易发生地":"交易发生地",
                    "用途":"交易类型",
                },inplace=True)
                df2 = df[df["收款方证件号码"].notna()].copy()
                df2["进出方向"] = "进"
                df2.rename(columns={
                    "交易日期":"交易时间",
                    "交易方式":"交易方式",
                    "付款方账号":"对手卡号",
                    "付款方名称":"对手户名",
                    "付款方证件号码":"对手证件号码",
                    "付款方银行":"对手开户行",
                    "收款方账号":"交易卡号",
                    "收款方名称":"交易户名",
                    "收款方证件号码":"交易证件号码",
                    "收款方银行":"交易开户行",
                    "货币名称":"币种",
                    "原币金额":"交易金额",
                    "交易发生地":"交易发生地",
                    "用途":"交易类型",
                },inplace=True)
                df3 = pd.concat([df1, df2])
                df3.sort_index(inplace=True)
                if df3.shape[0] != df.shape[0]:
                    self.nodeal_files_path.append(path+"特殊文件")
                    self.noknow_template[path] = {"template":"bank_trades","columns":df.columns.tolist()}
                # 统一规则
                df3 = self.deal_rule(df3,path)
                # self.bank_trades = pd.concat([self.bank_trades, df3], ignore_index=True)
                self.save_bank_trades(df3)
                if return_df:
                    return bank_id_info_temp,bank_accounts_info,df
        pass

    def deal_rule(self,df,path,return_df = True):
        """
        数据中各项情况的处理逻辑
        :param df:
        :param return_df:
        :return:
        """
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        # 时间部分合并与统一【多列特殊处理】
        df = self.deal_rule_time(df)

        # 金额数字统一【多列特殊处理】
        df = self.deal_rule_money(df)
        # 去除全空的行或列
        df.dropna(axis=1, how="all", inplace=True)
        df.dropna(axis=0, how="all", inplace=True)

        # 处理特殊的业务字段的名称
        df = self.deal_rule_columns_assign(df)

        # 统一列名
        df = self.deal_rule_columns(df,path)


        # 统一进出标志
        if "进出标志" in df.columns.tolist():
            df = deal_sign_turnover(df)

        if "交易金额" in df.columns.tolist():
            df.loc[:, "交易金额"] = df.loc[:, "交易金额"].apply(changeData.strToFloat)
        if "交易余额" in df.columns.tolist():
            df.loc[:, "交易余额"] = df.loc[:, "交易余额"].apply(changeData.strToFloat)

        if return_df:
            return df

    def deal_rule_time(self,df,return_df = True):
        """
        时间的处理逻辑
        :param df:
        :param return_df:
        :return:
        """
        ## 时间Start
        # 多字段处理
        subs = [
            ["交易日期", "交易时间戳", "交易类别"],
            ["交易日", "交易时间"],
            ["交易日期（YYYYMMDD）", "交易时间（HHMMSS）"],
            ["交易日期（YYYYMM11）", "交易时间（HHMMSS）"],
            ["交易日期（YYYYMMDD)", "交易时间（HHMMSS）"],
            ["日期", "时间"],
            ["交易日", "时间"],
            ["交易日期", "Txn_Time"],
            ["交易日期", "交易时间"],
            ["日期", "时间"],
            ["记录日期", "记录时间"],
            ["交易日期", "记帐时间", "交易时间戳"],
            ["入帐日期", "入帐时间", "错帐日期"],
            ["工作日期", "入帐时间"],
        ]
        time_skip = True
        for sub in subs:
            if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
                dealtimeFunc = DealDateAndTime(df, columns=sub[0:2], type=['date', 'time'])
                # 更改原名称
                df.rename(columns={sub[0]: '原交易日期', sub[1]: '原交易时间'}, inplace=True)
                df["交易时间"] = dealtimeFunc.dealReturn()
                time_skip = False
                break
        # 单字段处理
        if time_skip and ("交易时间" in df.columns):
            dealtimeFunc = DealDateAndTime(df, columns=["交易时间"], type=['date+time'])
            df[["交易时间"]] = dealtimeFunc.dealDateTime("交易时间")
        if time_skip and ("交易日期" in df.columns):
            dealtimeFunc = DealDateAndTime(df, columns=["交易日期"], type=['date+time'])
            df[["交易日期"]] = dealtimeFunc.dealDateTime("交易日期")
            df.rename(columns={"交易日期":"交易时间"})# 改了
        if return_df:
            return df
    def deal_rule_money(self,df,return_df = True):
        """
        金额的处理逻辑
        :param df:
        :param return_df:
        :return:
        """
        ## 金额Start
        sub = ["借方发生额", "贷方发生额", "摘要"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):

            date_time_df = pd.DataFrame()
            try:
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            except:
                df.loc[:, sub[0]] = df.loc[:, sub[0]].apply(changeData.strToFloat)
                df.loc[:, sub[1]] = df.loc[:, sub[1]].apply(changeData.strToFloat)
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)

            df[sub[0]] = df[sub[0]].fillna(0)
            df[sub[1]] = df[sub[1]].fillna(0)
            # df[sub[0]].fillna(0, inplace=True)
            # df[sub[1]].fillna(0, inplace=True)
            df["交易金额"] = abs(df[sub[0]]) + abs(df[sub[1]])
            ## 判断方向问题
            if df[(df[sub[2]] == "消费") & (df[sub[0]] == 0)].shape[0] > \
                    df[(df[sub[2]] == "消费") & (df[sub[1]] == 0)].shape[0]:
                df["进出标志"] = ["出" if x == 0 else "进" for x in df[sub[0]]]
            else:
                df["进出标志"] = ["进" if x == 0 else "出" for x in df[sub[0]]]

        sub = ["借方发生额", "贷方发生额"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == 2:

            date_time_df = pd.DataFrame()
            try:
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            except:
                df.loc[:, sub[0]] = df.loc[:, sub[0]].apply(changeData.strToFloat)
                df.loc[:, sub[1]] = df.loc[:, sub[1]].apply(changeData.strToFloat)
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            df[sub[0]] = df[sub[0]].fillna(0)
            df[sub[1]] = df[sub[1]].fillna(0)
            df["交易金额"] = df[sub[0]] + df[sub[1]]
            df["进出标志"] = ["进" if x == 0 else "出" for x in df[sub[0]]]
            df.rename(columns={sub[0]: '原借方金额', sub[1]: '原贷方金额'}, inplace=True)
            pass
        sub = ["借方金额", "贷方金额"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == 2:

            date_time_df = pd.DataFrame()
            try:
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            except:
                df.loc[:, sub[0]] = df.loc[:, sub[0]].apply(changeData.strToFloat)
                df.loc[:, sub[1]] = df.loc[:, sub[1]].apply(changeData.strToFloat)
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            df[sub[0]] = df[sub[0]].fillna(0)
            df[sub[1]] = df[sub[1]].fillna(0)
            df["交易金额"] = df[sub[0]] + df[sub[1]]
            df["进出标志"] = ["进" if x == 0 else "出" for x in df[sub[0]]]
            df.rename(columns={sub[0]: '原借方金额', sub[1]: '原贷方金额'}, inplace=True)
            pass

        sub = ["支出", "收入"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == 2:

            date_time_df = pd.DataFrame()
            try:
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            except:
                df.loc[:, sub[0]] = df.loc[:, sub[0]].apply(changeData.strToFloat)
                df.loc[:, sub[1]] = df.loc[:, sub[1]].apply(changeData.strToFloat)
                # df[sub[0]] = df[sub[0]].replace(",","",regex=True)
                # df[sub[1]] = df[sub[1]].replace(",","",regex=True)
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            df[sub[0]] = df[sub[0]].fillna(0)
            df[sub[1]] = df[sub[1]].fillna(0)
            df["交易金额"] = df[sub[0]] + df[sub[1]]
            df["进出标志"] = ["进" if x == 0 else "出" for x in df[sub[0]]]
            df.rename(columns={sub[0]: '原支出', sub[1]: '原收入'}, inplace=True)
            pass

        sub = ["支出金额", "收入金额", "交易金额", "借贷标志"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == 4:

            try:
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
                df["交易金额"] = df["交易金额"].astype(float)
            except:
                df.loc[:, sub[0]] = df.loc[:, sub[0]].apply(changeData.strToFloat)
                df.loc[:, sub[1]] = df.loc[:, sub[1]].apply(changeData.strToFloat)
                df["交易金额"] = df["交易金额"].apply(changeData.strToFloat)
                # df[sub[0]] = df[sub[0]].replace(",","",regex=True)
                # df[sub[1]] = df[sub[1]].replace(",","",regex=True)
                # df["交易金额"] = df["交易金额"].replace(",","",regex=True)

                df[sub[0]] = df[sub[0]].fillna(0)
                df[sub[1]] = df[sub[1]].fillna(0)
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
                df["交易金额"] = df["交易金额"].astype(float)
            if df["借贷标志"].nunique() == 1:
                df.drop(columns=["借贷标志"], inplace=True)
            date_time_df = pd.DataFrame()
            date_time_df["交易金额"] = df[sub[0]] + df[sub[1]]
            if df["交易金额"].equals(date_time_df["交易金额"]):
                df["进出标志"] = ["出" if abs(x) > 0 else "进" for x in df[sub[0]]]
            else:
                #print("交易金额与支出金额，收入金额异常")
                pass
            df.rename(columns={sub[0]: '原支出', sub[1]: '原收入'}, inplace=True)
            pass

        sub = ["支出金额", "收入金额"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == 2:

            date_time_df = pd.DataFrame()
            try:
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            except:
                df.loc[:, sub[0]] = df.loc[:, sub[0]].apply(changeData.strToFloat)
                df.loc[:, sub[1]] = df.loc[:, sub[1]].apply(changeData.strToFloat)

                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            df[sub[0]] = df[sub[0]].fillna(0)
            df[sub[1]] = df[sub[1]].fillna(0)
            df["交易金额"] = df[sub[0]] + df[sub[1]]

            df["进出标志"] = ["出" if abs(x) > 0 else "进" for x in df[sub[0]]]
            df.rename(columns={sub[0]: '原支出', sub[1]: '原收入'}, inplace=True)
            pass

        sub = ["支出", "存入", "借贷方向"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            date_time_df = pd.DataFrame()
            try:
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            except:
                df.loc[:, sub[0]] = df.loc[:, sub[0]].apply(changeData.strToFloat)
                df.loc[:, sub[1]] = df.loc[:, sub[1]].apply(changeData.strToFloat)
                # df[sub[0]] = df[sub[0]].replace(",","",regex=True)
                # df[sub[1]] = df[sub[1]].replace(",","",regex=True)
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            df[sub[0]] = df[sub[0]].fillna(0)
            df[sub[1]] = df[sub[1]].fillna(0)
            df["交易金额"] = df[sub[0]] + df[sub[1]]
            df.rename(columns={sub[0]: '原支出', sub[1]: '原收入', sub[2]: "进出标志"}, inplace=True)
            pass

        sub = ["支出", "存入"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == 2:

            date_time_df = pd.DataFrame()
            try:
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            except:
                df.loc[:, sub[0]] = df.loc[:, sub[0]].apply(changeData.strToFloat)
                df.loc[:, sub[1]] = df.loc[:, sub[1]].apply(changeData.strToFloat)
                # df[sub[0]] = df[sub[0]].replace(",","",regex=True)
                # df[sub[1]] = df[sub[1]].replace(",","",regex=True)
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            df[sub[0]] = df[sub[0]].fillna(0)
            df[sub[1]] = df[sub[1]].fillna(0)
            df["交易金额"] = df[sub[0]] + df[sub[1]]
            df["进出标志"] = ["出" if abs(x) > 0 else "进" for x in df[sub[0]]]
            df.rename(columns={sub[0]: '原支出', sub[1]: '原收入'}, inplace=True)
            pass
        sub = ["转出金额","存入金额"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == 2:
            try:
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            except:
                df.loc[:, sub[0]] = df.loc[:, sub[0]].apply(changeData.strToFloat)
                df.loc[:, sub[1]] = df.loc[:, sub[1]].apply(changeData.strToFloat)
                df[sub[0]] = df[sub[0]].astype(float)
                df[sub[1]] = df[sub[1]].astype(float)
            df["交易金额"] = df[sub[0]] + df[sub[1]]
            df["进出标志"] = ["出" if abs(x) > 0 else "进" for x in df[sub[0]]]
            df.rename(columns={sub[0]: '原支出', sub[1]: '原收入'}, inplace=True)
        if return_df:
            return df

    def deal_rule_columns_assign(self,df,return_df = True):
        """
        处理业务重复的列名
        专门处理相同业务不同字段的列
        :param df:
        :param return_df:
        :return:
        """
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)
        sub = ["查询卡号", "被查询账（卡）号"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            df.rename(columns={"查询卡号":"交易卡号","被查询账（卡）号":"交易账号"}, inplace=True)
            pass
        sub = ["客户名称", "户口名称"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            if df[sub[0]].all() == df[sub[1]].all():
                df.drop(columns=sub[1], axis=1, inplace=True)
        sub = ["客户姓名", "户口名称"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            if df[sub[0]].all() == df[sub[1]].all():
                df.drop(columns=sub[1], axis=1, inplace=True)
        sub = ["币种名称", "币种"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            df.drop(columns=sub[1], axis=1, inplace=True)
        sub = ["账户余额", "可用余额"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            if df[sub[0]].all() == df[sub[1]].all():
                df.drop(columns=sub[1], axis=1, inplace=True)
            else:
                df.drop(columns=sub[1], axis=1, inplace=True)
        sub = ["余额", "可用余额"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            if df[sub[0]].all() == df[sub[1]].all():
                df.drop(columns=sub[1], axis=1, inplace=True)
            else:
                df.drop(columns=sub[1], axis=1, inplace=True)
        sub = ["卡号", "客户账号", "交易卡号"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            if df[sub[0]].all() == df[sub[2]].all():
                df.drop(columns=sub[0], axis=1, inplace=True)
                df.rename(columns={"客户账号": "交易账号"}, inplace=True)
        sub = ["客户账号", "负债账号"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            df.drop(columns=sub[1], axis=1, inplace=True)
            df.rename(columns={"客户账号": "交易账号"}, inplace=True)
        sub = ["客户账号", "账户账号"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            df.drop(columns=sub[1], axis=1, inplace=True)
            df.rename(columns={"客户账号": "交易卡号","账户账号":"交易账号"}, inplace=True)

        sub = ["交易卡号", "一本通账号或卡号","客户账号","客户编号"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            df.drop(columns=sub[1], axis=1, inplace=True)
        sub = ["交易卡号", "卡号", "客户账号", "客户编号"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            df.drop(columns=sub[1], axis=1, inplace=True)
        sub = ["交易类型", "交易类型描述"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            df.rename(columns={"交易类型":"交易编码","交易类型描述":"交易类型"}, inplace=True)
        sub = ["摘要名称","交易摘要", "文字摘要"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            df.rename(columns={"摘要名称":"转账方式","交易摘要": "交易摘要", "文字摘要": "三方对手户名"}, inplace=True)
        sub = ["摘要名称", "交易方式标识", "文字摘要"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            df.rename(columns={"摘要名称": "转账方式", "交易方式标识": "交易类型", "文字摘要": "三方对手户名"},
                      inplace=True)
        sub = ["交易类型", "现转标志"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            df.rename(columns={"交易类型": "交易类型", "现转标志": "现金标志"},inplace=True)
        sub = ["交易描述", "交易注解", "摘要"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            df.rename(columns={"交易描述": "交易摘要", "交易注解": "备注2", "摘要": "备注"},
                      inplace=True)
        sub = ["客户名称", "交易流水", "交易方向(D:借|C:贷)", "币种名称", "联机余额", "对方客户名称", "对方帐号",
               "网银MAC地址", "网上交易IP地址", "对手客户证件号码", "证件号", "账号", "摘要名称", "文字摘要",
               "交易方式标识", "对方帐号开户机构名称"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            df.rename(columns={"客户名称": "交易户名", "交易流水": "交易流水号", "交易方向(D:借|C:贷)": "进出标志",
                               "币种名称": "币种", "联机余额": "交易余额", "对方帐号": "对手卡号",
                               "对方客户名称": "对手户名",
                               "网银MAC地址": "mac", "网上交易IP地址": "ip", "对手客户证件号码": "对手证件号码",
                               "证件号": "交易证件号码", "账号": "交易账号", "摘要名称": "交易摘要", "文字摘要": "备注",
                               "交易方式标识": "交易类型", "对方帐号开户机构名称": "对手开户行", },
                      inplace=True)
        sub = ["客户号", "账户名称(中文)", "客户名称(中文)","客户账号"]
        if (len(list(set(df.columns.tolist()))) - len(list(set(df.columns.tolist()) - set(sub)))) == len(sub):
            if (df["账户名称(中文)"] == df["客户名称(中文)"]).all():
                df = df.drop(columns ="客户名称(中文)")
            df.rename(columns={"客户号": "交易账号", "客户账号": "交易卡号", "账户名称(中文)": "交易户名"},
                      inplace=True)
        if return_df:
            return df

    def deal_rule_columns(self,df,path:str,columns_dict:dict = None,return_df = True):
        self.path = path
        self.save_run_log(self.path, inspect.currentframe().f_code.co_name)

        if columns_dict is None:
            columns_dict = self.columns_dict

        # 删除全为空的列
        df = df.dropna(axis=1, how="all").copy()

        # 重复名称处理
        df = self.deal_rule_columns_assign(df)

        old_columns = df.columns

        for column_name in df.columns:
            if column_name in columns_dict:
                df.rename(columns={column_name: columns_dict[column_name]}, inplace=True)

        ok_list = findDuplicates.list_repeat(df.columns.tolist())
        if len(ok_list) == 0:
            if return_df:
                return df
        else:
            error_dict = dict(zip(old_columns.tolist(), df.columns.tolist()))
            self.error_map[path] = {
                "列名重复":ok_list,
                "map":error_dict
            }
            df.columns = old_columns
            return df



    def printData(self):
        """
        打印处理好的结果对象
        :return:
        """
        self.dict_data = {
            "bank_trades":"银行-交易流水bank_trades："+str(self.bank_trades.shape),
            "bank_sub_accounts":"银行-关联子账户信息bank_sub_accounts："+str(self.bank_sub_accounts.shape),
            "bank_id_info":"银行-人员信息bank_id_info："+str(self.bank_id_info.shape),
            "bank_cure_info":"银行-强制措施信息bank_cure_info："+str(self.bank_cure_info.shape),
            "bank_accounts_info":"银行-账户信息bank_accounts_info："+str(self.bank_accounts_info.shape),
            "bank_contact_info":"银行-联系方式信息bank_contact_info："+str(self.bank_contact_info.shape),
            "bank_task_info":"银行-任务信息bank_task_info："+str(self.bank_task_info.shape),
            "address_info":"银行-住址信息address_info："+str(self.address_info.shape),
            "bank_priority_info":"银行-优先权信息bank_priority_info："+str(self.bank_priority_info.shape),
            "wechat_reg":"微信-注册信息wechat_reg："+str(self.wechat_reg.shape),
            "wechat_trades":"微信-交易明细信息wechat_trades："+str(self.wechat_trades.shape),
            "wechat_info":"微信-个人信息wechat_info："+str(self.wechat_info.shape),
            "wechat_groups":"微信-微信群wechat_groups："+str(self.wechat_groups.shape),
            "wechat_login_track":"微信-登录轨迹wechat_login_track："+str(self.wechat_login_track.shape),
            "wechat_friend":"微信-朋友wechat_friend："+str(self.wechat_friend.shape),
            "wechat_inform":"微信-告知wechat_inform："+str(self.wechat_inform.shape),
            "noknow_template":"模板-未记录noknow_template："+str((len(self.noknow_template),0)),
            "error_map":"错误文件-原因error_map："+str((len(self.error_map),0)),
            "nodeal_files_path": "文件名异常-未处理nodeal_files_path：" + str((len(self.nodeal_files_path), 0)),
        }

        # 定义一个函数来提取括号内的数据
        def extract_numbers(text):
            pattern = r'\((\d+), (\d+)\)'
            match = re.search(pattern, text)
            if match:
                return match.groups()
            return None

        # 遍历字典并提取括号内的数据
        print_str = ""
        for key, value in self.dict_data.items():
            numbers = extract_numbers(value)
            if numbers[0] != "0":
                print_str += value + "\n"

        print(print_str)

    def out_columns_func(self,datas, unknow=False):
        data_columns_list_default = [
            '标记',
            '本轮分析',
            '跳转',
            '交易身份',
            '交易户名',
            '交易卡号',
            '对手身份',
            '对手户名',
            '对手卡号',
            '进出标志',
            '交易金额',
            '交易余额',
            '交易时间',
            '币种',
            '交易证件号码',
            '对手证件号码',
            '交易结果',
            '交易账号',
            '交易开户行',
            '对手账号',
            '对手开户行',
            '交易网点代码',
            '交易网点名称',
            '交易流水号',
            '商户号',
            '商户名称',
            '凭证种类',
            '凭证号',
            '终端号',
            '交易发生地',
            '传票号',
            '日志号',
            '交易柜员号',
            'ip',
            'mac',
            '用途'
            '交易类型',
            '现金标志',
            '交易摘要',
            '备注',
            '异常备注'
            '批次',
            '数据来源',
            '来源行',
            'ID编号',
        ]
        # 对导出数据进行排列，排列规则遵守data_columns_list_default
        data_columns_list_save = []
        data_columns_list_unknow = []
        for key in data_columns_list_default:
            if key in datas.columns:
                data_columns_list_save.append(key)
        if unknow:
            for key in datas.columns:
                if key not in data_columns_list_save:
                    data_columns_list_save.append(key)
        return data_columns_list_save
    def bankTrades(self):
        return self.bank_trades[self.out_columns_func(datas=self.bank_trades,unknow=True)]
    def saveFiles(self,path):
        for i in self.dict_data.keys():
            save_df = getattr(self,i)
            if isinstance(save_df,pd.DataFrame):
                if save_df.shape[0]>=1:
                    # 列名排序
                    save_df = self.sortColumns(save_df,self.sort_columns_dict.get("wechat_trades",[]))
                    if save_df.shape[0]>=1048575:
                        save_path = os.path.join(path, i + ".csv")
                        save_df.to_csv(save_path,encoding='utf_8_sig')
                    else:
                        save_path = os.path.join(path, i + ".xlsx")
                        save_df.to_excel(save_path)
    def sortColumns(self,df,sort_columns:list,unknow:bool=True):
        # 对导出数据进行排列，排列规则遵守data_columns_list_default
        data_columns_list_save = []
        data_columns_list_unknow = []
        for key in sort_columns:
            if key in df.columns:
                data_columns_list_save.append(key)
        if unknow:
            for key in df.columns:
                if key not in data_columns_list_save:
                    data_columns_list_save.append(key)
        return df[data_columns_list_save]
    pass












