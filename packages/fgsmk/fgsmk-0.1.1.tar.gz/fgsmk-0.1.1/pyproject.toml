[tool.poetry]
name          = "fgsmk"
version       = "0.1.1"
description   = "Supporting functions for running Snakemake workflows."
readme        = "README.md"
authors       = ["Fulcrum Genomics LLC <contact@fulcrumgenomics.com>"]
license       = "MIT"
include       = ["LICENSE"]
homepage      = "https://github.com/fulcrumgenomics/fgsmk"
repository    = "https://github.com/fulcrumgenomics/fgsmk"
documentation = "https://github.com/fulcrumgenomics/fgsmk"
classifiers   = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python    = ">=3.11.0,<3.13"
fgpyo     = "1.0.0"
snakemake = "^8.27.1"

[tool.poetry.group.dev.dependencies]
mypy        = "^1.15.0"
pytest      = "^8.3.5"
pytest-cov  = "^6.0.0"
ruff        = "0.11.0"

[tool.poetry.group.ipython]
optional = true

[tool.poetry.group.ipython.dependencies]
ipython = "^9.0.2"
ipdb    = "^0.13.13"

[tool.poe]
poetry_command = "task"

[tool.poe.tasks]
fix-format = "ruff format"
fix-lint   = "ruff check --fix"

fix-all.ignore_fail = "return_non_zero"
fix-all.sequence    = [
    "fix-format",
    "fix-lint"
]

check-lock   = "poetry check --lock"
check-format = "ruff format --check --diff"
check-lint   = "ruff check"
check-tests  = "pytest"
check-typing = "mypy"

check-all.ignore_fail = "return_non_zero"
check-all.sequence    = [
    "check-lock",
    "check-format",
    "check-lint",
    "check-tests",
    "check-typing"
]

fix-and-check-all.ignore_fail = "return_non_zero"
fix-and-check-all.sequence    = [
    "fix-all",
    "check-all"
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/fulcrumgenomics/fgsmk/issues"

[build-system]
requires      = ["poetry-core>=1.6"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
files                       = ["./"]
strict_optional             = true
strict_equality             = true
check_untyped_defs          = true
disallow_incomplete_defs    = true
disallow_untyped_calls      = true
disallow_untyped_decorators = true
disallow_untyped_defs       = true
no_implicit_optional        = true
warn_no_return              = true
warn_redundant_casts        = true
warn_return_any             = true
warn_unreachable            = true
warn_unused_configs         = true
warn_unused_ignores         = true
enable_error_code           = [
    "ignore-without-code",
    "possibly-undefined",
]
exclude                     = [
    "docs/",
    "site/",
]

[[tool.mypy.overrides]]
module = [
    "snakemake.api",
    "snakemake.exceptions",
    "snakemake.settings.types",
    "snakemake_interface_executor_plugins.registry",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.4"
addopts    = [
    "--color=yes",
    "--import-mode=importlib",
    "--cov"
]

[tool.ruff]
line-length    = 100
target-version = "py311"
output-format  = "full"
preview        = true

[tool.ruff.lint]
select    = [
    "ARG",    # Unused arguments
    "C901",   # McCabe complexity
    "B",      # bugbear
    "D",      # pydocstyle (docstrings. We have the "google" convention enabled)
    "D204",   # Blank line between class docstring and first (__init__) method
    "D213",   # Summary line should be located on the line after opening quotes
    "E",      # pycodestyle errors
    "LOG",    # flake8-logging
    "LOG015", # (preview rule) Prohibit calls to the root logger
    "F",      # pyflakes
    "I",      # isort
    "N",      # PEP8 naming
    "W",      # pycodestyle warnings
    "Q",      # flake8-quotes
]
ignore    = [
    "E203",
    "E701",
    "D212",  # summary line should be located on the same line as opening quotes
    "D100",  # missing docstring in public module
    "D104",  # missing docstring in public package
]
unfixable = ["B"]
# NB: only preview rules explicitly selected above (e.g. LOG015) will be enforced
preview = true
explicit-preview-rules = true

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.git-cliff.changelog]
header = ""
trim = true
body = """
{% for group, commits in commits | group_by(attribute="group") %}
    ## {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }} ({{ commit.id | truncate(length=8, end="") }})\
    {% endfor %}
{% endfor %}\n
"""

[tool.git-cliff.git]
conventional_commits = true
commit_parsers = [
    { message = "^.+!:*", group = "Breaking"},
    { message = "^feat*", group = "Features"},
    { message = "^fix*", group = "Bug Fixes"},
    { message = "^docs*", group = "Documentation"},
    { message = "^perf*", group = "Performance"},
    { message = "^refactor*", group = "Refactor"},
    { message = "^style*", group = "Styling"},
    { message = "^test*", group = "Testing"},
    { message = "^chore\\(release\\):*", skip = true},
    { message = "^chore*", group = "Miscellaneous Tasks"},
    { body = ".*security", group = "Security"}
]
filter_commits = false
