# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['HttpproxyArgs', 'Httpproxy']

@pulumi.input_type
class HttpproxyArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Httpproxy resource.
        :param pulumi.Input[str] url: Uniform resource locator of the proxy. @EXAMPLE "https://proxy.company.com:8443"
        :param pulumi.Input[str] name: The name of the http proxy. @EXAMPLE "proxy.company.com"
        """
        pulumi.set(__self__, "url", url)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Uniform resource locator of the proxy. @EXAMPLE "https://proxy.company.com:8443"
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the http proxy. @EXAMPLE "proxy.company.com"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _HttpproxyState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Httpproxy resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY Defining HTTP Proxies that exist on your network allows you to perform various actions through those proxies.
        :param pulumi.Input[str] name: The name of the http proxy. @EXAMPLE "proxy.company.com"
        :param pulumi.Input[str] url: Uniform resource locator of the proxy. @EXAMPLE "https://proxy.company.com:8443"
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY Defining HTTP Proxies that exist on your network allows you to perform various actions through those proxies.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the http proxy. @EXAMPLE "proxy.company.com"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Uniform resource locator of the proxy. @EXAMPLE "https://proxy.company.com:8443"
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class Httpproxy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Httpproxy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the http proxy. @EXAMPLE "proxy.company.com"
        :param pulumi.Input[str] url: Uniform resource locator of the proxy. @EXAMPLE "https://proxy.company.com:8443"
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HttpproxyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Httpproxy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HttpproxyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HttpproxyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HttpproxyArgs.__new__(HttpproxyArgs)

            __props__.__dict__["name"] = name
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["__meta_"] = None
        super(Httpproxy, __self__).__init__(
            'foreman:index/httpproxy:Httpproxy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'Httpproxy':
        """
        Get an existing Httpproxy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY Defining HTTP Proxies that exist on your network allows you to perform various actions through those proxies.
        :param pulumi.Input[str] name: The name of the http proxy. @EXAMPLE "proxy.company.com"
        :param pulumi.Input[str] url: Uniform resource locator of the proxy. @EXAMPLE "https://proxy.company.com:8443"
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HttpproxyState.__new__(_HttpproxyState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["name"] = name
        __props__.__dict__["url"] = url
        return Httpproxy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY Defining HTTP Proxies that exist on your network allows you to perform various actions through those proxies.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the http proxy. @EXAMPLE "proxy.company.com"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        Uniform resource locator of the proxy. @EXAMPLE "https://proxy.company.com:8443"
        """
        return pulumi.get(self, "url")

