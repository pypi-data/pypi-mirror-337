# ----------------------------------------------------------------------
# Copyright (c) 2014 Rafael Gonzalez.
#
# See the LICENSE file for details
# ----------------------------------------------------------------------

#------------------------------------------------------------------------#

[tessdb]

# Global section

# namespace log level (debug, info, warn, error, critical)
# Reloadable property
log_level = "info"

# Log activity for *selected instruments* only and *all* namespaces
# as opossed to the general log
# list of TESS instrument names.
# Empty list if not used
# Reloadable property
log_selected = []

#------------------------------------------------------------------------#
[mqtt]

# MQTT Client config

# The broker host, username, password and client_id
# are configured by environment variables
# MQTT_BROKER, MQTT_USERNAME, MQTT_PASSWORD, MQTT_CLIENT_ID
# respectively

# Keepalive connection (in seconds)
# Not reloadable property
keepalive = 60

# MQTT Topic to subscribe for automatic registration
# Leave as empty string to disable automatic registration
# Reloadable property
tess_topic_register = "STARS4ALL/register"

# List of MQTT topics to subscribe for readings
# Reloadable property
tess_topics = ["STARS4ALL/+/reading",]

# Instrument White List.
# Discards instruments readings and registrations 
# whose name do not belong to this list
# Useful to keep your own readings database when sharing
# MQTT topic with other TESS instruments
# Leave empty if not used.
# Reloadable property
tess_whitelist = []

# Instrument Black List.
# Discards instruments readings and registrations 
# whose name belong to this list
# Useful to discard a particular "noisy" instruments
# with lots of readings
# Leave empty if not used.
# Reloadable property
tess_blacklist = []

# namespace log level (debug, info, warn, error, critical)
# Reloadable property
log_level = "info"

# MQTT PDUs log level. 
# See all PDU exchanges with 'debug' level. Otherwise, leave it to 'info'
# Reloadable property
protocol_log_level = "info"

#------------------------------------------------------------------------#

[filter]
# Invalid samples filter
# This module filters out invalid incoming data by analyzing a window
# of samples before and after a given one.

# Filter depth (window size)
# Should be an odd, number, minimun 3, recommended 7.
# depth = 3 -> keep 1 invalid sample  after the valid ones
# depth = 5 -> keep 2 invalid samples after the valid ones
# depth = 7 -> keep 3 invalid samples after the valid ones
# Not reloadable property
depth = 7

# Enable flag
# If not enabled, the new reading is passed directly to the database input queue
# Reloadable property
enabled = true

# namespace log level (debug, info, warn, error, critical)
# Reloadable property
log_level = "info"

#------------------------------------------------------------------------#

# Database configuration section
[dbase]

# The database connection string is configured
# in the DATABASE_URL environment variable

# Day resolution (in seconds)
# Must be one of 60, 30, 20, 15, 12, 10, 6, 5, 4, 3, 2, 1
# If changed to a lower time span it may be necessary to delete excess rows
# in the database
# Not reloadable property.
secs_resolution = 1

# Authorisation filter
# Each TESS-W photometer must be authorised to write to the database
# The recommended use is to manually authorise it after the TESS photomenter
# is in place and measuring properly
# However, this can be disabled.
auth_filter = true

# Write Buffer size
# Writes to database every N readings to improve I/O performance
# If you just kill or stop the server by systemd you will loose 
# all the samples stoired in the buffer.
# If this is relevant to you, you may perform a more convoluted approach:
#    1. change the buffer size to 1
#    2. reload the server with tessdb_reload
#    3. watch the logfile until the server starts writing sample by sample to database
#    4. you may now kill or stop the server
#    5. do not forget to set it to its original value before starting the server again
# Integer > 1
# Reloadable property
buffer_size = 50

# ZP Low Limit
# Due to a firmware bug, some ZP sends absurd low ZP values such as 2 or 0
# This filters out all register messages with a ZP value below a thresold
# Reloadable property
zp_threshold = 10

# general namespace log level (debug, info, warn, error, critical)
# Reloadable property
log_level = "info"

# specific registration log level (debug, info, warn, error, critical)
# Reloadable property
register_log_level = "info"
