"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import corvic_generated.completion.v1.service_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class CompletionServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Complete: grpc.UnaryUnaryMultiCallable[
        corvic_generated.completion.v1.service_pb2.CompleteRequest,
        corvic_generated.completion.v1.service_pb2.CompleteResponse,
    ]
    CompleteRag: grpc.UnaryUnaryMultiCallable[
        corvic_generated.completion.v1.service_pb2.CompleteRagRequest,
        corvic_generated.completion.v1.service_pb2.CompleteRagResponse,
    ]
    GetSha: grpc.UnaryUnaryMultiCallable[
        corvic_generated.completion.v1.service_pb2.GetShaRequest,
        corvic_generated.completion.v1.service_pb2.GetShaResponse,
    ]
    GetModels: grpc.UnaryUnaryMultiCallable[
        corvic_generated.completion.v1.service_pb2.GetModelsRequest,
        corvic_generated.completion.v1.service_pb2.GetModelsResponse,
    ]
    GetDefault: grpc.UnaryUnaryMultiCallable[
        corvic_generated.completion.v1.service_pb2.GetDefaultRequest,
        corvic_generated.completion.v1.service_pb2.GetDefaultResponse,
    ]

class CompletionServiceAsyncStub:
    Complete: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.completion.v1.service_pb2.CompleteRequest,
        corvic_generated.completion.v1.service_pb2.CompleteResponse,
    ]
    CompleteRag: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.completion.v1.service_pb2.CompleteRagRequest,
        corvic_generated.completion.v1.service_pb2.CompleteRagResponse,
    ]
    GetSha: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.completion.v1.service_pb2.GetShaRequest,
        corvic_generated.completion.v1.service_pb2.GetShaResponse,
    ]
    GetModels: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.completion.v1.service_pb2.GetModelsRequest,
        corvic_generated.completion.v1.service_pb2.GetModelsResponse,
    ]
    GetDefault: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.completion.v1.service_pb2.GetDefaultRequest,
        corvic_generated.completion.v1.service_pb2.GetDefaultResponse,
    ]

class CompletionServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Complete(
        self,
        request: corvic_generated.completion.v1.service_pb2.CompleteRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.completion.v1.service_pb2.CompleteResponse, collections.abc.Awaitable[corvic_generated.completion.v1.service_pb2.CompleteResponse]]: ...
    @abc.abstractmethod
    def CompleteRag(
        self,
        request: corvic_generated.completion.v1.service_pb2.CompleteRagRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.completion.v1.service_pb2.CompleteRagResponse, collections.abc.Awaitable[corvic_generated.completion.v1.service_pb2.CompleteRagResponse]]: ...
    @abc.abstractmethod
    def GetSha(
        self,
        request: corvic_generated.completion.v1.service_pb2.GetShaRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.completion.v1.service_pb2.GetShaResponse, collections.abc.Awaitable[corvic_generated.completion.v1.service_pb2.GetShaResponse]]: ...
    @abc.abstractmethod
    def GetModels(
        self,
        request: corvic_generated.completion.v1.service_pb2.GetModelsRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.completion.v1.service_pb2.GetModelsResponse, collections.abc.Awaitable[corvic_generated.completion.v1.service_pb2.GetModelsResponse]]: ...
    @abc.abstractmethod
    def GetDefault(
        self,
        request: corvic_generated.completion.v1.service_pb2.GetDefaultRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.completion.v1.service_pb2.GetDefaultResponse, collections.abc.Awaitable[corvic_generated.completion.v1.service_pb2.GetDefaultResponse]]: ...

def add_CompletionServiceServicer_to_server(servicer: CompletionServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
