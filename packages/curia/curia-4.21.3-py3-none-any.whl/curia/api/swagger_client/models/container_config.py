# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 3.16.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContainerConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'strategy': 'str',
        'segmentation_strategy': 'str',
        'shap_explanation_count': 'float',
        'attach_shapley_explanation': 'bool',
        'override_targeting_model_bin_count': 'float',
        'override_targeting_method': 'str',
        'save_predictions_to_snowflake': 'bool',
        'snowflake_model_key': 'str',
        'seed': 'float',
        'hyperparameters': 'object',
        'hyperparameter_default_behavior': 'str'
    }

    attribute_map = {
        'version': 'version',
        'strategy': 'strategy',
        'segmentation_strategy': 'segmentation_strategy',
        'shap_explanation_count': 'shap_explanation_count',
        'attach_shapley_explanation': 'attach_shapley_explanation',
        'override_targeting_model_bin_count': 'override_targeting_model_bin_count',
        'override_targeting_method': 'override_targeting_method',
        'save_predictions_to_snowflake': 'save_predictions_to_snowflake',
        'snowflake_model_key': 'snowflake_model_key',
        'seed': 'seed',
        'hyperparameters': 'hyperparameters',
        'hyperparameter_default_behavior': 'hyperparameter_default_behavior'
    }

    def __init__(self, version=None, strategy=None, segmentation_strategy=None, shap_explanation_count=None, attach_shapley_explanation=None, override_targeting_model_bin_count=None, override_targeting_method=None, save_predictions_to_snowflake=None, snowflake_model_key=None, seed=None, hyperparameters=None, hyperparameter_default_behavior=None):  # noqa: E501
        """ContainerConfig - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._strategy = None
        self._segmentation_strategy = None
        self._shap_explanation_count = None
        self._attach_shapley_explanation = None
        self._override_targeting_model_bin_count = None
        self._override_targeting_method = None
        self._save_predictions_to_snowflake = None
        self._snowflake_model_key = None
        self._seed = None
        self._hyperparameters = None
        self._hyperparameter_default_behavior = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if strategy is not None:
            self.strategy = strategy
        if segmentation_strategy is not None:
            self.segmentation_strategy = segmentation_strategy
        if shap_explanation_count is not None:
            self.shap_explanation_count = shap_explanation_count
        if attach_shapley_explanation is not None:
            self.attach_shapley_explanation = attach_shapley_explanation
        if override_targeting_model_bin_count is not None:
            self.override_targeting_model_bin_count = override_targeting_model_bin_count
        if override_targeting_method is not None:
            self.override_targeting_method = override_targeting_method
        if save_predictions_to_snowflake is not None:
            self.save_predictions_to_snowflake = save_predictions_to_snowflake
        if snowflake_model_key is not None:
            self.snowflake_model_key = snowflake_model_key
        if seed is not None:
            self.seed = seed
        if hyperparameters is not None:
            self.hyperparameters = hyperparameters
        if hyperparameter_default_behavior is not None:
            self.hyperparameter_default_behavior = hyperparameter_default_behavior

    @property
    def version(self):
        """Gets the version of this ContainerConfig.  # noqa: E501


        :return: The version of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ContainerConfig.


        :param version: The version of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def strategy(self):
        """Gets the strategy of this ContainerConfig.  # noqa: E501


        :return: The strategy of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this ContainerConfig.


        :param strategy: The strategy of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._strategy = strategy

    @property
    def segmentation_strategy(self):
        """Gets the segmentation_strategy of this ContainerConfig.  # noqa: E501


        :return: The segmentation_strategy of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._segmentation_strategy

    @segmentation_strategy.setter
    def segmentation_strategy(self, segmentation_strategy):
        """Sets the segmentation_strategy of this ContainerConfig.


        :param segmentation_strategy: The segmentation_strategy of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._segmentation_strategy = segmentation_strategy

    @property
    def shap_explanation_count(self):
        """Gets the shap_explanation_count of this ContainerConfig.  # noqa: E501


        :return: The shap_explanation_count of this ContainerConfig.  # noqa: E501
        :rtype: float
        """
        return self._shap_explanation_count

    @shap_explanation_count.setter
    def shap_explanation_count(self, shap_explanation_count):
        """Sets the shap_explanation_count of this ContainerConfig.


        :param shap_explanation_count: The shap_explanation_count of this ContainerConfig.  # noqa: E501
        :type: float
        """

        self._shap_explanation_count = shap_explanation_count

    @property
    def attach_shapley_explanation(self):
        """Gets the attach_shapley_explanation of this ContainerConfig.  # noqa: E501


        :return: The attach_shapley_explanation of this ContainerConfig.  # noqa: E501
        :rtype: bool
        """
        return self._attach_shapley_explanation

    @attach_shapley_explanation.setter
    def attach_shapley_explanation(self, attach_shapley_explanation):
        """Sets the attach_shapley_explanation of this ContainerConfig.


        :param attach_shapley_explanation: The attach_shapley_explanation of this ContainerConfig.  # noqa: E501
        :type: bool
        """

        self._attach_shapley_explanation = attach_shapley_explanation

    @property
    def override_targeting_model_bin_count(self):
        """Gets the override_targeting_model_bin_count of this ContainerConfig.  # noqa: E501


        :return: The override_targeting_model_bin_count of this ContainerConfig.  # noqa: E501
        :rtype: float
        """
        return self._override_targeting_model_bin_count

    @override_targeting_model_bin_count.setter
    def override_targeting_model_bin_count(self, override_targeting_model_bin_count):
        """Sets the override_targeting_model_bin_count of this ContainerConfig.


        :param override_targeting_model_bin_count: The override_targeting_model_bin_count of this ContainerConfig.  # noqa: E501
        :type: float
        """

        self._override_targeting_model_bin_count = override_targeting_model_bin_count

    @property
    def override_targeting_method(self):
        """Gets the override_targeting_method of this ContainerConfig.  # noqa: E501


        :return: The override_targeting_method of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._override_targeting_method

    @override_targeting_method.setter
    def override_targeting_method(self, override_targeting_method):
        """Sets the override_targeting_method of this ContainerConfig.


        :param override_targeting_method: The override_targeting_method of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._override_targeting_method = override_targeting_method

    @property
    def save_predictions_to_snowflake(self):
        """Gets the save_predictions_to_snowflake of this ContainerConfig.  # noqa: E501


        :return: The save_predictions_to_snowflake of this ContainerConfig.  # noqa: E501
        :rtype: bool
        """
        return self._save_predictions_to_snowflake

    @save_predictions_to_snowflake.setter
    def save_predictions_to_snowflake(self, save_predictions_to_snowflake):
        """Sets the save_predictions_to_snowflake of this ContainerConfig.


        :param save_predictions_to_snowflake: The save_predictions_to_snowflake of this ContainerConfig.  # noqa: E501
        :type: bool
        """

        self._save_predictions_to_snowflake = save_predictions_to_snowflake

    @property
    def snowflake_model_key(self):
        """Gets the snowflake_model_key of this ContainerConfig.  # noqa: E501


        :return: The snowflake_model_key of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._snowflake_model_key

    @snowflake_model_key.setter
    def snowflake_model_key(self, snowflake_model_key):
        """Sets the snowflake_model_key of this ContainerConfig.


        :param snowflake_model_key: The snowflake_model_key of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._snowflake_model_key = snowflake_model_key

    @property
    def seed(self):
        """Gets the seed of this ContainerConfig.  # noqa: E501


        :return: The seed of this ContainerConfig.  # noqa: E501
        :rtype: float
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this ContainerConfig.


        :param seed: The seed of this ContainerConfig.  # noqa: E501
        :type: float
        """

        self._seed = seed

    @property
    def hyperparameters(self):
        """Gets the hyperparameters of this ContainerConfig.  # noqa: E501


        :return: The hyperparameters of this ContainerConfig.  # noqa: E501
        :rtype: object
        """
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, hyperparameters):
        """Sets the hyperparameters of this ContainerConfig.


        :param hyperparameters: The hyperparameters of this ContainerConfig.  # noqa: E501
        :type: object
        """

        self._hyperparameters = hyperparameters

    @property
    def hyperparameter_default_behavior(self):
        """Gets the hyperparameter_default_behavior of this ContainerConfig.  # noqa: E501


        :return: The hyperparameter_default_behavior of this ContainerConfig.  # noqa: E501
        :rtype: str
        """
        return self._hyperparameter_default_behavior

    @hyperparameter_default_behavior.setter
    def hyperparameter_default_behavior(self, hyperparameter_default_behavior):
        """Sets the hyperparameter_default_behavior of this ContainerConfig.


        :param hyperparameter_default_behavior: The hyperparameter_default_behavior of this ContainerConfig.  # noqa: E501
        :type: str
        """

        self._hyperparameter_default_behavior = hyperparameter_default_behavior

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContainerConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
