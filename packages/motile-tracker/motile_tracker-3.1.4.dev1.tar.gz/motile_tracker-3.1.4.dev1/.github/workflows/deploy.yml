name: Deploy

on:
  push:
    branches: [deploy] # Change this to run only for push events to main branch
    tags: ["v*"] # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request: {}
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare-matrix:
    # See this SO answer for details on conditional matrices
    # https://stackoverflow.com/a/65434401/3407590
    name: Prepare matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Prepare matrix
        id: set-matrix
        shell: python
        # The Python versions chosen below will determine which
        # Python versions the installers will bundle. The general
        # principle is to follow the SPEC-0 recommendation:
        # https://scientific-python.org/specs/spec-0000/
        run: |
          import os
          import json
          elements = [
            {
              "os": "ubuntu-latest",
              "target-platform": "linux-64",
            },
            {
              "os": "macos-14",
              "target-platform": "osx-arm64",
            },
            {
              "os": "windows-latest",
              "target-platform": "win-64",
            },
          ]
          platforms_str = "${{ inputs.installer_platforms || 'linux-64,win-64,osx-arm64' }}"
          platforms = {p.strip() for p in platforms_str.split(",")}
          matrix = {"include": []}
          for element in elements:
            if element["target-platform"] in platforms:
              matrix["include"].append(element)
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"matrix={json.dumps(matrix)}\n")

  create-app-bundle:
    name: Create ${{ matrix.target-platform }} app bundle
    runs-on: ${{ matrix.os }}
    needs: prepare-matrix
    if: startsWith(github.ref, 'refs/tags/') # Only run for tags
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: motile-tracker

      - name: Install pixi
        uses: prefix-dev/setup-pixi@v0.8.3
        with:
          pixi-version: v0.43.2
          cache: false
          run-install: false
          manifest-path: motile-tracker/pixi.toml

      - name: Install build tools (Windows only)
        if: runner.os == 'Windows'
        run: |
          $installer = "vs_BuildTools.exe"

          Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vs_BuildTools.exe" -OutFile $installer

          Start-Process -Wait -FilePath .\$installer -ArgumentList `
            "--quiet", `
            "--wait", `
            "--norestart", `
            "--nocache", `
            "--add Microsoft.VisualStudio.Workload.VCTools", `
            "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64", `
            "--add Microsoft.VisualStudio.Component.Windows10SDK.19041", `
            "--includeRecommended"
        shell: pwsh

      - name: Install app dependencies
        working-directory: motile-tracker
        run: pixi run setup

      - name: Build the PyPi package (Linux only)
        working-directory: motile-tracker
        if: runner.os == 'Linux'
        run: pixi run build

      - name: Publish to PyPi (Linux only)
        uses: pypa/gh-action-pypi-publish@release/v1
        if: runner.os == 'Linux'
        with:
          packages-dir: motile-tracker/dist
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Download installer app (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y makeself

      - name: Download installer app (macOS only)
        if: runner.os == 'macOS'
        run: |
          brew install create-dmg

      - name: Download installer app (Windows only)
        if: runner.os == 'Windows'
        run: |
          choco install -y innosetup

      - name: Package native app
        working-directory: motile-tracker
        run: pixi run create-installer

      - name: Upload app
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            motile-tracker/dist/MotileTrackerInstaller.*
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: ${{ contains(github.ref_name, '-dev') }}
          prerelease: ${{ contains(github.ref_name, '-rc') }}
