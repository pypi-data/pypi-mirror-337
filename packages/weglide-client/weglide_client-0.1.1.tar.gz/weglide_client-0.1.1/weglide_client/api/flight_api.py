# coding: utf-8

"""
    WeGlide

    Quantifying airsports

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Any, Optional
from typing_extensions import Annotated
from weglide_client.models.contest_name import ContestName
from weglide_client.models.flight_rank_list import FlightRankList

from weglide_client.api_client import ApiClient, RequestSerialized
from weglide_client.api_response import ApiResponse
from weglide_client.rest import RESTResponseType


class FlightApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def activity_v1_flight_activity_get(
        self,
        season: Optional[StrictInt] = None,
        user_id_in: Optional[StrictStr] = None,
        aircraft_id_in: Optional[StrictStr] = None,
        sc_class_id_in: Optional[StrictStr] = None,
        club_id_in: Optional[StrictStr] = None,
        airport_id_in: Optional[StrictStr] = None,
        continent_id_in: Optional[StrictStr] = None,
        country_id_in: Optional[StrictStr] = None,
        region_id_in: Optional[StrictStr] = None,
        registration_in: Optional[StrictStr] = None,
        flight_collection_id_in: Optional[StrictStr] = None,
        circumnavigation: Optional[StrictStr] = None,
        contest: Optional[ContestName] = None,
        launch_kind_in: Optional[StrictStr] = None,
        sector_id_in: Optional[StrictStr] = None,
        start_date: Optional[date] = None,
        end_date: Optional[date] = None,
        story: Optional[StrictBool] = None,
        new_format: Optional[StrictBool] = None,
        keyword: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Activity


        :param season:
        :type season: int
        :param user_id_in:
        :type user_id_in: str
        :param aircraft_id_in:
        :type aircraft_id_in: str
        :param sc_class_id_in:
        :type sc_class_id_in: str
        :param club_id_in:
        :type club_id_in: str
        :param airport_id_in:
        :type airport_id_in: str
        :param continent_id_in:
        :type continent_id_in: str
        :param country_id_in:
        :type country_id_in: str
        :param region_id_in:
        :type region_id_in: str
        :param registration_in:
        :type registration_in: str
        :param flight_collection_id_in:
        :type flight_collection_id_in: str
        :param circumnavigation:
        :type circumnavigation: str
        :param contest:
        :type contest: ContestName
        :param launch_kind_in:
        :type launch_kind_in: str
        :param sector_id_in:
        :type sector_id_in: str
        :param start_date:
        :type start_date: date
        :param end_date:
        :type end_date: date
        :param story:
        :type story: bool
        :param new_format:
        :type new_format: bool
        :param keyword:
        :type keyword: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._activity_v1_flight_activity_get_serialize(
            season=season,
            user_id_in=user_id_in,
            aircraft_id_in=aircraft_id_in,
            sc_class_id_in=sc_class_id_in,
            club_id_in=club_id_in,
            airport_id_in=airport_id_in,
            continent_id_in=continent_id_in,
            country_id_in=country_id_in,
            region_id_in=region_id_in,
            registration_in=registration_in,
            flight_collection_id_in=flight_collection_id_in,
            circumnavigation=circumnavigation,
            contest=contest,
            launch_kind_in=launch_kind_in,
            sector_id_in=sector_id_in,
            start_date=start_date,
            end_date=end_date,
            story=story,
            new_format=new_format,
            keyword=keyword,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def activity_v1_flight_activity_get_with_http_info(
        self,
        season: Optional[StrictInt] = None,
        user_id_in: Optional[StrictStr] = None,
        aircraft_id_in: Optional[StrictStr] = None,
        sc_class_id_in: Optional[StrictStr] = None,
        club_id_in: Optional[StrictStr] = None,
        airport_id_in: Optional[StrictStr] = None,
        continent_id_in: Optional[StrictStr] = None,
        country_id_in: Optional[StrictStr] = None,
        region_id_in: Optional[StrictStr] = None,
        registration_in: Optional[StrictStr] = None,
        flight_collection_id_in: Optional[StrictStr] = None,
        circumnavigation: Optional[StrictStr] = None,
        contest: Optional[ContestName] = None,
        launch_kind_in: Optional[StrictStr] = None,
        sector_id_in: Optional[StrictStr] = None,
        start_date: Optional[date] = None,
        end_date: Optional[date] = None,
        story: Optional[StrictBool] = None,
        new_format: Optional[StrictBool] = None,
        keyword: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Activity


        :param season:
        :type season: int
        :param user_id_in:
        :type user_id_in: str
        :param aircraft_id_in:
        :type aircraft_id_in: str
        :param sc_class_id_in:
        :type sc_class_id_in: str
        :param club_id_in:
        :type club_id_in: str
        :param airport_id_in:
        :type airport_id_in: str
        :param continent_id_in:
        :type continent_id_in: str
        :param country_id_in:
        :type country_id_in: str
        :param region_id_in:
        :type region_id_in: str
        :param registration_in:
        :type registration_in: str
        :param flight_collection_id_in:
        :type flight_collection_id_in: str
        :param circumnavigation:
        :type circumnavigation: str
        :param contest:
        :type contest: ContestName
        :param launch_kind_in:
        :type launch_kind_in: str
        :param sector_id_in:
        :type sector_id_in: str
        :param start_date:
        :type start_date: date
        :param end_date:
        :type end_date: date
        :param story:
        :type story: bool
        :param new_format:
        :type new_format: bool
        :param keyword:
        :type keyword: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._activity_v1_flight_activity_get_serialize(
            season=season,
            user_id_in=user_id_in,
            aircraft_id_in=aircraft_id_in,
            sc_class_id_in=sc_class_id_in,
            club_id_in=club_id_in,
            airport_id_in=airport_id_in,
            continent_id_in=continent_id_in,
            country_id_in=country_id_in,
            region_id_in=region_id_in,
            registration_in=registration_in,
            flight_collection_id_in=flight_collection_id_in,
            circumnavigation=circumnavigation,
            contest=contest,
            launch_kind_in=launch_kind_in,
            sector_id_in=sector_id_in,
            start_date=start_date,
            end_date=end_date,
            story=story,
            new_format=new_format,
            keyword=keyword,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def activity_v1_flight_activity_get_without_preload_content(
        self,
        season: Optional[StrictInt] = None,
        user_id_in: Optional[StrictStr] = None,
        aircraft_id_in: Optional[StrictStr] = None,
        sc_class_id_in: Optional[StrictStr] = None,
        club_id_in: Optional[StrictStr] = None,
        airport_id_in: Optional[StrictStr] = None,
        continent_id_in: Optional[StrictStr] = None,
        country_id_in: Optional[StrictStr] = None,
        region_id_in: Optional[StrictStr] = None,
        registration_in: Optional[StrictStr] = None,
        flight_collection_id_in: Optional[StrictStr] = None,
        circumnavigation: Optional[StrictStr] = None,
        contest: Optional[ContestName] = None,
        launch_kind_in: Optional[StrictStr] = None,
        sector_id_in: Optional[StrictStr] = None,
        start_date: Optional[date] = None,
        end_date: Optional[date] = None,
        story: Optional[StrictBool] = None,
        new_format: Optional[StrictBool] = None,
        keyword: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Activity


        :param season:
        :type season: int
        :param user_id_in:
        :type user_id_in: str
        :param aircraft_id_in:
        :type aircraft_id_in: str
        :param sc_class_id_in:
        :type sc_class_id_in: str
        :param club_id_in:
        :type club_id_in: str
        :param airport_id_in:
        :type airport_id_in: str
        :param continent_id_in:
        :type continent_id_in: str
        :param country_id_in:
        :type country_id_in: str
        :param region_id_in:
        :type region_id_in: str
        :param registration_in:
        :type registration_in: str
        :param flight_collection_id_in:
        :type flight_collection_id_in: str
        :param circumnavigation:
        :type circumnavigation: str
        :param contest:
        :type contest: ContestName
        :param launch_kind_in:
        :type launch_kind_in: str
        :param sector_id_in:
        :type sector_id_in: str
        :param start_date:
        :type start_date: date
        :param end_date:
        :type end_date: date
        :param story:
        :type story: bool
        :param new_format:
        :type new_format: bool
        :param keyword:
        :type keyword: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._activity_v1_flight_activity_get_serialize(
            season=season,
            user_id_in=user_id_in,
            aircraft_id_in=aircraft_id_in,
            sc_class_id_in=sc_class_id_in,
            club_id_in=club_id_in,
            airport_id_in=airport_id_in,
            continent_id_in=continent_id_in,
            country_id_in=country_id_in,
            region_id_in=region_id_in,
            registration_in=registration_in,
            flight_collection_id_in=flight_collection_id_in,
            circumnavigation=circumnavigation,
            contest=contest,
            launch_kind_in=launch_kind_in,
            sector_id_in=sector_id_in,
            start_date=start_date,
            end_date=end_date,
            story=story,
            new_format=new_format,
            keyword=keyword,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _activity_v1_flight_activity_get_serialize(
        self,
        season,
        user_id_in,
        aircraft_id_in,
        sc_class_id_in,
        club_id_in,
        airport_id_in,
        continent_id_in,
        country_id_in,
        region_id_in,
        registration_in,
        flight_collection_id_in,
        circumnavigation,
        contest,
        launch_kind_in,
        sector_id_in,
        start_date,
        end_date,
        story,
        new_format,
        keyword,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if season is not None:
            
            _query_params.append(('season', season))
            
        if user_id_in is not None:
            
            _query_params.append(('user_id_in', user_id_in))
            
        if aircraft_id_in is not None:
            
            _query_params.append(('aircraft_id_in', aircraft_id_in))
            
        if sc_class_id_in is not None:
            
            _query_params.append(('sc_class_id_in', sc_class_id_in))
            
        if club_id_in is not None:
            
            _query_params.append(('club_id_in', club_id_in))
            
        if airport_id_in is not None:
            
            _query_params.append(('airport_id_in', airport_id_in))
            
        if continent_id_in is not None:
            
            _query_params.append(('continent_id_in', continent_id_in))
            
        if country_id_in is not None:
            
            _query_params.append(('country_id_in', country_id_in))
            
        if region_id_in is not None:
            
            _query_params.append(('region_id_in', region_id_in))
            
        if registration_in is not None:
            
            _query_params.append(('registration_in', registration_in))
            
        if flight_collection_id_in is not None:
            
            _query_params.append(('flight_collection_id_in', flight_collection_id_in))
            
        if circumnavigation is not None:
            
            _query_params.append(('circumnavigation', circumnavigation))
            
        if contest is not None:
            
            _query_params.append(('contest', contest.value))
            
        if launch_kind_in is not None:
            
            _query_params.append(('launch_kind_in', launch_kind_in))
            
        if sector_id_in is not None:
            
            _query_params.append(('sector_id_in', sector_id_in))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if story is not None:
            
            _query_params.append(('story', story))
            
        if new_format is not None:
            
            _query_params.append(('new_format', new_format))
            
        if keyword is not None:
            
            _query_params.append(('keyword', keyword))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/flight/activity',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def feed_v1_flight_feed_get(
        self,
        skip: Optional[StrictInt] = None,
        v2: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Feed


        :param skip:
        :type skip: int
        :param v2:
        :type v2: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._feed_v1_flight_feed_get_serialize(
            skip=skip,
            v2=v2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def feed_v1_flight_feed_get_with_http_info(
        self,
        skip: Optional[StrictInt] = None,
        v2: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Feed


        :param skip:
        :type skip: int
        :param v2:
        :type v2: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._feed_v1_flight_feed_get_serialize(
            skip=skip,
            v2=v2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def feed_v1_flight_feed_get_without_preload_content(
        self,
        skip: Optional[StrictInt] = None,
        v2: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Feed


        :param skip:
        :type skip: int
        :param v2:
        :type v2: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._feed_v1_flight_feed_get_serialize(
            skip=skip,
            v2=v2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _feed_v1_flight_feed_get_serialize(
        self,
        skip,
        v2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if skip is not None:
            
            _query_params.append(('skip', skip))
            
        if v2 is not None:
            
            _query_params.append(('v2', v2))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/flight/feed',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flightlist_v1_flight_get(
        self,
        scoring_date_in: Optional[StrictStr] = None,
        season_in: Optional[StrictStr] = None,
        user_id_in: Optional[StrictStr] = None,
        aircraft_id_in: Optional[StrictStr] = None,
        sc_class_id_in: Optional[StrictStr] = None,
        club_id_in: Optional[StrictStr] = None,
        airport_id_in: Optional[StrictStr] = None,
        continent_id_in: Optional[StrictStr] = None,
        country_id_in: Optional[StrictStr] = None,
        region_id_in: Optional[StrictStr] = None,
        multi_region_id_in: Optional[StrictStr] = None,
        flight_collection_id_in: Optional[StrictStr] = None,
        travel_id_in: Optional[StrictStr] = None,
        registration_in: Optional[StrictStr] = None,
        competition_id_in: Optional[StrictStr] = None,
        circumnavigation: Optional[StrictStr] = None,
        contest: Optional[ContestName] = None,
        launch_kind_in: Optional[StrictStr] = None,
        order_by: Optional[Any] = None,
        distance_lt: Optional[StrictInt] = None,
        distance_gt: Optional[StrictInt] = None,
        sector_id_in: Optional[StrictStr] = None,
        scoring_date_start: Optional[date] = None,
        scoring_date_end: Optional[date] = None,
        month: Optional[StrictStr] = None,
        not_scored: Optional[StrictBool] = None,
        story: Optional[StrictBool] = None,
        valid: Optional[StrictBool] = None,
        keyword: Optional[StrictStr] = None,
        skip: Optional[StrictInt] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True)]] = None,
        include_story: Optional[StrictBool] = None,
        include_stats: Optional[StrictBool] = None,
        format: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FlightRankList:
        """Flightlist


        :param scoring_date_in:
        :type scoring_date_in: str
        :param season_in:
        :type season_in: str
        :param user_id_in:
        :type user_id_in: str
        :param aircraft_id_in:
        :type aircraft_id_in: str
        :param sc_class_id_in:
        :type sc_class_id_in: str
        :param club_id_in:
        :type club_id_in: str
        :param airport_id_in:
        :type airport_id_in: str
        :param continent_id_in:
        :type continent_id_in: str
        :param country_id_in:
        :type country_id_in: str
        :param region_id_in:
        :type region_id_in: str
        :param multi_region_id_in:
        :type multi_region_id_in: str
        :param flight_collection_id_in:
        :type flight_collection_id_in: str
        :param travel_id_in:
        :type travel_id_in: str
        :param registration_in:
        :type registration_in: str
        :param competition_id_in:
        :type competition_id_in: str
        :param circumnavigation:
        :type circumnavigation: str
        :param contest:
        :type contest: ContestName
        :param launch_kind_in:
        :type launch_kind_in: str
        :param order_by:
        :type order_by: OrderBy
        :param distance_lt:
        :type distance_lt: int
        :param distance_gt:
        :type distance_gt: int
        :param sector_id_in:
        :type sector_id_in: str
        :param scoring_date_start:
        :type scoring_date_start: date
        :param scoring_date_end:
        :type scoring_date_end: date
        :param month:
        :type month: str
        :param not_scored:
        :type not_scored: bool
        :param story:
        :type story: bool
        :param valid:
        :type valid: bool
        :param keyword:
        :type keyword: str
        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param include_story:
        :type include_story: bool
        :param include_stats:
        :type include_stats: bool
        :param format:
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flightlist_v1_flight_get_serialize(
            scoring_date_in=scoring_date_in,
            season_in=season_in,
            user_id_in=user_id_in,
            aircraft_id_in=aircraft_id_in,
            sc_class_id_in=sc_class_id_in,
            club_id_in=club_id_in,
            airport_id_in=airport_id_in,
            continent_id_in=continent_id_in,
            country_id_in=country_id_in,
            region_id_in=region_id_in,
            multi_region_id_in=multi_region_id_in,
            flight_collection_id_in=flight_collection_id_in,
            travel_id_in=travel_id_in,
            registration_in=registration_in,
            competition_id_in=competition_id_in,
            circumnavigation=circumnavigation,
            contest=contest,
            launch_kind_in=launch_kind_in,
            order_by=order_by,
            distance_lt=distance_lt,
            distance_gt=distance_gt,
            sector_id_in=sector_id_in,
            scoring_date_start=scoring_date_start,
            scoring_date_end=scoring_date_end,
            month=month,
            not_scored=not_scored,
            story=story,
            valid=valid,
            keyword=keyword,
            skip=skip,
            limit=limit,
            include_story=include_story,
            include_stats=include_stats,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlightRankList",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flightlist_v1_flight_get_with_http_info(
        self,
        scoring_date_in: Optional[StrictStr] = None,
        season_in: Optional[StrictStr] = None,
        user_id_in: Optional[StrictStr] = None,
        aircraft_id_in: Optional[StrictStr] = None,
        sc_class_id_in: Optional[StrictStr] = None,
        club_id_in: Optional[StrictStr] = None,
        airport_id_in: Optional[StrictStr] = None,
        continent_id_in: Optional[StrictStr] = None,
        country_id_in: Optional[StrictStr] = None,
        region_id_in: Optional[StrictStr] = None,
        multi_region_id_in: Optional[StrictStr] = None,
        flight_collection_id_in: Optional[StrictStr] = None,
        travel_id_in: Optional[StrictStr] = None,
        registration_in: Optional[StrictStr] = None,
        competition_id_in: Optional[StrictStr] = None,
        circumnavigation: Optional[StrictStr] = None,
        contest: Optional[ContestName] = None,
        launch_kind_in: Optional[StrictStr] = None,
        order_by: Optional[Any] = None,
        distance_lt: Optional[StrictInt] = None,
        distance_gt: Optional[StrictInt] = None,
        sector_id_in: Optional[StrictStr] = None,
        scoring_date_start: Optional[date] = None,
        scoring_date_end: Optional[date] = None,
        month: Optional[StrictStr] = None,
        not_scored: Optional[StrictBool] = None,
        story: Optional[StrictBool] = None,
        valid: Optional[StrictBool] = None,
        keyword: Optional[StrictStr] = None,
        skip: Optional[StrictInt] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True)]] = None,
        include_story: Optional[StrictBool] = None,
        include_stats: Optional[StrictBool] = None,
        format: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FlightRankList]:
        """Flightlist


        :param scoring_date_in:
        :type scoring_date_in: str
        :param season_in:
        :type season_in: str
        :param user_id_in:
        :type user_id_in: str
        :param aircraft_id_in:
        :type aircraft_id_in: str
        :param sc_class_id_in:
        :type sc_class_id_in: str
        :param club_id_in:
        :type club_id_in: str
        :param airport_id_in:
        :type airport_id_in: str
        :param continent_id_in:
        :type continent_id_in: str
        :param country_id_in:
        :type country_id_in: str
        :param region_id_in:
        :type region_id_in: str
        :param multi_region_id_in:
        :type multi_region_id_in: str
        :param flight_collection_id_in:
        :type flight_collection_id_in: str
        :param travel_id_in:
        :type travel_id_in: str
        :param registration_in:
        :type registration_in: str
        :param competition_id_in:
        :type competition_id_in: str
        :param circumnavigation:
        :type circumnavigation: str
        :param contest:
        :type contest: ContestName
        :param launch_kind_in:
        :type launch_kind_in: str
        :param order_by:
        :type order_by: OrderBy
        :param distance_lt:
        :type distance_lt: int
        :param distance_gt:
        :type distance_gt: int
        :param sector_id_in:
        :type sector_id_in: str
        :param scoring_date_start:
        :type scoring_date_start: date
        :param scoring_date_end:
        :type scoring_date_end: date
        :param month:
        :type month: str
        :param not_scored:
        :type not_scored: bool
        :param story:
        :type story: bool
        :param valid:
        :type valid: bool
        :param keyword:
        :type keyword: str
        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param include_story:
        :type include_story: bool
        :param include_stats:
        :type include_stats: bool
        :param format:
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flightlist_v1_flight_get_serialize(
            scoring_date_in=scoring_date_in,
            season_in=season_in,
            user_id_in=user_id_in,
            aircraft_id_in=aircraft_id_in,
            sc_class_id_in=sc_class_id_in,
            club_id_in=club_id_in,
            airport_id_in=airport_id_in,
            continent_id_in=continent_id_in,
            country_id_in=country_id_in,
            region_id_in=region_id_in,
            multi_region_id_in=multi_region_id_in,
            flight_collection_id_in=flight_collection_id_in,
            travel_id_in=travel_id_in,
            registration_in=registration_in,
            competition_id_in=competition_id_in,
            circumnavigation=circumnavigation,
            contest=contest,
            launch_kind_in=launch_kind_in,
            order_by=order_by,
            distance_lt=distance_lt,
            distance_gt=distance_gt,
            sector_id_in=sector_id_in,
            scoring_date_start=scoring_date_start,
            scoring_date_end=scoring_date_end,
            month=month,
            not_scored=not_scored,
            story=story,
            valid=valid,
            keyword=keyword,
            skip=skip,
            limit=limit,
            include_story=include_story,
            include_stats=include_stats,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlightRankList",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flightlist_v1_flight_get_without_preload_content(
        self,
        scoring_date_in: Optional[StrictStr] = None,
        season_in: Optional[StrictStr] = None,
        user_id_in: Optional[StrictStr] = None,
        aircraft_id_in: Optional[StrictStr] = None,
        sc_class_id_in: Optional[StrictStr] = None,
        club_id_in: Optional[StrictStr] = None,
        airport_id_in: Optional[StrictStr] = None,
        continent_id_in: Optional[StrictStr] = None,
        country_id_in: Optional[StrictStr] = None,
        region_id_in: Optional[StrictStr] = None,
        multi_region_id_in: Optional[StrictStr] = None,
        flight_collection_id_in: Optional[StrictStr] = None,
        travel_id_in: Optional[StrictStr] = None,
        registration_in: Optional[StrictStr] = None,
        competition_id_in: Optional[StrictStr] = None,
        circumnavigation: Optional[StrictStr] = None,
        contest: Optional[ContestName] = None,
        launch_kind_in: Optional[StrictStr] = None,
        order_by: Optional[Any] = None,
        distance_lt: Optional[StrictInt] = None,
        distance_gt: Optional[StrictInt] = None,
        sector_id_in: Optional[StrictStr] = None,
        scoring_date_start: Optional[date] = None,
        scoring_date_end: Optional[date] = None,
        month: Optional[StrictStr] = None,
        not_scored: Optional[StrictBool] = None,
        story: Optional[StrictBool] = None,
        valid: Optional[StrictBool] = None,
        keyword: Optional[StrictStr] = None,
        skip: Optional[StrictInt] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True)]] = None,
        include_story: Optional[StrictBool] = None,
        include_stats: Optional[StrictBool] = None,
        format: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Flightlist


        :param scoring_date_in:
        :type scoring_date_in: str
        :param season_in:
        :type season_in: str
        :param user_id_in:
        :type user_id_in: str
        :param aircraft_id_in:
        :type aircraft_id_in: str
        :param sc_class_id_in:
        :type sc_class_id_in: str
        :param club_id_in:
        :type club_id_in: str
        :param airport_id_in:
        :type airport_id_in: str
        :param continent_id_in:
        :type continent_id_in: str
        :param country_id_in:
        :type country_id_in: str
        :param region_id_in:
        :type region_id_in: str
        :param multi_region_id_in:
        :type multi_region_id_in: str
        :param flight_collection_id_in:
        :type flight_collection_id_in: str
        :param travel_id_in:
        :type travel_id_in: str
        :param registration_in:
        :type registration_in: str
        :param competition_id_in:
        :type competition_id_in: str
        :param circumnavigation:
        :type circumnavigation: str
        :param contest:
        :type contest: ContestName
        :param launch_kind_in:
        :type launch_kind_in: str
        :param order_by:
        :type order_by: OrderBy
        :param distance_lt:
        :type distance_lt: int
        :param distance_gt:
        :type distance_gt: int
        :param sector_id_in:
        :type sector_id_in: str
        :param scoring_date_start:
        :type scoring_date_start: date
        :param scoring_date_end:
        :type scoring_date_end: date
        :param month:
        :type month: str
        :param not_scored:
        :type not_scored: bool
        :param story:
        :type story: bool
        :param valid:
        :type valid: bool
        :param keyword:
        :type keyword: str
        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param include_story:
        :type include_story: bool
        :param include_stats:
        :type include_stats: bool
        :param format:
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flightlist_v1_flight_get_serialize(
            scoring_date_in=scoring_date_in,
            season_in=season_in,
            user_id_in=user_id_in,
            aircraft_id_in=aircraft_id_in,
            sc_class_id_in=sc_class_id_in,
            club_id_in=club_id_in,
            airport_id_in=airport_id_in,
            continent_id_in=continent_id_in,
            country_id_in=country_id_in,
            region_id_in=region_id_in,
            multi_region_id_in=multi_region_id_in,
            flight_collection_id_in=flight_collection_id_in,
            travel_id_in=travel_id_in,
            registration_in=registration_in,
            competition_id_in=competition_id_in,
            circumnavigation=circumnavigation,
            contest=contest,
            launch_kind_in=launch_kind_in,
            order_by=order_by,
            distance_lt=distance_lt,
            distance_gt=distance_gt,
            sector_id_in=sector_id_in,
            scoring_date_start=scoring_date_start,
            scoring_date_end=scoring_date_end,
            month=month,
            not_scored=not_scored,
            story=story,
            valid=valid,
            keyword=keyword,
            skip=skip,
            limit=limit,
            include_story=include_story,
            include_stats=include_stats,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlightRankList",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flightlist_v1_flight_get_serialize(
        self,
        scoring_date_in,
        season_in,
        user_id_in,
        aircraft_id_in,
        sc_class_id_in,
        club_id_in,
        airport_id_in,
        continent_id_in,
        country_id_in,
        region_id_in,
        multi_region_id_in,
        flight_collection_id_in,
        travel_id_in,
        registration_in,
        competition_id_in,
        circumnavigation,
        contest,
        launch_kind_in,
        order_by,
        distance_lt,
        distance_gt,
        sector_id_in,
        scoring_date_start,
        scoring_date_end,
        month,
        not_scored,
        story,
        valid,
        keyword,
        skip,
        limit,
        include_story,
        include_stats,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if scoring_date_in is not None:
            
            _query_params.append(('scoring_date_in', scoring_date_in))
            
        if season_in is not None:
            
            _query_params.append(('season_in', season_in))
            
        if user_id_in is not None:
            
            _query_params.append(('user_id_in', user_id_in))
            
        if aircraft_id_in is not None:
            
            _query_params.append(('aircraft_id_in', aircraft_id_in))
            
        if sc_class_id_in is not None:
            
            _query_params.append(('sc_class_id_in', sc_class_id_in))
            
        if club_id_in is not None:
            
            _query_params.append(('club_id_in', club_id_in))
            
        if airport_id_in is not None:
            
            _query_params.append(('airport_id_in', airport_id_in))
            
        if continent_id_in is not None:
            
            _query_params.append(('continent_id_in', continent_id_in))
            
        if country_id_in is not None:
            
            _query_params.append(('country_id_in', country_id_in))
            
        if region_id_in is not None:
            
            _query_params.append(('region_id_in', region_id_in))
            
        if multi_region_id_in is not None:
            
            _query_params.append(('multi_region_id_in', multi_region_id_in))
            
        if flight_collection_id_in is not None:
            
            _query_params.append(('flight_collection_id_in', flight_collection_id_in))
            
        if travel_id_in is not None:
            
            _query_params.append(('travel_id_in', travel_id_in))
            
        if registration_in is not None:
            
            _query_params.append(('registration_in', registration_in))
            
        if competition_id_in is not None:
            
            _query_params.append(('competition_id_in', competition_id_in))
            
        if circumnavigation is not None:
            
            _query_params.append(('circumnavigation', circumnavigation))
            
        if contest is not None:
            
            _query_params.append(('contest', contest.value))
            
        if launch_kind_in is not None:
            
            _query_params.append(('launch_kind_in', launch_kind_in))
            
        if order_by is not None:
            
            _query_params.append(('order_by', order_by))
            
        if distance_lt is not None:
            
            _query_params.append(('distance_lt', distance_lt))
            
        if distance_gt is not None:
            
            _query_params.append(('distance_gt', distance_gt))
            
        if sector_id_in is not None:
            
            _query_params.append(('sector_id_in', sector_id_in))
            
        if scoring_date_start is not None:
            if isinstance(scoring_date_start, date):
                _query_params.append(
                    (
                        'scoring_date_start',
                        scoring_date_start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('scoring_date_start', scoring_date_start))
            
        if scoring_date_end is not None:
            if isinstance(scoring_date_end, date):
                _query_params.append(
                    (
                        'scoring_date_end',
                        scoring_date_end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('scoring_date_end', scoring_date_end))
            
        if month is not None:
            
            _query_params.append(('month', month))
            
        if not_scored is not None:
            
            _query_params.append(('not_scored', not_scored))
            
        if story is not None:
            
            _query_params.append(('story', story))
            
        if valid is not None:
            
            _query_params.append(('valid', valid))
            
        if keyword is not None:
            
            _query_params.append(('keyword', keyword))
            
        if skip is not None:
            
            _query_params.append(('skip', skip))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include_story is not None:
            
            _query_params.append(('include_story', include_story))
            
        if include_stats is not None:
            
            _query_params.append(('include_stats', include_stats))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/flight',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


