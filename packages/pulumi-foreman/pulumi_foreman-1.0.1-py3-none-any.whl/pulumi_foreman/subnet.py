# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SubnetArgs', 'Subnet']

@pulumi.input_type
class SubnetArgs:
    def __init__(__self__, *,
                 mask: pulumi.Input[str],
                 network: pulumi.Input[str],
                 bmc_id: Optional[pulumi.Input[int]] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_id: Optional[pulumi.Input[int]] = None,
                 dns_primary: Optional[pulumi.Input[str]] = None,
                 dns_secondary: Optional[pulumi.Input[str]] = None,
                 domain_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 from_: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 httpboot_id: Optional[pulumi.Input[int]] = None,
                 ipam: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_address: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None,
                 tftp_id: Optional[pulumi.Input[int]] = None,
                 to: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Subnet resource.
        :param pulumi.Input[str] mask: Netmask for this subnet. @EXAMPLE "255.255.255.0"
        :param pulumi.Input[str] network: Subnet network. @EXAMPLE "10.228.247.0"
        :param pulumi.Input[int] bmc_id: BMC Proxy ID to use within this subnet
        :param pulumi.Input[str] boot_mode: Default boot mode for instances assigned to this subnet. Values include: `"Static"`, `"DHCP"`.
        :param pulumi.Input[str] description: Description of the subnet
        :param pulumi.Input[int] dhcp_id: DHCP Proxy ID to use within this subnet
        :param pulumi.Input[str] dns_primary: Primary DNS server for this subnet.
        :param pulumi.Input[str] dns_secondary: Secondary DNS sever for this subnet.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] domain_ids: Domains in which this subnet is part
        :param pulumi.Input[str] from_: Start IP address for IP auto suggestion.
        :param pulumi.Input[str] gateway: Gateway server to use when connecting/communicating to anything not on the same network.
        :param pulumi.Input[int] httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :param pulumi.Input[str] ipam: IP address auto-suggestion for this subnet. Valid values include: `"DHCP"`, `"Internal DB"`, `"Random DB"`,`"None"`.
        :param pulumi.Input[int] mtu: MTU value for the subnet
        :param pulumi.Input[str] name: Subnet name. @EXAMPLE "10.228.247.0 BO1"
        :param pulumi.Input[str] network_address: The Subnets CIDR in the format 169.254.0.0/16
        :param pulumi.Input[str] network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4.
        :param pulumi.Input[int] template_id: Template HTTP(S) Proxy ID to use within this subnet
        :param pulumi.Input[int] tftp_id: TFTP Proxy ID to use within this subnet
        :param pulumi.Input[str] to: Ending IP address for IP auto suggestion.
        :param pulumi.Input[int] vlanid: VLAN id that is in use in the subnet
        """
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "network", network)
        if bmc_id is not None:
            pulumi.set(__self__, "bmc_id", bmc_id)
        if boot_mode is not None:
            pulumi.set(__self__, "boot_mode", boot_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_id is not None:
            pulumi.set(__self__, "dhcp_id", dhcp_id)
        if dns_primary is not None:
            pulumi.set(__self__, "dns_primary", dns_primary)
        if dns_secondary is not None:
            pulumi.set(__self__, "dns_secondary", dns_secondary)
        if domain_ids is not None:
            pulumi.set(__self__, "domain_ids", domain_ids)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if httpboot_id is not None:
            pulumi.set(__self__, "httpboot_id", httpboot_id)
        if ipam is not None:
            pulumi.set(__self__, "ipam", ipam)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if tftp_id is not None:
            pulumi.set(__self__, "tftp_id", tftp_id)
        if to is not None:
            pulumi.set(__self__, "to", to)
        if vlanid is not None:
            pulumi.set(__self__, "vlanid", vlanid)

    @property
    @pulumi.getter
    def mask(self) -> pulumi.Input[str]:
        """
        Netmask for this subnet. @EXAMPLE "255.255.255.0"
        """
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: pulumi.Input[str]):
        pulumi.set(self, "mask", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        """
        Subnet network. @EXAMPLE "10.228.247.0"
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="bmcId")
    def bmc_id(self) -> Optional[pulumi.Input[int]]:
        """
        BMC Proxy ID to use within this subnet
        """
        return pulumi.get(self, "bmc_id")

    @bmc_id.setter
    def bmc_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bmc_id", value)

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Default boot mode for instances assigned to this subnet. Values include: `"Static"`, `"DHCP"`.
        """
        return pulumi.get(self, "boot_mode")

    @boot_mode.setter
    def boot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the subnet
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpId")
    def dhcp_id(self) -> Optional[pulumi.Input[int]]:
        """
        DHCP Proxy ID to use within this subnet
        """
        return pulumi.get(self, "dhcp_id")

    @dhcp_id.setter
    def dhcp_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_id", value)

    @property
    @pulumi.getter(name="dnsPrimary")
    def dns_primary(self) -> Optional[pulumi.Input[str]]:
        """
        Primary DNS server for this subnet.
        """
        return pulumi.get(self, "dns_primary")

    @dns_primary.setter
    def dns_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_primary", value)

    @property
    @pulumi.getter(name="dnsSecondary")
    def dns_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary DNS sever for this subnet.
        """
        return pulumi.get(self, "dns_secondary")

    @dns_secondary.setter
    def dns_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_secondary", value)

    @property
    @pulumi.getter(name="domainIds")
    def domain_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Domains in which this subnet is part
        """
        return pulumi.get(self, "domain_ids")

    @domain_ids.setter
    def domain_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "domain_ids", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        """
        Start IP address for IP auto suggestion.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway server to use when connecting/communicating to anything not on the same network.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="httpbootId")
    def httpboot_id(self) -> Optional[pulumi.Input[int]]:
        """
        HTTPBoot Proxy ID to use within this subnet
        """
        return pulumi.get(self, "httpboot_id")

    @httpboot_id.setter
    def httpboot_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "httpboot_id", value)

    @property
    @pulumi.getter
    def ipam(self) -> Optional[pulumi.Input[str]]:
        """
        IP address auto-suggestion for this subnet. Valid values include: `"DHCP"`, `"Internal DB"`, `"Random DB"`,`"None"`.
        """
        return pulumi.get(self, "ipam")

    @ipam.setter
    def ipam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipam", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU value for the subnet
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet name. @EXAMPLE "10.228.247.0 BO1"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[pulumi.Input[str]]:
        """
        The Subnets CIDR in the format 169.254.0.0/16
        """
        return pulumi.get(self, "network_address")

    @network_address.setter
    def network_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_address", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type or protocol, IPv4 or IPv6, defaults to IPv4.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[int]]:
        """
        Template HTTP(S) Proxy ID to use within this subnet
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter(name="tftpId")
    def tftp_id(self) -> Optional[pulumi.Input[int]]:
        """
        TFTP Proxy ID to use within this subnet
        """
        return pulumi.get(self, "tftp_id")

    @tftp_id.setter
    def tftp_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tftp_id", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[str]]:
        """
        Ending IP address for IP auto suggestion.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to", value)

    @property
    @pulumi.getter
    def vlanid(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN id that is in use in the subnet
        """
        return pulumi.get(self, "vlanid")

    @vlanid.setter
    def vlanid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlanid", value)


@pulumi.input_type
class _SubnetState:
    def __init__(__self__, *,
                 __meta_: Optional[pulumi.Input[bool]] = None,
                 bmc_id: Optional[pulumi.Input[int]] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_id: Optional[pulumi.Input[int]] = None,
                 dns_primary: Optional[pulumi.Input[str]] = None,
                 dns_secondary: Optional[pulumi.Input[str]] = None,
                 domain_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 from_: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 httpboot_id: Optional[pulumi.Input[int]] = None,
                 ipam: Optional[pulumi.Input[str]] = None,
                 mask: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_address: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None,
                 tftp_id: Optional[pulumi.Input[int]] = None,
                 to: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Subnet resources.
        :param pulumi.Input[bool] __meta_: @SUMMARY Foreman representation of a subnetwork.
        :param pulumi.Input[int] bmc_id: BMC Proxy ID to use within this subnet
        :param pulumi.Input[str] boot_mode: Default boot mode for instances assigned to this subnet. Values include: `"Static"`, `"DHCP"`.
        :param pulumi.Input[str] description: Description of the subnet
        :param pulumi.Input[int] dhcp_id: DHCP Proxy ID to use within this subnet
        :param pulumi.Input[str] dns_primary: Primary DNS server for this subnet.
        :param pulumi.Input[str] dns_secondary: Secondary DNS sever for this subnet.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] domain_ids: Domains in which this subnet is part
        :param pulumi.Input[str] from_: Start IP address for IP auto suggestion.
        :param pulumi.Input[str] gateway: Gateway server to use when connecting/communicating to anything not on the same network.
        :param pulumi.Input[int] httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :param pulumi.Input[str] ipam: IP address auto-suggestion for this subnet. Valid values include: `"DHCP"`, `"Internal DB"`, `"Random DB"`,`"None"`.
        :param pulumi.Input[str] mask: Netmask for this subnet. @EXAMPLE "255.255.255.0"
        :param pulumi.Input[int] mtu: MTU value for the subnet
        :param pulumi.Input[str] name: Subnet name. @EXAMPLE "10.228.247.0 BO1"
        :param pulumi.Input[str] network: Subnet network. @EXAMPLE "10.228.247.0"
        :param pulumi.Input[str] network_address: The Subnets CIDR in the format 169.254.0.0/16
        :param pulumi.Input[str] network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4.
        :param pulumi.Input[int] template_id: Template HTTP(S) Proxy ID to use within this subnet
        :param pulumi.Input[int] tftp_id: TFTP Proxy ID to use within this subnet
        :param pulumi.Input[str] to: Ending IP address for IP auto suggestion.
        :param pulumi.Input[int] vlanid: VLAN id that is in use in the subnet
        """
        if __meta_ is not None:
            pulumi.set(__self__, "__meta_", __meta_)
        if bmc_id is not None:
            pulumi.set(__self__, "bmc_id", bmc_id)
        if boot_mode is not None:
            pulumi.set(__self__, "boot_mode", boot_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_id is not None:
            pulumi.set(__self__, "dhcp_id", dhcp_id)
        if dns_primary is not None:
            pulumi.set(__self__, "dns_primary", dns_primary)
        if dns_secondary is not None:
            pulumi.set(__self__, "dns_secondary", dns_secondary)
        if domain_ids is not None:
            pulumi.set(__self__, "domain_ids", domain_ids)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if httpboot_id is not None:
            pulumi.set(__self__, "httpboot_id", httpboot_id)
        if ipam is not None:
            pulumi.set(__self__, "ipam", ipam)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if tftp_id is not None:
            pulumi.set(__self__, "tftp_id", tftp_id)
        if to is not None:
            pulumi.set(__self__, "to", to)
        if vlanid is not None:
            pulumi.set(__self__, "vlanid", vlanid)

    @property
    @pulumi.getter
    def __meta_(self) -> Optional[pulumi.Input[bool]]:
        """
        @SUMMARY Foreman representation of a subnetwork.
        """
        return pulumi.get(self, "__meta_")

    @__meta_.setter
    def __meta_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "__meta_", value)

    @property
    @pulumi.getter(name="bmcId")
    def bmc_id(self) -> Optional[pulumi.Input[int]]:
        """
        BMC Proxy ID to use within this subnet
        """
        return pulumi.get(self, "bmc_id")

    @bmc_id.setter
    def bmc_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bmc_id", value)

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Default boot mode for instances assigned to this subnet. Values include: `"Static"`, `"DHCP"`.
        """
        return pulumi.get(self, "boot_mode")

    @boot_mode.setter
    def boot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the subnet
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpId")
    def dhcp_id(self) -> Optional[pulumi.Input[int]]:
        """
        DHCP Proxy ID to use within this subnet
        """
        return pulumi.get(self, "dhcp_id")

    @dhcp_id.setter
    def dhcp_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp_id", value)

    @property
    @pulumi.getter(name="dnsPrimary")
    def dns_primary(self) -> Optional[pulumi.Input[str]]:
        """
        Primary DNS server for this subnet.
        """
        return pulumi.get(self, "dns_primary")

    @dns_primary.setter
    def dns_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_primary", value)

    @property
    @pulumi.getter(name="dnsSecondary")
    def dns_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary DNS sever for this subnet.
        """
        return pulumi.get(self, "dns_secondary")

    @dns_secondary.setter
    def dns_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_secondary", value)

    @property
    @pulumi.getter(name="domainIds")
    def domain_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Domains in which this subnet is part
        """
        return pulumi.get(self, "domain_ids")

    @domain_ids.setter
    def domain_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "domain_ids", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        """
        Start IP address for IP auto suggestion.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway server to use when connecting/communicating to anything not on the same network.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="httpbootId")
    def httpboot_id(self) -> Optional[pulumi.Input[int]]:
        """
        HTTPBoot Proxy ID to use within this subnet
        """
        return pulumi.get(self, "httpboot_id")

    @httpboot_id.setter
    def httpboot_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "httpboot_id", value)

    @property
    @pulumi.getter
    def ipam(self) -> Optional[pulumi.Input[str]]:
        """
        IP address auto-suggestion for this subnet. Valid values include: `"DHCP"`, `"Internal DB"`, `"Random DB"`,`"None"`.
        """
        return pulumi.get(self, "ipam")

    @ipam.setter
    def ipam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipam", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        """
        Netmask for this subnet. @EXAMPLE "255.255.255.0"
        """
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU value for the subnet
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet name. @EXAMPLE "10.228.247.0 BO1"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet network. @EXAMPLE "10.228.247.0"
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[pulumi.Input[str]]:
        """
        The Subnets CIDR in the format 169.254.0.0/16
        """
        return pulumi.get(self, "network_address")

    @network_address.setter
    def network_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_address", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type or protocol, IPv4 or IPv6, defaults to IPv4.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[int]]:
        """
        Template HTTP(S) Proxy ID to use within this subnet
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter(name="tftpId")
    def tftp_id(self) -> Optional[pulumi.Input[int]]:
        """
        TFTP Proxy ID to use within this subnet
        """
        return pulumi.get(self, "tftp_id")

    @tftp_id.setter
    def tftp_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tftp_id", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[str]]:
        """
        Ending IP address for IP auto suggestion.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to", value)

    @property
    @pulumi.getter
    def vlanid(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN id that is in use in the subnet
        """
        return pulumi.get(self, "vlanid")

    @vlanid.setter
    def vlanid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlanid", value)


class Subnet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bmc_id: Optional[pulumi.Input[int]] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_id: Optional[pulumi.Input[int]] = None,
                 dns_primary: Optional[pulumi.Input[str]] = None,
                 dns_secondary: Optional[pulumi.Input[str]] = None,
                 domain_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 from_: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 httpboot_id: Optional[pulumi.Input[int]] = None,
                 ipam: Optional[pulumi.Input[str]] = None,
                 mask: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_address: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None,
                 tftp_id: Optional[pulumi.Input[int]] = None,
                 to: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Subnet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] bmc_id: BMC Proxy ID to use within this subnet
        :param pulumi.Input[str] boot_mode: Default boot mode for instances assigned to this subnet. Values include: `"Static"`, `"DHCP"`.
        :param pulumi.Input[str] description: Description of the subnet
        :param pulumi.Input[int] dhcp_id: DHCP Proxy ID to use within this subnet
        :param pulumi.Input[str] dns_primary: Primary DNS server for this subnet.
        :param pulumi.Input[str] dns_secondary: Secondary DNS sever for this subnet.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] domain_ids: Domains in which this subnet is part
        :param pulumi.Input[str] from_: Start IP address for IP auto suggestion.
        :param pulumi.Input[str] gateway: Gateway server to use when connecting/communicating to anything not on the same network.
        :param pulumi.Input[int] httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :param pulumi.Input[str] ipam: IP address auto-suggestion for this subnet. Valid values include: `"DHCP"`, `"Internal DB"`, `"Random DB"`,`"None"`.
        :param pulumi.Input[str] mask: Netmask for this subnet. @EXAMPLE "255.255.255.0"
        :param pulumi.Input[int] mtu: MTU value for the subnet
        :param pulumi.Input[str] name: Subnet name. @EXAMPLE "10.228.247.0 BO1"
        :param pulumi.Input[str] network: Subnet network. @EXAMPLE "10.228.247.0"
        :param pulumi.Input[str] network_address: The Subnets CIDR in the format 169.254.0.0/16
        :param pulumi.Input[str] network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4.
        :param pulumi.Input[int] template_id: Template HTTP(S) Proxy ID to use within this subnet
        :param pulumi.Input[int] tftp_id: TFTP Proxy ID to use within this subnet
        :param pulumi.Input[str] to: Ending IP address for IP auto suggestion.
        :param pulumi.Input[int] vlanid: VLAN id that is in use in the subnet
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubnetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Subnet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SubnetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubnetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bmc_id: Optional[pulumi.Input[int]] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_id: Optional[pulumi.Input[int]] = None,
                 dns_primary: Optional[pulumi.Input[str]] = None,
                 dns_secondary: Optional[pulumi.Input[str]] = None,
                 domain_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 from_: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 httpboot_id: Optional[pulumi.Input[int]] = None,
                 ipam: Optional[pulumi.Input[str]] = None,
                 mask: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_address: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None,
                 tftp_id: Optional[pulumi.Input[int]] = None,
                 to: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubnetArgs.__new__(SubnetArgs)

            __props__.__dict__["bmc_id"] = bmc_id
            __props__.__dict__["boot_mode"] = boot_mode
            __props__.__dict__["description"] = description
            __props__.__dict__["dhcp_id"] = dhcp_id
            __props__.__dict__["dns_primary"] = dns_primary
            __props__.__dict__["dns_secondary"] = dns_secondary
            __props__.__dict__["domain_ids"] = domain_ids
            __props__.__dict__["from_"] = from_
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["httpboot_id"] = httpboot_id
            __props__.__dict__["ipam"] = ipam
            if mask is None and not opts.urn:
                raise TypeError("Missing required property 'mask'")
            __props__.__dict__["mask"] = mask
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["name"] = name
            if network is None and not opts.urn:
                raise TypeError("Missing required property 'network'")
            __props__.__dict__["network"] = network
            __props__.__dict__["network_address"] = network_address
            __props__.__dict__["network_type"] = network_type
            __props__.__dict__["template_id"] = template_id
            __props__.__dict__["tftp_id"] = tftp_id
            __props__.__dict__["to"] = to
            __props__.__dict__["vlanid"] = vlanid
            __props__.__dict__["__meta_"] = None
        super(Subnet, __self__).__init__(
            'foreman:index/subnet:Subnet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            __meta_: Optional[pulumi.Input[bool]] = None,
            bmc_id: Optional[pulumi.Input[int]] = None,
            boot_mode: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dhcp_id: Optional[pulumi.Input[int]] = None,
            dns_primary: Optional[pulumi.Input[str]] = None,
            dns_secondary: Optional[pulumi.Input[str]] = None,
            domain_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            from_: Optional[pulumi.Input[str]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            httpboot_id: Optional[pulumi.Input[int]] = None,
            ipam: Optional[pulumi.Input[str]] = None,
            mask: Optional[pulumi.Input[str]] = None,
            mtu: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network: Optional[pulumi.Input[str]] = None,
            network_address: Optional[pulumi.Input[str]] = None,
            network_type: Optional[pulumi.Input[str]] = None,
            template_id: Optional[pulumi.Input[int]] = None,
            tftp_id: Optional[pulumi.Input[int]] = None,
            to: Optional[pulumi.Input[str]] = None,
            vlanid: Optional[pulumi.Input[int]] = None) -> 'Subnet':
        """
        Get an existing Subnet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] __meta_: @SUMMARY Foreman representation of a subnetwork.
        :param pulumi.Input[int] bmc_id: BMC Proxy ID to use within this subnet
        :param pulumi.Input[str] boot_mode: Default boot mode for instances assigned to this subnet. Values include: `"Static"`, `"DHCP"`.
        :param pulumi.Input[str] description: Description of the subnet
        :param pulumi.Input[int] dhcp_id: DHCP Proxy ID to use within this subnet
        :param pulumi.Input[str] dns_primary: Primary DNS server for this subnet.
        :param pulumi.Input[str] dns_secondary: Secondary DNS sever for this subnet.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] domain_ids: Domains in which this subnet is part
        :param pulumi.Input[str] from_: Start IP address for IP auto suggestion.
        :param pulumi.Input[str] gateway: Gateway server to use when connecting/communicating to anything not on the same network.
        :param pulumi.Input[int] httpboot_id: HTTPBoot Proxy ID to use within this subnet
        :param pulumi.Input[str] ipam: IP address auto-suggestion for this subnet. Valid values include: `"DHCP"`, `"Internal DB"`, `"Random DB"`,`"None"`.
        :param pulumi.Input[str] mask: Netmask for this subnet. @EXAMPLE "255.255.255.0"
        :param pulumi.Input[int] mtu: MTU value for the subnet
        :param pulumi.Input[str] name: Subnet name. @EXAMPLE "10.228.247.0 BO1"
        :param pulumi.Input[str] network: Subnet network. @EXAMPLE "10.228.247.0"
        :param pulumi.Input[str] network_address: The Subnets CIDR in the format 169.254.0.0/16
        :param pulumi.Input[str] network_type: Type or protocol, IPv4 or IPv6, defaults to IPv4.
        :param pulumi.Input[int] template_id: Template HTTP(S) Proxy ID to use within this subnet
        :param pulumi.Input[int] tftp_id: TFTP Proxy ID to use within this subnet
        :param pulumi.Input[str] to: Ending IP address for IP auto suggestion.
        :param pulumi.Input[int] vlanid: VLAN id that is in use in the subnet
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubnetState.__new__(_SubnetState)

        __props__.__dict__["__meta_"] = __meta_
        __props__.__dict__["bmc_id"] = bmc_id
        __props__.__dict__["boot_mode"] = boot_mode
        __props__.__dict__["description"] = description
        __props__.__dict__["dhcp_id"] = dhcp_id
        __props__.__dict__["dns_primary"] = dns_primary
        __props__.__dict__["dns_secondary"] = dns_secondary
        __props__.__dict__["domain_ids"] = domain_ids
        __props__.__dict__["from_"] = from_
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["httpboot_id"] = httpboot_id
        __props__.__dict__["ipam"] = ipam
        __props__.__dict__["mask"] = mask
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["name"] = name
        __props__.__dict__["network"] = network
        __props__.__dict__["network_address"] = network_address
        __props__.__dict__["network_type"] = network_type
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["tftp_id"] = tftp_id
        __props__.__dict__["to"] = to
        __props__.__dict__["vlanid"] = vlanid
        return Subnet(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def __meta_(self) -> pulumi.Output[bool]:
        """
        @SUMMARY Foreman representation of a subnetwork.
        """
        return pulumi.get(self, "__meta_")

    @property
    @pulumi.getter(name="bmcId")
    def bmc_id(self) -> pulumi.Output[Optional[int]]:
        """
        BMC Proxy ID to use within this subnet
        """
        return pulumi.get(self, "bmc_id")

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Default boot mode for instances assigned to this subnet. Values include: `"Static"`, `"DHCP"`.
        """
        return pulumi.get(self, "boot_mode")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the subnet
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dhcpId")
    def dhcp_id(self) -> pulumi.Output[Optional[int]]:
        """
        DHCP Proxy ID to use within this subnet
        """
        return pulumi.get(self, "dhcp_id")

    @property
    @pulumi.getter(name="dnsPrimary")
    def dns_primary(self) -> pulumi.Output[Optional[str]]:
        """
        Primary DNS server for this subnet.
        """
        return pulumi.get(self, "dns_primary")

    @property
    @pulumi.getter(name="dnsSecondary")
    def dns_secondary(self) -> pulumi.Output[Optional[str]]:
        """
        Secondary DNS sever for this subnet.
        """
        return pulumi.get(self, "dns_secondary")

    @property
    @pulumi.getter(name="domainIds")
    def domain_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Domains in which this subnet is part
        """
        return pulumi.get(self, "domain_ids")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Output[Optional[str]]:
        """
        Start IP address for IP auto suggestion.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[Optional[str]]:
        """
        Gateway server to use when connecting/communicating to anything not on the same network.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="httpbootId")
    def httpboot_id(self) -> pulumi.Output[Optional[int]]:
        """
        HTTPBoot Proxy ID to use within this subnet
        """
        return pulumi.get(self, "httpboot_id")

    @property
    @pulumi.getter
    def ipam(self) -> pulumi.Output[Optional[str]]:
        """
        IP address auto-suggestion for this subnet. Valid values include: `"DHCP"`, `"Internal DB"`, `"Random DB"`,`"None"`.
        """
        return pulumi.get(self, "ipam")

    @property
    @pulumi.getter
    def mask(self) -> pulumi.Output[str]:
        """
        Netmask for this subnet. @EXAMPLE "255.255.255.0"
        """
        return pulumi.get(self, "mask")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[Optional[int]]:
        """
        MTU value for the subnet
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Subnet name. @EXAMPLE "10.228.247.0 BO1"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output[str]:
        """
        Subnet network. @EXAMPLE "10.228.247.0"
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> pulumi.Output[Optional[str]]:
        """
        The Subnets CIDR in the format 169.254.0.0/16
        """
        return pulumi.get(self, "network_address")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Output[Optional[str]]:
        """
        Type or protocol, IPv4 or IPv6, defaults to IPv4.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[Optional[int]]:
        """
        Template HTTP(S) Proxy ID to use within this subnet
        """
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="tftpId")
    def tftp_id(self) -> pulumi.Output[Optional[int]]:
        """
        TFTP Proxy ID to use within this subnet
        """
        return pulumi.get(self, "tftp_id")

    @property
    @pulumi.getter
    def to(self) -> pulumi.Output[Optional[str]]:
        """
        Ending IP address for IP auto suggestion.
        """
        return pulumi.get(self, "to")

    @property
    @pulumi.getter
    def vlanid(self) -> pulumi.Output[Optional[int]]:
        """
        VLAN id that is in use in the subnet
        """
        return pulumi.get(self, "vlanid")

