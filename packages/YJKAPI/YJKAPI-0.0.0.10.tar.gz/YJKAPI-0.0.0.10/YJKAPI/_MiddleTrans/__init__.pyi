from YJKPYI.APIData import *
from typing import Any
class YJKSDsnDataPy:
    @staticmethod
    def dsnGetWallColumnBarRatio(nFloor: int, nTotID: int, nBarKind: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnBiAxisAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnZYB(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnJKB(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnV30(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnSeamV(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBaseWallColumnAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBaseWallColumnKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetWallColumnOutPlanAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnSeam(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnSeamAsNeed(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnWallColumnIsShortLeg(nFloor: int, nTotID: int) -> bool: ...
    @staticmethod
    def dsnWallColumnIsDesignWithFlange(nFloor: int, nTotID: int) -> bool: ...
    @staticmethod
    def dsnWallColumnIsDesignBySRC(nFloor: int, nTotID: int) -> bool: ...
    @staticmethod
    def dsnGetWallColumnFlangeCol(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetFlangeWallColumnPoly(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetZHZYBWallColumnPoly(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetZHEdgePolyByWallColumn(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnWallColumnIsPJSymmetrical(nFloor: int, nTotID: int) -> bool: ...
    @staticmethod
    def dsnWallColumnIsPJByCol(nFloor: int, nTotID: int) -> bool: ...
    @staticmethod
    def dsnZHEdgePolyHasBaseWall(nFloor: int, nTotID: int) -> bool: ...
    @staticmethod
    def dsnGetWallColumnStability(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnShearCapacity(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnaa(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetPcWallColumnShearCheck(nFloor: int, nTotID: int, bIsDC: bool) -> Any: ...
    @staticmethod
    def dsnGetRectTubeWallColumnCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRectTubeWallColumnCheck_ZJKG(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRectTubeWallColumnSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRectTube_DBLSTEELWallColumnCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRectTube_DBLSTEELWallColumnSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelWallColumnCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSRCCTWallColumnCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSRCCTWallColEleNum(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetSRCCTWallColumnYStaCheck(nFloor: int, nTotID: int, nEleNO: int) -> Any: ...
    @staticmethod
    def dsnGetSteelWallColumnSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnMaxfc_US(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnSect(nFloor: int, nTotID: int, nCurSect: int, nSectDSNType: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnSimplePJ_US(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnSimplePJ_EU(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSingleWallAZPJ(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallASVRation(nFloor: int, nTotID: int) -> float: ...
    @staticmethod
    def dsnFormPJEdge(nFloor: int) -> bool: ...
    @staticmethod
    def dsnGetPJEdgeID(nFloor: int) -> Any: ...
    @staticmethod
    def dsnGetPJEdgeSGTID(nFloor: int, nID: int) -> int: ...
    @staticmethod
    def dsnGetPJEdgeIDBySGTID(nFloor: int, nSGTEdgeID: int) -> bool: ...
    @staticmethod
    def dsnGetPJEdgePJ(nFloor: int, nID: int) -> Any: ...
    @staticmethod
    def dsnGetPJEdgePoly(nFloor: int, nID: int) -> Any: ...
    @staticmethod
    def dsnRefreshEdgelementZYB() -> None: ...
    @staticmethod
    def dsnGetEdgeElementZYB(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetZYBEdgeIDBySGTID(nFloor: int, nSGTEdgeID: int) -> int: ...
    @staticmethod
    def dsnFormPJWallBody(nFloor: int) -> bool: ...
    @staticmethod
    def dsnGetPJWallBodyID(nFloor: int) -> Any: ...
    @staticmethod
    def dsnGetPJWallBodySGTID(nFloor: int, nID: int) -> int: ...
    @staticmethod
    def dsnGetPJWallBodyIDBySGTID(nFloor: int, nSGTWallBodyID: int) -> int: ...
    @staticmethod
    def dsnGetPJWallBodyPJ(nFloor: int, nID: int) -> Any: ...
    @staticmethod
    def dsnGetPJWallBodyPoly(nFloor: int, nID: int) -> Any: ...
    @staticmethod
    def dsnEPCalBeamAs_Con(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nSect: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalBeamAs_ConEx(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nSect: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalBeamAs_SRC(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nSect: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalBeamAs_SRCEx(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nSect: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalWallBeamAs_Con(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nSect: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalWallBeamAs_ConEx(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nSect: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalColumnAs_Con(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nSect: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalColumnAs_ConEx(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalColumnAs_SRC(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nSect: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalColumnAs_SRCEx(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalBraceAs_Con(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nSect: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalBraceAs_ConEx(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalBraceAs_SRC(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nSect: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalBraceAs_SRCEx(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalWallColumnAs_Con(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nSect: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalWallColumnAs_ConEx(pPara: Mdl_dsnEPPara, nFloor: int, nTotID: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPCalSlabAs_Con(pPara: Mdl_dsnEPPara, nFloor: int, nPMRoomID: int, b: float, h: float, nSect: int, nNum: int) -> Any: ...
    @staticmethod
    def dsnEPGetSeisAppF(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnEPGetEigenSeisF(nFloor: int, nTower: int, nCurEigen: int) -> Any: ...
    @staticmethod
    def dsnEPColumnShearCapacity(nOption: int, nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnEPColumnShearCapacityNEW(nOption: int, nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnEPColumnBendCapacity(nOption: int, nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnEPBraceShearCapacity(nOption: int, nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnEPBraceShearCapacityNEW(nOption: int, nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnEPBraceBendCapacity(nOption: int, nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnEPWallColumnShearCapacity(nOption: int, nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnEPWallColumnShearCapacityNEW(nOption: int, nFloor: int, nTotID: int, fAsHUp: float, fAsHDown: float) -> Any: ...
    @staticmethod
    def dsnEPWallColumnBendCapacity(nOption: int, nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnEPBeamShearCapacity(nOption: int, nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnEPBeamShearCapacityNEW(nOption: int, nFloor: int, nTotID: int, fAsvStart: float, fAsvEnd: float) -> Any: ...
    @staticmethod
    def dsnEPBeamBendCapacity(nOption: int, nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnEPWallBeamShearCapacity(nOption: int, nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnEPWallBeamShearCapacityNEW(nOption: int, nFloor: int, nTotID: int, fAsvStart: float, fAsvEnd: float) -> Any: ...
    @staticmethod
    def dsnEPWallBeamBendCapacity(nOption: int, nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetIsolationFloorTowerData() -> Any: ...
    @staticmethod
    def dsnGetIsolationSupportData(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetIsolationSupportLongtimeStress(nFloor: int, nTower: int, nIsolationSupportID: int) -> float: ...
    @staticmethod
    def dsnGetIsolatorData(nFloor: int, nTower: int, nIsolationSupportID: int) -> Any: ...
    @staticmethod
    def dsnGetIsolatorMaxTensileStressAndMaxCompressiveStress(nFloor: int, nTower: int, nIsolationSupportID: int) -> Any: ...
    @staticmethod
    def dsnGetIsolatorDisplacement(nFloor: int, nTower: int, nIsolationSupportID: int, nLDCase: int) -> list: ...
    @staticmethod
    def dsnGetIsolatorNL(nFloor: int, nTower: int, nIsolationSupportID: int, nLDCase: int) -> list: ...
    @staticmethod
    def dsnGetIsolatorNLWithCombine(nFloor: int, nTower: int, nIsolationSupportID: int, str: str) -> list: ...
    @staticmethod
    def dsnGetIsolatorAxialForce(nFloor: int, nTower: int, nIsolationSupportID: int) -> float: ...
    @staticmethod
    def dsnGetIsolationFloorEccentricityRatio(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetIsolationFloorsEccentricityRatio(nFloor: list, nTower: list, nFlrCount: int) -> Any: ...
    @staticmethod
    def dsnCheckIsolationFloorTotalHorizontalForce(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnCheckIsolationFloorsTotalHorizontalForce(_nFloor: list, _nTower: list, nFlrCount: int) -> Any: ...
    @staticmethod
    def dsnCheckIsolationFloorWindResistance(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnCheckIsolationFloorsWindResistance(nFloor: list[int], nTower: list[int], nFlrCount: int) -> Any: ...
    @staticmethod
    def dsnCheckTheRatioOfYieldForceAndGravity(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnCheckIsolationFloorsTheRatioOfYieldForceAndGravity(nFloor: list, nTower: list, nFlrCount: int) -> Any: ...
    @staticmethod
    def dsnGetHorizontalEVOfIsolationFloor(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetHorizontalEVOfIsolationFloors(nFlrCount: int) -> Any: ...
    @staticmethod
    def dsnGetIsolationSupportYieldForce(nFloor: int, nTower: int, nIsolationSupportID: int) -> Any: ...
    @staticmethod
    def dsnGetIsolationFloorsSupportYieldForce(nFlrCount: int) -> Any: ...
    @staticmethod
    def dsnGetIsolationSupportShear(nFloor: int, nTower: int, nIsolationSupportID: int) -> Any: ...
    @staticmethod
    def dsnGetIsolationFloorsSupportShear(nFlrCount: int) -> Any: ...
    @staticmethod
    def dsnIsRibBeamDesignByPL(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetGradeBeamMatKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetGradeBeamTow(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetGradeBeamStdForce(nFloor: int, nTotID: int, nLDCase: int, Option: int) -> Any: ...
    @staticmethod
    def dsnGetGradeBeamAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetGradeBeamPJRatio(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetGradeBeamAsVJM(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetGradeBeamAsTL(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnIsGradeBeamDesignByPL(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetGradeBeamPJFloor(nFloor: int) -> int: ...
    @staticmethod
    def dsnGetColumnKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetColumnMatKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetColumnStdForce(nFloor: int, nTotID: int, nLDCase: int, Option: int) -> Any: ...
    @staticmethod
    def dsnGetColumnDesignMethod(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetColumnAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnAs_AQJD(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnBiAxisAs(nFloor: int, nTotID: int, nPos: int) -> Any: ...
    @staticmethod
    def dsnGetColumnBiAxisAs_New(nFloor: int, nTotID: int, nPos: int) -> Any: ...
    @staticmethod
    def dsnGetColumnBiAxisCalMethod(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetColumnAsRatio(nFloor: int, nTotID: int, nBarKind: int) -> Any: ...
    @staticmethod
    def dsnGetColumnSectAsRatio(nFloor: int, nTotID: int, nBarKind: int) -> Any: ...
    @staticmethod
    def dsnGetColumnSideAsRatio(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnZYB(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnZYB_ZH(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnJKB(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnJKBXY(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnAxis_Gravity(nFloor: int, nTotID: int) -> float: ...
    @staticmethod
    def dsnGetColumnJointAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnCapAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnCapAsBase(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelColumnCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelColumnCheckNew(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelColumnShearCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelColumnCheck_AQJD(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelColumnSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelColumnCheck_FH(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSRCColumnSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRectTubeColumnCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRectTubeColumnCheck_JGJ138(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRectTubeColumnSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetAMCSColumnCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetCFTColumnStrenCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetCFTColumnSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetAMCSColumnSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetURCBColumnCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRectTubeColumnCheck_FH(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetCircleTubeColumnCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetCircleTubeColumnSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetCircleTubeColumnCheck_FH(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetPECColumnCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetPECColumnSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetPECColumnRMDCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetTubeColumnStaInfo(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetTubeReinColumnSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnJointCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnDesignWithWallColSign(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnColIsYXZ(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnColIsShort(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetColLenCoe(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnShearCapacity(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColJDJGExistGJ(nFloor: int, nTotID: int, nCurSect: int) -> Any: ...
    @staticmethod
    def dsnGetCircleColExistGJ(nFloor: int, nTotID: int, nCurSect: int) -> Any: ...
    @staticmethod
    def dsnGetColJointJDJGExistAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnJDJGArea(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetPcColShearCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetColumnPMIDToTotIDMap(nFloor: int) -> Any: ...
    @staticmethod
    def dsnGetColumnAsRSRatio(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetMainColNum(nFloor: int) -> Any: ...
    @staticmethod
    def dsnGetColSegIDbyMainCol(nFloor: int, nID: int) -> Any: ...
    @staticmethod
    def dsnGetBraceColKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetBraceKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetBraceMatKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetBraceStdForce(nFloor: int, nTotID: int, nLDCase: int, Option: int) -> Any: ...
    @staticmethod
    def dsnGetBraceDesignMethod(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetBraceAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBraceAs_AQJD(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBraceBiAxisAs(nFloor: int, nTotID: int, nPos: int) -> Any: ...
    @staticmethod
    def dsnGetBraceAsRatio(nFloor: int, nTotID: int, nBarKind: int) -> Any: ...
    @staticmethod
    def dsnGetBraceZYB(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBraceZYB_ZH(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBraceJKB(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBraceJKBXY(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBraceJointAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelBraceCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelBraceCheckNew(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelBraceCheck_AQJD(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelBraceSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelBraceCheck_FH(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSRCBraceSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRectTubeBraceCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRectTubeBraceSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRectTubeBraceCheck_FH(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetCircleTubeBraceCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetCircleTubeBraceSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetCircleTubeBraceCheck_FH(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetTubeReinBraceSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBraceDesignWithWallColSign(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnBraceIsYXZ(nFloor: int, nTotID: int) -> bool: ...
    @staticmethod
    def dsnBraceIsShort(nFloor: int, nTotID: int) -> bool: ...
    @staticmethod
    def dsnGetBraceLenCoe(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBraceShearCapacity(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallBeamKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetWallBeamStdForce(nFloor: int, nTotID: int, nLDCase: int, Option: int) -> Any: ...
    @staticmethod
    def dsnGetWallBeamAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallBeamAsWithCal(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallBeamAsWithCal_AQJD(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallBeamPJRatio(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallBeamAsVJM(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallBeamAsCalVJM(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallBeamAsVJM_AQJD(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallBeamAsTL(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallBeamAsTL_AQJD(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallBeamAsXJ(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamXJKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetWallBeamXJKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetWallBeamSpanHRatio(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallBeamJDJGExistGJ(nFloor: int, nTotID: int, nCurSect: int) -> Any: ...
    @staticmethod
    def dsnGetMainWallBeamNum(nFloor: int) -> Any: ...
    @staticmethod
    def dsnGetBeamSegIDbyMainWallBeam(nFloor: int, ID: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetWallColumnMatKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetWallColumnStdForce(nFloor: int, nTotID: int, nLDCase: int, Option: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnOutPlanStdForce(nFloor: int, nTotID: int, nLDCase: int, Option: int, bOnlydsnNode: bool) -> Any: ...
    @staticmethod
    def dsnGetWallColumnOutPlanStdForceEx(nFloor: int, nTotID: int, nLDCase: int, Option: int, bOnlydsnNode: bool) -> Any: ...
    @staticmethod
    def dsnGetWallColumnOutPlanNodeCount(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetWallColumnOutPlanNode(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetWallColumnOutPlanNodeNL(nFloor: int, nTotID: int, nLDCase: int) -> list: ...
    @staticmethod
    def dsnGetWallColumnAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetVersion() -> int: ...
    @staticmethod
    def dsnGetPJTime() -> int: ...
    @staticmethod
    def dsnGetCurFloor() -> int: ...
    @staticmethod
    def dsnSetComPtrResource(nComPtrFrom: int) -> None: ...
    @staticmethod
    def dsnFormPJBZCData() -> Any: ...
    @staticmethod
    def dsnComHasLimitInf(nFloor: int, nComKind: PostGjKind, nTotID: int) -> bool: ...
    @staticmethod
    def dsnGetComTotLimitInf(nFloor: int, nComKind: PostGjKind, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetComLimitInf(nFloor: int, nComKind: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetComSectLimitInf(nFloor: int, nComKind: int, nTotID: int, nSectPos: int) -> Any: ...
    @staticmethod
    def dsnGetSelectLimitInf(nFloor: int, nComKind: int, nTotID: int, nNum: int) -> list: ...
    @staticmethod
    def dsnGetComPropStr(nFloor: int, nComKind: int, nTotID: int, pShowOpt: Mdl_ghShowOption_ComProperty) -> str: ...
    @staticmethod
    def dsnGetComXNSJBLPropStr(nFloor: int, nComKind: int, nTotID: int) -> str: ...
    @staticmethod
    def dsnGetComXNSJPropStr(nFloor: int, nComKind: int, nTotID: int) -> str: ...
    @staticmethod
    def dsnGetComFHPropStr(nFloor: int, nComKind: int, nTotID: int) -> str: ...
    @staticmethod
    def dsnGetComSectStr(nFloor: int, nComKind: int, nTotID: int) -> str: ...
    @staticmethod
    def dsnGetComMatStr(nFloor: int, nComKind: int, nTotID: int) -> str: ...
    @staticmethod
    def dsnGetComSectStrNEW(nFloor: int, nComKind: int, nTotID: int, nType: int) -> str: ...
    @staticmethod
    def dsnGetComPMSectID(nFloor: int, nComKind: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetComJDJGMethod(nFloor: int, nComKind: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetComJDJGDef(nFloor: int, nComKind: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetComJDJGStrNEW(nFloor: int, nComKind: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetComPrcNL(nFloor: int, nComKind: int, nTotID: int, nPrcCombKind: int) -> Any: ...
    @staticmethod
    def dsnGetComStdNL(nFloor: int, nComKind: int, nTotID: int, nLDCase: int, Option: int) -> Any: ...
    @staticmethod
    def dsnGetComLDCombIsSame(nFloor: int, nComKind: int, nTotID: int, nLDCombType: int) -> bool: ...
    @staticmethod
    def dsnGetComLDCombCoe(nFloor: int, nComKind: int, nTotID: int, nSectDSNType: int) -> Any: ...
    @staticmethod
    def dsnGetComLDCombNL(nFloor: int, nComKind: int, nTotID: int, nSectDSNType: int, nSect: int) -> Any: ...
    @staticmethod
    def dsnGetComLDCombNLNew(nFloor: int, nComKind: int, nTotID: int, nSectDSNType: int, nWallSign: int, nSect: int) -> Any: ...
    @staticmethod
    def dsnGetComSTDCombCoe(nFloor: int, nComKind: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetComSTDCombNL(nFloor: int, nComKind: int, nTotID: int, nSect: int) -> Any: ...
    @staticmethod
    def dsnGetReaction(nodeTag: int, nLDCaseID: int) -> list: ...
    @staticmethod
    def dsnGetComSTDCombNLNew(nFloor: int, nComKind: int, nTotID: int, nWallSign: int, nSect: int) -> Any: ...
    @staticmethod
    def dsnGetComFrequentCombCoe(nFloor: int, nComKind: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetComFrequentCombCoe_FH(nFloor: int, nComKind: int, nTotID: int, nOption: int) -> Any: ...
    @staticmethod
    def dsnGetComFrequentCombNL(nFloor: int, nComKind: int, nTotID: int, nSect: int) -> Any: ...
    @staticmethod
    def dsnGetComQuasiCombCoe(nFloor: int, nComKind: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetComQuasiCombNL(nFloor: int, nComKind: int, nTotID: int, nSect: int) -> Any: ...
    @staticmethod
    def dsnGetComSingleCombNL(nFloor: int, nComKind: int, nTotID: int, nSect: int, nLDCombType: int) -> Any: ...
    @staticmethod
    def dsnGetComPrcCombNL(nFloor: int, nComKind: int, nTotID: int, nLDCombType: int, nPrcCombType: int, nPrcComb: int) -> Any: ...
    @staticmethod
    def dsnGetComPrcCombNLandCombID(nFloor: int, nComKind: int, nTotID: int, nLDCombType: int, nPrcCombType: int, nPrcComb: int) -> Any: ...
    @staticmethod
    def dsnGetComKZDJ(nFloor: int, nComKind: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetComDSNTow(nFloor: int, nComKind: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetComAng(nFloor: int, nComKind: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetComNCZL(nFloor: int, nComKind: int, nTotID: int, nCalSign: int, bStlCZLByCon: bool) -> Any: ...
    @staticmethod
    def dsnGetComNMGraphData(nFloor: int, nComKind: int, nTotID: int, nLDCombKind: int) -> Any: ...
    @staticmethod
    def dsnGetBeamNLBL(nFloor: int, nComKind: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetComJYB(nFloor: int, nComKind: int, nTotID: int, nSect: int) -> Any: ...
    @staticmethod
    def dsnGetComJointJYB(nFloor: int, nComKind: int, nTotID: int, nDir: int) -> Any: ...
    @staticmethod
    def dsnComIsPC(nFloor: int, nComKind: int, nTotID: int) -> bool: ...
    @staticmethod
    def dsnGetComAdjustCoe(nFloor: int, nComKind: int, nTotID: int, nCurSect: int) -> Any: ...
    @staticmethod
    def dsnGetComXNXS(nFloor: int, nComKind: int, nTotID: int, nCurSect: int) -> Any: ...
    @staticmethod
    def dsnGetComSectInfo(nFloor: int, nComKind: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamIsAmp(nFloor: int, nTotID: int) -> bool: ...
    @staticmethod
    def dsnGetAutoFHLayer(nFloor: int, nComKind: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetBeamMatKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetBeamSupKind(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamCanti(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetBeamStdForce(nFloor: int, nTotID: int, nLDCase: int, Option: int) -> Any: ...
    @staticmethod
    def dsnGetBeamStdForceSG(nFloor: int, nTotID: int, nLDCase: int, Option: int) -> Any: ...
    @staticmethod
    def dsnGetBeamAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamAsWithCal(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamAsWithCal_AQJD(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamPJRatio(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamAsVJM(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamAsCalVJM(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamAsVJM_AQJD(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamAsCalVJM_AQJD(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamAsTL(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamAsTL_AQJD(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamAsXJ(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamConPressHei(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamIfDoubleReinSect(nFloor: int, nTotID: int) -> bool: ...
    @staticmethod
    def dsnGetSteelBeamCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetAlumBeamCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelBeamCheckNew(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelBeamCheckNew_AQJD(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelBeamSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSRCBeamSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelBeamCheck_FH(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetPortalBeamSlope(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamSpanHRatio(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamLDCombNL(nFloor: int, nTotID: int, nSectDSNType: int, nCurSect: int) -> Any: ...
    @staticmethod
    def dsnIsBeamDesignByPL(nFloor: int, nTotID: int) -> bool: ...
    @staticmethod
    def dsnGetColumnPLType(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetWallColumnPLType(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetBeamJDJGExistGJ(nFloor: int, nTotID: int, nCurSect: int) -> Any: ...
    @staticmethod
    def dsnGetBeamJDJGArea(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetPcBeamShearCheck(nFloor: int, nTotID: int, nCurSect: int, fAc1: float, fAk: float) -> Any: ...
    @staticmethod
    def dsnGetSubBeamAddPJ(nFloor: int, nNodeTotID: int, nBeamTotIDS: int, nBeamTotIDE: int) -> list: ...
    @staticmethod
    def dsnGetBeamJDJGMuImprove(nFloor: int, nTotID: int, nOption: int) -> Any: ...
    @staticmethod
    def dsnGetBeamAsRSRatio(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetBeamAsVRSRatio(nFloor: int, nTotID: int) -> list: ...
    @staticmethod
    def dsnGetBeamJGM0k(nFloor: int, nTotID: int) -> list: ...
    @staticmethod
    def dsnGetMainBeamNum(nFloor: int) -> Any: ...
    @staticmethod
    def dsnGetBeamSegIDbyMainBeam(nFloor: int, ID: int) -> Any: ...
    @staticmethod
    def dsnGetMainBeamSpan(nFloor: int, ID: int) -> Any: ...
    @staticmethod
    def dsnGetMainBeamClearSpan(nFloor: int, nID: int) -> Any: ...
    @staticmethod
    def dsnGetWallBeamClearSpan(nFloor: int, nID: int) -> Any: ...
    @staticmethod
    def dsnGetMainBeamJZZSign(nFloor: int, ID: int) -> bool: ...
    @staticmethod
    def dsnGetVerSupMainBeam(nFloor: int) -> Any: ...
    @staticmethod
    def dsnGetSubBeamMatKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetSubBeamTow(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetSubBeamStdForce(nFloor: int, nTotID: int, nLDCase: int, Option: int) -> Any: ...
    @staticmethod
    def dsnGetSubBeamAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSubBeamAsWithCal(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSubBeamPJRatio(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSubBeamAsVJM(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSubBeamAsCalVJM(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSubBeamAsTL(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelSubBeamCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSteelSubBeamSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSRCSubBeamSectCheck(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnIsSubBeamDesignByPL(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetSubBeam_Concrete(nFloor: int, nTotID: int) -> float: ...
    @staticmethod
    def dsnGetSubBeam_Steel(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetSubBeam_L0_Out(nFloor: int, nTotID: int) -> float: ...
    @staticmethod
    def dsnGetSubBeam_Cover(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetSubBeam_JointPos(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetSubBeam_LocalCoordinate(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRibBeamMatKind(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetRibBeamTow(nFloor: int, nTotID: int) -> int: ...
    @staticmethod
    def dsnGetRibBeamStdForce(nFloor: int, nTotID: int, nLDCase: int, Option: int) -> Any: ...
    @staticmethod
    def dsnGetRibBeamAs(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRibBeamAsWithCal(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRibBeamPJRatio(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRibBeamAsVJM(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRibBeamAsCalVJM(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetRibBeamAsTL(nFloor: int, nTotID: int) -> Any: ...
    @staticmethod
    def dsnGetLDCaseBySort_LDComb() -> Any: ...
    @staticmethod
    def dsnGetLDCaseBySort(Option: int) -> Any: ...
    @staticmethod
    def dsnGetLDCaseBySortNew(bBase: bool, bBSXDZ: bool, bApp: bool, bBeamCrane: bool, bColCrane: bool, bPM: bool, bJC: bool, bLDComb: bool) -> Any: ...
    @staticmethod
    def dsnGetLDCaseBySortNew_SG(bBase: bool, bBSXDZ: bool, bApp: bool, bBeamCrane: bool, bColCrane: bool, bPM: bool, bJC: bool, bLDComb: bool) -> Any: ...
    @staticmethod
    def dsnGetLDCaseCoeInf(nLDCase: int) -> list: ...
    @staticmethod
    def dsnGetLDCaseByLDKind(nLDKind: int) -> Any: ...
    @staticmethod
    def dsnGetLDKind(nLDCase: int) -> int: ...
    @staticmethod
    def dsnGetLDCaseOldByLDCase(nLDCase: int) -> int: ...
    @staticmethod
    def dsnGetLDCaseByLDCaseOld(nLDCaseOld: int) -> int: ...
    @staticmethod
    def dsnGetYXYKXBLDCaseByLDCase(nLDCase: int) -> int: ...
    @staticmethod
    def dsnGetAnaLDCaseByLDCase(nLDCase: int) -> int: ...
    @staticmethod
    def dsnGetLDCaseByAnaLDCase(nAnaLDCase: int) -> int: ...
    @staticmethod
    def dsnGetLDType(nLDCase: int) -> int: ...
    @staticmethod
    def dsnGetLDCaseName(nLDCase: int) -> str: ...
    @staticmethod
    def dsnGetLDCaseExpName(nLDCase: int) -> str: ...
    @staticmethod
    def dsnGetLDCaseByName(LDCaseName: str) -> int: ...
    @staticmethod
    def dsnGetLDCaseName_EN(nLDCase: int) -> str: ...
    @staticmethod
    def dsnGetLDCaseByName_EN(LDCaseName: str) -> int: ...
    @staticmethod
    def dsnLDCaseIsDead(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsLive(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsAir(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsSeis(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsVerSeis(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsSeisApp(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsWind(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsWindH(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsWindT(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsBeamCrane(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsColCrane(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsPMUser(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsJC(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsJCWaterH(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsPRES(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsPRET(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsFYWY(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsKXB(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnLDCaseIsLDComb(nLDCase: int) -> Any: ...
    @staticmethod
    def dsnGetLDCombInf() -> Any: ...
    @staticmethod
    def dsnGetLDCombInf_Use() -> Any: ...
    @staticmethod
    def dsnGetGlobalInformationByReader(nModule: int) -> list: ...
    @staticmethod
    def dsnGetEignInfo(Option: int) -> Any: ...
    @staticmethod
    def dsnGetEignInfoByReader(nModule: int) -> Any: ...
    @staticmethod
    def dsnGetLocalVibrationInfo() -> Any: ...
    @staticmethod
    def dsnGetLocalVibrationStories(eigenNo: int) -> Any: ...
    @staticmethod
    def dsnGetDampRatioOfAllModes(nModule: int) -> Any: ...
    @staticmethod
    def dsnGetSpectrumLayerForceEigen(nModule: int, nLDCase: int, eigenNum: int, floor: int, tower: int) -> Any: ...
    @staticmethod
    def dsnGetSpectrumLayerForceEigenEx(nModule: int, nLDCase: int, eigenNum: int, floor: int, tower: int) -> Any: ...
    @staticmethod
    def dsnGetSpectrumLayerForceCQC(nModule: int, nLDCase: int, floor: int, tower: int) -> Any: ...
    @staticmethod
    def dsnGetBottomShearingForceOfLoadCase(nModule: int, nLDCase: int, nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetMaxSeismicEffectAngle(nModule: int) -> Any: ...
    @staticmethod
    def dsnGetBuckingEigenAndPcrValue() -> Any: ...
    @staticmethod
    def dsnGetNodeBuckingDisp(nodeTag: int, buckingMod: int) -> Any: ...
    @staticmethod
    def dsnGetNodeDis(NodeID: int, nLDCase: int) -> list: ...
    @staticmethod
    def dsnGetNodeReaction(NodeID: int, nLDCase: int) -> list: ...
    @staticmethod
    def dsnGetNodePrcCombDisFromGFE(NodeID: int, nLDCase: int, nPrcCombNumber: int) -> list: ...
    @staticmethod
    def dsnGetNodeSingleCombDis(NodeID: int, nLDCombType: int) -> Any: ...
    @staticmethod
    def dsnGetNodePrcCombDis(NodeID: int, nLDCombType: int, nPrcCombType: int, nPrcComb: int) -> Any: ...
    @staticmethod
    def dsnGetNodeEigenDisp(nModule: int, Option: int, NodeID: int, EigenNum: int) -> list: ...
    @staticmethod
    def dsnGetLDCaseHorDisStat(nFloor: int, nTower: int, nLDCase: int) -> Any: ...
    @staticmethod
    def dsnGetLDCaseHorDisStatNew(nFloor: int, nTower: int, nLDCase: int, nOption: int) -> Any: ...
    @staticmethod
    def dsnGetLDCaseHorDisStatLimt(nFloor: int, nTower: int, nLDCase: int, nOption: int, nAREA: int) -> Any: ...
    @staticmethod
    def dsnGetHorDisStatNodeTotID(nFloor: int, nTower: int, nLDCase: int, nOption: int) -> Any: ...
    @staticmethod
    def dsnGetFlrStiff(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetTransFloorStiff(tower: int, type: int) -> Any: ...
    @staticmethod
    def dsnGetFlrShearCapacity(nFloor: int, nTower: int) -> list: ...
    @staticmethod
    def dsnGetBRCSign(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetSeisAmp(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetJZB(nFloor: int, nTower: int) -> list: ...
    @staticmethod
    def dsnGet02V0(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetWallCoe_Seis(nFloor: int, nTower: int) -> list: ...
    @staticmethod
    def dsnGetWallCoe_Wind(nFloor: int, nTower: int) -> list: ...
    @staticmethod
    def dsnGetComFlrV(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetFlrF_App(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetComFlrV_App(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetComFlrV_App_GZC(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetPrcComFlrV_App(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetComFlrM_AppByAxis(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetComFlrM_AppByAxis_GZC(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetComFlrM_AppByAxisWL(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetComFlrM_AppByAxisWL_GZC(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetComFlrV_Wind(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetComFlrFH_Wind(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetComFlrFVM_Seis(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetComFlrVByCom_Seis(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetStability(nFloor: int, nTower: int) -> list: ...
    @staticmethod
    def dsnGetStability_Frame(nFloor: int, nTower: int, nOption: int) -> Any: ...
    @staticmethod
    def dsnGetStability_NonFrame(nFloor: int, nTower: int, nOption: int) -> list: ...
    @staticmethod
    def dsnGetOverturn(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetOverturnFloor() -> Any: ...
    @staticmethod
    def dsnGetOverturn_GZDZTX(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetFloorComprehensiveSeismicCapacityIndex(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetXYZMassandStiff(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetTolMass() -> Any: ...
    @staticmethod
    def dsnGetFlrWindInfo(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetFlrSeisInfo(nFloor: int, nTower: int, nModule: int) -> Any: ...
    @staticmethod
    def dsnGetFlrSeisVBeforeAdjust(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetFlrTHInfo(nFloor: int, nTower: int) -> list: ...
    @staticmethod
    def dsnGetWindComfortInfo(nFloor: int, nTower: int) -> Any: ...
    @staticmethod
    def dsnGetFlrPropStr(nFloor: int, nTower: int) -> str: ...
    @staticmethod
    def dsnGetFlrGravity(floorID: int, towerID: int) -> float: ...
    @staticmethod
    def dsnIsKJC(floorID: int) -> bool: ...
    @staticmethod
    def dsnGetFirstPeriod(nModule: int) -> Any: ...
    @staticmethod
    def dsnInitData() -> int: ...
    @staticmethod
    def dsnGetProStatus() -> int: ...
    @staticmethod
    def dsnExit() -> None: ...
    @staticmethod
    def dsnReadFloorPJ(nFloor: int) -> bool: ...
    @staticmethod
    def dsnReDesignFloorPJ(nFloor: int) -> None: ...
class YJKSPrePy:
    def WCGama0(self, WCID: int) -> float: ...
    def WCCPXS(self, WCID: int) -> float: ...
    def WCXStl(self, WCID: int) -> Any: ...
    def WCSafe(self, WCID: int) -> Any: ...
    def NSlab(self, iFlr: int) -> int: ...
    def FlrSlab(self, iFlr: int) -> list: ...
    def SlabFlr(self, slabID: int) -> int: ...
    def SlabTow(self, slabID: int) -> int: ...
    def SlabONO(self, slabID: int) -> int: ...
    def SlabMat(self, slabID: int) -> Any: ...
    def IsSlabSkin(self, slabID: int) -> int: ...
    def IsSlabAd(self, slabID: int) -> int: ...
    def NSlabPlanar(self, slabID: int) -> int: ...
    def IsSlabSolid(self, slabID: int) -> int: ...
    def IsBaseSlab(self, slabID: int) -> int: ...
    def NLink(self, iFlr: int) -> int: ...
    def FlrLink(self, iFlr: int) -> list: ...
    def LinkFlr(self, linkID: int) -> int: ...
    def LinkTow(self, linkID: int) -> int: ...
    def LinkONO(self, linkID: int) -> int: ...
    def LinkToBrace(self, linkID: int) -> int: ...
    def LinkNode(self, linkID: int) -> Any: ...
    def LinkType(self, linkID: int) -> int: ...
    def LinkPara(self, linkID: int) -> Any: ...
    def IsoYieldForce(self, linkID: int) -> Any: ...
    def IsoArea(self, linkID: int) -> Any: ...
    def LinkParaEx(self, linkID: int) -> list: ...
    def LinkName(self, linkID: int) -> str: ...
    def NNodeELink(self, iFlr: int) -> int: ...
    def FlrNodeELink(self, iFlr: int) -> list: ...
    def ELinkFlr(self, linkID: int) -> int: ...
    def ELinkTow(self, linkID: int) -> int: ...
    def ELinkONO(self, linkID: int) -> int: ...
    def ELinkNode(self, linkID: int) -> Any: ...
    def PileSpring(self, pileID: int) -> int: ...
    def CurModelKind(self) -> int: ...
    def ColumnSTBetae(self, ColumnID: int) -> float: ...
    def ColumnRigCoef(self, ColumnID: int) -> list: ...
    def ColumnTemp(self, ColumnID: int) -> list: ...
    def ColumnFirePara(self, ColumnID: int) -> Any: ...
    def ColumnDuct(self, ColumnID: int) -> int: ...
    def ColumnGama0(self, ColumnID: int) -> float: ...
    def IsColumnRoofKey(self, ColumnID: int) -> int: ...
    def ColumnCPXS(self, ColumnID: int) -> float: ...
    def ColumnIsoType(self, ColumnID: int) -> int: ...
    def ColumnKHBMax(self, ColumnID: int) -> Any: ...
    def ColumnCXBMax(self, ColumnID: int) -> Any: ...
    def ColumnSeisCoef(self, ColumnID: int) -> Any: ...
    def ColumnIsoZd(self, ColumnID: int) -> int: ...
    def ColumnSafe(self, ColumnID: int) -> Any: ...
    def NBrace(self, iFlr: int) -> int: ...
    def FlrBraces(self, iFlr: int) -> list: ...
    def BraceFlr(self, BraceID: int) -> int: ...
    def BraceTow(self, BraceID: int) -> int: ...
    def QFBraceTow(self, BraceID: int) -> int: ...
    def BraceIDInFlr(self, BraceID: int) -> int: ...
    def BraceOFlr(self, BraceID: int) -> int: ...
    def BraceONO(self, BraceID: int) -> int: ...
    def BraceOLX(self, BraceID: int) -> int: ...
    def BraceJD(self, BraceID: int) -> Any: ...
    def BraceMat(self, BraceID: int) -> Any: ...
    def BraceKZDJ(self, BraceID: int) -> int: ...
    def BraceCL(self, BraceID: int) -> Any: ...
    def BraceUpFlrN(self, BraceID: int) -> int: ...
    def BraceStlCover(self, BraceID: int) -> int: ...
    def BraceMainStl(self, BraceID: int) -> int: ...
    def BraceHoopStl(self, BraceID: int) -> int: ...
    def BraceHHZJXS(self, BraceID: int) -> float: ...
    def BraceHHGEXS(self, BraceID: int) -> float: ...
    def IsBraceEnvelope(self, gjID: int) -> int: ...
    def IsBraceTruss(self, gjID: int) -> int: ...
    def BraceEta(self, BraceID: int) -> float: ...
    def IsBraceAd(self, BraceID: int) -> int: ...
    def BracePerformType(self, BraceID: int) -> int: ...
    def BraceSpaceType(self, BraceID: int) -> Any: ...
    def IsBraceSolid(self, BraceID: int) -> int: ...
    def IsBraceVE(self, BraceID: int) -> int: ...
    def BracePerLvl(self, BraceID: int) -> Any: ...
    def BraceSTHaoneng(self, BraceID: int) -> int: ...
    def BraceSTKHB(self, BraceID: int) -> int: ...
    def BraceSTYanxing(self, BraceID: int) -> int: ...
    def BraceSTBetae(self, BraceID: int) -> float: ...
    def BraceRigCoef(self, BraceID: int) -> Any: ...
    def BraceTemp(self, BraceID: int) -> list: ...
    def BraceFirePara(self, BraceID: int) -> Any: ...
    def BraceDuct(self, BraceID: int) -> int: ...
    def BraceGama0(self, BraceID: int) -> float: ...
    def IsBraceRoofKey(self, BraceID: int) -> int: ...
    def BraceCPXS(self, BraceID: int) -> float: ...
    def BraceIsoType(self, BraceID: int) -> int: ...
    def BraceKHBMax(self, BraceID: int) -> Any: ...
    def BraceCXBMax(self, BraceID: int) -> Any: ...
    def BraceIsoZd(self, BraceID: int) -> int: ...
    def BraceSafe(self, BraceID: int) -> Any: ...
    def NWallBeam(self, iFlr: int) -> int: ...
    def FlrWallBeam(self, iFlr: int) -> list: ...
    def WallBeamFlr(self, WBID: int) -> int: ...
    def WallBeamTow(self, WBID: int) -> int: ...
    def QFWallBeamTow(self, WBID: int) -> int: ...
    def WallBeamIDInFlr(self, WBID: int) -> int: ...
    def WallBeamONO(self, WBID: int) -> int: ...
    def WallBeamArcCen(self, WBID: int) -> Any: ...
    def WallBeamH(self, WBID: int) -> float: ...
    def WallBeamUH(self, WBID: int) -> float: ...
    def WallBeamDH(self, WBID: int) -> float: ...
    def WallBeamB(self, WBID: int) -> float: ...
    def WallBeamMat(self, WBID: int) -> Any: ...
    def WallBeamMainStl(self, WBID: int) -> int: ...
    def WallBeamHoopStl(self, WBID: int) -> int: ...
    def WallBeamStlCover(self, WBID: int) -> int: ...
    def WallBeamKZDJ(self, WBID: int) -> int: ...
    def WallBeamGZKZDJ(self, WBID: int) -> int: ...
    def WallBeamGDZJ(self, WBID: int) -> float: ...
    def WallBeamGDZJW(self, WBID: int) -> float: ...
    def WallBeamStlType(self, WBID: int) -> int: ...
    def WallBeamStlThick(self, WBID: int) -> int: ...
    def WallBeamHHZJXS(self, WBID: int) -> float: ...
    def WallBeamHHGEXS(self, WBID: int) -> float: ...
    def IsWBEnvelope(self, gjID: int) -> int: ...
    def WallBeamEta(self, WBID: int) -> float: ...
    def IsWBAd(self, WBID: int) -> int: ...
    def WallBeamPerformType(self, WBID: int) -> int: ...
    def IsWBSolid(self, WBID: int) -> int: ...
    def WallBeamStlBH(self, WBID: int) -> Any: ...
    def IsWBVE(self, WBID: int) -> int: ...
    def NWallColumn(self, iFlr: int) -> int: ...
    def FlrWallColumn(self, iFlr: int) -> list: ...
    def WallColumnFlr(self, WCID: int) -> int: ...
    def WallColumnTow(self, WCID: int) -> int: ...
    def QFWallColumnTow(self, WCID: int) -> int: ...
    def WallColumnIDInFlr(self, WCID: int) -> int: ...
    def WallColumnArcCen(self, WCID: int) -> Any: ...
    def WallColumnL(self, WCID: int) -> float: ...
    def WallColumnB(self, WCID: int) -> float: ...
    def WallColumnBDw(self, WCID: int) -> float: ...
    def WallColumnH(self, WCID: int) -> float: ...
    def WallColumnMat(self, WCID: int) -> Any: ...
    def WallColumnKZDJ(self, WCID: int) -> int: ...
    def WallColumnUpFlrN(self, WCID: int) -> int: ...
    def WallColumnJDUP(self, WCID: int) -> tuple: ...
    def WallColumnMainStl(self, WCID: int) -> int: ...
    def WallColumnDsStl(self, WCID: int) -> int: ...
    def WallColumnVDsStl(self, WCID: int) -> int: ...
    def WallEdgeHoopStl(self, WCID: int) -> int: ...
    def WallColumnRou(self, WCID: int) -> float: ...
    def WallColumnHRou(self, WCID: int) -> float: ...
    def WallColumnStlCover(self, WCID: int) -> int: ...
    def WallCorner(self, WAID: int) -> list: ...
    def SolWaIntLinesNum(self, waID: int) -> int: ...
    def SolWaIntLine(self, waID: int, lineno: int) -> tuple: ...
    def WallColumnStlThick(self, WCID: int) -> int: ...
    def WallColumnHHZJXS(self, WCID: int) -> float: ...
    def WallColumnHHGEXS(self, WCID: int) -> float: ...
    def WallColumnMWHZ(self, WCID: int) -> int: ...
    def IsWCEnvelope(self, gjID: int) -> int: ...
    def WallColumnEta(self, WCID: int) -> float: ...
    def IsWCAd(self, WCID: int) -> int: ...
    def WallColumnPerformType(self, WCID: int) -> int: ...
    def IsWCSolid(self, WCID: int) -> int: ...
    def IsWCVE(self, WCID: int) -> int: ...
    def WCPerLvl(self, WCID: int) -> Any: ...
    def WCTemp(self, WCID: int) -> list: ...
    def WCDuct(self, WCID: int) -> int: ...
    def WCMianwai(self, WCID: int) -> int: ...
    def NZRC(self) -> int: ...
    def NJD(self) -> int: ...
    def XYZ(self, jdID: int) -> Any: ...
    def X(self, jdID: int) -> float: ...
    def Y(self, jdID: int) -> float: ...
    def Z(self, jdID: int) -> float: ...
    def JDONO(self, jdID: int) -> int: ...
    def JDOFlr(self, jdID: int) -> int: ...
    def JDMass(self, jdID: int) -> Any: ...
    def JDLinkTo(self, jdID: int) -> int: ...
    def HeiTow(self, iFlr: int, iTow: int) -> float: ...
    def EleTow(self, iFlr: int, iTow: int) -> float: ...
    def TowAddM(self, iFlr: int, iTow: int) -> float: ...
    def DLTow(self, iFlr: int, iTow: int) -> float: ...
    def LLTow(self, iFlr: int, iTow: int) -> float: ...
    def LLZJTow(self, iFlr: int, iTow: int) -> float: ...
    def TowInMdl(self) -> int: ...
    def TowInflr(self, iFlr: int) -> int: ...
    def NGJ(self, iKind: int, iFlr: int) -> int: ...
    def GJFlr(self, iKind: int, gjID: int) -> int: ...
    def FlrGJs(self, iKind: int, iFlr: int) -> list: ...
    def GJTow(self, iKind: int, gjID: int) -> int: ...
    def GJOFlr(self, iKind: int, gjID: int) -> int: ...
    def GJONO(self, iKind: int, gjID: int) -> int: ...
    def GJOLX(self, iKind: int, gjID: int) -> int: ...
    def GJJD(self, iKind: int, gjID: int) -> Any: ...
    def GJMat(self, iKind: int, gjID: int) -> Any: ...
    def GJKZDJ(self, iKind: int, gjID: int) -> int: ...
    def IsEnvelope(self, iKind: int, gjID: int) -> int: ...
    def NBeam(self, iFlr: int) -> int: ...
    def FlrBeams(self, iFlr: int) -> list: ...
    def BeamFlr(self, BeamID: int) -> int: ...
    def BeamTow(self, BeamID: int) -> int: ...
    def QFBeamTow(self, BeamID: int) -> int: ...
    def BeamIDInFlr(self, BeamID: int) -> int: ...
    def BeamOFlr(self, BeamID: int) -> int: ...
    def BeamONO(self, BeamID: int) -> int: ...
    def BeamOID(self, BeamID: int) -> int: ...
    def BeamOLX(self, BeamID: int) -> int: ...
    def BeamJD(self, BeamID: int) -> Any: ...
    def BeamArcCen(self, BeamID: int) -> Any: ...
    def BeamMat(self, BeamID: int) -> Any: ...
    def BeamCorStl(self, BeamID: int) -> int: ...
    def BeamKZDJ(self, BeamID: int) -> int: ...
    def BeamStlCover(self, BeamID: int) -> int: ...
    def BeamMainStl(self, BeamID: int) -> int: ...
    def BeamHoopStl(self, BeamID: int) -> int: ...
    def BeamMianwai(self, BeamID: int) -> float: ...
    def BeamRigid(self, BeamID: int) -> Any: ...
    def BeamDKF(self, BeamID: int) -> Any: ...
    def BeamEcc(self, BeamID: int) -> Any: ...
    def BeamWallStlType(self, BeamID: int) -> int: ...
    def BeamHHZJXS(self, BeamID: int) -> float: ...
    def BeamHHGEXS(self, BeamID: int) -> float: ...
    def BeamCustZJXS(self, BeamID: int, lcID: int) -> Any: ...
    def BeamZHLData(self, BeamID: int) -> Any: ...
    def BeamZHLDataEx(self, BeamID: int) -> Any: ...
    def BeamZHLDataSup(self, BeamID: int) -> Any: ...
    def BeamZHLBar(self, BeamID: int) -> Any: ...
    def BeamZHLHBar(self, BeamID: int) -> Any: ...
    def BeamZHLCStl(self, BeamID: int) -> Any: ...
    def IsBeamEnvelope(self, gjID: int) -> int: ...
    def BeamEta(self, BeamID: int) -> float: ...
    def IsBeamAd(self, BeamID: int) -> int: ...
    def BeamPerformType(self, BeamID: int) -> int: ...
    def BeamSpaceType(self, BeamID: int) -> Any: ...
    def IsBeamSolid(self, BeamID: int) -> int: ...
    def BeamStlBH(self, BeamID: int) -> Any: ...
    def BeamAHw(self, BeamID: int) -> float: ...
    def BeamLoad(self, BeamID: int) -> Any: ...
    def BeamPerLvl(self, BeamID: int) -> Any: ...
    def BeamSTHaoneng(self, BeamID: int) -> int: ...
    def BeamSTKHB(self, BeamID: int) -> int: ...
    def BeamSTYanxing(self, BeamID: int) -> int: ...
    def BeamSTBetae(self, BeamID: int) -> float: ...
    def BeamRigCoef(self, BeamID: int) -> Any: ...
    def BeamTemp(self, BeamID: int) -> list: ...
    def BeamFirePara(self, BeamID: int) -> Any: ...
    def BeamDuct(self, BeamID: int) -> int: ...
    def BeamGama0(self, BeamID: int) -> float: ...
    def BeamXYYWD(self, BeamID: int) -> int: ...
    def IsBeamRoofKey(self, BeamID: int) -> int: ...
    def BeamCPXS(self, BeamID: int) -> float: ...
    def BeamKHBMax(self, BeamID: int) -> Any: ...
    def BeamIsoType(self, BeamID: int) -> int: ...
    def BeamIsoZd(self, BeamID: int) -> int: ...
    def BeamSafe(self, BeamID: int) -> Any: ...
    def NColumn(self, iFlr: int) -> int: ...
    def FlrColumns(self, iFlr: int) -> Any: ...
    def ColumnFlr(self, ColumnID: int) -> int: ...
    def ColumnTow(self, ColumnID: int) -> int: ...
    def QFColumnTow(self, ColumnID: int) -> int: ...
    def ColumnIDInFlr(self, ColumnID: int) -> int: ...
    def ColumnOFlr(self, ColumnID: int) -> int: ...
    def ColumnONO(self, ColumnID: int) -> int: ...
    def ColumnOLX(self, ColumnID: int) -> int: ...
    def ColumnJD(self, ColumnID: int) -> Any: ...
    def ColumnMat(self, ColumnID: int) -> Any: ...
    def ColumnCorStl(self, ColumnID: int) -> int: ...
    def ColumnKZDJ(self, ColumnID: int) -> int: ...
    def ColumnCL(self, ColumnID: int) -> Any: ...
    def ColumnBK(self, ColumnID: int) -> int: ...
    def ColumnUpFlrN(self, ColumnID: int) -> int: ...
    def ColumnStlCover(self, ColumnID: int) -> int: ...
    def ColumnMainStl(self, ColumnID: int) -> int: ...
    def ColumnHoopStl(self, ColumnID: int) -> int: ...
    def ColumnRigid(self, ColumnID: int) -> Any: ...
    def ColumnEcc(self, ColumnID: int) -> Any: ...
    def ColumnShear(self, ColumnID: int) -> Any: ...
    def ColumnZYBZJ(self, ColumnID: int) -> float: ...
    def ColumnSupBeam(self, ColumnID: int) -> int: ...
    def ColumnHHZJXS(self, ColumnID: int) -> float: ...
    def ColumnHHGEXS(self, ColumnID: int) -> float: ...
    def IsColmEnvelope(self, gjID: int) -> int: ...
    def ColumnEta(self, ColumnID: int) -> float: ...
    def IsColumnAd(self, ColumnID: int) -> int: ...
    def ColumnPerformType(self, ColumnID: int) -> int: ...
    def ColumnSpaceType(self, ColumnID: int) -> Any: ...
    def IsColumnSolid(self, ColumnID: int) -> int: ...
    def IsColumnVE(self, ColumnID: int) -> int: ...
    def ColumnAHw(self, ColumnID: int) -> float: ...
    def ColumnTemp(self, ColumnID: int, temp: list[float]) -> list: ...
    def ColumnLoad(self, ColumnID: int) -> Any: ...
    def ColumnPerLvl(self, ColumnID: int) -> Any: ...
    def ColumnSTHaoneng(self, ColumnID: int) -> int: ...
    def ColumnSTKHB(self, ColumnID: int) -> int: ...
    def ColumnSTYanxing(self, ColumnID: int) -> int: ...
class YJKSPrePy_JSCS:
    def SetSParInt(self, paraID: int, val: int) -> None: ...
    def SetSParFloat(self, paraID: int, val: float) -> None: ...
    def SetSParIntArray(self, paraID: int, val: list) -> None: ...
    def SetSParFloatArray(self, paraID: int, val: list) -> None: ...
    def SParaSave(self) -> None: ...
    def GetSParaInt(self, paraID: int) -> str: ...
    def GetSParaFlt(self, paraID: int) -> str: ...
    def GetSParaStr(self, paraID: int) -> str: ...
    def GetSParaFltArray(self, paraID: int) -> list: ...
    def GetSParaIntArray(self, paraID: int) -> list: ...
    def yjkSParaFileReload(self) -> None: ...
class YJKSPrePy_Tower:
    def Init(self) -> None: ...
    def Load(self) -> None: ...
    def Save(self) -> None: ...
    def AddTower(self, tow: Mdl_STowExp, zrc: int) -> None: ...
    def GetTower(self, zrc: int, tow: int) -> Mdl_STowExp: ...
    def SetSTowExp(self, tow: Mdl_STowExp) -> None: ...
    def SetCompOrder(self, zrcId: int, compId: int, order: int) -> None: ...
    def GetCompOrder(self, zrcId: int, compId: int) -> int: ...
    def AutoGen(self) -> None: ...
    def GetTowNO(self) -> int: ...
    def GetFzTower(self, zrcId: int) -> list: ...
class YJKSPrePy_Temperature:
    def UniTemp(self, fTemp1: float, fTemp2: float) -> None: ...
    def Load(self) -> None: ...
    def Save(self) -> None: ...
    def Clear(self) -> None: ...
class YJKSUIPy:
    def QRunCommandEx(self, lpszCmdString: str, lpCmdParam: str) -> bool: ...
    def QRunCommandEx(self, lpszCmdString: str, ydbPath: str, projPath: str) -> bool: ...
    def QSetCurrentRibbonLabel(self, lpszCurLabelIDString: str) -> bool: ...
    def QViewSetCursorPos(self, x: int, y: int) -> bool: ...
    def QSetRunScript(self, bScript: int) -> bool: ...
    def GetScriptParam(self) -> str: ...
    def QGetAppPath(self) -> str: ...
    def yjkConcretStat(self, bJsgz: list, SteelDensity: float, iOutKind: int, iResKind: int, bOpenFile: int) -> None: ...
    def CheckCmdByName(self, strName: str) -> bool: ...
class YJKSCommandPy:
    def RefPrint(self, lpszPrompt: str) -> bool: ...
    def RunCommand(self, cmdName: str) -> bool: ...
    def GetCurrentPath(self) -> str: ...