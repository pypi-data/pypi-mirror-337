{
    // Files: exclude unwanted files/folders from Explorer
    "files.exclude": {
        "**/._*": true,
        "**/*.pyc": {
            "when": "$(basename).py"
        },
        ".coverage.*": true,
        ".mypy_cache": true,
        "**/__pycache__": true,
        ".direnv": true,
        ".idea": true,
        ".run": true,
        "**/.pytest_cache": true,
        ".cache": true,
        ".auto_pytabs_cache": true,
        ".angular": true,
        ".ruff_cache": true,
        ".astro": true,
        ".unasyncd_cache": true,
        ".coverage": true,
        ".terraform": true,
        ".logfire": true,
        ".zed": true
    },
    // Files: exclude from file watching (improved node_modules pattern)
    "files.watcherExclude": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/node_modules/**": true,
        "**/.direnv/**/*": true,
        "**/.venv/**/*": true,
        "app/domain/web/public/**/*": true
    },
    // Auto save configuration for a smoother experience
    "files.autoSave": "afterDelay",
    "files.autoSaveDelay": 2000,
    // Editor settings: formatting and code actions on save
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
        "source.fixAll.ruff": "always",
        "source.organizeImports": "always",
        "source.unusedImports": "always"
    },
    "editor.defaultFormatter": "charliermarsh.ruff",
    "editor.defaultFoldingRangeProvider": "charliermarsh.ruff",
    // Notebook settings
    "notebook.formatOnSave.enabled": true,
    "notebook.defaultFormatter": "charliermarsh.ruff",
    // Even Better TOML formatting settings
    "evenBetterToml.formatter.reorderKeys": true,
    "evenBetterToml.formatter.trailingNewline": true,
    "evenBetterToml.formatter.columnWidth": 120,
    "evenBetterToml.formatter.arrayAutoCollapse": true,
    // Explorer: file nesting patterns for related files
    "explorer.fileNesting.patterns": {
        "pyproject.toml": "pyproject.toml,poetry.lock,poetry.toml,mkdocs.yaml,.gcloudignore,.gitignore,.editorconfig,.bumpversion.cfg,.pylintrc,.pre-commit-config.yaml,LICENSE,mkdocs.yml,service_account.json,.pdm-python,pdm.lock,uv.lock,requirements.txt,sonar-project.properties,railway.json",
        ".env": ".env*,.*.env",
        "docker-compose.yml": "docker-compose.yml, .dockerignore, docker-compose.*.yml, docker-compose.*.yaml",
        "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, bun.lockb, tsconfig.*.json, tsconfig.json, .stylelintrc.json,angular.json,proxy.conf.json,cypress.*.ts,extra-webpack*.cjs,.eslintrc.json, tailwind.config.*, vite.config.ts, postcss.config.*, components.json, .prettierignore, .prettierrc.json, .eslintrc.cjs"
    },
    // Markdownlint settings: run on save with custom rules
    "markdownlint.run": "onSave",
    "markdownlint.config": {
        "default": true,
        "MD046": {
            "style": "fenced"
        },
        "MD007": {
            "indent": 4
        },
        "no-hard-tabs": false
    },
    // YAML: schema and custom tag configurations
    "yaml.schemas": {
        "https://squidfunk.github.io/mkdocs-material/schema.json": "mkdocs.yml"
    },
    "yaml.customTags": [
        "!ENV scalar",
        "!ENV sequence",
        "!relative scalar",
        "tag:yaml.org,2002:python/name:material.extensions.emoji.to_svg",
        "tag:yaml.org,2002:python/name:material.extensions.emoji.twemoji",
        "tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format"
    ],
    // NPM configuration
    "npm.runSilent": true,
    // Ruff linter/formatter settings
    "ruff.format.preview": true,
    "ruff.lint.preview": true,
    "ruff.lint.select": ["ALL"],
    // "ruff.format.args": ["--config=pyproject.toml"],
    // Python analysis and testing settings
    "python.analysis.autoImportCompletions": true,
    "python.analysis.autoFormatStrings": true,
    "python.analysis.regenerateStdLibIndices": true,
    "python.analysis.generateWithTypeAnnotation": true,
    "python.analysis.includeAliasesFromUserFiles": true,
    "python.analysis.supportDocstringTemplate": true,
    "python.analysis.supportRestructuredText": true,
    "python.analysis.typeCheckingMode": "standard",
    "python.analysis.completeFunctionParens": true,
    "python.analysis.languageServerMode": "full",
    "python.analysis.experimentalserver": true,
    "python.testing.autoTestDiscoverOnSaveEnabled": true,
    "python.testing.pytestEnabled": true,
    "debugpy.showPythonInlineValues": true,
    "python.terminal.shellIntegration.enabled": true,
    // Mypy type checker settings
    "mypy-type-checker.preferDaemon": true,
    "mypy-type-checker.reportingScope": "file",
    "mypy-type-checker.importStrategy": "fromEnvironment",
    // Language-specific settings for Python
    "[python]": {
        "editor.formatOnSave": true,
        "editor.formatOnSaveMode": "file",
        "editor.trimAutoWhitespace": true,
        "editor.defaultFormatter": "charliermarsh.ruff",
        "editor.codeActionsOnSave": {
            "source.fixAll": "explicit",
            "source.organizeImports": "explicit"
        }
    },
    // Formatter settings for TOML files
    // "[toml]": {
    //   "editor.defaultFormatter": "tamasfe.even-better-toml"
    // },
    // Formatter settings for CSS files
    "[css]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    // Formatter settings for JSONC files
    "[jsonc]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "[toml]": {
        "editor.defaultFormatter": "tamasfe.even-better-toml"
    },
    "[markdown]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    }
}
