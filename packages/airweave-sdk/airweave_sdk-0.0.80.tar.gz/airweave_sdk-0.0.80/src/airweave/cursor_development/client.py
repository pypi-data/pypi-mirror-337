# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from ..types.connection import Connection
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.sync_job import SyncJob
from ..core.client_wrapper import AsyncClientWrapper


class CursorDevelopmentClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def check_connection_status(
        self, short_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Connection]:
        """
        Check if a source connection exists for the given short_name.

        Args:
        -----
            db: The database session
            short_name: The short name of the source to check
            user: The admin user

        Returns:
        --------
            List[schemas.Connection]: List of source connections for the given short_name

        Parameters
        ----------
        short_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Connection]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.cursor_development.check_connection_status(
            short_name="short_name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"cursor-dev/connections/status/{jsonable_encoder(short_name)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Connection],
                    parse_obj_as(
                        type_=typing.List[Connection],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def test_sync(self, short_name: str, *, request_options: typing.Optional[RequestOptions] = None) -> SyncJob:
        """
        Run a sync for a specific source by short_name.

        This endpoint is used for testing source integrations during development.
        It finds the first available source connection for the given short_name and
        runs a sync on it.

        Args:
        -----
            db: The database session
            short_name: The short name of the source to sync
            background_tasks: The background tasks
            user: The admin user

        Returns:
        --------
            schemas.SyncJob: The created sync job

        Parameters
        ----------
        short_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncJob
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.cursor_development.test_sync(
            short_name="short_name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"cursor-dev/test-sync/{jsonable_encoder(short_name)}",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncJob,
                    parse_obj_as(
                        type_=SyncJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCursorDevelopmentClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def check_connection_status(
        self, short_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Connection]:
        """
        Check if a source connection exists for the given short_name.

        Args:
        -----
            db: The database session
            short_name: The short name of the source to check
            user: The admin user

        Returns:
        --------
            List[schemas.Connection]: List of source connections for the given short_name

        Parameters
        ----------
        short_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Connection]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.cursor_development.check_connection_status(
                short_name="short_name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"cursor-dev/connections/status/{jsonable_encoder(short_name)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Connection],
                    parse_obj_as(
                        type_=typing.List[Connection],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def test_sync(self, short_name: str, *, request_options: typing.Optional[RequestOptions] = None) -> SyncJob:
        """
        Run a sync for a specific source by short_name.

        This endpoint is used for testing source integrations during development.
        It finds the first available source connection for the given short_name and
        runs a sync on it.

        Args:
        -----
            db: The database session
            short_name: The short name of the source to sync
            background_tasks: The background tasks
            user: The admin user

        Returns:
        --------
            schemas.SyncJob: The created sync job

        Parameters
        ----------
        short_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncJob
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.cursor_development.test_sync(
                short_name="short_name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"cursor-dev/test-sync/{jsonable_encoder(short_name)}",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SyncJob,
                    parse_obj_as(
                        type_=SyncJob,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
