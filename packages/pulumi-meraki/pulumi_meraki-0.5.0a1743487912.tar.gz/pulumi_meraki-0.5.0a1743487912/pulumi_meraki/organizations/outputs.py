# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ActionBatchesAction',
    'ActionBatchesCallback',
    'ActionBatchesCallbackHttpServer',
    'ActionBatchesCallbackPayloadTemplate',
    'ActionBatchesStatus',
    'ActionBatchesStatusCreatedResource',
    'AdaptivePolicyAclsRule',
    'AdaptivePolicyGroupsPolicyObject',
    'AdaptivePolicyPoliciesAcl',
    'AdaptivePolicyPoliciesDestinationGroup',
    'AdaptivePolicyPoliciesSourceGroup',
    'AdminsNetwork',
    'AdminsTag',
    'AlertsProfilesAlertCondition',
    'AlertsProfilesRecipients',
    'ApplianceSecurityIntrusionAllowedRule',
    'ApplianceVpnThirdPartyVpnpeersPeer',
    'ApplianceVpnThirdPartyVpnpeersPeerIpsecPolicies',
    'ApplianceVpnThirdPartyVpnpeersPeersResponse',
    'ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPolicies',
    'ApplianceVpnVpnFirewallRulesRule',
    'BrandingPoliciesAdminSettings',
    'BrandingPoliciesCustomLogo',
    'BrandingPoliciesCustomLogoImage',
    'BrandingPoliciesCustomLogoImagePreview',
    'BrandingPoliciesHelpSettings',
    'CameraCustomAnalyticsArtifactsStatus',
    'CameraRolesAppliedOnDevice',
    'CameraRolesAppliedOnNetwork',
    'CameraRolesAppliedOrgWide',
    'ClaimItem',
    'ClaimItemLicense',
    'ClaimParameters',
    'ClaimParametersLicense',
    'CloneItem',
    'CloneItemApi',
    'CloneItemCloud',
    'CloneItemCloudRegion',
    'CloneItemLicensing',
    'CloneItemManagement',
    'CloneItemManagementDetail',
    'CloneParameters',
    'ConfigTemplatesSwitchProfilesPortsMirror',
    'ConfigTemplatesSwitchProfilesPortsModule',
    'ConfigTemplatesSwitchProfilesPortsProfile',
    'InventoryClaimItem',
    'InventoryClaimItemLicense',
    'InventoryClaimParameters',
    'InventoryClaimParametersLicense',
    'InventoryOnboardingCloudMonitoringExportEventsParameters',
    'InventoryOnboardingCloudMonitoringImportsParameters',
    'InventoryOnboardingCloudMonitoringImportsParametersDevice',
    'InventoryOnboardingCloudMonitoringImportsParametersItem',
    'InventoryOnboardingCloudMonitoringImportsParametersItemItem',
    'InventoryOnboardingCloudMonitoringPrepareItem',
    'InventoryOnboardingCloudMonitoringPrepareItemConfigParams',
    'InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnel',
    'InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificate',
    'InventoryOnboardingCloudMonitoringPrepareItemConfigParamsUser',
    'InventoryOnboardingCloudMonitoringPrepareItemConfigParamsUserSecret',
    'InventoryOnboardingCloudMonitoringPrepareParameters',
    'InventoryOnboardingCloudMonitoringPrepareParametersDevice',
    'InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnel',
    'InventoryOnboardingCloudMonitoringPrepareParametersDeviceUser',
    'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVty',
    'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessList',
    'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessListVtyIn',
    'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessListVtyOut',
    'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthentication',
    'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthenticationGroup',
    'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthorization',
    'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthorizationGroup',
    'InventoryReleaseItem',
    'InventoryReleaseParameters',
    'LicensesAssignSeatsItem',
    'LicensesAssignSeatsItemResultingLicense',
    'LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicense',
    'LicensesAssignSeatsParameters',
    'LicensesMoveItem',
    'LicensesMoveParameters',
    'LicensesMoveSeatsItem',
    'LicensesMoveSeatsParameters',
    'LicensesPermanentlyQueuedLicense',
    'LicensesRenewSeatsItem',
    'LicensesRenewSeatsItemResultingLicense',
    'LicensesRenewSeatsItemResultingLicensePermanentlyQueuedLicense',
    'LicensesRenewSeatsParameters',
    'LicensingCotermLicensesMoveItem',
    'LicensingCotermLicensesMoveItemMovedLicense',
    'LicensingCotermLicensesMoveItemMovedLicenseCount',
    'LicensingCotermLicensesMoveItemMovedLicenseEdition',
    'LicensingCotermLicensesMoveItemRemainderLicense',
    'LicensingCotermLicensesMoveItemRemainderLicenseCount',
    'LicensingCotermLicensesMoveItemRemainderLicenseEdition',
    'LicensingCotermLicensesMoveParameters',
    'LicensingCotermLicensesMoveParametersDestination',
    'LicensingCotermLicensesMoveParametersLicense',
    'LicensingCotermLicensesMoveParametersLicenseCount',
    'LoginSecurityApiAuthentication',
    'LoginSecurityApiAuthenticationIpRestrictionsForKeys',
    'NetworksCombineItem',
    'NetworksCombineItemResultingNetwork',
    'NetworksCombineParameters',
    'SamlRolesCamera',
    'SamlRolesNetwork',
    'SamlRolesTag',
    'SmSentryPoliciesAssignmentsItem',
    'SmSentryPoliciesAssignmentsItemItem',
    'SmSentryPoliciesAssignmentsItemItemPolicy',
    'SmSentryPoliciesAssignmentsParameters',
    'SmSentryPoliciesAssignmentsParametersItem',
    'SmSentryPoliciesAssignmentsParametersItemPolicy',
    'SwitchDevicesCloneParameters',
    'BaseApi',
    'BaseCloud',
    'BaseCloudRegion',
    'BaseLicensing',
    'BaseManagement',
    'BaseManagementDetail',
    'GetActionBatchesItemResult',
    'GetActionBatchesItemActionResult',
    'GetActionBatchesItemStatusResult',
    'GetActionBatchesItemStatusCreatedResourceResult',
    'GetAdaptivePolicyAclsItemResult',
    'GetAdaptivePolicyAclsItemRuleResult',
    'GetAdaptivePolicyGroupsItemResult',
    'GetAdaptivePolicyGroupsItemPolicyObjectResult',
    'GetAdaptivePolicyOverviewItemResult',
    'GetAdaptivePolicyOverviewItemCountsResult',
    'GetAdaptivePolicyOverviewItemLimitsResult',
    'GetAdaptivePolicyPoliciesItemResult',
    'GetAdaptivePolicyPoliciesItemAclResult',
    'GetAdaptivePolicyPoliciesItemDestinationGroupResult',
    'GetAdaptivePolicyPoliciesItemSourceGroupResult',
    'GetAdaptivePolicySettingsItemResult',
    'GetAdminsItemResult',
    'GetAdminsItemNetworkResult',
    'GetAdminsItemTagResult',
    'GetAlertsProfilesItemResult',
    'GetAlertsProfilesItemAlertConditionResult',
    'GetAlertsProfilesItemRecipientsResult',
    'GetApiRequestsItemResult',
    'GetApiRequestsOverviewItemResult',
    'GetApiRequestsOverviewItemResponseCodeCountsResult',
    'GetApiRequestsOverviewResponseCodesByIntervalItemResult',
    'GetApiRequestsOverviewResponseCodesByIntervalItemCountResult',
    'GetApplianceSecurityIntrusionItemResult',
    'GetApplianceSecurityIntrusionItemAllowedRuleResult',
    'GetApplianceTrafficShapingVpnExclusionsByNetworkItemResult',
    'GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemResult',
    'GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemCustomResult',
    'GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemMajorApplicationResult',
    'GetApplianceUplinksStatusesOverviewItemResult',
    'GetApplianceUplinksStatusesOverviewItemCountsResult',
    'GetApplianceUplinksStatusesOverviewItemCountsByStatusResult',
    'GetApplianceUplinksUsageByNetworkItemResult',
    'GetApplianceUplinksUsageByNetworkItemByUplinkResult',
    'GetApplianceVpnThirdPartyVpnpeersItemResult',
    'GetApplianceVpnThirdPartyVpnpeersItemPeerResult',
    'GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPoliciesResult',
    'GetApplianceVpnVpnFirewallRulesItemResult',
    'GetApplianceVpnVpnFirewallRulesItemRuleResult',
    'GetBrandingPoliciesItemResult',
    'GetBrandingPoliciesItemAdminSettingsResult',
    'GetBrandingPoliciesItemCustomLogoResult',
    'GetBrandingPoliciesItemCustomLogoImageResult',
    'GetBrandingPoliciesItemCustomLogoImagePreviewResult',
    'GetBrandingPoliciesItemHelpSettingsResult',
    'GetBrandingPoliciesPrioritiesItemResult',
    'GetCameraBoundariesAreasByDeviceItemResult',
    'GetCameraBoundariesAreasByDeviceItemBoundariesResult',
    'GetCameraBoundariesAreasByDeviceItemBoundariesVertexResult',
    'GetCameraBoundariesLinesByDeviceItemResult',
    'GetCameraBoundariesLinesByDeviceItemBoundariesResult',
    'GetCameraBoundariesLinesByDeviceItemBoundariesDirectionVertexResult',
    'GetCameraBoundariesLinesByDeviceItemBoundariesVertexResult',
    'GetCameraCustomAnalyticsArtifactsItemResult',
    'GetCameraCustomAnalyticsArtifactsItemStatusResult',
    'GetCameraDetectionsHistoryByBoundaryByIntervalItemResult',
    'GetCameraDetectionsHistoryByBoundaryByIntervalItemResultsResult',
    'GetCameraPermissionsItemResult',
    'GetCameraRolesItemResult',
    'GetCameraRolesItemAppliedOnDeviceResult',
    'GetCameraRolesItemAppliedOnNetworkResult',
    'GetCameraRolesItemAppliedOrgWideResult',
    'GetCellularGatewayUplinkStatusesItemResult',
    'GetCellularGatewayUplinkStatusesItemUplinkResult',
    'GetCellularGatewayUplinkStatusesItemUplinkSignalStatResult',
    'GetClientsBandwidthUsageHistoryItemResult',
    'GetClientsOverviewItemResult',
    'GetClientsOverviewItemCountsResult',
    'GetClientsOverviewItemUsageResult',
    'GetClientsOverviewItemUsageOverallResult',
    'GetClientsSearchItemResult',
    'GetClientsSearchItemRecordResult',
    'GetClientsSearchItemRecordClientVpnConnectionResult',
    'GetClientsSearchItemRecordNetworkResult',
    'GetConfigTemplatesItemResult',
    'GetConfigTemplatesSwitchProfilesItemResult',
    'GetConfigTemplatesSwitchProfilesPortsItemResult',
    'GetConfigTemplatesSwitchProfilesPortsItemMirrorResult',
    'GetConfigTemplatesSwitchProfilesPortsItemModuleResult',
    'GetConfigTemplatesSwitchProfilesPortsItemProfileResult',
    'GetDevicesAvailabilitiesChangeHistoryItemResult',
    'GetDevicesAvailabilitiesChangeHistoryItemDetailsResult',
    'GetDevicesAvailabilitiesChangeHistoryItemDetailsNewsResult',
    'GetDevicesAvailabilitiesChangeHistoryItemDetailsOldResult',
    'GetDevicesAvailabilitiesChangeHistoryItemDeviceResult',
    'GetDevicesAvailabilitiesChangeHistoryItemNetworkResult',
    'GetDevicesAvailabilitiesItemResult',
    'GetDevicesAvailabilitiesItemNetworkResult',
    'GetDevicesBootsHistoryItemResult',
    'GetDevicesBootsHistoryItemNetworkResult',
    'GetDevicesBootsHistoryItemStartResult',
    'GetDevicesItemResult',
    'GetDevicesItemDetailResult',
    'GetDevicesPowerModulesStatusesByDeviceItemResult',
    'GetDevicesPowerModulesStatusesByDeviceItemNetworkResult',
    'GetDevicesPowerModulesStatusesByDeviceItemSlotResult',
    'GetDevicesProvisioningStatusesItemResult',
    'GetDevicesProvisioningStatusesItemNetworkResult',
    'GetDevicesStatusesItemResult',
    'GetDevicesStatusesItemComponentsResult',
    'GetDevicesStatusesItemComponentsPowerSupplyResult',
    'GetDevicesStatusesItemComponentsPowerSupplyPoeResult',
    'GetDevicesStatusesOverviewItemResult',
    'GetDevicesStatusesOverviewItemCountsResult',
    'GetDevicesStatusesOverviewItemCountsByStatusResult',
    'GetDevicesUplinksAddressesByDeviceItemResult',
    'GetDevicesUplinksAddressesByDeviceItemNetworkResult',
    'GetDevicesUplinksAddressesByDeviceItemUplinkResult',
    'GetDevicesUplinksAddressesByDeviceItemUplinkAddressResult',
    'GetDevicesUplinksAddressesByDeviceItemUplinkAddressPublicResult',
    'GetDevicesUplinksLossAndLatencyItemResult',
    'GetDevicesUplinksLossAndLatencyItemTimeSeriesResult',
    'GetEarlyAccessFeaturesItemResult',
    'GetEarlyAccessFeaturesItemDescriptionsResult',
    'GetEarlyAccessFeaturesOptInsItemResult',
    'GetEarlyAccessFeaturesOptInsItemLimitScopeToNetworkResult',
    'GetFirmwareUpgradesByDeviceItemResult',
    'GetFirmwareUpgradesByDeviceItemUpgradeResult',
    'GetFirmwareUpgradesByDeviceItemUpgradeFromVersionResult',
    'GetFirmwareUpgradesByDeviceItemUpgradeStagedResult',
    'GetFirmwareUpgradesByDeviceItemUpgradeStagedGroupResult',
    'GetFirmwareUpgradesByDeviceItemUpgradeToVersionResult',
    'GetFirmwareUpgradesItemResult',
    'GetFirmwareUpgradesItemFromVersionResult',
    'GetFirmwareUpgradesItemNetworkResult',
    'GetFirmwareUpgradesItemToVersionResult',
    'GetInsightApplicationsItemResult',
    'GetInsightApplicationsItemThresholdsResult',
    'GetInsightApplicationsItemThresholdsByNetworkResult',
    'GetInsightMonitoredMediaServersItemResult',
    'GetInventoryDevicesItemResult',
    'GetInventoryDevicesItemDetailResult',
    'GetInventoryOnboardingCloudMonitoringImportsItemResult',
    'GetInventoryOnboardingCloudMonitoringImportsItemDeviceResult',
    'GetInventoryOnboardingCloudMonitoringNetworksItemResult',
    'GetLicensesItemResult',
    'GetLicensesItemPermanentlyQueuedLicenseResult',
    'GetLicensesOverviewItemResult',
    'GetLicensesOverviewItemLicenseTypeResult',
    'GetLicensesOverviewItemLicenseTypeCountsResult',
    'GetLicensesOverviewItemStatesResult',
    'GetLicensesOverviewItemStatesActiveResult',
    'GetLicensesOverviewItemStatesExpiredResult',
    'GetLicensesOverviewItemStatesExpiringResult',
    'GetLicensesOverviewItemStatesExpiringCriticalResult',
    'GetLicensesOverviewItemStatesExpiringWarningResult',
    'GetLicensesOverviewItemStatesRecentlyQueuedResult',
    'GetLicensesOverviewItemStatesUnusedResult',
    'GetLicensesOverviewItemStatesUnusedActiveResult',
    'GetLicensesOverviewItemStatesUnusedActiveOldestActivationResult',
    'GetLicensesOverviewItemStatesUnusedSoonestActivationResult',
    'GetLicensesOverviewItemSystemsManagerResult',
    'GetLicensesOverviewItemSystemsManagerCountsResult',
    'GetLicensingCotermLicensesItemResult',
    'GetLicensingCotermLicensesItemCountResult',
    'GetLicensingCotermLicensesItemEditionResult',
    'GetLoginSecurityItemResult',
    'GetLoginSecurityItemApiAuthenticationResult',
    'GetLoginSecurityItemApiAuthenticationIpRestrictionsForKeysResult',
    'GetOpenapiSpecItemResult',
    'GetOpenapiSpecItemInfoResult',
    'GetOpenapiSpecItemPathsResult',
    'GetOpenapiSpecItemPathsOrganizationsResult',
    'GetOpenapiSpecItemPathsOrganizationsGetResult',
    'GetOpenapiSpecItemPathsOrganizationsGetResponsesResult',
    'GetOpenapiSpecItemPathsOrganizationsGetResponsesStatus200Result',
    'GetOpenapiSpecItemPathsOrganizationsGetResponsesStatus200ExamplesResult',
    'GetOpenapiSpecItemPathsOrganizationsGetResponsesStatus200ExamplesApplicationJsonResult',
    'GetPolicyObjectsGroupsItemResult',
    'GetPolicyObjectsItemResult',
    'GetSamlIdpsItemResult',
    'GetSamlItemResult',
    'GetSamlRolesItemResult',
    'GetSamlRolesItemCameraResult',
    'GetSamlRolesItemNetworkResult',
    'GetSamlRolesItemTagResult',
    'GetSensorReadingsHistoryItemResult',
    'GetSensorReadingsHistoryItemApparentPowerResult',
    'GetSensorReadingsHistoryItemBatteryResult',
    'GetSensorReadingsHistoryItemButtonResult',
    'GetSensorReadingsHistoryItemCo2Result',
    'GetSensorReadingsHistoryItemCurrentResult',
    'GetSensorReadingsHistoryItemDoorResult',
    'GetSensorReadingsHistoryItemDownstreamPowerResult',
    'GetSensorReadingsHistoryItemFrequencyResult',
    'GetSensorReadingsHistoryItemHumidityResult',
    'GetSensorReadingsHistoryItemIndoorAirQualityResult',
    'GetSensorReadingsHistoryItemNetworkResult',
    'GetSensorReadingsHistoryItemNoiseResult',
    'GetSensorReadingsHistoryItemNoiseAmbientResult',
    'GetSensorReadingsHistoryItemPm25Result',
    'GetSensorReadingsHistoryItemPowerFactorResult',
    'GetSensorReadingsHistoryItemRealPowerResult',
    'GetSensorReadingsHistoryItemRemoteLockoutSwitchResult',
    'GetSensorReadingsHistoryItemTemperatureResult',
    'GetSensorReadingsHistoryItemTvocResult',
    'GetSensorReadingsHistoryItemVoltageResult',
    'GetSensorReadingsHistoryItemWaterResult',
    'GetSensorReadingsLatestItemResult',
    'GetSensorReadingsLatestItemNetworkResult',
    'GetSensorReadingsLatestItemReadingResult',
    'GetSensorReadingsLatestItemReadingApparentPowerResult',
    'GetSensorReadingsLatestItemReadingBatteryResult',
    'GetSensorReadingsLatestItemReadingButtonResult',
    'GetSensorReadingsLatestItemReadingCo2Result',
    'GetSensorReadingsLatestItemReadingCurrentResult',
    'GetSensorReadingsLatestItemReadingDoorResult',
    'GetSensorReadingsLatestItemReadingDownstreamPowerResult',
    'GetSensorReadingsLatestItemReadingFrequencyResult',
    'GetSensorReadingsLatestItemReadingHumidityResult',
    'GetSensorReadingsLatestItemReadingIndoorAirQualityResult',
    'GetSensorReadingsLatestItemReadingNoiseResult',
    'GetSensorReadingsLatestItemReadingNoiseAmbientResult',
    'GetSensorReadingsLatestItemReadingPm25Result',
    'GetSensorReadingsLatestItemReadingPowerFactorResult',
    'GetSensorReadingsLatestItemReadingRealPowerResult',
    'GetSensorReadingsLatestItemReadingRemoteLockoutSwitchResult',
    'GetSensorReadingsLatestItemReadingTemperatureResult',
    'GetSensorReadingsLatestItemReadingTvocResult',
    'GetSensorReadingsLatestItemReadingVoltageResult',
    'GetSensorReadingsLatestItemReadingWaterResult',
    'GetSmAdminsRolesItemResult',
    'GetSmApnsCertItemResult',
    'GetSmSentryPoliciesAssignmentsByNetworkItemResult',
    'GetSmSentryPoliciesAssignmentsByNetworkItemItemResult',
    'GetSmSentryPoliciesAssignmentsByNetworkItemItemPolicyResult',
    'GetSmSentryPoliciesAssignmentsByNetworkItemMetaResult',
    'GetSmSentryPoliciesAssignmentsByNetworkItemMetaCountsResult',
    'GetSmSentryPoliciesAssignmentsByNetworkItemMetaCountsItemsResult',
    'GetSmVppAccountsItemResult',
    'GetSmVppAccountsItemParsedTokenResult',
    'GetSnmpItemResult',
    'GetSummaryTopAppliancesByUtilizationItemResult',
    'GetSummaryTopAppliancesByUtilizationItemNetworkResult',
    'GetSummaryTopAppliancesByUtilizationItemUtilizationResult',
    'GetSummaryTopAppliancesByUtilizationItemUtilizationAverageResult',
    'GetSummaryTopClientsByUsageItemResult',
    'GetSummaryTopClientsByUsageItemNetworkResult',
    'GetSummaryTopClientsByUsageItemUsageResult',
    'GetSummaryTopClientsManufacturersByUsageItemResult',
    'GetSummaryTopClientsManufacturersByUsageItemClientsResult',
    'GetSummaryTopClientsManufacturersByUsageItemClientsCountsResult',
    'GetSummaryTopClientsManufacturersByUsageItemUsageResult',
    'GetSummaryTopDevicesByUsageItemResult',
    'GetSummaryTopDevicesByUsageItemClientsResult',
    'GetSummaryTopDevicesByUsageItemClientsCountsResult',
    'GetSummaryTopDevicesByUsageItemNetworkResult',
    'GetSummaryTopDevicesByUsageItemUsageResult',
    'GetSummaryTopDevicesModelsByUsageItemResult',
    'GetSummaryTopDevicesModelsByUsageItemUsageResult',
    'GetSummaryTopNetworksByStatusItemResult',
    'GetSummaryTopNetworksByStatusItemClientsResult',
    'GetSummaryTopNetworksByStatusItemClientsCountsResult',
    'GetSummaryTopNetworksByStatusItemClientsUsageResult',
    'GetSummaryTopNetworksByStatusItemDevicesResult',
    'GetSummaryTopNetworksByStatusItemDevicesByProductTypeResult',
    'GetSummaryTopNetworksByStatusItemStatusesResult',
    'GetSummaryTopNetworksByStatusItemStatusesByProductTypeResult',
    'GetSummaryTopNetworksByStatusItemStatusesByProductTypeCountsResult',
    'GetSummaryTopSsidsByUsageItemResult',
    'GetSummaryTopSsidsByUsageItemClientsResult',
    'GetSummaryTopSsidsByUsageItemClientsCountsResult',
    'GetSummaryTopSsidsByUsageItemUsageResult',
    'GetSummaryTopSwitchesByEnergyUsageItemResult',
    'GetSummaryTopSwitchesByEnergyUsageItemNetworkResult',
    'GetSummaryTopSwitchesByEnergyUsageItemUsageResult',
    'GetSwitchPortsBySwitchItemResult',
    'GetSwitchPortsBySwitchItemNetworkResult',
    'GetSwitchPortsBySwitchItemPortResult',
    'GetUplinksStatusesItemResult',
    'GetUplinksStatusesItemHighAvailabilityResult',
    'GetUplinksStatusesItemUplinkResult',
    'GetUplinksStatusesItemUplinkSignalStatResult',
    'GetWebhooksCallbacksStatusesItemResult',
    'GetWebhooksCallbacksStatusesItemCreatedByResult',
    'GetWebhooksCallbacksStatusesItemWebhookResult',
    'GetWebhooksCallbacksStatusesItemWebhookHttpServerResult',
    'GetWebhooksCallbacksStatusesItemWebhookPayloadTemplateResult',
    'GetWebhooksLogsItemResult',
    'GetWirelessDevicesChannelUtilizationByDeviceItemResult',
    'GetWirelessDevicesChannelUtilizationByDeviceItemByBandResult',
    'GetWirelessDevicesChannelUtilizationByDeviceItemByBandNonWifiResult',
    'GetWirelessDevicesChannelUtilizationByDeviceItemByBandTotalResult',
    'GetWirelessDevicesChannelUtilizationByDeviceItemByBandWifiResult',
    'GetWirelessDevicesChannelUtilizationByDeviceItemNetworkResult',
    'GetWirelessDevicesChannelUtilizationByNetworkItemResult',
    'GetWirelessDevicesChannelUtilizationByNetworkItemByBandResult',
    'GetWirelessDevicesChannelUtilizationByNetworkItemByBandNonWifiResult',
    'GetWirelessDevicesChannelUtilizationByNetworkItemByBandTotalResult',
    'GetWirelessDevicesChannelUtilizationByNetworkItemByBandWifiResult',
    'GetWirelessDevicesChannelUtilizationByNetworkItemNetworkResult',
    'GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemResult',
    'GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandResult',
    'GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandNonWifiResult',
    'GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandTotalResult',
    'GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandWifiResult',
    'GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemNetworkResult',
    'GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemResult',
    'GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandResult',
    'GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandNonWifiResult',
    'GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandTotalResult',
    'GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandWifiResult',
    'GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemNetworkResult',
    'GetWirelessDevicesEthernetStatusesItemResult',
    'GetWirelessDevicesEthernetStatusesItemAggregationResult',
    'GetWirelessDevicesEthernetStatusesItemNetworkResult',
    'GetWirelessDevicesEthernetStatusesItemPortResult',
    'GetWirelessDevicesEthernetStatusesItemPortLinkNegotiationResult',
    'GetWirelessDevicesEthernetStatusesItemPortPoeResult',
    'GetWirelessDevicesEthernetStatusesItemPowerResult',
    'GetWirelessDevicesEthernetStatusesItemPowerAcResult',
    'GetWirelessDevicesEthernetStatusesItemPowerPoeResult',
    'GetWirelessDevicesPacketLossByClientItemResult',
    'GetWirelessDevicesPacketLossByClientItemClientResult',
    'GetWirelessDevicesPacketLossByClientItemDownstreamResult',
    'GetWirelessDevicesPacketLossByClientItemNetworkResult',
    'GetWirelessDevicesPacketLossByClientItemUpstreamResult',
    'GetWirelessDevicesPacketLossByDeviceItemResult',
    'GetWirelessDevicesPacketLossByDeviceItemDeviceResult',
    'GetWirelessDevicesPacketLossByDeviceItemDownstreamResult',
    'GetWirelessDevicesPacketLossByDeviceItemNetworkResult',
    'GetWirelessDevicesPacketLossByDeviceItemUpstreamResult',
    'GetWirelessDevicesPacketLossByNetworkItemResult',
    'GetWirelessDevicesPacketLossByNetworkItemDownstreamResult',
    'GetWirelessDevicesPacketLossByNetworkItemNetworkResult',
    'GetWirelessDevicesPacketLossByNetworkItemUpstreamResult',
]

@pulumi.output_type
class ActionBatchesAction(dict):
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 operation: Optional[str] = None,
                 resource: Optional[str] = None):
        """
        :param str body: Data provided in the body of the Action. Contents depend on the Action type
        :param str operation: The operation to be used by this action
        :param str resource: Unique identifier for the resource to be acted on
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        """
        Data provided in the body of the Action. Contents depend on the Action type
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        """
        The operation to be used by this action
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        """
        Unique identifier for the resource to be acted on
        """
        return pulumi.get(self, "resource")


@pulumi.output_type
class ActionBatchesCallback(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpServer":
            suggest = "http_server"
        elif key == "payloadTemplate":
            suggest = "payload_template"
        elif key == "sharedSecret":
            suggest = "shared_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionBatchesCallback. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionBatchesCallback.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionBatchesCallback.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_server: Optional['outputs.ActionBatchesCallbackHttpServer'] = None,
                 id: Optional[str] = None,
                 payload_template: Optional['outputs.ActionBatchesCallbackPayloadTemplate'] = None,
                 shared_secret: Optional[str] = None,
                 status: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param 'ActionBatchesCallbackHttpServerArgs' http_server: The webhook receiver used for the callback webhook.
        :param str id: The ID of the callback. To check the status of the callback, use this ID in a request to /webhooks/callbacks/statuses/{id}
        :param 'ActionBatchesCallbackPayloadTemplateArgs' payload_template: The payload template of the webhook used for the callback
        :param str shared_secret: A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        :param str status: The status of the callback
        :param str url: The callback URL for the webhook target. This was either provided in the original request or comes from a configured webhook receiver
        """
        if http_server is not None:
            pulumi.set(__self__, "http_server", http_server)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if payload_template is not None:
            pulumi.set(__self__, "payload_template", payload_template)
        if shared_secret is not None:
            pulumi.set(__self__, "shared_secret", shared_secret)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="httpServer")
    def http_server(self) -> Optional['outputs.ActionBatchesCallbackHttpServer']:
        """
        The webhook receiver used for the callback webhook.
        """
        return pulumi.get(self, "http_server")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the callback. To check the status of the callback, use this ID in a request to /webhooks/callbacks/statuses/{id}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="payloadTemplate")
    def payload_template(self) -> Optional['outputs.ActionBatchesCallbackPayloadTemplate']:
        """
        The payload template of the webhook used for the callback
        """
        return pulumi.get(self, "payload_template")

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> Optional[str]:
        """
        A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        """
        return pulumi.get(self, "shared_secret")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the callback
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The callback URL for the webhook target. This was either provided in the original request or comes from a configured webhook receiver
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ActionBatchesCallbackHttpServer(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The webhook receiver ID that will receive information. If specifying this, please leave the url and sharedSecret fields blank.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ActionBatchesCallbackPayloadTemplate(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the payload template. Defaults to 'wpt_00005' for the Callback (included) template.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ActionBatchesStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdResources":
            suggest = "created_resources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionBatchesStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionBatchesStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionBatchesStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 completed: Optional[bool] = None,
                 created_resources: Optional[Sequence['outputs.ActionBatchesStatusCreatedResource']] = None,
                 errors: Optional[Sequence[str]] = None,
                 failed: Optional[bool] = None):
        """
        :param bool completed: Flag describing whether all actions in the action batch have completed
        :param Sequence['ActionBatchesStatusCreatedResourceArgs'] created_resources: Resources created as a result of this action batch
        :param Sequence[str] errors: List of errors encountered when running actions in the action batch
        :param bool failed: Flag describing whether any actions in the action batch failed
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if created_resources is not None:
            pulumi.set(__self__, "created_resources", created_resources)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)

    @property
    @pulumi.getter
    def completed(self) -> Optional[bool]:
        """
        Flag describing whether all actions in the action batch have completed
        """
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="createdResources")
    def created_resources(self) -> Optional[Sequence['outputs.ActionBatchesStatusCreatedResource']]:
        """
        Resources created as a result of this action batch
        """
        return pulumi.get(self, "created_resources")

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence[str]]:
        """
        List of errors encountered when running actions in the action batch
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Flag describing whether any actions in the action batch failed
        """
        return pulumi.get(self, "failed")


@pulumi.output_type
class ActionBatchesStatusCreatedResource(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 uri: Optional[str] = None):
        """
        :param str id: ID of the created resource
        :param str uri: URI, not including base, of the created resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the created resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        URI, not including base, of the created resource
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class AdaptivePolicyAclsRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstPort":
            suggest = "dst_port"
        elif key == "srcPort":
            suggest = "src_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdaptivePolicyAclsRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdaptivePolicyAclsRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdaptivePolicyAclsRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_port: Optional[str] = None,
                 policy: Optional[str] = None,
                 protocol: Optional[str] = None,
                 src_port: Optional[str] = None):
        """
        :param str dst_port: Destination port
        :param str policy: 'allow' or 'deny' traffic specified by this rule
        :param str protocol: The type of protocol
        :param str src_port: Source port
        """
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[str]:
        """
        Destination port
        """
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        """
        'allow' or 'deny' traffic specified by this rule
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The type of protocol
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[str]:
        """
        Source port
        """
        return pulumi.get(self, "src_port")


@pulumi.output_type
class AdaptivePolicyGroupsPolicyObject(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: The ID of the policy object
        :param str name: The name of the policy object
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the policy object
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the policy object
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AdaptivePolicyPoliciesAcl(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str id: The ID of the adaptive policy ACL
        :param str name: The name of the adaptive policy ACL
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the adaptive policy ACL
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the adaptive policy ACL
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AdaptivePolicyPoliciesDestinationGroup(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 sgt: Optional[int] = None):
        """
        :param str id: The ID of the destination adaptive policy group
        :param str name: The name of the destination adaptive policy group
        :param int sgt: The SGT of the destination adaptive policy group
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sgt is not None:
            pulumi.set(__self__, "sgt", sgt)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the destination adaptive policy group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the destination adaptive policy group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sgt(self) -> Optional[int]:
        """
        The SGT of the destination adaptive policy group
        """
        return pulumi.get(self, "sgt")


@pulumi.output_type
class AdaptivePolicyPoliciesSourceGroup(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 sgt: Optional[int] = None):
        """
        :param str id: The ID of the source adaptive policy group
        :param str name: The name of the source adaptive policy group
        :param int sgt: The SGT of the source adaptive policy group
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sgt is not None:
            pulumi.set(__self__, "sgt", sgt)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the source adaptive policy group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the source adaptive policy group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sgt(self) -> Optional[int]:
        """
        The SGT of the source adaptive policy group
        """
        return pulumi.get(self, "sgt")


@pulumi.output_type
class AdminsNetwork(dict):
    def __init__(__self__, *,
                 access: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str access: Admin's level of access to the network
        :param str id: Network ID
        """
        if access is not None:
            pulumi.set(__self__, "access", access)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        """
        Admin's level of access to the network
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Network ID
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AdminsTag(dict):
    def __init__(__self__, *,
                 access: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        :param str access: Access level for the tag
        :param str tag: Tag value
        """
        if access is not None:
            pulumi.set(__self__, "access", access)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        """
        Access level for the tag
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Tag value
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class AlertsProfilesAlertCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bitRateBps":
            suggest = "bit_rate_bps"
        elif key == "jitterMs":
            suggest = "jitter_ms"
        elif key == "latencyMs":
            suggest = "latency_ms"
        elif key == "lossRatio":
            suggest = "loss_ratio"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertsProfilesAlertCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertsProfilesAlertCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertsProfilesAlertCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bit_rate_bps: Optional[int] = None,
                 duration: Optional[int] = None,
                 interface: Optional[str] = None,
                 jitter_ms: Optional[int] = None,
                 latency_ms: Optional[int] = None,
                 loss_ratio: Optional[float] = None,
                 mos: Optional[float] = None,
                 window: Optional[int] = None):
        """
        :param int bit_rate_bps: The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts.
        :param int duration: The total duration in seconds that the threshold should be crossed before alerting
        :param str interface: The uplink observed for the alert
        :param int jitter_ms: The threshold the metric must cross to be valid for alerting. Used only for VoIP Jitter alerts.
        :param int latency_ms: The threshold the metric must cross to be valid for alerting. Used only for WAN Latency alerts.
        :param float loss_ratio: The threshold the metric must cross to be valid for alerting. Used only for Packet Loss alerts.
        :param float mos: The threshold the metric must drop below to be valid for alerting. Used only for VoIP MOS alerts.
        :param int window: The look back period in seconds for sensing the alert
        """
        if bit_rate_bps is not None:
            pulumi.set(__self__, "bit_rate_bps", bit_rate_bps)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if jitter_ms is not None:
            pulumi.set(__self__, "jitter_ms", jitter_ms)
        if latency_ms is not None:
            pulumi.set(__self__, "latency_ms", latency_ms)
        if loss_ratio is not None:
            pulumi.set(__self__, "loss_ratio", loss_ratio)
        if mos is not None:
            pulumi.set(__self__, "mos", mos)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter(name="bitRateBps")
    def bit_rate_bps(self) -> Optional[int]:
        """
        The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts.
        """
        return pulumi.get(self, "bit_rate_bps")

    @property
    @pulumi.getter
    def duration(self) -> Optional[int]:
        """
        The total duration in seconds that the threshold should be crossed before alerting
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        The uplink observed for the alert
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="jitterMs")
    def jitter_ms(self) -> Optional[int]:
        """
        The threshold the metric must cross to be valid for alerting. Used only for VoIP Jitter alerts.
        """
        return pulumi.get(self, "jitter_ms")

    @property
    @pulumi.getter(name="latencyMs")
    def latency_ms(self) -> Optional[int]:
        """
        The threshold the metric must cross to be valid for alerting. Used only for WAN Latency alerts.
        """
        return pulumi.get(self, "latency_ms")

    @property
    @pulumi.getter(name="lossRatio")
    def loss_ratio(self) -> Optional[float]:
        """
        The threshold the metric must cross to be valid for alerting. Used only for Packet Loss alerts.
        """
        return pulumi.get(self, "loss_ratio")

    @property
    @pulumi.getter
    def mos(self) -> Optional[float]:
        """
        The threshold the metric must drop below to be valid for alerting. Used only for VoIP MOS alerts.
        """
        return pulumi.get(self, "mos")

    @property
    @pulumi.getter
    def window(self) -> Optional[int]:
        """
        The look back period in seconds for sensing the alert
        """
        return pulumi.get(self, "window")


@pulumi.output_type
class AlertsProfilesRecipients(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpServerIds":
            suggest = "http_server_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertsProfilesRecipients. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertsProfilesRecipients.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertsProfilesRecipients.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 emails: Optional[Sequence[str]] = None,
                 http_server_ids: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] emails: A list of emails that will receive information about the alert
        :param Sequence[str] http_server_ids: A list base64 encoded urls of webhook endpoints that will receive information about the alert
        """
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if http_server_ids is not None:
            pulumi.set(__self__, "http_server_ids", http_server_ids)

    @property
    @pulumi.getter
    def emails(self) -> Optional[Sequence[str]]:
        """
        A list of emails that will receive information about the alert
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter(name="httpServerIds")
    def http_server_ids(self) -> Optional[Sequence[str]]:
        """
        A list base64 encoded urls of webhook endpoints that will receive information about the alert
        """
        return pulumi.get(self, "http_server_ids")


@pulumi.output_type
class ApplianceSecurityIntrusionAllowedRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleId":
            suggest = "rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceSecurityIntrusionAllowedRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceSecurityIntrusionAllowedRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceSecurityIntrusionAllowedRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message: Optional[str] = None,
                 rule_id: Optional[str] = None):
        """
        :param str message: Message is optional and is ignored on a PUT call. It is allowed in order for PUT to be compatible with GET
        :param str rule_id: A rule identifier of the format meraki:intrusion/snort/GID/\\n\\n/SID/\\n\\n. gid and sid can be obtained from either https://www.snort.org/rule-docs or as ruleIds from the security events in /organization/[orgId]/securityEvents
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is optional and is ignored on a PUT call. It is allowed in order for PUT to be compatible with GET
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        """
        A rule identifier of the format meraki:intrusion/snort/GID/\\n\\n/SID/\\n\\n. gid and sid can be obtained from either https://www.snort.org/rule-docs or as ruleIds from the security events in /organization/[orgId]/securityEvents
        """
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class ApplianceVpnThirdPartyVpnpeersPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ikeVersion":
            suggest = "ike_version"
        elif key == "ipsecPolicies":
            suggest = "ipsec_policies"
        elif key == "ipsecPoliciesPreset":
            suggest = "ipsec_policies_preset"
        elif key == "localId":
            suggest = "local_id"
        elif key == "networkTags":
            suggest = "network_tags"
        elif key == "privateSubnets":
            suggest = "private_subnets"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "remoteId":
            suggest = "remote_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceVpnThirdPartyVpnpeersPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceVpnThirdPartyVpnpeersPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceVpnThirdPartyVpnpeersPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ike_version: Optional[str] = None,
                 ipsec_policies: Optional['outputs.ApplianceVpnThirdPartyVpnpeersPeerIpsecPolicies'] = None,
                 ipsec_policies_preset: Optional[str] = None,
                 local_id: Optional[str] = None,
                 name: Optional[str] = None,
                 network_tags: Optional[Sequence[str]] = None,
                 private_subnets: Optional[Sequence[str]] = None,
                 public_ip: Optional[str] = None,
                 remote_id: Optional[str] = None,
                 secret: Optional[str] = None):
        """
        :param str ike_version: [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
        :param 'ApplianceVpnThirdPartyVpnpeersPeerIpsecPoliciesArgs' ipsec_policies: Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
        :param str ipsec_policies_preset: One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
        :param str local_id: [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
        :param str name: The name of the VPN peer
        :param Sequence[str] network_tags: A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
        :param Sequence[str] private_subnets: The list of the private subnets of the VPN peer
        :param str public_ip: [optional] The public IP of the VPN peer
        :param str remote_id: [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
        :param str secret: The shared secret with the VPN peer
        """
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if ipsec_policies is not None:
            pulumi.set(__self__, "ipsec_policies", ipsec_policies)
        if ipsec_policies_preset is not None:
            pulumi.set(__self__, "ipsec_policies_preset", ipsec_policies_preset)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_tags is not None:
            pulumi.set(__self__, "network_tags", network_tags)
        if private_subnets is not None:
            pulumi.set(__self__, "private_subnets", private_subnets)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if remote_id is not None:
            pulumi.set(__self__, "remote_id", remote_id)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[str]:
        """
        [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
        """
        return pulumi.get(self, "ike_version")

    @property
    @pulumi.getter(name="ipsecPolicies")
    def ipsec_policies(self) -> Optional['outputs.ApplianceVpnThirdPartyVpnpeersPeerIpsecPolicies']:
        """
        Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
        """
        return pulumi.get(self, "ipsec_policies")

    @property
    @pulumi.getter(name="ipsecPoliciesPreset")
    def ipsec_policies_preset(self) -> Optional[str]:
        """
        One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
        """
        return pulumi.get(self, "ipsec_policies_preset")

    @property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[str]:
        """
        [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
        """
        return pulumi.get(self, "local_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the VPN peer
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkTags")
    def network_tags(self) -> Optional[Sequence[str]]:
        """
        A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
        """
        return pulumi.get(self, "network_tags")

    @property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> Optional[Sequence[str]]:
        """
        The list of the private subnets of the VPN peer
        """
        return pulumi.get(self, "private_subnets")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        """
        [optional] The public IP of the VPN peer
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> Optional[str]:
        """
        [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
        """
        return pulumi.get(self, "remote_id")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        The shared secret with the VPN peer
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class ApplianceVpnThirdPartyVpnpeersPeerIpsecPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "childAuthAlgos":
            suggest = "child_auth_algos"
        elif key == "childCipherAlgos":
            suggest = "child_cipher_algos"
        elif key == "childLifetime":
            suggest = "child_lifetime"
        elif key == "childPfsGroups":
            suggest = "child_pfs_groups"
        elif key == "ikeAuthAlgos":
            suggest = "ike_auth_algos"
        elif key == "ikeCipherAlgos":
            suggest = "ike_cipher_algos"
        elif key == "ikeDiffieHellmanGroups":
            suggest = "ike_diffie_hellman_groups"
        elif key == "ikeLifetime":
            suggest = "ike_lifetime"
        elif key == "ikePrfAlgos":
            suggest = "ike_prf_algos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceVpnThirdPartyVpnpeersPeerIpsecPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceVpnThirdPartyVpnpeersPeerIpsecPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceVpnThirdPartyVpnpeersPeerIpsecPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 child_auth_algos: Optional[Sequence[str]] = None,
                 child_cipher_algos: Optional[Sequence[str]] = None,
                 child_lifetime: Optional[int] = None,
                 child_pfs_groups: Optional[Sequence[str]] = None,
                 ike_auth_algos: Optional[Sequence[str]] = None,
                 ike_cipher_algos: Optional[Sequence[str]] = None,
                 ike_diffie_hellman_groups: Optional[Sequence[str]] = None,
                 ike_lifetime: Optional[int] = None,
                 ike_prf_algos: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] child_auth_algos: This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
        :param Sequence[str] child_cipher_algos: This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
        :param int child_lifetime: The lifetime of the Phase 2 SA in seconds.
        :param Sequence[str] child_pfs_groups: This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
        :param Sequence[str] ike_auth_algos: This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
        :param Sequence[str] ike_cipher_algos: This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
        :param Sequence[str] ike_diffie_hellman_groups: This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
        :param int ike_lifetime: The lifetime of the Phase 1 SA in seconds.
        :param Sequence[str] ike_prf_algos: [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
        """
        if child_auth_algos is not None:
            pulumi.set(__self__, "child_auth_algos", child_auth_algos)
        if child_cipher_algos is not None:
            pulumi.set(__self__, "child_cipher_algos", child_cipher_algos)
        if child_lifetime is not None:
            pulumi.set(__self__, "child_lifetime", child_lifetime)
        if child_pfs_groups is not None:
            pulumi.set(__self__, "child_pfs_groups", child_pfs_groups)
        if ike_auth_algos is not None:
            pulumi.set(__self__, "ike_auth_algos", ike_auth_algos)
        if ike_cipher_algos is not None:
            pulumi.set(__self__, "ike_cipher_algos", ike_cipher_algos)
        if ike_diffie_hellman_groups is not None:
            pulumi.set(__self__, "ike_diffie_hellman_groups", ike_diffie_hellman_groups)
        if ike_lifetime is not None:
            pulumi.set(__self__, "ike_lifetime", ike_lifetime)
        if ike_prf_algos is not None:
            pulumi.set(__self__, "ike_prf_algos", ike_prf_algos)

    @property
    @pulumi.getter(name="childAuthAlgos")
    def child_auth_algos(self) -> Optional[Sequence[str]]:
        """
        This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
        """
        return pulumi.get(self, "child_auth_algos")

    @property
    @pulumi.getter(name="childCipherAlgos")
    def child_cipher_algos(self) -> Optional[Sequence[str]]:
        """
        This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
        """
        return pulumi.get(self, "child_cipher_algos")

    @property
    @pulumi.getter(name="childLifetime")
    def child_lifetime(self) -> Optional[int]:
        """
        The lifetime of the Phase 2 SA in seconds.
        """
        return pulumi.get(self, "child_lifetime")

    @property
    @pulumi.getter(name="childPfsGroups")
    def child_pfs_groups(self) -> Optional[Sequence[str]]:
        """
        This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
        """
        return pulumi.get(self, "child_pfs_groups")

    @property
    @pulumi.getter(name="ikeAuthAlgos")
    def ike_auth_algos(self) -> Optional[Sequence[str]]:
        """
        This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
        """
        return pulumi.get(self, "ike_auth_algos")

    @property
    @pulumi.getter(name="ikeCipherAlgos")
    def ike_cipher_algos(self) -> Optional[Sequence[str]]:
        """
        This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
        """
        return pulumi.get(self, "ike_cipher_algos")

    @property
    @pulumi.getter(name="ikeDiffieHellmanGroups")
    def ike_diffie_hellman_groups(self) -> Optional[Sequence[str]]:
        """
        This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
        """
        return pulumi.get(self, "ike_diffie_hellman_groups")

    @property
    @pulumi.getter(name="ikeLifetime")
    def ike_lifetime(self) -> Optional[int]:
        """
        The lifetime of the Phase 1 SA in seconds.
        """
        return pulumi.get(self, "ike_lifetime")

    @property
    @pulumi.getter(name="ikePrfAlgos")
    def ike_prf_algos(self) -> Optional[Sequence[str]]:
        """
        [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
        """
        return pulumi.get(self, "ike_prf_algos")


@pulumi.output_type
class ApplianceVpnThirdPartyVpnpeersPeersResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ikeVersion":
            suggest = "ike_version"
        elif key == "ipsecPolicies":
            suggest = "ipsec_policies"
        elif key == "ipsecPoliciesPreset":
            suggest = "ipsec_policies_preset"
        elif key == "localId":
            suggest = "local_id"
        elif key == "networkTags":
            suggest = "network_tags"
        elif key == "privateSubnets":
            suggest = "private_subnets"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "remoteId":
            suggest = "remote_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceVpnThirdPartyVpnpeersPeersResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceVpnThirdPartyVpnpeersPeersResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceVpnThirdPartyVpnpeersPeersResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ike_version: Optional[str] = None,
                 ipsec_policies: Optional['outputs.ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPolicies'] = None,
                 ipsec_policies_preset: Optional[str] = None,
                 local_id: Optional[str] = None,
                 name: Optional[str] = None,
                 network_tags: Optional[Sequence[str]] = None,
                 private_subnets: Optional[Sequence[str]] = None,
                 public_ip: Optional[str] = None,
                 remote_id: Optional[str] = None,
                 secret: Optional[str] = None):
        """
        :param str ike_version: [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
        :param 'ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPoliciesArgs' ipsec_policies: Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
        :param str ipsec_policies_preset: One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
        :param str local_id: [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
        :param str name: The name of the VPN peer
        :param Sequence[str] network_tags: A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
        :param Sequence[str] private_subnets: The list of the private subnets of the VPN peer
        :param str public_ip: [optional] The public IP of the VPN peer
        :param str remote_id: [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
        :param str secret: The shared secret with the VPN peer
        """
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if ipsec_policies is not None:
            pulumi.set(__self__, "ipsec_policies", ipsec_policies)
        if ipsec_policies_preset is not None:
            pulumi.set(__self__, "ipsec_policies_preset", ipsec_policies_preset)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_tags is not None:
            pulumi.set(__self__, "network_tags", network_tags)
        if private_subnets is not None:
            pulumi.set(__self__, "private_subnets", private_subnets)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if remote_id is not None:
            pulumi.set(__self__, "remote_id", remote_id)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[str]:
        """
        [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
        """
        return pulumi.get(self, "ike_version")

    @property
    @pulumi.getter(name="ipsecPolicies")
    def ipsec_policies(self) -> Optional['outputs.ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPolicies']:
        """
        Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
        """
        return pulumi.get(self, "ipsec_policies")

    @property
    @pulumi.getter(name="ipsecPoliciesPreset")
    def ipsec_policies_preset(self) -> Optional[str]:
        """
        One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
        """
        return pulumi.get(self, "ipsec_policies_preset")

    @property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[str]:
        """
        [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
        """
        return pulumi.get(self, "local_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the VPN peer
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkTags")
    def network_tags(self) -> Optional[Sequence[str]]:
        """
        A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
        """
        return pulumi.get(self, "network_tags")

    @property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> Optional[Sequence[str]]:
        """
        The list of the private subnets of the VPN peer
        """
        return pulumi.get(self, "private_subnets")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        """
        [optional] The public IP of the VPN peer
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> Optional[str]:
        """
        [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
        """
        return pulumi.get(self, "remote_id")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        The shared secret with the VPN peer
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "childAuthAlgos":
            suggest = "child_auth_algos"
        elif key == "childCipherAlgos":
            suggest = "child_cipher_algos"
        elif key == "childLifetime":
            suggest = "child_lifetime"
        elif key == "childPfsGroups":
            suggest = "child_pfs_groups"
        elif key == "ikeAuthAlgos":
            suggest = "ike_auth_algos"
        elif key == "ikeCipherAlgos":
            suggest = "ike_cipher_algos"
        elif key == "ikeDiffieHellmanGroups":
            suggest = "ike_diffie_hellman_groups"
        elif key == "ikeLifetime":
            suggest = "ike_lifetime"
        elif key == "ikePrfAlgos":
            suggest = "ike_prf_algos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 child_auth_algos: Optional[Sequence[str]] = None,
                 child_cipher_algos: Optional[Sequence[str]] = None,
                 child_lifetime: Optional[int] = None,
                 child_pfs_groups: Optional[Sequence[str]] = None,
                 ike_auth_algos: Optional[Sequence[str]] = None,
                 ike_cipher_algos: Optional[Sequence[str]] = None,
                 ike_diffie_hellman_groups: Optional[Sequence[str]] = None,
                 ike_lifetime: Optional[int] = None,
                 ike_prf_algos: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] child_auth_algos: This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
        :param Sequence[str] child_cipher_algos: This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
        :param int child_lifetime: The lifetime of the Phase 2 SA in seconds.
        :param Sequence[str] child_pfs_groups: This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
        :param Sequence[str] ike_auth_algos: This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
        :param Sequence[str] ike_cipher_algos: This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
        :param Sequence[str] ike_diffie_hellman_groups: This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
        :param int ike_lifetime: The lifetime of the Phase 1 SA in seconds.
        :param Sequence[str] ike_prf_algos: [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
        """
        if child_auth_algos is not None:
            pulumi.set(__self__, "child_auth_algos", child_auth_algos)
        if child_cipher_algos is not None:
            pulumi.set(__self__, "child_cipher_algos", child_cipher_algos)
        if child_lifetime is not None:
            pulumi.set(__self__, "child_lifetime", child_lifetime)
        if child_pfs_groups is not None:
            pulumi.set(__self__, "child_pfs_groups", child_pfs_groups)
        if ike_auth_algos is not None:
            pulumi.set(__self__, "ike_auth_algos", ike_auth_algos)
        if ike_cipher_algos is not None:
            pulumi.set(__self__, "ike_cipher_algos", ike_cipher_algos)
        if ike_diffie_hellman_groups is not None:
            pulumi.set(__self__, "ike_diffie_hellman_groups", ike_diffie_hellman_groups)
        if ike_lifetime is not None:
            pulumi.set(__self__, "ike_lifetime", ike_lifetime)
        if ike_prf_algos is not None:
            pulumi.set(__self__, "ike_prf_algos", ike_prf_algos)

    @property
    @pulumi.getter(name="childAuthAlgos")
    def child_auth_algos(self) -> Optional[Sequence[str]]:
        """
        This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
        """
        return pulumi.get(self, "child_auth_algos")

    @property
    @pulumi.getter(name="childCipherAlgos")
    def child_cipher_algos(self) -> Optional[Sequence[str]]:
        """
        This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
        """
        return pulumi.get(self, "child_cipher_algos")

    @property
    @pulumi.getter(name="childLifetime")
    def child_lifetime(self) -> Optional[int]:
        """
        The lifetime of the Phase 2 SA in seconds.
        """
        return pulumi.get(self, "child_lifetime")

    @property
    @pulumi.getter(name="childPfsGroups")
    def child_pfs_groups(self) -> Optional[Sequence[str]]:
        """
        This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
        """
        return pulumi.get(self, "child_pfs_groups")

    @property
    @pulumi.getter(name="ikeAuthAlgos")
    def ike_auth_algos(self) -> Optional[Sequence[str]]:
        """
        This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
        """
        return pulumi.get(self, "ike_auth_algos")

    @property
    @pulumi.getter(name="ikeCipherAlgos")
    def ike_cipher_algos(self) -> Optional[Sequence[str]]:
        """
        This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
        """
        return pulumi.get(self, "ike_cipher_algos")

    @property
    @pulumi.getter(name="ikeDiffieHellmanGroups")
    def ike_diffie_hellman_groups(self) -> Optional[Sequence[str]]:
        """
        This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
        """
        return pulumi.get(self, "ike_diffie_hellman_groups")

    @property
    @pulumi.getter(name="ikeLifetime")
    def ike_lifetime(self) -> Optional[int]:
        """
        The lifetime of the Phase 1 SA in seconds.
        """
        return pulumi.get(self, "ike_lifetime")

    @property
    @pulumi.getter(name="ikePrfAlgos")
    def ike_prf_algos(self) -> Optional[Sequence[str]]:
        """
        [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
        """
        return pulumi.get(self, "ike_prf_algos")


@pulumi.output_type
class ApplianceVpnVpnFirewallRulesRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destCidr":
            suggest = "dest_cidr"
        elif key == "destPort":
            suggest = "dest_port"
        elif key == "srcCidr":
            suggest = "src_cidr"
        elif key == "srcPort":
            suggest = "src_port"
        elif key == "syslogEnabled":
            suggest = "syslog_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplianceVpnVpnFirewallRulesRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplianceVpnVpnFirewallRulesRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplianceVpnVpnFirewallRulesRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 dest_cidr: Optional[str] = None,
                 dest_port: Optional[str] = None,
                 policy: Optional[str] = None,
                 protocol: Optional[str] = None,
                 src_cidr: Optional[str] = None,
                 src_port: Optional[str] = None,
                 syslog_enabled: Optional[bool] = None):
        """
        :param str comment: Description of the rule (optional)
        :param str dest_cidr: Comma-separated list of destination IP address(es) (in IP or CIDR notation), fully-qualified domain names (FQDN) or 'any'
        :param str dest_port: Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'
        :param str policy: 'allow' or 'deny' traffic specified by this rule
        :param str protocol: The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
        :param str src_cidr: Comma-separated list of source IP address(es) (in IP or CIDR notation), or 'any' (note: FQDN not supported for source addresses)
        :param str src_port: Comma-separated list of source port(s) (integer in the range 1-65535), or 'any'
        :param bool syslog_enabled: Log this rule to syslog (true or false, boolean value) - only applicable if a syslog has been configured (optional)
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dest_cidr is not None:
            pulumi.set(__self__, "dest_cidr", dest_cidr)
        if dest_port is not None:
            pulumi.set(__self__, "dest_port", dest_port)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_cidr is not None:
            pulumi.set(__self__, "src_cidr", src_cidr)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)
        if syslog_enabled is not None:
            pulumi.set(__self__, "syslog_enabled", syslog_enabled)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Description of the rule (optional)
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="destCidr")
    def dest_cidr(self) -> Optional[str]:
        """
        Comma-separated list of destination IP address(es) (in IP or CIDR notation), fully-qualified domain names (FQDN) or 'any'
        """
        return pulumi.get(self, "dest_cidr")

    @property
    @pulumi.getter(name="destPort")
    def dest_port(self) -> Optional[str]:
        """
        Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'
        """
        return pulumi.get(self, "dest_port")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        """
        'allow' or 'deny' traffic specified by this rule
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> Optional[str]:
        """
        Comma-separated list of source IP address(es) (in IP or CIDR notation), or 'any' (note: FQDN not supported for source addresses)
        """
        return pulumi.get(self, "src_cidr")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[str]:
        """
        Comma-separated list of source port(s) (integer in the range 1-65535), or 'any'
        """
        return pulumi.get(self, "src_port")

    @property
    @pulumi.getter(name="syslogEnabled")
    def syslog_enabled(self) -> Optional[bool]:
        """
        Log this rule to syslog (true or false, boolean value) - only applicable if a syslog has been configured (optional)
        """
        return pulumi.get(self, "syslog_enabled")


@pulumi.output_type
class BrandingPoliciesAdminSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appliesTo":
            suggest = "applies_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrandingPoliciesAdminSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrandingPoliciesAdminSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrandingPoliciesAdminSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applies_to: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str applies_to: Which kinds of admins this policy applies to. Can be one of 'All organization admins', 'All enterprise admins', 'All network admins', 'All admins of networks...', 'All admins of networks tagged...', 'Specific admins...', 'All admins' or 'All SAML admins'.
        :param Sequence[str] values: If 'appliesTo' is set to one of 'Specific admins...', 'All admins of networks...' or 'All admins of networks tagged...', then you must specify this 'values' property to provide the set of
                 entities to apply the branding policy to. For 'Specific admins...', specify an array of admin IDs. For 'All admins of
                 networks...', specify an array of network IDs and/or configuration template IDs. For 'All admins of networks tagged...',
                 specify an array of tag names.
        """
        if applies_to is not None:
            pulumi.set(__self__, "applies_to", applies_to)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="appliesTo")
    def applies_to(self) -> Optional[str]:
        """
        Which kinds of admins this policy applies to. Can be one of 'All organization admins', 'All enterprise admins', 'All network admins', 'All admins of networks...', 'All admins of networks tagged...', 'Specific admins...', 'All admins' or 'All SAML admins'.
        """
        return pulumi.get(self, "applies_to")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        If 'appliesTo' is set to one of 'Specific admins...', 'All admins of networks...' or 'All admins of networks tagged...', then you must specify this 'values' property to provide the set of
          entities to apply the branding policy to. For 'Specific admins...', specify an array of admin IDs. For 'All admins of
          networks...', specify an array of network IDs and/or configuration template IDs. For 'All admins of networks tagged...',
          specify an array of tag names.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class BrandingPoliciesCustomLogo(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 image: Optional['outputs.BrandingPoliciesCustomLogoImage'] = None):
        """
        :param bool enabled: Whether or not there is a custom logo enabled.
        :param 'BrandingPoliciesCustomLogoImageArgs' image: Properties of the image.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether or not there is a custom logo enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.BrandingPoliciesCustomLogoImage']:
        """
        Properties of the image.
        """
        return pulumi.get(self, "image")


@pulumi.output_type
class BrandingPoliciesCustomLogoImage(dict):
    def __init__(__self__, *,
                 contents: Optional[str] = None,
                 format: Optional[str] = None,
                 preview: Optional['outputs.BrandingPoliciesCustomLogoImagePreview'] = None):
        """
        :param str contents: The file contents (a base 64 encoded string) of your new logo.
        :param str format: The format of the encoded contents.  Supported formats are 'png', 'gif', and jpg'.
        :param 'BrandingPoliciesCustomLogoImagePreviewArgs' preview: Preview of the image
        """
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if preview is not None:
            pulumi.set(__self__, "preview", preview)

    @property
    @pulumi.getter
    def contents(self) -> Optional[str]:
        """
        The file contents (a base 64 encoded string) of your new logo.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        The format of the encoded contents.  Supported formats are 'png', 'gif', and jpg'.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def preview(self) -> Optional['outputs.BrandingPoliciesCustomLogoImagePreview']:
        """
        Preview of the image
        """
        return pulumi.get(self, "preview")


@pulumi.output_type
class BrandingPoliciesCustomLogoImagePreview(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiresAt":
            suggest = "expires_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrandingPoliciesCustomLogoImagePreview. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrandingPoliciesCustomLogoImagePreview.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrandingPoliciesCustomLogoImagePreview.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expires_at: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str expires_at: Timestamp of the preview image
        :param str url: Url of the preview image
        """
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[str]:
        """
        Timestamp of the preview image
        """
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        Url of the preview image
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class BrandingPoliciesHelpSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiDocsSubtab":
            suggest = "api_docs_subtab"
        elif key == "casesSubtab":
            suggest = "cases_subtab"
        elif key == "ciscoMerakiProductDocumentation":
            suggest = "cisco_meraki_product_documentation"
        elif key == "communitySubtab":
            suggest = "community_subtab"
        elif key == "dataProtectionRequestsSubtab":
            suggest = "data_protection_requests_subtab"
        elif key == "firewallInfoSubtab":
            suggest = "firewall_info_subtab"
        elif key == "getHelpSubtab":
            suggest = "get_help_subtab"
        elif key == "getHelpSubtabKnowledgeBaseSearch":
            suggest = "get_help_subtab_knowledge_base_search"
        elif key == "hardwareReplacementsSubtab":
            suggest = "hardware_replacements_subtab"
        elif key == "helpTab":
            suggest = "help_tab"
        elif key == "helpWidget":
            suggest = "help_widget"
        elif key == "newFeaturesSubtab":
            suggest = "new_features_subtab"
        elif key == "smForums":
            suggest = "sm_forums"
        elif key == "supportContactInfo":
            suggest = "support_contact_info"
        elif key == "universalSearchKnowledgeBaseSearch":
            suggest = "universal_search_knowledge_base_search"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrandingPoliciesHelpSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrandingPoliciesHelpSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrandingPoliciesHelpSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_docs_subtab: Optional[str] = None,
                 cases_subtab: Optional[str] = None,
                 cisco_meraki_product_documentation: Optional[str] = None,
                 community_subtab: Optional[str] = None,
                 data_protection_requests_subtab: Optional[str] = None,
                 firewall_info_subtab: Optional[str] = None,
                 get_help_subtab: Optional[str] = None,
                 get_help_subtab_knowledge_base_search: Optional[str] = None,
                 hardware_replacements_subtab: Optional[str] = None,
                 help_tab: Optional[str] = None,
                 help_widget: Optional[str] = None,
                 new_features_subtab: Optional[str] = None,
                 sm_forums: Optional[str] = None,
                 support_contact_info: Optional[str] = None,
                 universal_search_knowledge_base_search: Optional[str] = None):
        """
        :param str api_docs_subtab: The 'Help > API docs' subtab where a detailed description of the Dashboard API is listed. Can be one of
                 'default or inherit', 'hide' or 'show'.
        :param str cases_subtab: The 'Help > Cases' Dashboard subtab on which Cisco Meraki support cases for this organization can be managed. Can be one
                 of 'default or inherit', 'hide' or 'show'.
        :param str cisco_meraki_product_documentation: The 'Product Manuals' section of the 'Help > Get Help' subtab. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
        :param str community_subtab: The 'Help > Community' subtab which provides a link to Meraki Community. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str data_protection_requests_subtab: The 'Help > Data protection requests' Dashboard subtab on which requests to delete, restrict, or export end-user data can
                 be audited. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str firewall_info_subtab: The 'Help > Firewall info' subtab where necessary upstream firewall rules for communication to the Cisco Meraki cloud are
                 listed. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str get_help_subtab: The 'Help > Get Help' subtab on which Cisco Meraki KB, Product Manuals, and Support/Case Information are displayed. Note
                 that if this subtab is hidden, branding customizations for the KB on 'Get help', Cisco Meraki product documentation,
                 and support contact info will not be visible. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str get_help_subtab_knowledge_base_search: The KB search box which appears on the Help page. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
        :param str hardware_replacements_subtab: The 'Help > Replacement info' subtab where important information regarding device replacements is detailed. Can be one of
                 'default or inherit', 'hide' or 'show'.
        :param str help_tab: The Help tab, under which all support information resides. If this tab is hidden, no other 'Help' branding
                 customizations will be visible. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str help_widget: The 'Help Widget' is a support widget which provides access to live chat, documentation links, Sales contact info,
                 and other contact avenues to reach Meraki Support. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str new_features_subtab: The 'Help > New features' subtab where new Dashboard features are detailed. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str sm_forums: The 'SM Forums' subtab which links to community-based support for Cisco Meraki Systems Manager. Only configurable for
                 organizations that contain Systems Manager networks. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str support_contact_info: The 'Contact Meraki Support' section of the 'Help > Get Help' subtab. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
        :param str universal_search_knowledge_base_search: The universal search box always visible on Dashboard will, by default, present results from the Meraki KB. This configures
                 whether these Meraki KB results should be returned. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        if api_docs_subtab is not None:
            pulumi.set(__self__, "api_docs_subtab", api_docs_subtab)
        if cases_subtab is not None:
            pulumi.set(__self__, "cases_subtab", cases_subtab)
        if cisco_meraki_product_documentation is not None:
            pulumi.set(__self__, "cisco_meraki_product_documentation", cisco_meraki_product_documentation)
        if community_subtab is not None:
            pulumi.set(__self__, "community_subtab", community_subtab)
        if data_protection_requests_subtab is not None:
            pulumi.set(__self__, "data_protection_requests_subtab", data_protection_requests_subtab)
        if firewall_info_subtab is not None:
            pulumi.set(__self__, "firewall_info_subtab", firewall_info_subtab)
        if get_help_subtab is not None:
            pulumi.set(__self__, "get_help_subtab", get_help_subtab)
        if get_help_subtab_knowledge_base_search is not None:
            pulumi.set(__self__, "get_help_subtab_knowledge_base_search", get_help_subtab_knowledge_base_search)
        if hardware_replacements_subtab is not None:
            pulumi.set(__self__, "hardware_replacements_subtab", hardware_replacements_subtab)
        if help_tab is not None:
            pulumi.set(__self__, "help_tab", help_tab)
        if help_widget is not None:
            pulumi.set(__self__, "help_widget", help_widget)
        if new_features_subtab is not None:
            pulumi.set(__self__, "new_features_subtab", new_features_subtab)
        if sm_forums is not None:
            pulumi.set(__self__, "sm_forums", sm_forums)
        if support_contact_info is not None:
            pulumi.set(__self__, "support_contact_info", support_contact_info)
        if universal_search_knowledge_base_search is not None:
            pulumi.set(__self__, "universal_search_knowledge_base_search", universal_search_knowledge_base_search)

    @property
    @pulumi.getter(name="apiDocsSubtab")
    def api_docs_subtab(self) -> Optional[str]:
        """
        The 'Help > API docs' subtab where a detailed description of the Dashboard API is listed. Can be one of
          'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "api_docs_subtab")

    @property
    @pulumi.getter(name="casesSubtab")
    def cases_subtab(self) -> Optional[str]:
        """
        The 'Help > Cases' Dashboard subtab on which Cisco Meraki support cases for this organization can be managed. Can be one
          of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "cases_subtab")

    @property
    @pulumi.getter(name="ciscoMerakiProductDocumentation")
    def cisco_meraki_product_documentation(self) -> Optional[str]:
        """
        The 'Product Manuals' section of the 'Help > Get Help' subtab. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
        """
        return pulumi.get(self, "cisco_meraki_product_documentation")

    @property
    @pulumi.getter(name="communitySubtab")
    def community_subtab(self) -> Optional[str]:
        """
        The 'Help > Community' subtab which provides a link to Meraki Community. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "community_subtab")

    @property
    @pulumi.getter(name="dataProtectionRequestsSubtab")
    def data_protection_requests_subtab(self) -> Optional[str]:
        """
        The 'Help > Data protection requests' Dashboard subtab on which requests to delete, restrict, or export end-user data can
          be audited. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "data_protection_requests_subtab")

    @property
    @pulumi.getter(name="firewallInfoSubtab")
    def firewall_info_subtab(self) -> Optional[str]:
        """
        The 'Help > Firewall info' subtab where necessary upstream firewall rules for communication to the Cisco Meraki cloud are
          listed. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "firewall_info_subtab")

    @property
    @pulumi.getter(name="getHelpSubtab")
    def get_help_subtab(self) -> Optional[str]:
        """
        The 'Help > Get Help' subtab on which Cisco Meraki KB, Product Manuals, and Support/Case Information are displayed. Note
          that if this subtab is hidden, branding customizations for the KB on 'Get help', Cisco Meraki product documentation,
          and support contact info will not be visible. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "get_help_subtab")

    @property
    @pulumi.getter(name="getHelpSubtabKnowledgeBaseSearch")
    def get_help_subtab_knowledge_base_search(self) -> Optional[str]:
        """
        The KB search box which appears on the Help page. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
        """
        return pulumi.get(self, "get_help_subtab_knowledge_base_search")

    @property
    @pulumi.getter(name="hardwareReplacementsSubtab")
    def hardware_replacements_subtab(self) -> Optional[str]:
        """
        The 'Help > Replacement info' subtab where important information regarding device replacements is detailed. Can be one of
          'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "hardware_replacements_subtab")

    @property
    @pulumi.getter(name="helpTab")
    def help_tab(self) -> Optional[str]:
        """
        The Help tab, under which all support information resides. If this tab is hidden, no other 'Help' branding
          customizations will be visible. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "help_tab")

    @property
    @pulumi.getter(name="helpWidget")
    def help_widget(self) -> Optional[str]:
        """
        The 'Help Widget' is a support widget which provides access to live chat, documentation links, Sales contact info,
          and other contact avenues to reach Meraki Support. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "help_widget")

    @property
    @pulumi.getter(name="newFeaturesSubtab")
    def new_features_subtab(self) -> Optional[str]:
        """
        The 'Help > New features' subtab where new Dashboard features are detailed. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "new_features_subtab")

    @property
    @pulumi.getter(name="smForums")
    def sm_forums(self) -> Optional[str]:
        """
        The 'SM Forums' subtab which links to community-based support for Cisco Meraki Systems Manager. Only configurable for
          organizations that contain Systems Manager networks. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "sm_forums")

    @property
    @pulumi.getter(name="supportContactInfo")
    def support_contact_info(self) -> Optional[str]:
        """
        The 'Contact Meraki Support' section of the 'Help > Get Help' subtab. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
        """
        return pulumi.get(self, "support_contact_info")

    @property
    @pulumi.getter(name="universalSearchKnowledgeBaseSearch")
    def universal_search_knowledge_base_search(self) -> Optional[str]:
        """
        The universal search box always visible on Dashboard will, by default, present results from the Meraki KB. This configures
          whether these Meraki KB results should be returned. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "universal_search_knowledge_base_search")


@pulumi.output_type
class CameraCustomAnalyticsArtifactsStatus(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str message: Status message
        :param str type: Status type
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Status message
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Status type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CameraRolesAppliedOnDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inNetworksWithId":
            suggest = "in_networks_with_id"
        elif key == "inNetworksWithTag":
            suggest = "in_networks_with_tag"
        elif key == "permissionLevel":
            suggest = "permission_level"
        elif key == "permissionScope":
            suggest = "permission_scope"
        elif key == "permissionScopeId":
            suggest = "permission_scope_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CameraRolesAppliedOnDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CameraRolesAppliedOnDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CameraRolesAppliedOnDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 in_networks_with_id: Optional[str] = None,
                 in_networks_with_tag: Optional[str] = None,
                 permission_level: Optional[str] = None,
                 permission_scope: Optional[str] = None,
                 permission_scope_id: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        :param str id: Device id.
        :param str in_networks_with_id: Network id scope
        :param str in_networks_with_tag: Network tag scope
        :param str permission_scope_id: Permission scope id
        :param str tag: Device tag.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if in_networks_with_id is not None:
            pulumi.set(__self__, "in_networks_with_id", in_networks_with_id)
        if in_networks_with_tag is not None:
            pulumi.set(__self__, "in_networks_with_tag", in_networks_with_tag)
        if permission_level is not None:
            pulumi.set(__self__, "permission_level", permission_level)
        if permission_scope is not None:
            pulumi.set(__self__, "permission_scope", permission_scope)
        if permission_scope_id is not None:
            pulumi.set(__self__, "permission_scope_id", permission_scope_id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Device id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inNetworksWithId")
    def in_networks_with_id(self) -> Optional[str]:
        """
        Network id scope
        """
        return pulumi.get(self, "in_networks_with_id")

    @property
    @pulumi.getter(name="inNetworksWithTag")
    def in_networks_with_tag(self) -> Optional[str]:
        """
        Network tag scope
        """
        return pulumi.get(self, "in_networks_with_tag")

    @property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> Optional[str]:
        return pulumi.get(self, "permission_level")

    @property
    @pulumi.getter(name="permissionScope")
    def permission_scope(self) -> Optional[str]:
        return pulumi.get(self, "permission_scope")

    @property
    @pulumi.getter(name="permissionScopeId")
    def permission_scope_id(self) -> Optional[str]:
        """
        Permission scope id
        """
        return pulumi.get(self, "permission_scope_id")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Device tag.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class CameraRolesAppliedOnNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "permissionLevel":
            suggest = "permission_level"
        elif key == "permissionScope":
            suggest = "permission_scope"
        elif key == "permissionScopeId":
            suggest = "permission_scope_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CameraRolesAppliedOnNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CameraRolesAppliedOnNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CameraRolesAppliedOnNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 permission_level: Optional[str] = None,
                 permission_scope: Optional[str] = None,
                 permission_scope_id: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        :param str id: Network id.
        :param str permission_scope_id: Permission scope id
        :param str tag: Network tag
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if permission_level is not None:
            pulumi.set(__self__, "permission_level", permission_level)
        if permission_scope is not None:
            pulumi.set(__self__, "permission_scope", permission_scope)
        if permission_scope_id is not None:
            pulumi.set(__self__, "permission_scope_id", permission_scope_id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Network id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> Optional[str]:
        return pulumi.get(self, "permission_level")

    @property
    @pulumi.getter(name="permissionScope")
    def permission_scope(self) -> Optional[str]:
        return pulumi.get(self, "permission_scope")

    @property
    @pulumi.getter(name="permissionScopeId")
    def permission_scope_id(self) -> Optional[str]:
        """
        Permission scope id
        """
        return pulumi.get(self, "permission_scope_id")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Network tag
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class CameraRolesAppliedOrgWide(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "permissionLevel":
            suggest = "permission_level"
        elif key == "permissionScope":
            suggest = "permission_scope"
        elif key == "permissionScopeId":
            suggest = "permission_scope_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CameraRolesAppliedOrgWide. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CameraRolesAppliedOrgWide.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CameraRolesAppliedOrgWide.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permission_level: Optional[str] = None,
                 permission_scope: Optional[str] = None,
                 permission_scope_id: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        :param str permission_scope_id: Permission scope id
        """
        if permission_level is not None:
            pulumi.set(__self__, "permission_level", permission_level)
        if permission_scope is not None:
            pulumi.set(__self__, "permission_scope", permission_scope)
        if permission_scope_id is not None:
            pulumi.set(__self__, "permission_scope_id", permission_scope_id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> Optional[str]:
        return pulumi.get(self, "permission_level")

    @property
    @pulumi.getter(name="permissionScope")
    def permission_scope(self) -> Optional[str]:
        return pulumi.get(self, "permission_scope")

    @property
    @pulumi.getter(name="permissionScopeId")
    def permission_scope_id(self) -> Optional[str]:
        """
        Permission scope id
        """
        return pulumi.get(self, "permission_scope_id")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class ClaimItem(dict):
    def __init__(__self__, *,
                 licenses: Optional[Sequence['outputs.ClaimItemLicense']] = None,
                 orders: Optional[Sequence[str]] = None,
                 serials: Optional[Sequence[str]] = None):
        """
        :param Sequence['ClaimItemLicenseArgs'] licenses: The licenses claimed
        :param Sequence[str] orders: The numbers of the orders claimed
        :param Sequence[str] serials: The serials of the devices claimed
        """
        if licenses is not None:
            pulumi.set(__self__, "licenses", licenses)
        if orders is not None:
            pulumi.set(__self__, "orders", orders)
        if serials is not None:
            pulumi.set(__self__, "serials", serials)

    @property
    @pulumi.getter
    def licenses(self) -> Optional[Sequence['outputs.ClaimItemLicense']]:
        """
        The licenses claimed
        """
        return pulumi.get(self, "licenses")

    @property
    @pulumi.getter
    def orders(self) -> Optional[Sequence[str]]:
        """
        The numbers of the orders claimed
        """
        return pulumi.get(self, "orders")

    @property
    @pulumi.getter
    def serials(self) -> Optional[Sequence[str]]:
        """
        The serials of the devices claimed
        """
        return pulumi.get(self, "serials")


@pulumi.output_type
class ClaimItemLicense(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 mode: Optional[str] = None):
        """
        :param str key: The key of the license
        :param str mode: The mode of the license
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the license
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The mode of the license
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class ClaimParameters(dict):
    def __init__(__self__, *,
                 licenses: Optional[Sequence['outputs.ClaimParametersLicense']] = None,
                 orders: Optional[Sequence[str]] = None,
                 serials: Optional[Sequence[str]] = None):
        """
        :param Sequence['ClaimParametersLicenseArgs'] licenses: The licenses that should be claimed
        :param Sequence[str] orders: The numbers of the orders that should be claimed
        :param Sequence[str] serials: The serials of the devices that should be claimed
        """
        if licenses is not None:
            pulumi.set(__self__, "licenses", licenses)
        if orders is not None:
            pulumi.set(__self__, "orders", orders)
        if serials is not None:
            pulumi.set(__self__, "serials", serials)

    @property
    @pulumi.getter
    def licenses(self) -> Optional[Sequence['outputs.ClaimParametersLicense']]:
        """
        The licenses that should be claimed
        """
        return pulumi.get(self, "licenses")

    @property
    @pulumi.getter
    def orders(self) -> Optional[Sequence[str]]:
        """
        The numbers of the orders that should be claimed
        """
        return pulumi.get(self, "orders")

    @property
    @pulumi.getter
    def serials(self) -> Optional[Sequence[str]]:
        """
        The serials of the devices that should be claimed
        """
        return pulumi.get(self, "serials")


@pulumi.output_type
class ClaimParametersLicense(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 mode: Optional[str] = None):
        """
        :param str key: The key of the license
        :param str mode: Either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. Defaults to 'addDevices'. All licenses must be claimed with the same mode, and at most one renewal can be claimed at a time. This parameter is legacy and does not apply to organizations with per-device licensing enabled.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the license
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. Defaults to 'addDevices'. All licenses must be claimed with the same mode, and at most one renewal can be claimed at a time. This parameter is legacy and does not apply to organizations with per-device licensing enabled.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class CloneItem(dict):
    def __init__(__self__, *,
                 api: Optional['outputs.CloneItemApi'] = None,
                 cloud: Optional['outputs.CloneItemCloud'] = None,
                 id: Optional[str] = None,
                 licensing: Optional['outputs.CloneItemLicensing'] = None,
                 management: Optional['outputs.CloneItemManagement'] = None,
                 name: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param 'CloneItemApiArgs' api: API related settings
        :param 'CloneItemCloudArgs' cloud: Data for this organization
        :param str id: Organization ID
        :param 'CloneItemLicensingArgs' licensing: Licensing related settings
        :param 'CloneItemManagementArgs' management: Information about the organization's management system
        :param str name: Organization name
        :param str url: Organization URL
        """
        if api is not None:
            pulumi.set(__self__, "api", api)
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if licensing is not None:
            pulumi.set(__self__, "licensing", licensing)
        if management is not None:
            pulumi.set(__self__, "management", management)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def api(self) -> Optional['outputs.CloneItemApi']:
        """
        API related settings
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def cloud(self) -> Optional['outputs.CloneItemCloud']:
        """
        Data for this organization
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Organization ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def licensing(self) -> Optional['outputs.CloneItemLicensing']:
        """
        Licensing related settings
        """
        return pulumi.get(self, "licensing")

    @property
    @pulumi.getter
    def management(self) -> Optional['outputs.CloneItemManagement']:
        """
        Information about the organization's management system
        """
        return pulumi.get(self, "management")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Organization name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        Organization URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class CloneItemApi(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable API access
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable API access
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class CloneItemCloud(dict):
    def __init__(__self__, *,
                 region: Optional['outputs.CloneItemCloudRegion'] = None):
        """
        :param 'CloneItemCloudRegionArgs' region: Region info
        """
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional['outputs.CloneItemCloudRegion']:
        """
        Region info
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class CloneItemCloudRegion(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Name of region
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of region
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CloneItemLicensing(dict):
    def __init__(__self__, *,
                 model: Optional[str] = None):
        """
        :param str model: Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
        """
        if model is not None:
            pulumi.set(__self__, "model", model)

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
        """
        return pulumi.get(self, "model")


@pulumi.output_type
class CloneItemManagement(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence['outputs.CloneItemManagementDetail']] = None):
        """
        :param Sequence['CloneItemManagementDetailArgs'] details: Details related to organization management, possibly empty. Details may be named 'MSP ID', 'IP restriction mode for API', or 'IP restriction mode for dashboard', if the organization admin has configured any.
        """
        if details is not None:
            pulumi.set(__self__, "details", details)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.CloneItemManagementDetail']]:
        """
        Details related to organization management, possibly empty. Details may be named 'MSP ID', 'IP restriction mode for API', or 'IP restriction mode for dashboard', if the organization admin has configured any.
        """
        return pulumi.get(self, "details")


@pulumi.output_type
class CloneItemManagementDetail(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of management data
        :param str value: Value of management data
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of management data
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of management data
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CloneParameters(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: The name of the new organization
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the new organization
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ConfigTemplatesSwitchProfilesPortsMirror(dict):
    def __init__(__self__, *,
                 mode: Optional[str] = None):
        """
        :param str mode: The port mirror mode. Can be one of ('Destination port', 'Source port' or 'Not mirroring traffic').
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The port mirror mode. Can be one of ('Destination port', 'Source port' or 'Not mirroring traffic').
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class ConfigTemplatesSwitchProfilesPortsModule(dict):
    def __init__(__self__, *,
                 model: Optional[str] = None):
        """
        :param str model: The model of the expansion module.
        """
        if model is not None:
            pulumi.set(__self__, "model", model)

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        The model of the expansion module.
        """
        return pulumi.get(self, "model")


@pulumi.output_type
class ConfigTemplatesSwitchProfilesPortsProfile(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 id: Optional[str] = None,
                 iname: Optional[str] = None):
        """
        :param bool enabled: When enabled, override this port's configuration with a port profile.
        :param str id: When enabled, the ID of the port profile used to override the port's configuration.
        :param str iname: When enabled, the IName of the profile.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if iname is not None:
            pulumi.set(__self__, "iname", iname)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        When enabled, override this port's configuration with a port profile.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        When enabled, the ID of the port profile used to override the port's configuration.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def iname(self) -> Optional[str]:
        """
        When enabled, the IName of the profile.
        """
        return pulumi.get(self, "iname")


@pulumi.output_type
class InventoryClaimItem(dict):
    def __init__(__self__, *,
                 licenses: Optional[Sequence['outputs.InventoryClaimItemLicense']] = None,
                 orders: Optional[Sequence[str]] = None,
                 serials: Optional[Sequence[str]] = None):
        """
        :param Sequence['InventoryClaimItemLicenseArgs'] licenses: The licenses claimed
        :param Sequence[str] orders: The numbers of the orders claimed
        :param Sequence[str] serials: The serials of the devices claimed
        """
        if licenses is not None:
            pulumi.set(__self__, "licenses", licenses)
        if orders is not None:
            pulumi.set(__self__, "orders", orders)
        if serials is not None:
            pulumi.set(__self__, "serials", serials)

    @property
    @pulumi.getter
    def licenses(self) -> Optional[Sequence['outputs.InventoryClaimItemLicense']]:
        """
        The licenses claimed
        """
        return pulumi.get(self, "licenses")

    @property
    @pulumi.getter
    def orders(self) -> Optional[Sequence[str]]:
        """
        The numbers of the orders claimed
        """
        return pulumi.get(self, "orders")

    @property
    @pulumi.getter
    def serials(self) -> Optional[Sequence[str]]:
        """
        The serials of the devices claimed
        """
        return pulumi.get(self, "serials")


@pulumi.output_type
class InventoryClaimItemLicense(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 mode: Optional[str] = None):
        """
        :param str key: The key of the license
        :param str mode: The mode of the license
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the license
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The mode of the license
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class InventoryClaimParameters(dict):
    def __init__(__self__, *,
                 licenses: Optional[Sequence['outputs.InventoryClaimParametersLicense']] = None,
                 orders: Optional[Sequence[str]] = None,
                 serials: Optional[Sequence[str]] = None):
        """
        :param Sequence['InventoryClaimParametersLicenseArgs'] licenses: The licenses that should be claimed
        :param Sequence[str] orders: The numbers of the orders that should be claimed
        :param Sequence[str] serials: The serials of the devices that should be claimed
        """
        if licenses is not None:
            pulumi.set(__self__, "licenses", licenses)
        if orders is not None:
            pulumi.set(__self__, "orders", orders)
        if serials is not None:
            pulumi.set(__self__, "serials", serials)

    @property
    @pulumi.getter
    def licenses(self) -> Optional[Sequence['outputs.InventoryClaimParametersLicense']]:
        """
        The licenses that should be claimed
        """
        return pulumi.get(self, "licenses")

    @property
    @pulumi.getter
    def orders(self) -> Optional[Sequence[str]]:
        """
        The numbers of the orders that should be claimed
        """
        return pulumi.get(self, "orders")

    @property
    @pulumi.getter
    def serials(self) -> Optional[Sequence[str]]:
        """
        The serials of the devices that should be claimed
        """
        return pulumi.get(self, "serials")


@pulumi.output_type
class InventoryClaimParametersLicense(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 mode: Optional[str] = None):
        """
        :param str key: The key of the license
        :param str mode: Co-term licensing only: either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. Defaults to 'addDevices'. All licenses must be claimed with the same mode, and at most one renewal can be claimed at a time. Does not apply to organizations using per-device licensing model.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the license
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Co-term licensing only: either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. Defaults to 'addDevices'. All licenses must be claimed with the same mode, and at most one renewal can be claimed at a time. Does not apply to organizations using per-device licensing model.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringExportEventsParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logEvent":
            suggest = "log_event"
        elif key == "targetOs":
            suggest = "target_os"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InventoryOnboardingCloudMonitoringExportEventsParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InventoryOnboardingCloudMonitoringExportEventsParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InventoryOnboardingCloudMonitoringExportEventsParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_event: Optional[str] = None,
                 request: Optional[str] = None,
                 target_os: Optional[str] = None,
                 timestamp: Optional[int] = None):
        """
        :param str log_event: The type of log event this is recording, e.g. download or opening a banner
        :param str request: Used to describe if this event was the result of a redirect. E.g. a query param if an info banner is being used
        :param str target_os: The name of the onboarding distro being downloaded
        :param int timestamp: A JavaScript UTC datetime stamp for when the even occurred
        """
        if log_event is not None:
            pulumi.set(__self__, "log_event", log_event)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if target_os is not None:
            pulumi.set(__self__, "target_os", target_os)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter(name="logEvent")
    def log_event(self) -> Optional[str]:
        """
        The type of log event this is recording, e.g. download or opening a banner
        """
        return pulumi.get(self, "log_event")

    @property
    @pulumi.getter
    def request(self) -> Optional[str]:
        """
        Used to describe if this event was the result of a redirect. E.g. a query param if an info banner is being used
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter(name="targetOs")
    def target_os(self) -> Optional[str]:
        """
        The name of the onboarding distro being downloaded
        """
        return pulumi.get(self, "target_os")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[int]:
        """
        A JavaScript UTC datetime stamp for when the even occurred
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringImportsParameters(dict):
    def __init__(__self__, *,
                 devices: Optional[Sequence['outputs.InventoryOnboardingCloudMonitoringImportsParametersDevice']] = None,
                 items: Optional[Sequence['outputs.InventoryOnboardingCloudMonitoringImportsParametersItem']] = None):
        """
        :param Sequence['InventoryOnboardingCloudMonitoringImportsParametersDeviceArgs'] devices: A set of device imports to commit
        """
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.InventoryOnboardingCloudMonitoringImportsParametersDevice']]:
        """
        A set of device imports to commit
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.InventoryOnboardingCloudMonitoringImportsParametersItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringImportsParametersDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceId":
            suggest = "device_id"
        elif key == "networkId":
            suggest = "network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InventoryOnboardingCloudMonitoringImportsParametersDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InventoryOnboardingCloudMonitoringImportsParametersDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InventoryOnboardingCloudMonitoringImportsParametersDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_id: Optional[str] = None,
                 network_id: Optional[str] = None,
                 udi: Optional[str] = None):
        """
        :param str device_id: Import ID from the Import operation
        :param str network_id: Network Id
        :param str udi: Device UDI certificate
        """
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if udi is not None:
            pulumi.set(__self__, "udi", udi)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[str]:
        """
        Import ID from the Import operation
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[str]:
        """
        Network Id
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def udi(self) -> Optional[str]:
        """
        Device UDI certificate
        """
        return pulumi.get(self, "udi")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringImportsParametersItem(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.InventoryOnboardingCloudMonitoringImportsParametersItemItem']] = None):
        """
        :param Sequence['InventoryOnboardingCloudMonitoringImportsParametersItemItemArgs'] items: Array of ResponseOrganizationsCreateOrganizationInventoryOnboardingCloudMonitoringImport
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.InventoryOnboardingCloudMonitoringImportsParametersItemItem']]:
        """
        Array of ResponseOrganizationsCreateOrganizationInventoryOnboardingCloudMonitoringImport
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringImportsParametersItemItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "importId":
            suggest = "import_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InventoryOnboardingCloudMonitoringImportsParametersItemItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InventoryOnboardingCloudMonitoringImportsParametersItemItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InventoryOnboardingCloudMonitoringImportsParametersItemItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 import_id: Optional[str] = None,
                 message: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str import_id: Unique id associated with the import of the device
        :param str message: Response method
        :param str status: Cloud monitor import status
        """
        if import_id is not None:
            pulumi.set(__self__, "import_id", import_id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="importId")
    def import_id(self) -> Optional[str]:
        """
        Unique id associated with the import of the device
        """
        return pulumi.get(self, "import_id")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Response method
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Cloud monitor import status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configParams":
            suggest = "config_params"
        elif key == "deviceId":
            suggest = "device_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InventoryOnboardingCloudMonitoringPrepareItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InventoryOnboardingCloudMonitoringPrepareItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InventoryOnboardingCloudMonitoringPrepareItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_params: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareItemConfigParams'] = None,
                 device_id: Optional[str] = None,
                 message: Optional[str] = None,
                 status: Optional[str] = None,
                 udi: Optional[str] = None):
        """
        :param 'InventoryOnboardingCloudMonitoringPrepareItemConfigParamsArgs' config_params: Params used in order to connect to the device
        :param str device_id: Import ID from the Import operation
        :param str message: Message related to whether or not the device was found and can be imported.
        :param str status: The import status of the device
        :param str udi: Device UDI certificate
        """
        if config_params is not None:
            pulumi.set(__self__, "config_params", config_params)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if udi is not None:
            pulumi.set(__self__, "udi", udi)

    @property
    @pulumi.getter(name="configParams")
    def config_params(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareItemConfigParams']:
        """
        Params used in order to connect to the device
        """
        return pulumi.get(self, "config_params")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[str]:
        """
        Import ID from the Import operation
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message related to whether or not the device was found and can be imported.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The import status of the device
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def udi(self) -> Optional[str]:
        """
        Device UDI certificate
        """
        return pulumi.get(self, "udi")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareItemConfigParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudStaticIp":
            suggest = "cloud_static_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InventoryOnboardingCloudMonitoringPrepareItemConfigParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InventoryOnboardingCloudMonitoringPrepareItemConfigParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InventoryOnboardingCloudMonitoringPrepareItemConfigParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_static_ip: Optional[str] = None,
                 tunnel: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnel'] = None,
                 user: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareItemConfigParamsUser'] = None):
        """
        :param str cloud_static_ip: Static IP Address used to connect to the device
        :param 'InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelArgs' tunnel: Configuration options used to connect to the device
        :param 'InventoryOnboardingCloudMonitoringPrepareItemConfigParamsUserArgs' user: User credentials used to connect to the device
        """
        if cloud_static_ip is not None:
            pulumi.set(__self__, "cloud_static_ip", cloud_static_ip)
        if tunnel is not None:
            pulumi.set(__self__, "tunnel", tunnel)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="cloudStaticIp")
    def cloud_static_ip(self) -> Optional[str]:
        """
        Static IP Address used to connect to the device
        """
        return pulumi.get(self, "cloud_static_ip")

    @property
    @pulumi.getter
    def tunnel(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnel']:
        """
        Configuration options used to connect to the device
        """
        return pulumi.get(self, "tunnel")

    @property
    @pulumi.getter
    def user(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareItemConfigParamsUser']:
        """
        User credentials used to connect to the device
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rootCertificate":
            suggest = "root_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[str] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[str] = None,
                 root_certificate: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificate'] = None):
        """
        :param str host: SSH tunnel URL used to connect to the device
        :param str name: The name of the tunnel we are attempting to connect to
        :param str port: The port used for the ssh tunnel.
        :param 'InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificateArgs' root_certificate: Root certificate information
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if root_certificate is not None:
            pulumi.set(__self__, "root_certificate", root_certificate)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        SSH tunnel URL used to connect to the device
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the tunnel we are attempting to connect to
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        The port used for the ssh tunnel.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="rootCertificate")
    def root_certificate(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificate']:
        """
        Root certificate information
        """
        return pulumi.get(self, "root_certificate")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificate(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str content: Public certificate value
        :param str name: The name of the server protected by the certificate
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        """
        Public certificate value
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the server protected by the certificate
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareItemConfigParamsUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKey":
            suggest = "public_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InventoryOnboardingCloudMonitoringPrepareItemConfigParamsUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InventoryOnboardingCloudMonitoringPrepareItemConfigParamsUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InventoryOnboardingCloudMonitoringPrepareItemConfigParamsUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_key: Optional[str] = None,
                 secret: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareItemConfigParamsUserSecret'] = None,
                 username: Optional[str] = None):
        """
        :param str public_key: The public key for the registered user
        :param 'InventoryOnboardingCloudMonitoringPrepareItemConfigParamsUserSecretArgs' secret: Stores the user secret hash
        :param str username: The username added to Catalyst device
        """
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        """
        The public key for the registered user
        """
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareItemConfigParamsUserSecret']:
        """
        Stores the user secret hash
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        The username added to Catalyst device
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareItemConfigParamsUserSecret(dict):
    def __init__(__self__, *,
                 hash: Optional[str] = None):
        """
        :param str hash: The hashed secret
        """
        if hash is not None:
            pulumi.set(__self__, "hash", hash)

    @property
    @pulumi.getter
    def hash(self) -> Optional[str]:
        """
        The hashed secret
        """
        return pulumi.get(self, "hash")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareParameters(dict):
    def __init__(__self__, *,
                 devices: Optional[Sequence['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDevice']] = None):
        """
        :param Sequence['InventoryOnboardingCloudMonitoringPrepareParametersDeviceArgs'] devices: A set of devices to import (or update)
        """
        if devices is not None:
            pulumi.set(__self__, "devices", devices)

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDevice']]:
        """
        A set of devices to import (or update)
        """
        return pulumi.get(self, "devices")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareParametersDevice(dict):
    def __init__(__self__, *,
                 sudi: Optional[str] = None,
                 tunnel: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnel'] = None,
                 user: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceUser'] = None,
                 vty: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVty'] = None):
        """
        :param str sudi: Device SUDI certificate
        :param 'InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnelArgs' tunnel: TLS Related Parameters
        :param 'InventoryOnboardingCloudMonitoringPrepareParametersDeviceUserArgs' user: User parameters
        :param 'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyArgs' vty: VTY Related Parameters
        """
        if sudi is not None:
            pulumi.set(__self__, "sudi", sudi)
        if tunnel is not None:
            pulumi.set(__self__, "tunnel", tunnel)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if vty is not None:
            pulumi.set(__self__, "vty", vty)

    @property
    @pulumi.getter
    def sudi(self) -> Optional[str]:
        """
        Device SUDI certificate
        """
        return pulumi.get(self, "sudi")

    @property
    @pulumi.getter
    def tunnel(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnel']:
        """
        TLS Related Parameters
        """
        return pulumi.get(self, "tunnel")

    @property
    @pulumi.getter
    def user(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceUser']:
        """
        User parameters
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def vty(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVty']:
        """
        VTY Related Parameters
        """
        return pulumi.get(self, "vty")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateName":
            suggest = "certificate_name"
        elif key == "localInterface":
            suggest = "local_interface"
        elif key == "loopbackNumber":
            suggest = "loopback_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_name: Optional[str] = None,
                 local_interface: Optional[int] = None,
                 loopback_number: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param str certificate_name: Name of the configured TLS certificate
        :param int local_interface: Number of the vlan expected to be used to connect to the cloud
        :param int loopback_number: Number of the configured Loopback Interface used for TLS overlay
        :param str name: Name of the configured TLS tunnel
        """
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if local_interface is not None:
            pulumi.set(__self__, "local_interface", local_interface)
        if loopback_number is not None:
            pulumi.set(__self__, "loopback_number", loopback_number)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[str]:
        """
        Name of the configured TLS certificate
        """
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter(name="localInterface")
    def local_interface(self) -> Optional[int]:
        """
        Number of the vlan expected to be used to connect to the cloud
        """
        return pulumi.get(self, "local_interface")

    @property
    @pulumi.getter(name="loopbackNumber")
    def loopback_number(self) -> Optional[int]:
        """
        Number of the configured Loopback Interface used for TLS overlay
        """
        return pulumi.get(self, "loopback_number")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the configured TLS tunnel
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareParametersDeviceUser(dict):
    def __init__(__self__, *,
                 username: Optional[str] = None):
        """
        :param str username: The name of the device user for Meraki monitoring
        """
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        The name of the device user for Meraki monitoring
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareParametersDeviceVty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"
        elif key == "endLineNumber":
            suggest = "end_line_number"
        elif key == "rotaryNumber":
            suggest = "rotary_number"
        elif key == "startLineNumber":
            suggest = "start_line_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InventoryOnboardingCloudMonitoringPrepareParametersDeviceVty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InventoryOnboardingCloudMonitoringPrepareParametersDeviceVty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InventoryOnboardingCloudMonitoringPrepareParametersDeviceVty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessList'] = None,
                 authentication: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthentication'] = None,
                 authorization: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthorization'] = None,
                 end_line_number: Optional[int] = None,
                 rotary_number: Optional[int] = None,
                 start_line_number: Optional[int] = None):
        """
        :param 'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessListArgs' access_list: AccessList details
        :param 'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthenticationArgs' authentication: VTY AAA authentication
        :param 'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthorizationArgs' authorization: VTY AAA authorization
        :param int end_line_number: Ending line VTY number
        :param int rotary_number: SSH rotary number
        :param int start_line_number: Starting line VTY number
        """
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if end_line_number is not None:
            pulumi.set(__self__, "end_line_number", end_line_number)
        if rotary_number is not None:
            pulumi.set(__self__, "rotary_number", rotary_number)
        if start_line_number is not None:
            pulumi.set(__self__, "start_line_number", start_line_number)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessList']:
        """
        AccessList details
        """
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthentication']:
        """
        VTY AAA authentication
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def authorization(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthorization']:
        """
        VTY AAA authorization
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="endLineNumber")
    def end_line_number(self) -> Optional[int]:
        """
        Ending line VTY number
        """
        return pulumi.get(self, "end_line_number")

    @property
    @pulumi.getter(name="rotaryNumber")
    def rotary_number(self) -> Optional[int]:
        """
        SSH rotary number
        """
        return pulumi.get(self, "rotary_number")

    @property
    @pulumi.getter(name="startLineNumber")
    def start_line_number(self) -> Optional[int]:
        """
        Starting line VTY number
        """
        return pulumi.get(self, "start_line_number")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vtyIn":
            suggest = "vty_in"
        elif key == "vtyOut":
            suggest = "vty_out"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vty_in: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessListVtyIn'] = None,
                 vty_out: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessListVtyOut'] = None):
        """
        :param 'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessListVtyInArgs' vty_in: VTY in ACL
        :param 'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessListVtyOutArgs' vty_out: VTY out ACL
        """
        if vty_in is not None:
            pulumi.set(__self__, "vty_in", vty_in)
        if vty_out is not None:
            pulumi.set(__self__, "vty_out", vty_out)

    @property
    @pulumi.getter(name="vtyIn")
    def vty_in(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessListVtyIn']:
        """
        VTY in ACL
        """
        return pulumi.get(self, "vty_in")

    @property
    @pulumi.getter(name="vtyOut")
    def vty_out(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessListVtyOut']:
        """
        VTY out ACL
        """
        return pulumi.get(self, "vty_out")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessListVtyIn(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAccessListVtyOut(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthentication(dict):
    def __init__(__self__, *,
                 group: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthenticationGroup'] = None):
        """
        :param 'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthenticationGroupArgs' group: Group Details
        """
        if group is not None:
            pulumi.set(__self__, "group", group)

    @property
    @pulumi.getter
    def group(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthenticationGroup']:
        """
        Group Details
        """
        return pulumi.get(self, "group")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthenticationGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Group Name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Group Name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthorization(dict):
    def __init__(__self__, *,
                 group: Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthorizationGroup'] = None):
        """
        :param 'InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthorizationGroupArgs' group: Group Details
        """
        if group is not None:
            pulumi.set(__self__, "group", group)

    @property
    @pulumi.getter
    def group(self) -> Optional['outputs.InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthorizationGroup']:
        """
        Group Details
        """
        return pulumi.get(self, "group")


@pulumi.output_type
class InventoryOnboardingCloudMonitoringPrepareParametersDeviceVtyAuthorizationGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Group Name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Group Name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InventoryReleaseItem(dict):
    def __init__(__self__, *,
                 serials: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] serials: Serials of the devices that were released
        """
        if serials is not None:
            pulumi.set(__self__, "serials", serials)

    @property
    @pulumi.getter
    def serials(self) -> Optional[Sequence[str]]:
        """
        Serials of the devices that were released
        """
        return pulumi.get(self, "serials")


@pulumi.output_type
class InventoryReleaseParameters(dict):
    def __init__(__self__, *,
                 serials: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] serials: Serials of the devices that should be released
        """
        if serials is not None:
            pulumi.set(__self__, "serials", serials)

    @property
    @pulumi.getter
    def serials(self) -> Optional[Sequence[str]]:
        """
        Serials of the devices that should be released
        """
        return pulumi.get(self, "serials")


@pulumi.output_type
class LicensesAssignSeatsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resultingLicenses":
            suggest = "resulting_licenses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensesAssignSeatsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensesAssignSeatsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensesAssignSeatsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resulting_licenses: Optional[Sequence['outputs.LicensesAssignSeatsItemResultingLicense']] = None):
        """
        :param Sequence['LicensesAssignSeatsItemResultingLicenseArgs'] resulting_licenses: Resulting licenses from the move
        """
        if resulting_licenses is not None:
            pulumi.set(__self__, "resulting_licenses", resulting_licenses)

    @property
    @pulumi.getter(name="resultingLicenses")
    def resulting_licenses(self) -> Optional[Sequence['outputs.LicensesAssignSeatsItemResultingLicense']]:
        """
        Resulting licenses from the move
        """
        return pulumi.get(self, "resulting_licenses")


@pulumi.output_type
class LicensesAssignSeatsItemResultingLicense(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activationDate":
            suggest = "activation_date"
        elif key == "claimDate":
            suggest = "claim_date"
        elif key == "deviceSerial":
            suggest = "device_serial"
        elif key == "durationInDays":
            suggest = "duration_in_days"
        elif key == "expirationDate":
            suggest = "expiration_date"
        elif key == "headLicenseId":
            suggest = "head_license_id"
        elif key == "licenseKey":
            suggest = "license_key"
        elif key == "licenseType":
            suggest = "license_type"
        elif key == "networkId":
            suggest = "network_id"
        elif key == "orderNumber":
            suggest = "order_number"
        elif key == "permanentlyQueuedLicenses":
            suggest = "permanently_queued_licenses"
        elif key == "seatCount":
            suggest = "seat_count"
        elif key == "totalDurationInDays":
            suggest = "total_duration_in_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensesAssignSeatsItemResultingLicense. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensesAssignSeatsItemResultingLicense.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensesAssignSeatsItemResultingLicense.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activation_date: Optional[str] = None,
                 claim_date: Optional[str] = None,
                 device_serial: Optional[str] = None,
                 duration_in_days: Optional[int] = None,
                 expiration_date: Optional[str] = None,
                 head_license_id: Optional[str] = None,
                 id: Optional[str] = None,
                 license_key: Optional[str] = None,
                 license_type: Optional[str] = None,
                 network_id: Optional[str] = None,
                 order_number: Optional[str] = None,
                 permanently_queued_licenses: Optional[Sequence['outputs.LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicense']] = None,
                 seat_count: Optional[int] = None,
                 state: Optional[str] = None,
                 total_duration_in_days: Optional[int] = None):
        """
        :param str activation_date: The date the license started burning
        :param str claim_date: The date the license was claimed into the organization
        :param str device_serial: Serial number of the device the license is assigned to
        :param int duration_in_days: The duration of the individual license
        :param str expiration_date: The date the license will expire
        :param str head_license_id: The id of the head license this license is queued behind. If there is no head license, it returns nil.
        :param str id: License ID
        :param str license_key: License key
        :param str license_type: License type
        :param str network_id: ID of the network the license is assigned to
        :param str order_number: Order number
        :param Sequence['LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicenseArgs'] permanently_queued_licenses: DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
        :param int seat_count: The number of seats of the license. Only applicable to SM licenses.
        :param str state: The state of the license. All queued licenses have a status of *recentlyQueued*.
        :param int total_duration_in_days: The duration of the license plus all permanently queued licenses associated with it
        """
        if activation_date is not None:
            pulumi.set(__self__, "activation_date", activation_date)
        if claim_date is not None:
            pulumi.set(__self__, "claim_date", claim_date)
        if device_serial is not None:
            pulumi.set(__self__, "device_serial", device_serial)
        if duration_in_days is not None:
            pulumi.set(__self__, "duration_in_days", duration_in_days)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if head_license_id is not None:
            pulumi.set(__self__, "head_license_id", head_license_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if license_key is not None:
            pulumi.set(__self__, "license_key", license_key)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)
        if permanently_queued_licenses is not None:
            pulumi.set(__self__, "permanently_queued_licenses", permanently_queued_licenses)
        if seat_count is not None:
            pulumi.set(__self__, "seat_count", seat_count)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if total_duration_in_days is not None:
            pulumi.set(__self__, "total_duration_in_days", total_duration_in_days)

    @property
    @pulumi.getter(name="activationDate")
    def activation_date(self) -> Optional[str]:
        """
        The date the license started burning
        """
        return pulumi.get(self, "activation_date")

    @property
    @pulumi.getter(name="claimDate")
    def claim_date(self) -> Optional[str]:
        """
        The date the license was claimed into the organization
        """
        return pulumi.get(self, "claim_date")

    @property
    @pulumi.getter(name="deviceSerial")
    def device_serial(self) -> Optional[str]:
        """
        Serial number of the device the license is assigned to
        """
        return pulumi.get(self, "device_serial")

    @property
    @pulumi.getter(name="durationInDays")
    def duration_in_days(self) -> Optional[int]:
        """
        The duration of the individual license
        """
        return pulumi.get(self, "duration_in_days")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        """
        The date the license will expire
        """
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter(name="headLicenseId")
    def head_license_id(self) -> Optional[str]:
        """
        The id of the head license this license is queued behind. If there is no head license, it returns nil.
        """
        return pulumi.get(self, "head_license_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        License ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> Optional[str]:
        """
        License key
        """
        return pulumi.get(self, "license_key")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        """
        License type
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[str]:
        """
        ID of the network the license is assigned to
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        """
        Order number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="permanentlyQueuedLicenses")
    def permanently_queued_licenses(self) -> Optional[Sequence['outputs.LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicense']]:
        """
        DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
        """
        return pulumi.get(self, "permanently_queued_licenses")

    @property
    @pulumi.getter(name="seatCount")
    def seat_count(self) -> Optional[int]:
        """
        The number of seats of the license. Only applicable to SM licenses.
        """
        return pulumi.get(self, "seat_count")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The state of the license. All queued licenses have a status of *recentlyQueued*.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="totalDurationInDays")
    def total_duration_in_days(self) -> Optional[int]:
        """
        The duration of the license plus all permanently queued licenses associated with it
        """
        return pulumi.get(self, "total_duration_in_days")


@pulumi.output_type
class LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicense(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInDays":
            suggest = "duration_in_days"
        elif key == "licenseKey":
            suggest = "license_key"
        elif key == "licenseType":
            suggest = "license_type"
        elif key == "orderNumber":
            suggest = "order_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicense. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicense.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicense.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_days: Optional[int] = None,
                 id: Optional[str] = None,
                 license_key: Optional[str] = None,
                 license_type: Optional[str] = None,
                 order_number: Optional[str] = None):
        """
        :param int duration_in_days: The duration of the individual license
        :param str id: Permanently queued license ID
        :param str license_key: License key
        :param str license_type: License type
        :param str order_number: Order number
        """
        if duration_in_days is not None:
            pulumi.set(__self__, "duration_in_days", duration_in_days)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if license_key is not None:
            pulumi.set(__self__, "license_key", license_key)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)

    @property
    @pulumi.getter(name="durationInDays")
    def duration_in_days(self) -> Optional[int]:
        """
        The duration of the individual license
        """
        return pulumi.get(self, "duration_in_days")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Permanently queued license ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> Optional[str]:
        """
        License key
        """
        return pulumi.get(self, "license_key")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        """
        License type
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        """
        Order number
        """
        return pulumi.get(self, "order_number")


@pulumi.output_type
class LicensesAssignSeatsParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "licenseId":
            suggest = "license_id"
        elif key == "networkId":
            suggest = "network_id"
        elif key == "seatCount":
            suggest = "seat_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensesAssignSeatsParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensesAssignSeatsParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensesAssignSeatsParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 license_id: Optional[str] = None,
                 network_id: Optional[str] = None,
                 seat_count: Optional[int] = None):
        """
        :param str license_id: The ID of the SM license to assign seats from
        :param str network_id: The ID of the SM network to assign the seats to
        :param int seat_count: The number of seats to assign to the SM network. Must be less than or equal to the total number of seats of the license
        """
        if license_id is not None:
            pulumi.set(__self__, "license_id", license_id)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if seat_count is not None:
            pulumi.set(__self__, "seat_count", seat_count)

    @property
    @pulumi.getter(name="licenseId")
    def license_id(self) -> Optional[str]:
        """
        The ID of the SM license to assign seats from
        """
        return pulumi.get(self, "license_id")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[str]:
        """
        The ID of the SM network to assign the seats to
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="seatCount")
    def seat_count(self) -> Optional[int]:
        """
        The number of seats to assign to the SM network. Must be less than or equal to the total number of seats of the license
        """
        return pulumi.get(self, "seat_count")


@pulumi.output_type
class LicensesMoveItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destOrganizationId":
            suggest = "dest_organization_id"
        elif key == "licenseIds":
            suggest = "license_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensesMoveItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensesMoveItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensesMoveItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_organization_id: Optional[str] = None,
                 license_ids: Optional[Sequence[str]] = None):
        """
        :param str dest_organization_id: The ID of the organization to move the licenses to
        :param Sequence[str] license_ids: A list of IDs of licenses to move to the new organization
        """
        if dest_organization_id is not None:
            pulumi.set(__self__, "dest_organization_id", dest_organization_id)
        if license_ids is not None:
            pulumi.set(__self__, "license_ids", license_ids)

    @property
    @pulumi.getter(name="destOrganizationId")
    def dest_organization_id(self) -> Optional[str]:
        """
        The ID of the organization to move the licenses to
        """
        return pulumi.get(self, "dest_organization_id")

    @property
    @pulumi.getter(name="licenseIds")
    def license_ids(self) -> Optional[Sequence[str]]:
        """
        A list of IDs of licenses to move to the new organization
        """
        return pulumi.get(self, "license_ids")


@pulumi.output_type
class LicensesMoveParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destOrganizationId":
            suggest = "dest_organization_id"
        elif key == "licenseIds":
            suggest = "license_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensesMoveParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensesMoveParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensesMoveParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_organization_id: Optional[str] = None,
                 license_ids: Optional[Sequence[str]] = None):
        """
        :param str dest_organization_id: The ID of the organization to move the licenses to
        :param Sequence[str] license_ids: A list of IDs of licenses to move to the new organization
        """
        if dest_organization_id is not None:
            pulumi.set(__self__, "dest_organization_id", dest_organization_id)
        if license_ids is not None:
            pulumi.set(__self__, "license_ids", license_ids)

    @property
    @pulumi.getter(name="destOrganizationId")
    def dest_organization_id(self) -> Optional[str]:
        """
        The ID of the organization to move the licenses to
        """
        return pulumi.get(self, "dest_organization_id")

    @property
    @pulumi.getter(name="licenseIds")
    def license_ids(self) -> Optional[Sequence[str]]:
        """
        A list of IDs of licenses to move to the new organization
        """
        return pulumi.get(self, "license_ids")


@pulumi.output_type
class LicensesMoveSeatsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destOrganizationId":
            suggest = "dest_organization_id"
        elif key == "licenseId":
            suggest = "license_id"
        elif key == "seatCount":
            suggest = "seat_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensesMoveSeatsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensesMoveSeatsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensesMoveSeatsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_organization_id: Optional[str] = None,
                 license_id: Optional[str] = None,
                 seat_count: Optional[int] = None):
        """
        :param str dest_organization_id: The ID of the organization to move the SM seats to
        :param str license_id: The ID of the SM license to move the seats from
        :param int seat_count: The number of seats to move to the new organization. Must be less than or equal to the total number of seats of the license
        """
        if dest_organization_id is not None:
            pulumi.set(__self__, "dest_organization_id", dest_organization_id)
        if license_id is not None:
            pulumi.set(__self__, "license_id", license_id)
        if seat_count is not None:
            pulumi.set(__self__, "seat_count", seat_count)

    @property
    @pulumi.getter(name="destOrganizationId")
    def dest_organization_id(self) -> Optional[str]:
        """
        The ID of the organization to move the SM seats to
        """
        return pulumi.get(self, "dest_organization_id")

    @property
    @pulumi.getter(name="licenseId")
    def license_id(self) -> Optional[str]:
        """
        The ID of the SM license to move the seats from
        """
        return pulumi.get(self, "license_id")

    @property
    @pulumi.getter(name="seatCount")
    def seat_count(self) -> Optional[int]:
        """
        The number of seats to move to the new organization. Must be less than or equal to the total number of seats of the license
        """
        return pulumi.get(self, "seat_count")


@pulumi.output_type
class LicensesMoveSeatsParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destOrganizationId":
            suggest = "dest_organization_id"
        elif key == "licenseId":
            suggest = "license_id"
        elif key == "seatCount":
            suggest = "seat_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensesMoveSeatsParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensesMoveSeatsParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensesMoveSeatsParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_organization_id: Optional[str] = None,
                 license_id: Optional[str] = None,
                 seat_count: Optional[int] = None):
        """
        :param str dest_organization_id: The ID of the organization to move the SM seats to
        :param str license_id: The ID of the SM license to move the seats from
        :param int seat_count: The number of seats to move to the new organization. Must be less than or equal to the total number of seats of the license
        """
        if dest_organization_id is not None:
            pulumi.set(__self__, "dest_organization_id", dest_organization_id)
        if license_id is not None:
            pulumi.set(__self__, "license_id", license_id)
        if seat_count is not None:
            pulumi.set(__self__, "seat_count", seat_count)

    @property
    @pulumi.getter(name="destOrganizationId")
    def dest_organization_id(self) -> Optional[str]:
        """
        The ID of the organization to move the SM seats to
        """
        return pulumi.get(self, "dest_organization_id")

    @property
    @pulumi.getter(name="licenseId")
    def license_id(self) -> Optional[str]:
        """
        The ID of the SM license to move the seats from
        """
        return pulumi.get(self, "license_id")

    @property
    @pulumi.getter(name="seatCount")
    def seat_count(self) -> Optional[int]:
        """
        The number of seats to move to the new organization. Must be less than or equal to the total number of seats of the license
        """
        return pulumi.get(self, "seat_count")


@pulumi.output_type
class LicensesPermanentlyQueuedLicense(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInDays":
            suggest = "duration_in_days"
        elif key == "licenseKey":
            suggest = "license_key"
        elif key == "licenseType":
            suggest = "license_type"
        elif key == "orderNumber":
            suggest = "order_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensesPermanentlyQueuedLicense. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensesPermanentlyQueuedLicense.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensesPermanentlyQueuedLicense.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_days: Optional[int] = None,
                 id: Optional[str] = None,
                 license_key: Optional[str] = None,
                 license_type: Optional[str] = None,
                 order_number: Optional[str] = None):
        """
        :param int duration_in_days: The duration of the individual license
        :param str id: Permanently queued license ID
        :param str license_key: License key
        :param str license_type: License type
        :param str order_number: Order number
        """
        if duration_in_days is not None:
            pulumi.set(__self__, "duration_in_days", duration_in_days)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if license_key is not None:
            pulumi.set(__self__, "license_key", license_key)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)

    @property
    @pulumi.getter(name="durationInDays")
    def duration_in_days(self) -> Optional[int]:
        """
        The duration of the individual license
        """
        return pulumi.get(self, "duration_in_days")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Permanently queued license ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> Optional[str]:
        """
        License key
        """
        return pulumi.get(self, "license_key")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        """
        License type
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        """
        Order number
        """
        return pulumi.get(self, "order_number")


@pulumi.output_type
class LicensesRenewSeatsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resultingLicenses":
            suggest = "resulting_licenses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensesRenewSeatsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensesRenewSeatsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensesRenewSeatsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resulting_licenses: Optional[Sequence['outputs.LicensesRenewSeatsItemResultingLicense']] = None):
        """
        :param Sequence['LicensesRenewSeatsItemResultingLicenseArgs'] resulting_licenses: Resulting licenses from the move
        """
        if resulting_licenses is not None:
            pulumi.set(__self__, "resulting_licenses", resulting_licenses)

    @property
    @pulumi.getter(name="resultingLicenses")
    def resulting_licenses(self) -> Optional[Sequence['outputs.LicensesRenewSeatsItemResultingLicense']]:
        """
        Resulting licenses from the move
        """
        return pulumi.get(self, "resulting_licenses")


@pulumi.output_type
class LicensesRenewSeatsItemResultingLicense(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activationDate":
            suggest = "activation_date"
        elif key == "claimDate":
            suggest = "claim_date"
        elif key == "deviceSerial":
            suggest = "device_serial"
        elif key == "durationInDays":
            suggest = "duration_in_days"
        elif key == "expirationDate":
            suggest = "expiration_date"
        elif key == "headLicenseId":
            suggest = "head_license_id"
        elif key == "licenseKey":
            suggest = "license_key"
        elif key == "licenseType":
            suggest = "license_type"
        elif key == "networkId":
            suggest = "network_id"
        elif key == "orderNumber":
            suggest = "order_number"
        elif key == "permanentlyQueuedLicenses":
            suggest = "permanently_queued_licenses"
        elif key == "seatCount":
            suggest = "seat_count"
        elif key == "totalDurationInDays":
            suggest = "total_duration_in_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensesRenewSeatsItemResultingLicense. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensesRenewSeatsItemResultingLicense.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensesRenewSeatsItemResultingLicense.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activation_date: Optional[str] = None,
                 claim_date: Optional[str] = None,
                 device_serial: Optional[str] = None,
                 duration_in_days: Optional[int] = None,
                 expiration_date: Optional[str] = None,
                 head_license_id: Optional[str] = None,
                 id: Optional[str] = None,
                 license_key: Optional[str] = None,
                 license_type: Optional[str] = None,
                 network_id: Optional[str] = None,
                 order_number: Optional[str] = None,
                 permanently_queued_licenses: Optional[Sequence['outputs.LicensesRenewSeatsItemResultingLicensePermanentlyQueuedLicense']] = None,
                 seat_count: Optional[int] = None,
                 state: Optional[str] = None,
                 total_duration_in_days: Optional[int] = None):
        """
        :param str activation_date: The date the license started burning
        :param str claim_date: The date the license was claimed into the organization
        :param str device_serial: Serial number of the device the license is assigned to
        :param int duration_in_days: The duration of the individual license
        :param str expiration_date: The date the license will expire
        :param str head_license_id: The id of the head license this license is queued behind. If there is no head license, it returns nil.
        :param str id: License ID
        :param str license_key: License key
        :param str license_type: License type
        :param str network_id: ID of the network the license is assigned to
        :param str order_number: Order number
        :param Sequence['LicensesRenewSeatsItemResultingLicensePermanentlyQueuedLicenseArgs'] permanently_queued_licenses: DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
        :param int seat_count: The number of seats of the license. Only applicable to SM licenses.
        :param str state: The state of the license. All queued licenses have a status of *recentlyQueued*.
        :param int total_duration_in_days: The duration of the license plus all permanently queued licenses associated with it
        """
        if activation_date is not None:
            pulumi.set(__self__, "activation_date", activation_date)
        if claim_date is not None:
            pulumi.set(__self__, "claim_date", claim_date)
        if device_serial is not None:
            pulumi.set(__self__, "device_serial", device_serial)
        if duration_in_days is not None:
            pulumi.set(__self__, "duration_in_days", duration_in_days)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if head_license_id is not None:
            pulumi.set(__self__, "head_license_id", head_license_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if license_key is not None:
            pulumi.set(__self__, "license_key", license_key)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)
        if permanently_queued_licenses is not None:
            pulumi.set(__self__, "permanently_queued_licenses", permanently_queued_licenses)
        if seat_count is not None:
            pulumi.set(__self__, "seat_count", seat_count)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if total_duration_in_days is not None:
            pulumi.set(__self__, "total_duration_in_days", total_duration_in_days)

    @property
    @pulumi.getter(name="activationDate")
    def activation_date(self) -> Optional[str]:
        """
        The date the license started burning
        """
        return pulumi.get(self, "activation_date")

    @property
    @pulumi.getter(name="claimDate")
    def claim_date(self) -> Optional[str]:
        """
        The date the license was claimed into the organization
        """
        return pulumi.get(self, "claim_date")

    @property
    @pulumi.getter(name="deviceSerial")
    def device_serial(self) -> Optional[str]:
        """
        Serial number of the device the license is assigned to
        """
        return pulumi.get(self, "device_serial")

    @property
    @pulumi.getter(name="durationInDays")
    def duration_in_days(self) -> Optional[int]:
        """
        The duration of the individual license
        """
        return pulumi.get(self, "duration_in_days")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        """
        The date the license will expire
        """
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter(name="headLicenseId")
    def head_license_id(self) -> Optional[str]:
        """
        The id of the head license this license is queued behind. If there is no head license, it returns nil.
        """
        return pulumi.get(self, "head_license_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        License ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> Optional[str]:
        """
        License key
        """
        return pulumi.get(self, "license_key")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        """
        License type
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[str]:
        """
        ID of the network the license is assigned to
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        """
        Order number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="permanentlyQueuedLicenses")
    def permanently_queued_licenses(self) -> Optional[Sequence['outputs.LicensesRenewSeatsItemResultingLicensePermanentlyQueuedLicense']]:
        """
        DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
        """
        return pulumi.get(self, "permanently_queued_licenses")

    @property
    @pulumi.getter(name="seatCount")
    def seat_count(self) -> Optional[int]:
        """
        The number of seats of the license. Only applicable to SM licenses.
        """
        return pulumi.get(self, "seat_count")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The state of the license. All queued licenses have a status of *recentlyQueued*.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="totalDurationInDays")
    def total_duration_in_days(self) -> Optional[int]:
        """
        The duration of the license plus all permanently queued licenses associated with it
        """
        return pulumi.get(self, "total_duration_in_days")


@pulumi.output_type
class LicensesRenewSeatsItemResultingLicensePermanentlyQueuedLicense(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInDays":
            suggest = "duration_in_days"
        elif key == "licenseKey":
            suggest = "license_key"
        elif key == "licenseType":
            suggest = "license_type"
        elif key == "orderNumber":
            suggest = "order_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensesRenewSeatsItemResultingLicensePermanentlyQueuedLicense. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensesRenewSeatsItemResultingLicensePermanentlyQueuedLicense.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensesRenewSeatsItemResultingLicensePermanentlyQueuedLicense.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_days: Optional[int] = None,
                 id: Optional[str] = None,
                 license_key: Optional[str] = None,
                 license_type: Optional[str] = None,
                 order_number: Optional[str] = None):
        """
        :param int duration_in_days: The duration of the individual license
        :param str id: Permanently queued license ID
        :param str license_key: License key
        :param str license_type: License type
        :param str order_number: Order number
        """
        if duration_in_days is not None:
            pulumi.set(__self__, "duration_in_days", duration_in_days)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if license_key is not None:
            pulumi.set(__self__, "license_key", license_key)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if order_number is not None:
            pulumi.set(__self__, "order_number", order_number)

    @property
    @pulumi.getter(name="durationInDays")
    def duration_in_days(self) -> Optional[int]:
        """
        The duration of the individual license
        """
        return pulumi.get(self, "duration_in_days")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Permanently queued license ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> Optional[str]:
        """
        License key
        """
        return pulumi.get(self, "license_key")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        """
        License type
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> Optional[str]:
        """
        Order number
        """
        return pulumi.get(self, "order_number")


@pulumi.output_type
class LicensesRenewSeatsParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "licenseIdToRenew":
            suggest = "license_id_to_renew"
        elif key == "unusedLicenseId":
            suggest = "unused_license_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensesRenewSeatsParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensesRenewSeatsParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensesRenewSeatsParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 license_id_to_renew: Optional[str] = None,
                 unused_license_id: Optional[str] = None):
        """
        :param str license_id_to_renew: The ID of the SM license to renew. This license must already be assigned to an SM network
        :param str unused_license_id: The SM license to use to renew the seats on 'licenseIdToRenew'. This license must have at least as many seats available as there are seats on 'licenseIdToRenew'
        """
        if license_id_to_renew is not None:
            pulumi.set(__self__, "license_id_to_renew", license_id_to_renew)
        if unused_license_id is not None:
            pulumi.set(__self__, "unused_license_id", unused_license_id)

    @property
    @pulumi.getter(name="licenseIdToRenew")
    def license_id_to_renew(self) -> Optional[str]:
        """
        The ID of the SM license to renew. This license must already be assigned to an SM network
        """
        return pulumi.get(self, "license_id_to_renew")

    @property
    @pulumi.getter(name="unusedLicenseId")
    def unused_license_id(self) -> Optional[str]:
        """
        The SM license to use to renew the seats on 'licenseIdToRenew'. This license must have at least as many seats available as there are seats on 'licenseIdToRenew'
        """
        return pulumi.get(self, "unused_license_id")


@pulumi.output_type
class LicensingCotermLicensesMoveItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "movedLicenses":
            suggest = "moved_licenses"
        elif key == "remainderLicenses":
            suggest = "remainder_licenses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensingCotermLicensesMoveItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensingCotermLicensesMoveItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensingCotermLicensesMoveItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 moved_licenses: Optional[Sequence['outputs.LicensingCotermLicensesMoveItemMovedLicense']] = None,
                 remainder_licenses: Optional[Sequence['outputs.LicensingCotermLicensesMoveItemRemainderLicense']] = None):
        """
        :param Sequence['LicensingCotermLicensesMoveItemMovedLicenseArgs'] moved_licenses: Newly moved licenses created in the destination organization of the license move operation
        :param Sequence['LicensingCotermLicensesMoveItemRemainderLicenseArgs'] remainder_licenses: Remainder licenses created in the source organization as a result of moving a subset of the counts of a license
        """
        if moved_licenses is not None:
            pulumi.set(__self__, "moved_licenses", moved_licenses)
        if remainder_licenses is not None:
            pulumi.set(__self__, "remainder_licenses", remainder_licenses)

    @property
    @pulumi.getter(name="movedLicenses")
    def moved_licenses(self) -> Optional[Sequence['outputs.LicensingCotermLicensesMoveItemMovedLicense']]:
        """
        Newly moved licenses created in the destination organization of the license move operation
        """
        return pulumi.get(self, "moved_licenses")

    @property
    @pulumi.getter(name="remainderLicenses")
    def remainder_licenses(self) -> Optional[Sequence['outputs.LicensingCotermLicensesMoveItemRemainderLicense']]:
        """
        Remainder licenses created in the source organization as a result of moving a subset of the counts of a license
        """
        return pulumi.get(self, "remainder_licenses")


@pulumi.output_type
class LicensingCotermLicensesMoveItemMovedLicense(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "claimedAt":
            suggest = "claimed_at"
        elif key == "invalidatedAt":
            suggest = "invalidated_at"
        elif key == "organizationId":
            suggest = "organization_id"
        elif key == "startedAt":
            suggest = "started_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensingCotermLicensesMoveItemMovedLicense. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensingCotermLicensesMoveItemMovedLicense.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensingCotermLicensesMoveItemMovedLicense.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 claimed_at: Optional[str] = None,
                 counts: Optional[Sequence['outputs.LicensingCotermLicensesMoveItemMovedLicenseCount']] = None,
                 duration: Optional[int] = None,
                 editions: Optional[Sequence['outputs.LicensingCotermLicensesMoveItemMovedLicenseEdition']] = None,
                 expired: Optional[bool] = None,
                 invalidated: Optional[bool] = None,
                 invalidated_at: Optional[str] = None,
                 key: Optional[str] = None,
                 mode: Optional[str] = None,
                 organization_id: Optional[str] = None,
                 started_at: Optional[str] = None):
        """
        :param str claimed_at: When the license was claimed into the organization
        :param Sequence['LicensingCotermLicensesMoveItemMovedLicenseCountArgs'] counts: The counts of the license by model type
        :param int duration: The duration (term length) of the license, measured in days
        :param Sequence['LicensingCotermLicensesMoveItemMovedLicenseEditionArgs'] editions: The editions of the license for each relevant product type
        :param bool expired: Flag to indicate if the license is expired
        :param bool invalidated: Flag to indicated that the license is invalidated
        :param str invalidated_at: When the license was invalidated. Will be null for active licenses
        :param str key: The key of the license
        :param str mode: The operation mode of the license when it was claimed
        :param str organization_id: The ID of the organization that the license is claimed in
        :param str started_at: When the license's term began (approximately the date when the license was created)
        """
        if claimed_at is not None:
            pulumi.set(__self__, "claimed_at", claimed_at)
        if counts is not None:
            pulumi.set(__self__, "counts", counts)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if editions is not None:
            pulumi.set(__self__, "editions", editions)
        if expired is not None:
            pulumi.set(__self__, "expired", expired)
        if invalidated is not None:
            pulumi.set(__self__, "invalidated", invalidated)
        if invalidated_at is not None:
            pulumi.set(__self__, "invalidated_at", invalidated_at)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="claimedAt")
    def claimed_at(self) -> Optional[str]:
        """
        When the license was claimed into the organization
        """
        return pulumi.get(self, "claimed_at")

    @property
    @pulumi.getter
    def counts(self) -> Optional[Sequence['outputs.LicensingCotermLicensesMoveItemMovedLicenseCount']]:
        """
        The counts of the license by model type
        """
        return pulumi.get(self, "counts")

    @property
    @pulumi.getter
    def duration(self) -> Optional[int]:
        """
        The duration (term length) of the license, measured in days
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def editions(self) -> Optional[Sequence['outputs.LicensingCotermLicensesMoveItemMovedLicenseEdition']]:
        """
        The editions of the license for each relevant product type
        """
        return pulumi.get(self, "editions")

    @property
    @pulumi.getter
    def expired(self) -> Optional[bool]:
        """
        Flag to indicate if the license is expired
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter
    def invalidated(self) -> Optional[bool]:
        """
        Flag to indicated that the license is invalidated
        """
        return pulumi.get(self, "invalidated")

    @property
    @pulumi.getter(name="invalidatedAt")
    def invalidated_at(self) -> Optional[str]:
        """
        When the license was invalidated. Will be null for active licenses
        """
        return pulumi.get(self, "invalidated_at")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the license
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The operation mode of the license when it was claimed
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[str]:
        """
        The ID of the organization that the license is claimed in
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        When the license's term began (approximately the date when the license was created)
        """
        return pulumi.get(self, "started_at")


@pulumi.output_type
class LicensingCotermLicensesMoveItemMovedLicenseCount(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 model: Optional[str] = None):
        """
        :param int count: The number of counts the license contains of this model
        :param str model: The license model type
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if model is not None:
            pulumi.set(__self__, "model", model)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        The number of counts the license contains of this model
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        The license model type
        """
        return pulumi.get(self, "model")


@pulumi.output_type
class LicensingCotermLicensesMoveItemMovedLicenseEdition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productType":
            suggest = "product_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensingCotermLicensesMoveItemMovedLicenseEdition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensingCotermLicensesMoveItemMovedLicenseEdition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensingCotermLicensesMoveItemMovedLicenseEdition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 edition: Optional[str] = None,
                 product_type: Optional[str] = None):
        """
        :param str edition: The name of the license edition
        :param str product_type: The product type of the license edition
        """
        if edition is not None:
            pulumi.set(__self__, "edition", edition)
        if product_type is not None:
            pulumi.set(__self__, "product_type", product_type)

    @property
    @pulumi.getter
    def edition(self) -> Optional[str]:
        """
        The name of the license edition
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> Optional[str]:
        """
        The product type of the license edition
        """
        return pulumi.get(self, "product_type")


@pulumi.output_type
class LicensingCotermLicensesMoveItemRemainderLicense(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "claimedAt":
            suggest = "claimed_at"
        elif key == "invalidatedAt":
            suggest = "invalidated_at"
        elif key == "organizationId":
            suggest = "organization_id"
        elif key == "startedAt":
            suggest = "started_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensingCotermLicensesMoveItemRemainderLicense. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensingCotermLicensesMoveItemRemainderLicense.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensingCotermLicensesMoveItemRemainderLicense.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 claimed_at: Optional[str] = None,
                 counts: Optional[Sequence['outputs.LicensingCotermLicensesMoveItemRemainderLicenseCount']] = None,
                 duration: Optional[int] = None,
                 editions: Optional[Sequence['outputs.LicensingCotermLicensesMoveItemRemainderLicenseEdition']] = None,
                 expired: Optional[bool] = None,
                 invalidated: Optional[bool] = None,
                 invalidated_at: Optional[str] = None,
                 key: Optional[str] = None,
                 mode: Optional[str] = None,
                 organization_id: Optional[str] = None,
                 started_at: Optional[str] = None):
        """
        :param str claimed_at: When the license was claimed into the organization
        :param Sequence['LicensingCotermLicensesMoveItemRemainderLicenseCountArgs'] counts: The counts of the license by model type
        :param int duration: The duration (term length) of the license, measured in days
        :param Sequence['LicensingCotermLicensesMoveItemRemainderLicenseEditionArgs'] editions: The editions of the license for each relevant product type
        :param bool expired: Flag to indicate if the license is expired
        :param bool invalidated: Flag to indicated that the license is invalidated
        :param str invalidated_at: When the license was invalidated. Will be null for active licenses
        :param str key: The key of the license
        :param str mode: The operation mode of the license when it was claimed
        :param str organization_id: The ID of the organization that the license is claimed in
        :param str started_at: When the license's term began (approximately the date when the license was created)
        """
        if claimed_at is not None:
            pulumi.set(__self__, "claimed_at", claimed_at)
        if counts is not None:
            pulumi.set(__self__, "counts", counts)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if editions is not None:
            pulumi.set(__self__, "editions", editions)
        if expired is not None:
            pulumi.set(__self__, "expired", expired)
        if invalidated is not None:
            pulumi.set(__self__, "invalidated", invalidated)
        if invalidated_at is not None:
            pulumi.set(__self__, "invalidated_at", invalidated_at)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="claimedAt")
    def claimed_at(self) -> Optional[str]:
        """
        When the license was claimed into the organization
        """
        return pulumi.get(self, "claimed_at")

    @property
    @pulumi.getter
    def counts(self) -> Optional[Sequence['outputs.LicensingCotermLicensesMoveItemRemainderLicenseCount']]:
        """
        The counts of the license by model type
        """
        return pulumi.get(self, "counts")

    @property
    @pulumi.getter
    def duration(self) -> Optional[int]:
        """
        The duration (term length) of the license, measured in days
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def editions(self) -> Optional[Sequence['outputs.LicensingCotermLicensesMoveItemRemainderLicenseEdition']]:
        """
        The editions of the license for each relevant product type
        """
        return pulumi.get(self, "editions")

    @property
    @pulumi.getter
    def expired(self) -> Optional[bool]:
        """
        Flag to indicate if the license is expired
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter
    def invalidated(self) -> Optional[bool]:
        """
        Flag to indicated that the license is invalidated
        """
        return pulumi.get(self, "invalidated")

    @property
    @pulumi.getter(name="invalidatedAt")
    def invalidated_at(self) -> Optional[str]:
        """
        When the license was invalidated. Will be null for active licenses
        """
        return pulumi.get(self, "invalidated_at")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the license
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The operation mode of the license when it was claimed
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[str]:
        """
        The ID of the organization that the license is claimed in
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        When the license's term began (approximately the date when the license was created)
        """
        return pulumi.get(self, "started_at")


@pulumi.output_type
class LicensingCotermLicensesMoveItemRemainderLicenseCount(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 model: Optional[str] = None):
        """
        :param int count: The number of counts the license contains of this model
        :param str model: The license model type
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if model is not None:
            pulumi.set(__self__, "model", model)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        The number of counts the license contains of this model
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        The license model type
        """
        return pulumi.get(self, "model")


@pulumi.output_type
class LicensingCotermLicensesMoveItemRemainderLicenseEdition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productType":
            suggest = "product_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensingCotermLicensesMoveItemRemainderLicenseEdition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensingCotermLicensesMoveItemRemainderLicenseEdition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensingCotermLicensesMoveItemRemainderLicenseEdition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 edition: Optional[str] = None,
                 product_type: Optional[str] = None):
        """
        :param str edition: The name of the license edition
        :param str product_type: The product type of the license edition
        """
        if edition is not None:
            pulumi.set(__self__, "edition", edition)
        if product_type is not None:
            pulumi.set(__self__, "product_type", product_type)

    @property
    @pulumi.getter
    def edition(self) -> Optional[str]:
        """
        The name of the license edition
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> Optional[str]:
        """
        The product type of the license edition
        """
        return pulumi.get(self, "product_type")


@pulumi.output_type
class LicensingCotermLicensesMoveParameters(dict):
    def __init__(__self__, *,
                 destination: Optional['outputs.LicensingCotermLicensesMoveParametersDestination'] = None,
                 licenses: Optional[Sequence['outputs.LicensingCotermLicensesMoveParametersLicense']] = None):
        """
        :param 'LicensingCotermLicensesMoveParametersDestinationArgs' destination: Destination data for the license move
        :param Sequence['LicensingCotermLicensesMoveParametersLicenseArgs'] licenses: The list of licenses to move
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if licenses is not None:
            pulumi.set(__self__, "licenses", licenses)

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.LicensingCotermLicensesMoveParametersDestination']:
        """
        Destination data for the license move
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def licenses(self) -> Optional[Sequence['outputs.LicensingCotermLicensesMoveParametersLicense']]:
        """
        The list of licenses to move
        """
        return pulumi.get(self, "licenses")


@pulumi.output_type
class LicensingCotermLicensesMoveParametersDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "organizationId":
            suggest = "organization_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicensingCotermLicensesMoveParametersDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicensingCotermLicensesMoveParametersDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicensingCotermLicensesMoveParametersDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: Optional[str] = None,
                 organization_id: Optional[str] = None):
        """
        :param str mode: The claim mode of the moved license
        :param str organization_id: The organization to move the license to
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The claim mode of the moved license
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[str]:
        """
        The organization to move the license to
        """
        return pulumi.get(self, "organization_id")


@pulumi.output_type
class LicensingCotermLicensesMoveParametersLicense(dict):
    def __init__(__self__, *,
                 counts: Optional[Sequence['outputs.LicensingCotermLicensesMoveParametersLicenseCount']] = None,
                 key: Optional[str] = None):
        """
        :param Sequence['LicensingCotermLicensesMoveParametersLicenseCountArgs'] counts: The counts to move from the license by model type
        :param str key: The license key to move counts from
        """
        if counts is not None:
            pulumi.set(__self__, "counts", counts)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def counts(self) -> Optional[Sequence['outputs.LicensingCotermLicensesMoveParametersLicenseCount']]:
        """
        The counts to move from the license by model type
        """
        return pulumi.get(self, "counts")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The license key to move counts from
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class LicensingCotermLicensesMoveParametersLicenseCount(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 model: Optional[str] = None):
        """
        :param int count: The number of counts to move
        :param str model: The license model type to move counts of
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if model is not None:
            pulumi.set(__self__, "model", model)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        """
        The number of counts to move
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        The license model type to move counts of
        """
        return pulumi.get(self, "model")


@pulumi.output_type
class LoginSecurityApiAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRestrictionsForKeys":
            suggest = "ip_restrictions_for_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoginSecurityApiAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoginSecurityApiAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoginSecurityApiAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_restrictions_for_keys: Optional['outputs.LoginSecurityApiAuthenticationIpRestrictionsForKeys'] = None):
        """
        :param 'LoginSecurityApiAuthenticationIpRestrictionsForKeysArgs' ip_restrictions_for_keys: Details for API-only IP restrictions.
        """
        if ip_restrictions_for_keys is not None:
            pulumi.set(__self__, "ip_restrictions_for_keys", ip_restrictions_for_keys)

    @property
    @pulumi.getter(name="ipRestrictionsForKeys")
    def ip_restrictions_for_keys(self) -> Optional['outputs.LoginSecurityApiAuthenticationIpRestrictionsForKeys']:
        """
        Details for API-only IP restrictions.
        """
        return pulumi.get(self, "ip_restrictions_for_keys")


@pulumi.output_type
class LoginSecurityApiAuthenticationIpRestrictionsForKeys(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ranges: Optional[Sequence[str]] = None):
        """
        :param bool enabled: Boolean indicating whether the organization will restrict API key (not Dashboard GUI) usage to a specific list of IP addresses or CIDR ranges.
        :param Sequence[str] ranges: List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Boolean indicating whether the organization will restrict API key (not Dashboard GUI) usage to a specific list of IP addresses or CIDR ranges.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence[str]]:
        """
        List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class NetworksCombineItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resultingNetwork":
            suggest = "resulting_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworksCombineItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworksCombineItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworksCombineItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resulting_network: Optional['outputs.NetworksCombineItemResultingNetwork'] = None):
        """
        :param 'NetworksCombineItemResultingNetworkArgs' resulting_network: Network after the combination
        """
        if resulting_network is not None:
            pulumi.set(__self__, "resulting_network", resulting_network)

    @property
    @pulumi.getter(name="resultingNetwork")
    def resulting_network(self) -> Optional['outputs.NetworksCombineItemResultingNetwork']:
        """
        Network after the combination
        """
        return pulumi.get(self, "resulting_network")


@pulumi.output_type
class NetworksCombineItemResultingNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enrollmentString":
            suggest = "enrollment_string"
        elif key == "isBoundToConfigTemplate":
            suggest = "is_bound_to_config_template"
        elif key == "organizationId":
            suggest = "organization_id"
        elif key == "productTypes":
            suggest = "product_types"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworksCombineItemResultingNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworksCombineItemResultingNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworksCombineItemResultingNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enrollment_string: Optional[str] = None,
                 id: Optional[str] = None,
                 is_bound_to_config_template: Optional[bool] = None,
                 name: Optional[str] = None,
                 notes: Optional[str] = None,
                 organization_id: Optional[str] = None,
                 product_types: Optional[Sequence[str]] = None,
                 tags: Optional[Sequence[str]] = None,
                 time_zone: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str enrollment_string: Enrollment string for the network
        :param str id: Network ID
        :param bool is_bound_to_config_template: If the network is bound to a config template
        :param str name: Network name
        :param str notes: Notes for the network
        :param str organization_id: Organization ID
        :param Sequence[str] product_types: List of the product types that the network supports
        :param Sequence[str] tags: Network tags
        :param str time_zone: Timezone of the network
        :param str url: URL to the network Dashboard UI
        """
        if enrollment_string is not None:
            pulumi.set(__self__, "enrollment_string", enrollment_string)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_bound_to_config_template is not None:
            pulumi.set(__self__, "is_bound_to_config_template", is_bound_to_config_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if product_types is not None:
            pulumi.set(__self__, "product_types", product_types)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="enrollmentString")
    def enrollment_string(self) -> Optional[str]:
        """
        Enrollment string for the network
        """
        return pulumi.get(self, "enrollment_string")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Network ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBoundToConfigTemplate")
    def is_bound_to_config_template(self) -> Optional[bool]:
        """
        If the network is bound to a config template
        """
        return pulumi.get(self, "is_bound_to_config_template")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Network name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        Notes for the network
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[str]:
        """
        Organization ID
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="productTypes")
    def product_types(self) -> Optional[Sequence[str]]:
        """
        List of the product types that the network supports
        """
        return pulumi.get(self, "product_types")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        Network tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        Timezone of the network
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL to the network Dashboard UI
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class NetworksCombineParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enrollmentString":
            suggest = "enrollment_string"
        elif key == "networkIds":
            suggest = "network_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworksCombineParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworksCombineParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworksCombineParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enrollment_string: Optional[str] = None,
                 name: Optional[str] = None,
                 network_ids: Optional[Sequence[str]] = None):
        """
        :param str enrollment_string: A unique identifier which can be used for device enrollment or easy access through the Meraki SM Registration page or the Self Service Portal. Please note that changing this field may cause existing bookmarks to break. All networks that are part of this combined network will have their enrollment string appended by '-network_type'. If left empty, all exisitng enrollment strings will be deleted.
        :param str name: The name of the combined network
        :param Sequence[str] network_ids: A list of the network IDs that will be combined. If an ID of a combined network is included in this list, the other networks in the list will be grouped into that network
        """
        if enrollment_string is not None:
            pulumi.set(__self__, "enrollment_string", enrollment_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_ids is not None:
            pulumi.set(__self__, "network_ids", network_ids)

    @property
    @pulumi.getter(name="enrollmentString")
    def enrollment_string(self) -> Optional[str]:
        """
        A unique identifier which can be used for device enrollment or easy access through the Meraki SM Registration page or the Self Service Portal. Please note that changing this field may cause existing bookmarks to break. All networks that are part of this combined network will have their enrollment string appended by '-network_type'. If left empty, all exisitng enrollment strings will be deleted.
        """
        return pulumi.get(self, "enrollment_string")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the combined network
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> Optional[Sequence[str]]:
        """
        A list of the network IDs that will be combined. If an ID of a combined network is included in this list, the other networks in the list will be grouped into that network
        """
        return pulumi.get(self, "network_ids")


@pulumi.output_type
class SamlRolesCamera(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "orgWide":
            suggest = "org_wide"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SamlRolesCamera. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SamlRolesCamera.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SamlRolesCamera.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access: Optional[str] = None,
                 org_wide: Optional[bool] = None):
        """
        :param str access: Camera access ability
        :param bool org_wide: Whether or not SAML administrator has org-wide access
        """
        if access is not None:
            pulumi.set(__self__, "access", access)
        if org_wide is not None:
            pulumi.set(__self__, "org_wide", org_wide)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        """
        Camera access ability
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="orgWide")
    def org_wide(self) -> Optional[bool]:
        """
        Whether or not SAML administrator has org-wide access
        """
        return pulumi.get(self, "org_wide")


@pulumi.output_type
class SamlRolesNetwork(dict):
    def __init__(__self__, *,
                 access: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str access: The privilege of the SAML administrator on the network
        :param str id: The network ID
        """
        if access is not None:
            pulumi.set(__self__, "access", access)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        """
        The privilege of the SAML administrator on the network
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The network ID
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SamlRolesTag(dict):
    def __init__(__self__, *,
                 access: Optional[str] = None,
                 tag: Optional[str] = None):
        """
        :param str access: The privilege of the SAML administrator on the tag
        :param str tag: The name of the tag
        """
        if access is not None:
            pulumi.set(__self__, "access", access)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        """
        The privilege of the SAML administrator on the tag
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        The name of the tag
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class SmSentryPoliciesAssignmentsItem(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.SmSentryPoliciesAssignmentsItemItem']] = None):
        """
        :param Sequence['SmSentryPoliciesAssignmentsItemItemArgs'] items: Sentry Group Policies for the Organization keyed by Network Id
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.SmSentryPoliciesAssignmentsItemItem']]:
        """
        Sentry Group Policies for the Organization keyed by Network Id
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class SmSentryPoliciesAssignmentsItemItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmSentryPoliciesAssignmentsItemItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmSentryPoliciesAssignmentsItemItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmSentryPoliciesAssignmentsItemItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_id: Optional[str] = None,
                 policies: Optional[Sequence['outputs.SmSentryPoliciesAssignmentsItemItemPolicy']] = None):
        """
        :param str network_id: The Id of the Network
        :param Sequence['SmSentryPoliciesAssignmentsItemItemPolicyArgs'] policies: Array of Sentry Group Policies for the Network
        """
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[str]:
        """
        The Id of the Network
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.SmSentryPoliciesAssignmentsItemItemPolicy']]:
        """
        Array of Sentry Group Policies for the Network
        """
        return pulumi.get(self, "policies")


@pulumi.output_type
class SmSentryPoliciesAssignmentsItemItemPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "groupNumber":
            suggest = "group_number"
        elif key == "groupPolicyId":
            suggest = "group_policy_id"
        elif key == "lastUpdatedAt":
            suggest = "last_updated_at"
        elif key == "networkId":
            suggest = "network_id"
        elif key == "policyId":
            suggest = "policy_id"
        elif key == "smNetworkId":
            suggest = "sm_network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmSentryPoliciesAssignmentsItemItemPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmSentryPoliciesAssignmentsItemItemPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmSentryPoliciesAssignmentsItemItemPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 group_number: Optional[str] = None,
                 group_policy_id: Optional[str] = None,
                 last_updated_at: Optional[str] = None,
                 network_id: Optional[str] = None,
                 policy_id: Optional[str] = None,
                 priority: Optional[str] = None,
                 scope: Optional[str] = None,
                 sm_network_id: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None):
        """
        :param str created_at: The creation time of the Sentry Policy
        :param str group_number: The number of the Group Policy
        :param str group_policy_id: The Id of the Group Policy. This is associated with the network specified by the networkId.
        :param str last_updated_at: The last update time of the Sentry Policy
        :param str network_id: The Id of the Network the Sentry Policy is associated with. In a locale, this should be the Wireless Group if present, otherwise the Wired Group.
        :param str policy_id: The Id of the Sentry Policy
        :param str priority: The priority of the Sentry Policy
        :param str scope: The scope of the Sentry Policy
        :param str sm_network_id: The Id of the Systems Manager Network the Sentry Policy is assigned to
        :param Sequence[str] tags: The tags of the Sentry Policy
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if group_number is not None:
            pulumi.set(__self__, "group_number", group_number)
        if group_policy_id is not None:
            pulumi.set(__self__, "group_policy_id", group_policy_id)
        if last_updated_at is not None:
            pulumi.set(__self__, "last_updated_at", last_updated_at)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sm_network_id is not None:
            pulumi.set(__self__, "sm_network_id", sm_network_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The creation time of the Sentry Policy
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> Optional[str]:
        """
        The number of the Group Policy
        """
        return pulumi.get(self, "group_number")

    @property
    @pulumi.getter(name="groupPolicyId")
    def group_policy_id(self) -> Optional[str]:
        """
        The Id of the Group Policy. This is associated with the network specified by the networkId.
        """
        return pulumi.get(self, "group_policy_id")

    @property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> Optional[str]:
        """
        The last update time of the Sentry Policy
        """
        return pulumi.get(self, "last_updated_at")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[str]:
        """
        The Id of the Network the Sentry Policy is associated with. In a locale, this should be the Wireless Group if present, otherwise the Wired Group.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        """
        The Id of the Sentry Policy
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        The priority of the Sentry Policy
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        The scope of the Sentry Policy
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="smNetworkId")
    def sm_network_id(self) -> Optional[str]:
        """
        The Id of the Systems Manager Network the Sentry Policy is assigned to
        """
        return pulumi.get(self, "sm_network_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        The tags of the Sentry Policy
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class SmSentryPoliciesAssignmentsParameters(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.SmSentryPoliciesAssignmentsParametersItem']] = None):
        """
        :param Sequence['SmSentryPoliciesAssignmentsParametersItemArgs'] items: Sentry Group Policies for the Organization keyed by Network Id
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.SmSentryPoliciesAssignmentsParametersItem']]:
        """
        Sentry Group Policies for the Organization keyed by Network Id
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class SmSentryPoliciesAssignmentsParametersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmSentryPoliciesAssignmentsParametersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmSentryPoliciesAssignmentsParametersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmSentryPoliciesAssignmentsParametersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_id: Optional[str] = None,
                 policies: Optional[Sequence['outputs.SmSentryPoliciesAssignmentsParametersItemPolicy']] = None):
        """
        :param str network_id: The Id of the Network
        :param Sequence['SmSentryPoliciesAssignmentsParametersItemPolicyArgs'] policies: Array of Sentry Group Policies for the Network
        """
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[str]:
        """
        The Id of the Network
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.SmSentryPoliciesAssignmentsParametersItemPolicy']]:
        """
        Array of Sentry Group Policies for the Network
        """
        return pulumi.get(self, "policies")


@pulumi.output_type
class SmSentryPoliciesAssignmentsParametersItemPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupPolicyId":
            suggest = "group_policy_id"
        elif key == "policyId":
            suggest = "policy_id"
        elif key == "smNetworkId":
            suggest = "sm_network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmSentryPoliciesAssignmentsParametersItemPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmSentryPoliciesAssignmentsParametersItemPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmSentryPoliciesAssignmentsParametersItemPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_policy_id: Optional[str] = None,
                 policy_id: Optional[str] = None,
                 scope: Optional[str] = None,
                 sm_network_id: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None):
        """
        :param str group_policy_id: The Group Policy Id
        :param str policy_id: The Sentry Policy Id, if updating an existing Sentry Policy
        :param str scope: The scope of the Sentry Policy
        :param str sm_network_id: The Id of the Systems Manager Network
        :param Sequence[str] tags: The tags for the Sentry Policy
        """
        if group_policy_id is not None:
            pulumi.set(__self__, "group_policy_id", group_policy_id)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if sm_network_id is not None:
            pulumi.set(__self__, "sm_network_id", sm_network_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="groupPolicyId")
    def group_policy_id(self) -> Optional[str]:
        """
        The Group Policy Id
        """
        return pulumi.get(self, "group_policy_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        """
        The Sentry Policy Id, if updating an existing Sentry Policy
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        The scope of the Sentry Policy
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="smNetworkId")
    def sm_network_id(self) -> Optional[str]:
        """
        The Id of the Systems Manager Network
        """
        return pulumi.get(self, "sm_network_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        The tags for the Sentry Policy
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class SwitchDevicesCloneParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceSerial":
            suggest = "source_serial"
        elif key == "targetSerials":
            suggest = "target_serials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchDevicesCloneParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchDevicesCloneParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchDevicesCloneParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_serial: Optional[str] = None,
                 target_serials: Optional[Sequence[str]] = None):
        """
        :param str source_serial: Serial number of the source switch (must be on a network not bound to a template)
        :param Sequence[str] target_serials: Array of serial numbers of one or more target switches (must be on a network not bound to a template)
        """
        if source_serial is not None:
            pulumi.set(__self__, "source_serial", source_serial)
        if target_serials is not None:
            pulumi.set(__self__, "target_serials", target_serials)

    @property
    @pulumi.getter(name="sourceSerial")
    def source_serial(self) -> Optional[str]:
        """
        Serial number of the source switch (must be on a network not bound to a template)
        """
        return pulumi.get(self, "source_serial")

    @property
    @pulumi.getter(name="targetSerials")
    def target_serials(self) -> Optional[Sequence[str]]:
        """
        Array of serial numbers of one or more target switches (must be on a network not bound to a template)
        """
        return pulumi.get(self, "target_serials")


@pulumi.output_type
class BaseApi(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable API access
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable API access
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class BaseCloud(dict):
    def __init__(__self__, *,
                 region: Optional['outputs.BaseCloudRegion'] = None):
        """
        :param 'BaseCloudRegionArgs' region: Region info
        """
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional['outputs.BaseCloudRegion']:
        """
        Region info
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class BaseCloudRegion(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Name of region
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of region
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class BaseLicensing(dict):
    def __init__(__self__, *,
                 model: Optional[str] = None):
        """
        :param str model: Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
        """
        if model is not None:
            pulumi.set(__self__, "model", model)

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
        """
        return pulumi.get(self, "model")


@pulumi.output_type
class BaseManagement(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence['outputs.BaseManagementDetail']] = None):
        """
        :param Sequence['BaseManagementDetailArgs'] details: Details related to organization management, possibly empty. Details may be named 'MSP ID', 'IP restriction mode for API', or 'IP restriction mode for dashboard', if the organization admin has configured any.
        """
        if details is not None:
            pulumi.set(__self__, "details", details)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.BaseManagementDetail']]:
        """
        Details related to organization management, possibly empty. Details may be named 'MSP ID', 'IP restriction mode for API', or 'IP restriction mode for dashboard', if the organization admin has configured any.
        """
        return pulumi.get(self, "details")


@pulumi.output_type
class BaseManagementDetail(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of management data
        :param str value: Value of management data
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of management data
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of management data
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetActionBatchesItemResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetActionBatchesItemActionResult'],
                 confirmed: bool,
                 id: str,
                 organization_id: str,
                 status: 'outputs.GetActionBatchesItemStatusResult',
                 synchronous: bool):
        """
        :param Sequence['GetActionBatchesItemActionArgs'] actions: A set of changes made as part of this action (\\n\\nmore details\\n\\n)
        :param bool confirmed: Flag describing whether the action should be previewed before executing or not
        :param str id: ID of the action batch. Can be used to check the status of the action batch at /organizations/{organizationId}/actionBatches/{actionBatchId}
        :param str organization_id: ID of the organization this action batch belongs to
        :param 'GetActionBatchesItemStatusArgs' status: Status of action batch
        :param bool synchronous: Flag describing whether actions should run synchronously or asynchronously
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "confirmed", confirmed)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "synchronous", synchronous)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetActionBatchesItemActionResult']:
        """
        A set of changes made as part of this action (\\n\\nmore details\\n\\n)
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def confirmed(self) -> bool:
        """
        Flag describing whether the action should be previewed before executing or not
        """
        return pulumi.get(self, "confirmed")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the action batch. Can be used to check the status of the action batch at /organizations/{organizationId}/actionBatches/{actionBatchId}
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        ID of the organization this action batch belongs to
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.GetActionBatchesItemStatusResult':
        """
        Status of action batch
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def synchronous(self) -> bool:
        """
        Flag describing whether actions should run synchronously or asynchronously
        """
        return pulumi.get(self, "synchronous")


@pulumi.output_type
class GetActionBatchesItemActionResult(dict):
    def __init__(__self__, *,
                 body: str,
                 operation: str,
                 resource: str):
        """
        :param str body: Data provided in the body of the Action. Contents depend on the Action type
        :param str operation: The operation to be used by this action
        :param str resource: Unique identifier for the resource to be acted on
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        Data provided in the body of the Action. Contents depend on the Action type
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        The operation to be used by this action
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Unique identifier for the resource to be acted on
        """
        return pulumi.get(self, "resource")


@pulumi.output_type
class GetActionBatchesItemStatusResult(dict):
    def __init__(__self__, *,
                 completed: bool,
                 created_resources: Sequence['outputs.GetActionBatchesItemStatusCreatedResourceResult'],
                 errors: Sequence[str],
                 failed: bool):
        """
        :param bool completed: Flag describing whether all actions in the action batch have completed
        :param Sequence['GetActionBatchesItemStatusCreatedResourceArgs'] created_resources: Resources created as a result of this action batch
        :param Sequence[str] errors: List of errors encountered when running actions in the action batch
        :param bool failed: Flag describing whether any actions in the action batch failed
        """
        pulumi.set(__self__, "completed", completed)
        pulumi.set(__self__, "created_resources", created_resources)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "failed", failed)

    @property
    @pulumi.getter
    def completed(self) -> bool:
        """
        Flag describing whether all actions in the action batch have completed
        """
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="createdResources")
    def created_resources(self) -> Sequence['outputs.GetActionBatchesItemStatusCreatedResourceResult']:
        """
        Resources created as a result of this action batch
        """
        return pulumi.get(self, "created_resources")

    @property
    @pulumi.getter
    def errors(self) -> Sequence[str]:
        """
        List of errors encountered when running actions in the action batch
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def failed(self) -> bool:
        """
        Flag describing whether any actions in the action batch failed
        """
        return pulumi.get(self, "failed")


@pulumi.output_type
class GetActionBatchesItemStatusCreatedResourceResult(dict):
    def __init__(__self__, *,
                 id: str,
                 uri: str):
        """
        :param str id: ID of the created resource
        :param str uri: URI, not including base, of the created resource
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the created resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        URI, not including base, of the created resource
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetAdaptivePolicyAclsItemResult(dict):
    def __init__(__self__, *,
                 acl_id: str,
                 created_at: str,
                 description: str,
                 ip_version: str,
                 name: str,
                 rules: Sequence['outputs.GetAdaptivePolicyAclsItemRuleResult'],
                 updated_at: str):
        """
        :param str acl_id: ID of the adaptive policy ACL
        :param str created_at: When the adaptive policy ACL was created
        :param str description: Description of the adaptive policy ACL
        :param str ip_version: IP version of adpative policy ACL
        :param str name: Name of the adaptive policy ACL
        :param Sequence['GetAdaptivePolicyAclsItemRuleArgs'] rules: An ordered array of the adaptive policy ACL rules
        :param str updated_at: When the adaptive policy ACL was last updated
        """
        pulumi.set(__self__, "acl_id", acl_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="aclId")
    def acl_id(self) -> str:
        """
        ID of the adaptive policy ACL
        """
        return pulumi.get(self, "acl_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the adaptive policy ACL was created
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the adaptive policy ACL
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> str:
        """
        IP version of adpative policy ACL
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the adaptive policy ACL
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetAdaptivePolicyAclsItemRuleResult']:
        """
        An ordered array of the adaptive policy ACL rules
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the adaptive policy ACL was last updated
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetAdaptivePolicyAclsItemRuleResult(dict):
    def __init__(__self__, *,
                 dst_port: str,
                 policy: str,
                 protocol: str,
                 src_port: str):
        """
        :param str dst_port: Destination port
        :param str policy: 'allow' or 'deny' traffic specified by this rule
        :param str protocol: The type of protocol
        :param str src_port: Source port
        """
        pulumi.set(__self__, "dst_port", dst_port)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "src_port", src_port)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> str:
        """
        Destination port
        """
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def policy(self) -> str:
        """
        'allow' or 'deny' traffic specified by this rule
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The type of protocol
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> str:
        """
        Source port
        """
        return pulumi.get(self, "src_port")


@pulumi.output_type
class GetAdaptivePolicyGroupsItemResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 description: str,
                 group_id: str,
                 is_default_group: bool,
                 name: str,
                 policy_objects: Sequence['outputs.GetAdaptivePolicyGroupsItemPolicyObjectResult'],
                 required_ip_mappings: Sequence[str],
                 sgt: int,
                 updated_at: str):
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "is_default_group", is_default_group)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_objects", policy_objects)
        pulumi.set(__self__, "required_ip_mappings", required_ip_mappings)
        pulumi.set(__self__, "sgt", sgt)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="isDefaultGroup")
    def is_default_group(self) -> bool:
        return pulumi.get(self, "is_default_group")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyObjects")
    def policy_objects(self) -> Sequence['outputs.GetAdaptivePolicyGroupsItemPolicyObjectResult']:
        return pulumi.get(self, "policy_objects")

    @property
    @pulumi.getter(name="requiredIpMappings")
    def required_ip_mappings(self) -> Sequence[str]:
        return pulumi.get(self, "required_ip_mappings")

    @property
    @pulumi.getter
    def sgt(self) -> int:
        return pulumi.get(self, "sgt")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetAdaptivePolicyGroupsItemPolicyObjectResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAdaptivePolicyOverviewItemResult(dict):
    def __init__(__self__, *,
                 counts: 'outputs.GetAdaptivePolicyOverviewItemCountsResult',
                 limits: 'outputs.GetAdaptivePolicyOverviewItemLimitsResult'):
        """
        :param 'GetAdaptivePolicyOverviewItemCountsArgs' counts: The current amount of various adaptive policy objects.
        :param 'GetAdaptivePolicyOverviewItemLimitsArgs' limits: The current limits of various adaptive policy objects.
        """
        pulumi.set(__self__, "counts", counts)
        pulumi.set(__self__, "limits", limits)

    @property
    @pulumi.getter
    def counts(self) -> 'outputs.GetAdaptivePolicyOverviewItemCountsResult':
        """
        The current amount of various adaptive policy objects.
        """
        return pulumi.get(self, "counts")

    @property
    @pulumi.getter
    def limits(self) -> 'outputs.GetAdaptivePolicyOverviewItemLimitsResult':
        """
        The current limits of various adaptive policy objects.
        """
        return pulumi.get(self, "limits")


@pulumi.output_type
class GetAdaptivePolicyOverviewItemCountsResult(dict):
    def __init__(__self__, *,
                 allow_policies: int,
                 custom_acls: int,
                 custom_groups: int,
                 deny_policies: int,
                 groups: int,
                 policies: int,
                 policy_objects: int):
        """
        :param int allow_policies: Number of adaptive policies currently in the organization that allow all traffic.
        :param int custom_acls: Number of user-created adaptive policy ACLs currently in the organization.
        :param int custom_groups: Number of user-created adaptive policy groups currently in the organization.
        :param int deny_policies: Number of adaptive policies currently in the organization that deny all traffic.
        :param int groups: Number of adaptive policy groups currently in the organization.
        :param int policies: Number of adaptive policies currently in the organization.
        :param int policy_objects: Number of policy objects (with the adaptive policy type) currently in the organization.
        """
        pulumi.set(__self__, "allow_policies", allow_policies)
        pulumi.set(__self__, "custom_acls", custom_acls)
        pulumi.set(__self__, "custom_groups", custom_groups)
        pulumi.set(__self__, "deny_policies", deny_policies)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "policies", policies)
        pulumi.set(__self__, "policy_objects", policy_objects)

    @property
    @pulumi.getter(name="allowPolicies")
    def allow_policies(self) -> int:
        """
        Number of adaptive policies currently in the organization that allow all traffic.
        """
        return pulumi.get(self, "allow_policies")

    @property
    @pulumi.getter(name="customAcls")
    def custom_acls(self) -> int:
        """
        Number of user-created adaptive policy ACLs currently in the organization.
        """
        return pulumi.get(self, "custom_acls")

    @property
    @pulumi.getter(name="customGroups")
    def custom_groups(self) -> int:
        """
        Number of user-created adaptive policy groups currently in the organization.
        """
        return pulumi.get(self, "custom_groups")

    @property
    @pulumi.getter(name="denyPolicies")
    def deny_policies(self) -> int:
        """
        Number of adaptive policies currently in the organization that deny all traffic.
        """
        return pulumi.get(self, "deny_policies")

    @property
    @pulumi.getter
    def groups(self) -> int:
        """
        Number of adaptive policy groups currently in the organization.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def policies(self) -> int:
        """
        Number of adaptive policies currently in the organization.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="policyObjects")
    def policy_objects(self) -> int:
        """
        Number of policy objects (with the adaptive policy type) currently in the organization.
        """
        return pulumi.get(self, "policy_objects")


@pulumi.output_type
class GetAdaptivePolicyOverviewItemLimitsResult(dict):
    def __init__(__self__, *,
                 acls_in_a_policy: int,
                 custom_groups: int,
                 policy_objects: int,
                 rules_in_an_acl: int):
        """
        :param int acls_in_a_policy: Maximum number of adaptive policy ACLs that can be assigned to an adaptive policy in the organization.
        :param int custom_groups: Maximum number of user-created adaptive policy groups allowed in the organization.
        :param int policy_objects: Maximum number of policy objects (with the adaptive policy type) allowed in the organization.
        :param int rules_in_an_acl: Maximum number of rules allowed in an adaptive policy ACL in the organization.
        """
        pulumi.set(__self__, "acls_in_a_policy", acls_in_a_policy)
        pulumi.set(__self__, "custom_groups", custom_groups)
        pulumi.set(__self__, "policy_objects", policy_objects)
        pulumi.set(__self__, "rules_in_an_acl", rules_in_an_acl)

    @property
    @pulumi.getter(name="aclsInAPolicy")
    def acls_in_a_policy(self) -> int:
        """
        Maximum number of adaptive policy ACLs that can be assigned to an adaptive policy in the organization.
        """
        return pulumi.get(self, "acls_in_a_policy")

    @property
    @pulumi.getter(name="customGroups")
    def custom_groups(self) -> int:
        """
        Maximum number of user-created adaptive policy groups allowed in the organization.
        """
        return pulumi.get(self, "custom_groups")

    @property
    @pulumi.getter(name="policyObjects")
    def policy_objects(self) -> int:
        """
        Maximum number of policy objects (with the adaptive policy type) allowed in the organization.
        """
        return pulumi.get(self, "policy_objects")

    @property
    @pulumi.getter(name="rulesInAnAcl")
    def rules_in_an_acl(self) -> int:
        """
        Maximum number of rules allowed in an adaptive policy ACL in the organization.
        """
        return pulumi.get(self, "rules_in_an_acl")


@pulumi.output_type
class GetAdaptivePolicyPoliciesItemResult(dict):
    def __init__(__self__, *,
                 acls: Sequence['outputs.GetAdaptivePolicyPoliciesItemAclResult'],
                 adaptive_policy_id: str,
                 created_at: str,
                 destination_group: 'outputs.GetAdaptivePolicyPoliciesItemDestinationGroupResult',
                 last_entry_rule: str,
                 source_group: 'outputs.GetAdaptivePolicyPoliciesItemSourceGroupResult',
                 updated_at: str):
        pulumi.set(__self__, "acls", acls)
        pulumi.set(__self__, "adaptive_policy_id", adaptive_policy_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "destination_group", destination_group)
        pulumi.set(__self__, "last_entry_rule", last_entry_rule)
        pulumi.set(__self__, "source_group", source_group)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def acls(self) -> Sequence['outputs.GetAdaptivePolicyPoliciesItemAclResult']:
        return pulumi.get(self, "acls")

    @property
    @pulumi.getter(name="adaptivePolicyId")
    def adaptive_policy_id(self) -> str:
        return pulumi.get(self, "adaptive_policy_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="destinationGroup")
    def destination_group(self) -> 'outputs.GetAdaptivePolicyPoliciesItemDestinationGroupResult':
        return pulumi.get(self, "destination_group")

    @property
    @pulumi.getter(name="lastEntryRule")
    def last_entry_rule(self) -> str:
        return pulumi.get(self, "last_entry_rule")

    @property
    @pulumi.getter(name="sourceGroup")
    def source_group(self) -> 'outputs.GetAdaptivePolicyPoliciesItemSourceGroupResult':
        return pulumi.get(self, "source_group")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetAdaptivePolicyPoliciesItemAclResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAdaptivePolicyPoliciesItemDestinationGroupResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 sgt: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sgt", sgt)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sgt(self) -> int:
        return pulumi.get(self, "sgt")


@pulumi.output_type
class GetAdaptivePolicyPoliciesItemSourceGroupResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 sgt: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sgt", sgt)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sgt(self) -> int:
        return pulumi.get(self, "sgt")


@pulumi.output_type
class GetAdaptivePolicySettingsItemResult(dict):
    def __init__(__self__, *,
                 enabled_networks: Sequence[str]):
        pulumi.set(__self__, "enabled_networks", enabled_networks)

    @property
    @pulumi.getter(name="enabledNetworks")
    def enabled_networks(self) -> Sequence[str]:
        return pulumi.get(self, "enabled_networks")


@pulumi.output_type
class GetAdminsItemResult(dict):
    def __init__(__self__, *,
                 account_status: str,
                 authentication_method: str,
                 email: str,
                 has_api_key: bool,
                 id: str,
                 last_active: str,
                 name: str,
                 networks: Sequence['outputs.GetAdminsItemNetworkResult'],
                 org_access: str,
                 tags: Sequence['outputs.GetAdminsItemTagResult'],
                 two_factor_auth_enabled: bool):
        """
        :param str account_status: Status of the admin's account
        :param str authentication_method: Admin's authentication method
        :param str email: Admin's email address
        :param bool has_api_key: Indicates whether the admin has an API key
        :param str id: Admin's ID
        :param str last_active: Time when the admin was last active
        :param str name: Admin's username
        :param Sequence['GetAdminsItemNetworkArgs'] networks: Admin network access information
        :param str org_access: Admin's level of access to the organization
        :param Sequence['GetAdminsItemTagArgs'] tags: Admin tag information
        :param bool two_factor_auth_enabled: Indicates whether two-factor authentication is enabled
        """
        pulumi.set(__self__, "account_status", account_status)
        pulumi.set(__self__, "authentication_method", authentication_method)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "has_api_key", has_api_key)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_active", last_active)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "networks", networks)
        pulumi.set(__self__, "org_access", org_access)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "two_factor_auth_enabled", two_factor_auth_enabled)

    @property
    @pulumi.getter(name="accountStatus")
    def account_status(self) -> str:
        """
        Status of the admin's account
        """
        return pulumi.get(self, "account_status")

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> str:
        """
        Admin's authentication method
        """
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Admin's email address
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="hasApiKey")
    def has_api_key(self) -> bool:
        """
        Indicates whether the admin has an API key
        """
        return pulumi.get(self, "has_api_key")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Admin's ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastActive")
    def last_active(self) -> str:
        """
        Time when the admin was last active
        """
        return pulumi.get(self, "last_active")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Admin's username
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Sequence['outputs.GetAdminsItemNetworkResult']:
        """
        Admin network access information
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="orgAccess")
    def org_access(self) -> str:
        """
        Admin's level of access to the organization
        """
        return pulumi.get(self, "org_access")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetAdminsItemTagResult']:
        """
        Admin tag information
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="twoFactorAuthEnabled")
    def two_factor_auth_enabled(self) -> bool:
        """
        Indicates whether two-factor authentication is enabled
        """
        return pulumi.get(self, "two_factor_auth_enabled")


@pulumi.output_type
class GetAdminsItemNetworkResult(dict):
    def __init__(__self__, *,
                 access: str,
                 id: str):
        """
        :param str access: Admin's level of access to the network
        :param str id: Network ID
        """
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def access(self) -> str:
        """
        Admin's level of access to the network
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Network ID
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetAdminsItemTagResult(dict):
    def __init__(__self__, *,
                 access: str,
                 tag: str):
        """
        :param str access: Access level for the tag
        :param str tag: Tag value
        """
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def access(self) -> str:
        """
        Access level for the tag
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        Tag value
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetAlertsProfilesItemResult(dict):
    def __init__(__self__, *,
                 alert_condition: 'outputs.GetAlertsProfilesItemAlertConditionResult',
                 description: str,
                 enabled: bool,
                 id: str,
                 network_tags: Sequence[str],
                 recipients: 'outputs.GetAlertsProfilesItemRecipientsResult',
                 type: str):
        """
        :param 'GetAlertsProfilesItemAlertConditionArgs' alert_condition: The conditions that determine if the alert triggers
        :param str description: User supplied description of the alert
        :param bool enabled: Is the alert config enabled
        :param str id: The alert config ID
        :param Sequence[str] network_tags: Networks with these tags will be monitored for the alert
        :param 'GetAlertsProfilesItemRecipientsArgs' recipients: List of recipients that will recieve the alert.
        :param str type: The alert type
        """
        pulumi.set(__self__, "alert_condition", alert_condition)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "network_tags", network_tags)
        pulumi.set(__self__, "recipients", recipients)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="alertCondition")
    def alert_condition(self) -> 'outputs.GetAlertsProfilesItemAlertConditionResult':
        """
        The conditions that determine if the alert triggers
        """
        return pulumi.get(self, "alert_condition")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User supplied description of the alert
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Is the alert config enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The alert config ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkTags")
    def network_tags(self) -> Sequence[str]:
        """
        Networks with these tags will be monitored for the alert
        """
        return pulumi.get(self, "network_tags")

    @property
    @pulumi.getter
    def recipients(self) -> 'outputs.GetAlertsProfilesItemRecipientsResult':
        """
        List of recipients that will recieve the alert.
        """
        return pulumi.get(self, "recipients")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The alert type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlertsProfilesItemAlertConditionResult(dict):
    def __init__(__self__, *,
                 bit_rate_bps: int,
                 duration: int,
                 interface: str,
                 window: int):
        """
        :param int bit_rate_bps: The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts.
        :param int duration: The total duration in seconds that the threshold should be crossed before alerting
        :param str interface: The uplink observed for the alert
        :param int window: The look back period in seconds for sensing the alert
        """
        pulumi.set(__self__, "bit_rate_bps", bit_rate_bps)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter(name="bitRateBps")
    def bit_rate_bps(self) -> int:
        """
        The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts.
        """
        return pulumi.get(self, "bit_rate_bps")

    @property
    @pulumi.getter
    def duration(self) -> int:
        """
        The total duration in seconds that the threshold should be crossed before alerting
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        The uplink observed for the alert
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def window(self) -> int:
        """
        The look back period in seconds for sensing the alert
        """
        return pulumi.get(self, "window")


@pulumi.output_type
class GetAlertsProfilesItemRecipientsResult(dict):
    def __init__(__self__, *,
                 emails: Sequence[str],
                 http_server_ids: Sequence[str]):
        """
        :param Sequence[str] emails: A list of emails that will receive information about the alert
        :param Sequence[str] http_server_ids: A list base64 encoded urls of webhook endpoints that will receive information about the alert
        """
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "http_server_ids", http_server_ids)

    @property
    @pulumi.getter
    def emails(self) -> Sequence[str]:
        """
        A list of emails that will receive information about the alert
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter(name="httpServerIds")
    def http_server_ids(self) -> Sequence[str]:
        """
        A list base64 encoded urls of webhook endpoints that will receive information about the alert
        """
        return pulumi.get(self, "http_server_ids")


@pulumi.output_type
class GetApiRequestsItemResult(dict):
    def __init__(__self__, *,
                 admin_id: str,
                 host: str,
                 method: str,
                 operation_id: str,
                 path: str,
                 query_string: str,
                 response_code: int,
                 source_ip: str,
                 ts: str,
                 user_agent: str,
                 version: int):
        """
        :param str admin_id: Database ID for the admin user who made the API request.
        :param str host: The host which the API request was directed at.
        :param str method: HTTP method used in the API request.
        :param str operation_id: Operation ID for the endpoint.
        :param str path: The API request path.
        :param str query_string: The query string sent with the API request.
        :param int response_code: API request response code.
        :param str source_ip: Public IP address from which the API request was made.
        :param str ts: Timestamp, in iso8601 format, indicating when the API request was made.
        :param str user_agent: The API request user agent.
        :param int version: API version of the endpoint.
        """
        pulumi.set(__self__, "admin_id", admin_id)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "operation_id", operation_id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "query_string", query_string)
        pulumi.set(__self__, "response_code", response_code)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "ts", ts)
        pulumi.set(__self__, "user_agent", user_agent)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="adminId")
    def admin_id(self) -> str:
        """
        Database ID for the admin user who made the API request.
        """
        return pulumi.get(self, "admin_id")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host which the API request was directed at.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def method(self) -> str:
        """
        HTTP method used in the API request.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> str:
        """
        Operation ID for the endpoint.
        """
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The API request path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> str:
        """
        The query string sent with the API request.
        """
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> int:
        """
        API request response code.
        """
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> str:
        """
        Public IP address from which the API request was made.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def ts(self) -> str:
        """
        Timestamp, in iso8601 format, indicating when the API request was made.
        """
        return pulumi.get(self, "ts")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> str:
        """
        The API request user agent.
        """
        return pulumi.get(self, "user_agent")

    @property
    @pulumi.getter
    def version(self) -> int:
        """
        API version of the endpoint.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetApiRequestsOverviewItemResult(dict):
    def __init__(__self__, *,
                 response_code_counts: 'outputs.GetApiRequestsOverviewItemResponseCodeCountsResult'):
        """
        :param 'GetApiRequestsOverviewItemResponseCodeCountsArgs' response_code_counts: object of all supported HTTP response code
        """
        pulumi.set(__self__, "response_code_counts", response_code_counts)

    @property
    @pulumi.getter(name="responseCodeCounts")
    def response_code_counts(self) -> 'outputs.GetApiRequestsOverviewItemResponseCodeCountsResult':
        """
        object of all supported HTTP response code
        """
        return pulumi.get(self, "response_code_counts")


@pulumi.output_type
class GetApiRequestsOverviewItemResponseCodeCountsResult(dict):
    def __init__(__self__, *,
                 status200: int,
                 status201: int,
                 status202: int,
                 status203: int,
                 status204: int,
                 status205: int,
                 status206: int,
                 status207: int,
                 status208: int,
                 status226: int,
                 status300: int,
                 status301: int,
                 status302: int,
                 status303: int,
                 status304: int,
                 status305: int,
                 status306: int,
                 status307: int,
                 status308: int,
                 status400: int,
                 status401: int,
                 status402: int,
                 status403: int,
                 status404: int,
                 status405: int,
                 status406: int,
                 status407: int,
                 status408: int,
                 status409: int,
                 status410: int,
                 status411: int,
                 status412: int,
                 status413: int,
                 status414: int,
                 status415: int,
                 status416: int,
                 status417: int,
                 status421: int,
                 status422: int,
                 status423: int,
                 status424: int,
                 status425: int,
                 status426: int,
                 status428: int,
                 status429: int,
                 status431: int,
                 status451: int,
                 status500: int,
                 status501: int,
                 status502: int,
                 status503: int,
                 status504: int,
                 status505: int,
                 status506: int,
                 status507: int,
                 status508: int,
                 status509: int,
                 status510: int,
                 status511: int):
        """
        :param int status200: HTTP 200 response code count.
        :param int status201: HTTP 201 response code count.
        :param int status202: HTTP 202 response code count.
        :param int status203: HTTP 203 response code count.
        :param int status204: HTTP 204 response code count.
        :param int status205: HTTP 205 response code count.
        :param int status206: HTTP 206 response code count.
        :param int status207: HTTP 207 response code count.
        :param int status208: HTTP 208 response code count.
        :param int status226: HTTP 226 response code count.
        :param int status300: HTTP 300 response code count.
        :param int status301: HTTP 301 response code count.
        :param int status302: HTTP 302 response code count.
        :param int status303: HTTP 303 response code count.
        :param int status304: HTTP 304 response code count.
        :param int status305: HTTP 305 response code count.
        :param int status306: HTTP 306 response code count.
        :param int status307: HTTP 307 response code count.
        :param int status308: HTTP 308 response code count.
        :param int status400: HTTP 400 response code count.
        :param int status401: HTTP 401 response code count.
        :param int status402: HTTP 402 response code count.
        :param int status403: HTTP 403 response code count.
        :param int status404: HTTP 404 response code count.
        :param int status405: HTTP 405 response code count.
        :param int status406: HTTP 406 response code count.
        :param int status407: HTTP 407 response code count.
        :param int status408: HTTP 408 response code count.
        :param int status409: HTTP 409 response code count.
        :param int status410: HTTP 410 response code count.
        :param int status411: HTTP 411 response code count.
        :param int status412: HTTP 412 response code count.
        :param int status413: HTTP 413 response code count.
        :param int status414: HTTP 414 response code count.
        :param int status415: HTTP 415 response code count.
        :param int status416: HTTP 416 response code count.
        :param int status417: HTTP 417 response code count.
        :param int status421: HTTP 421 response code count.
        :param int status422: HTTP 422 response code count.
        :param int status423: HTTP 423 response code count.
        :param int status424: HTTP 424 response code count.
        :param int status425: HTTP 425 response code count.
        :param int status426: HTTP 426 response code count.
        :param int status428: HTTP 428 response code count.
        :param int status429: HTTP 429 response code count.
        :param int status431: HTTP 431 response code count.
        :param int status451: HTTP 451 response code count.
        :param int status500: HTTP 500 response code count.
        :param int status501: HTTP 501 response code count.
        :param int status502: HTTP 502 response code count.
        :param int status503: HTTP 503 response code count.
        :param int status504: HTTP 504 response code count.
        :param int status505: HTTP 505 response code count.
        :param int status506: HTTP 506 response code count.
        :param int status507: HTTP 507 response code count.
        :param int status508: HTTP 508 response code count.
        :param int status509: HTTP 509 response code count.
        :param int status510: HTTP 510 response code count.
        :param int status511: HTTP 511 response code count.
        """
        pulumi.set(__self__, "status200", status200)
        pulumi.set(__self__, "status201", status201)
        pulumi.set(__self__, "status202", status202)
        pulumi.set(__self__, "status203", status203)
        pulumi.set(__self__, "status204", status204)
        pulumi.set(__self__, "status205", status205)
        pulumi.set(__self__, "status206", status206)
        pulumi.set(__self__, "status207", status207)
        pulumi.set(__self__, "status208", status208)
        pulumi.set(__self__, "status226", status226)
        pulumi.set(__self__, "status300", status300)
        pulumi.set(__self__, "status301", status301)
        pulumi.set(__self__, "status302", status302)
        pulumi.set(__self__, "status303", status303)
        pulumi.set(__self__, "status304", status304)
        pulumi.set(__self__, "status305", status305)
        pulumi.set(__self__, "status306", status306)
        pulumi.set(__self__, "status307", status307)
        pulumi.set(__self__, "status308", status308)
        pulumi.set(__self__, "status400", status400)
        pulumi.set(__self__, "status401", status401)
        pulumi.set(__self__, "status402", status402)
        pulumi.set(__self__, "status403", status403)
        pulumi.set(__self__, "status404", status404)
        pulumi.set(__self__, "status405", status405)
        pulumi.set(__self__, "status406", status406)
        pulumi.set(__self__, "status407", status407)
        pulumi.set(__self__, "status408", status408)
        pulumi.set(__self__, "status409", status409)
        pulumi.set(__self__, "status410", status410)
        pulumi.set(__self__, "status411", status411)
        pulumi.set(__self__, "status412", status412)
        pulumi.set(__self__, "status413", status413)
        pulumi.set(__self__, "status414", status414)
        pulumi.set(__self__, "status415", status415)
        pulumi.set(__self__, "status416", status416)
        pulumi.set(__self__, "status417", status417)
        pulumi.set(__self__, "status421", status421)
        pulumi.set(__self__, "status422", status422)
        pulumi.set(__self__, "status423", status423)
        pulumi.set(__self__, "status424", status424)
        pulumi.set(__self__, "status425", status425)
        pulumi.set(__self__, "status426", status426)
        pulumi.set(__self__, "status428", status428)
        pulumi.set(__self__, "status429", status429)
        pulumi.set(__self__, "status431", status431)
        pulumi.set(__self__, "status451", status451)
        pulumi.set(__self__, "status500", status500)
        pulumi.set(__self__, "status501", status501)
        pulumi.set(__self__, "status502", status502)
        pulumi.set(__self__, "status503", status503)
        pulumi.set(__self__, "status504", status504)
        pulumi.set(__self__, "status505", status505)
        pulumi.set(__self__, "status506", status506)
        pulumi.set(__self__, "status507", status507)
        pulumi.set(__self__, "status508", status508)
        pulumi.set(__self__, "status509", status509)
        pulumi.set(__self__, "status510", status510)
        pulumi.set(__self__, "status511", status511)

    @property
    @pulumi.getter
    def status200(self) -> int:
        """
        HTTP 200 response code count.
        """
        return pulumi.get(self, "status200")

    @property
    @pulumi.getter
    def status201(self) -> int:
        """
        HTTP 201 response code count.
        """
        return pulumi.get(self, "status201")

    @property
    @pulumi.getter
    def status202(self) -> int:
        """
        HTTP 202 response code count.
        """
        return pulumi.get(self, "status202")

    @property
    @pulumi.getter
    def status203(self) -> int:
        """
        HTTP 203 response code count.
        """
        return pulumi.get(self, "status203")

    @property
    @pulumi.getter
    def status204(self) -> int:
        """
        HTTP 204 response code count.
        """
        return pulumi.get(self, "status204")

    @property
    @pulumi.getter
    def status205(self) -> int:
        """
        HTTP 205 response code count.
        """
        return pulumi.get(self, "status205")

    @property
    @pulumi.getter
    def status206(self) -> int:
        """
        HTTP 206 response code count.
        """
        return pulumi.get(self, "status206")

    @property
    @pulumi.getter
    def status207(self) -> int:
        """
        HTTP 207 response code count.
        """
        return pulumi.get(self, "status207")

    @property
    @pulumi.getter
    def status208(self) -> int:
        """
        HTTP 208 response code count.
        """
        return pulumi.get(self, "status208")

    @property
    @pulumi.getter
    def status226(self) -> int:
        """
        HTTP 226 response code count.
        """
        return pulumi.get(self, "status226")

    @property
    @pulumi.getter
    def status300(self) -> int:
        """
        HTTP 300 response code count.
        """
        return pulumi.get(self, "status300")

    @property
    @pulumi.getter
    def status301(self) -> int:
        """
        HTTP 301 response code count.
        """
        return pulumi.get(self, "status301")

    @property
    @pulumi.getter
    def status302(self) -> int:
        """
        HTTP 302 response code count.
        """
        return pulumi.get(self, "status302")

    @property
    @pulumi.getter
    def status303(self) -> int:
        """
        HTTP 303 response code count.
        """
        return pulumi.get(self, "status303")

    @property
    @pulumi.getter
    def status304(self) -> int:
        """
        HTTP 304 response code count.
        """
        return pulumi.get(self, "status304")

    @property
    @pulumi.getter
    def status305(self) -> int:
        """
        HTTP 305 response code count.
        """
        return pulumi.get(self, "status305")

    @property
    @pulumi.getter
    def status306(self) -> int:
        """
        HTTP 306 response code count.
        """
        return pulumi.get(self, "status306")

    @property
    @pulumi.getter
    def status307(self) -> int:
        """
        HTTP 307 response code count.
        """
        return pulumi.get(self, "status307")

    @property
    @pulumi.getter
    def status308(self) -> int:
        """
        HTTP 308 response code count.
        """
        return pulumi.get(self, "status308")

    @property
    @pulumi.getter
    def status400(self) -> int:
        """
        HTTP 400 response code count.
        """
        return pulumi.get(self, "status400")

    @property
    @pulumi.getter
    def status401(self) -> int:
        """
        HTTP 401 response code count.
        """
        return pulumi.get(self, "status401")

    @property
    @pulumi.getter
    def status402(self) -> int:
        """
        HTTP 402 response code count.
        """
        return pulumi.get(self, "status402")

    @property
    @pulumi.getter
    def status403(self) -> int:
        """
        HTTP 403 response code count.
        """
        return pulumi.get(self, "status403")

    @property
    @pulumi.getter
    def status404(self) -> int:
        """
        HTTP 404 response code count.
        """
        return pulumi.get(self, "status404")

    @property
    @pulumi.getter
    def status405(self) -> int:
        """
        HTTP 405 response code count.
        """
        return pulumi.get(self, "status405")

    @property
    @pulumi.getter
    def status406(self) -> int:
        """
        HTTP 406 response code count.
        """
        return pulumi.get(self, "status406")

    @property
    @pulumi.getter
    def status407(self) -> int:
        """
        HTTP 407 response code count.
        """
        return pulumi.get(self, "status407")

    @property
    @pulumi.getter
    def status408(self) -> int:
        """
        HTTP 408 response code count.
        """
        return pulumi.get(self, "status408")

    @property
    @pulumi.getter
    def status409(self) -> int:
        """
        HTTP 409 response code count.
        """
        return pulumi.get(self, "status409")

    @property
    @pulumi.getter
    def status410(self) -> int:
        """
        HTTP 410 response code count.
        """
        return pulumi.get(self, "status410")

    @property
    @pulumi.getter
    def status411(self) -> int:
        """
        HTTP 411 response code count.
        """
        return pulumi.get(self, "status411")

    @property
    @pulumi.getter
    def status412(self) -> int:
        """
        HTTP 412 response code count.
        """
        return pulumi.get(self, "status412")

    @property
    @pulumi.getter
    def status413(self) -> int:
        """
        HTTP 413 response code count.
        """
        return pulumi.get(self, "status413")

    @property
    @pulumi.getter
    def status414(self) -> int:
        """
        HTTP 414 response code count.
        """
        return pulumi.get(self, "status414")

    @property
    @pulumi.getter
    def status415(self) -> int:
        """
        HTTP 415 response code count.
        """
        return pulumi.get(self, "status415")

    @property
    @pulumi.getter
    def status416(self) -> int:
        """
        HTTP 416 response code count.
        """
        return pulumi.get(self, "status416")

    @property
    @pulumi.getter
    def status417(self) -> int:
        """
        HTTP 417 response code count.
        """
        return pulumi.get(self, "status417")

    @property
    @pulumi.getter
    def status421(self) -> int:
        """
        HTTP 421 response code count.
        """
        return pulumi.get(self, "status421")

    @property
    @pulumi.getter
    def status422(self) -> int:
        """
        HTTP 422 response code count.
        """
        return pulumi.get(self, "status422")

    @property
    @pulumi.getter
    def status423(self) -> int:
        """
        HTTP 423 response code count.
        """
        return pulumi.get(self, "status423")

    @property
    @pulumi.getter
    def status424(self) -> int:
        """
        HTTP 424 response code count.
        """
        return pulumi.get(self, "status424")

    @property
    @pulumi.getter
    def status425(self) -> int:
        """
        HTTP 425 response code count.
        """
        return pulumi.get(self, "status425")

    @property
    @pulumi.getter
    def status426(self) -> int:
        """
        HTTP 426 response code count.
        """
        return pulumi.get(self, "status426")

    @property
    @pulumi.getter
    def status428(self) -> int:
        """
        HTTP 428 response code count.
        """
        return pulumi.get(self, "status428")

    @property
    @pulumi.getter
    def status429(self) -> int:
        """
        HTTP 429 response code count.
        """
        return pulumi.get(self, "status429")

    @property
    @pulumi.getter
    def status431(self) -> int:
        """
        HTTP 431 response code count.
        """
        return pulumi.get(self, "status431")

    @property
    @pulumi.getter
    def status451(self) -> int:
        """
        HTTP 451 response code count.
        """
        return pulumi.get(self, "status451")

    @property
    @pulumi.getter
    def status500(self) -> int:
        """
        HTTP 500 response code count.
        """
        return pulumi.get(self, "status500")

    @property
    @pulumi.getter
    def status501(self) -> int:
        """
        HTTP 501 response code count.
        """
        return pulumi.get(self, "status501")

    @property
    @pulumi.getter
    def status502(self) -> int:
        """
        HTTP 502 response code count.
        """
        return pulumi.get(self, "status502")

    @property
    @pulumi.getter
    def status503(self) -> int:
        """
        HTTP 503 response code count.
        """
        return pulumi.get(self, "status503")

    @property
    @pulumi.getter
    def status504(self) -> int:
        """
        HTTP 504 response code count.
        """
        return pulumi.get(self, "status504")

    @property
    @pulumi.getter
    def status505(self) -> int:
        """
        HTTP 505 response code count.
        """
        return pulumi.get(self, "status505")

    @property
    @pulumi.getter
    def status506(self) -> int:
        """
        HTTP 506 response code count.
        """
        return pulumi.get(self, "status506")

    @property
    @pulumi.getter
    def status507(self) -> int:
        """
        HTTP 507 response code count.
        """
        return pulumi.get(self, "status507")

    @property
    @pulumi.getter
    def status508(self) -> int:
        """
        HTTP 508 response code count.
        """
        return pulumi.get(self, "status508")

    @property
    @pulumi.getter
    def status509(self) -> int:
        """
        HTTP 509 response code count.
        """
        return pulumi.get(self, "status509")

    @property
    @pulumi.getter
    def status510(self) -> int:
        """
        HTTP 510 response code count.
        """
        return pulumi.get(self, "status510")

    @property
    @pulumi.getter
    def status511(self) -> int:
        """
        HTTP 511 response code count.
        """
        return pulumi.get(self, "status511")


@pulumi.output_type
class GetApiRequestsOverviewResponseCodesByIntervalItemResult(dict):
    def __init__(__self__, *,
                 counts: Sequence['outputs.GetApiRequestsOverviewResponseCodesByIntervalItemCountResult'],
                 end_ts: str,
                 start_ts: str):
        """
        :param Sequence['GetApiRequestsOverviewResponseCodesByIntervalItemCountArgs'] counts: list of response codes and a count of how many requests had that code in the given time period
        :param str end_ts: The end time of the access period
        :param str start_ts: The start time of the access period
        """
        pulumi.set(__self__, "counts", counts)
        pulumi.set(__self__, "end_ts", end_ts)
        pulumi.set(__self__, "start_ts", start_ts)

    @property
    @pulumi.getter
    def counts(self) -> Sequence['outputs.GetApiRequestsOverviewResponseCodesByIntervalItemCountResult']:
        """
        list of response codes and a count of how many requests had that code in the given time period
        """
        return pulumi.get(self, "counts")

    @property
    @pulumi.getter(name="endTs")
    def end_ts(self) -> str:
        """
        The end time of the access period
        """
        return pulumi.get(self, "end_ts")

    @property
    @pulumi.getter(name="startTs")
    def start_ts(self) -> str:
        """
        The start time of the access period
        """
        return pulumi.get(self, "start_ts")


@pulumi.output_type
class GetApiRequestsOverviewResponseCodesByIntervalItemCountResult(dict):
    def __init__(__self__, *,
                 code: int,
                 count: int):
        """
        :param int code: Response status code of the API response
        :param int count: Number of records that match the status code
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def code(self) -> int:
        """
        Response status code of the API response
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Number of records that match the status code
        """
        return pulumi.get(self, "count")


@pulumi.output_type
class GetApplianceSecurityIntrusionItemResult(dict):
    def __init__(__self__, *,
                 allowed_rules: Sequence['outputs.GetApplianceSecurityIntrusionItemAllowedRuleResult']):
        pulumi.set(__self__, "allowed_rules", allowed_rules)

    @property
    @pulumi.getter(name="allowedRules")
    def allowed_rules(self) -> Sequence['outputs.GetApplianceSecurityIntrusionItemAllowedRuleResult']:
        return pulumi.get(self, "allowed_rules")


@pulumi.output_type
class GetApplianceSecurityIntrusionItemAllowedRuleResult(dict):
    def __init__(__self__, *,
                 message: str,
                 rule_id: str):
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> str:
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class GetApplianceTrafficShapingVpnExclusionsByNetworkItemResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemResult']):
        """
        :param Sequence['GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemArgs'] items: VPN exclusion rules by network
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemResult']:
        """
        VPN exclusion rules by network
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemResult(dict):
    def __init__(__self__, *,
                 customs: Sequence['outputs.GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemCustomResult'],
                 major_applications: Sequence['outputs.GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemMajorApplicationResult'],
                 network_id: str,
                 network_name: str):
        """
        :param Sequence['GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemCustomArgs'] customs: Custom VPN exclusion rules.
        :param Sequence['GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemMajorApplicationArgs'] major_applications: Major Application based VPN exclusion rules.
        :param str network_id: ID of the network whose VPN exclusion rules are returned.
        :param str network_name: Name of the network whose VPN exclusion rules are returned.
        """
        pulumi.set(__self__, "customs", customs)
        pulumi.set(__self__, "major_applications", major_applications)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "network_name", network_name)

    @property
    @pulumi.getter
    def customs(self) -> Sequence['outputs.GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemCustomResult']:
        """
        Custom VPN exclusion rules.
        """
        return pulumi.get(self, "customs")

    @property
    @pulumi.getter(name="majorApplications")
    def major_applications(self) -> Sequence['outputs.GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemMajorApplicationResult']:
        """
        Major Application based VPN exclusion rules.
        """
        return pulumi.get(self, "major_applications")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        ID of the network whose VPN exclusion rules are returned.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> str:
        """
        Name of the network whose VPN exclusion rules are returned.
        """
        return pulumi.get(self, "network_name")


@pulumi.output_type
class GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemCustomResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 port: str,
                 protocol: str):
        """
        :param str destination: Destination address; hostname required for DNS, IPv4 otherwise.
        :param str port: Destination port.
        :param str protocol: Protocol.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        Destination address; hostname required for DNS, IPv4 otherwise.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        Destination port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetApplianceTrafficShapingVpnExclusionsByNetworkItemItemMajorApplicationResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Application's Meraki ID.
        :param str name: Application's name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Application's Meraki ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Application's name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApplianceUplinksStatusesOverviewItemResult(dict):
    def __init__(__self__, *,
                 counts: 'outputs.GetApplianceUplinksStatusesOverviewItemCountsResult'):
        """
        :param 'GetApplianceUplinksStatusesOverviewItemCountsArgs' counts: counts
        """
        pulumi.set(__self__, "counts", counts)

    @property
    @pulumi.getter
    def counts(self) -> 'outputs.GetApplianceUplinksStatusesOverviewItemCountsResult':
        """
        counts
        """
        return pulumi.get(self, "counts")


@pulumi.output_type
class GetApplianceUplinksStatusesOverviewItemCountsResult(dict):
    def __init__(__self__, *,
                 by_status: 'outputs.GetApplianceUplinksStatusesOverviewItemCountsByStatusResult'):
        """
        :param 'GetApplianceUplinksStatusesOverviewItemCountsByStatusArgs' by_status: byStatus
        """
        pulumi.set(__self__, "by_status", by_status)

    @property
    @pulumi.getter(name="byStatus")
    def by_status(self) -> 'outputs.GetApplianceUplinksStatusesOverviewItemCountsByStatusResult':
        """
        byStatus
        """
        return pulumi.get(self, "by_status")


@pulumi.output_type
class GetApplianceUplinksStatusesOverviewItemCountsByStatusResult(dict):
    def __init__(__self__, *,
                 active: int,
                 connecting: int,
                 failed: int,
                 not_connected: int,
                 ready: int):
        """
        :param int active: number of uplinks that are active and working
        :param int connecting: number of uplinks currently connecting
        :param int failed: number of uplinks that were working but have failed
        :param int not_connected: number of uplinks currently where nothing is plugged in
        :param int ready: number of uplinks that are working but on standby
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "connecting", connecting)
        pulumi.set(__self__, "failed", failed)
        pulumi.set(__self__, "not_connected", not_connected)
        pulumi.set(__self__, "ready", ready)

    @property
    @pulumi.getter
    def active(self) -> int:
        """
        number of uplinks that are active and working
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def connecting(self) -> int:
        """
        number of uplinks currently connecting
        """
        return pulumi.get(self, "connecting")

    @property
    @pulumi.getter
    def failed(self) -> int:
        """
        number of uplinks that were working but have failed
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter(name="notConnected")
    def not_connected(self) -> int:
        """
        number of uplinks currently where nothing is plugged in
        """
        return pulumi.get(self, "not_connected")

    @property
    @pulumi.getter
    def ready(self) -> int:
        """
        number of uplinks that are working but on standby
        """
        return pulumi.get(self, "ready")


@pulumi.output_type
class GetApplianceUplinksUsageByNetworkItemResult(dict):
    def __init__(__self__, *,
                 by_uplinks: Sequence['outputs.GetApplianceUplinksUsageByNetworkItemByUplinkResult'],
                 name: str,
                 network_id: str):
        """
        :param Sequence['GetApplianceUplinksUsageByNetworkItemByUplinkArgs'] by_uplinks: Uplink usage
        :param str name: Network name
        :param str network_id: Network identifier
        """
        pulumi.set(__self__, "by_uplinks", by_uplinks)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter(name="byUplinks")
    def by_uplinks(self) -> Sequence['outputs.GetApplianceUplinksUsageByNetworkItemByUplinkResult']:
        """
        Uplink usage
        """
        return pulumi.get(self, "by_uplinks")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Network name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        Network identifier
        """
        return pulumi.get(self, "network_id")


@pulumi.output_type
class GetApplianceUplinksUsageByNetworkItemByUplinkResult(dict):
    def __init__(__self__, *,
                 interface: str,
                 received: int,
                 sent: int,
                 serial: str):
        """
        :param str interface: Uplink name
        :param int received: Bytes received
        :param int sent: Bytes sent
        :param str serial: Uplink serial
        """
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "received", received)
        pulumi.set(__self__, "sent", sent)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Uplink name
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def received(self) -> int:
        """
        Bytes received
        """
        return pulumi.get(self, "received")

    @property
    @pulumi.getter
    def sent(self) -> int:
        """
        Bytes sent
        """
        return pulumi.get(self, "sent")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Uplink serial
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetApplianceVpnThirdPartyVpnpeersItemResult(dict):
    def __init__(__self__, *,
                 peers: Sequence['outputs.GetApplianceVpnThirdPartyVpnpeersItemPeerResult']):
        """
        :param Sequence['GetApplianceVpnThirdPartyVpnpeersItemPeerArgs'] peers: The list of VPN peers
        """
        pulumi.set(__self__, "peers", peers)

    @property
    @pulumi.getter
    def peers(self) -> Sequence['outputs.GetApplianceVpnThirdPartyVpnpeersItemPeerResult']:
        """
        The list of VPN peers
        """
        return pulumi.get(self, "peers")


@pulumi.output_type
class GetApplianceVpnThirdPartyVpnpeersItemPeerResult(dict):
    def __init__(__self__, *,
                 ike_version: str,
                 ipsec_policies: 'outputs.GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPoliciesResult',
                 ipsec_policies_preset: str,
                 local_id: str,
                 name: str,
                 network_tags: Sequence[str],
                 private_subnets: Sequence[str],
                 public_ip: str,
                 remote_id: str,
                 secret: str):
        """
        :param str ike_version: [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
        :param 'GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPoliciesArgs' ipsec_policies: Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
        :param str ipsec_policies_preset: One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
        :param str local_id: [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
        :param str name: The name of the VPN peer
        :param Sequence[str] network_tags: A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
        :param Sequence[str] private_subnets: The list of the private subnets of the VPN peer
        :param str public_ip: [optional] The public IP of the VPN peer
        :param str remote_id: [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
        :param str secret: The shared secret with the VPN peer
        """
        pulumi.set(__self__, "ike_version", ike_version)
        pulumi.set(__self__, "ipsec_policies", ipsec_policies)
        pulumi.set(__self__, "ipsec_policies_preset", ipsec_policies_preset)
        pulumi.set(__self__, "local_id", local_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_tags", network_tags)
        pulumi.set(__self__, "private_subnets", private_subnets)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "remote_id", remote_id)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> str:
        """
        [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
        """
        return pulumi.get(self, "ike_version")

    @property
    @pulumi.getter(name="ipsecPolicies")
    def ipsec_policies(self) -> 'outputs.GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPoliciesResult':
        """
        Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
        """
        return pulumi.get(self, "ipsec_policies")

    @property
    @pulumi.getter(name="ipsecPoliciesPreset")
    def ipsec_policies_preset(self) -> str:
        """
        One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
        """
        return pulumi.get(self, "ipsec_policies_preset")

    @property
    @pulumi.getter(name="localId")
    def local_id(self) -> str:
        """
        [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
        """
        return pulumi.get(self, "local_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the VPN peer
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkTags")
    def network_tags(self) -> Sequence[str]:
        """
        A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
        """
        return pulumi.get(self, "network_tags")

    @property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> Sequence[str]:
        """
        The list of the private subnets of the VPN peer
        """
        return pulumi.get(self, "private_subnets")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        [optional] The public IP of the VPN peer
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> str:
        """
        [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
        """
        return pulumi.get(self, "remote_id")

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        The shared secret with the VPN peer
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPoliciesResult(dict):
    def __init__(__self__, *,
                 child_auth_algos: Sequence[str],
                 child_cipher_algos: Sequence[str],
                 child_lifetime: int,
                 child_pfs_groups: Sequence[str],
                 ike_auth_algos: Sequence[str],
                 ike_cipher_algos: Sequence[str],
                 ike_diffie_hellman_groups: Sequence[str],
                 ike_lifetime: int,
                 ike_prf_algos: Sequence[str]):
        """
        :param Sequence[str] child_auth_algos: This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
        :param Sequence[str] child_cipher_algos: This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
        :param int child_lifetime: The lifetime of the Phase 2 SA in seconds.
        :param Sequence[str] child_pfs_groups: This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
        :param Sequence[str] ike_auth_algos: This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
        :param Sequence[str] ike_cipher_algos: This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
        :param Sequence[str] ike_diffie_hellman_groups: This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
        :param int ike_lifetime: The lifetime of the Phase 1 SA in seconds.
        :param Sequence[str] ike_prf_algos: [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
        """
        pulumi.set(__self__, "child_auth_algos", child_auth_algos)
        pulumi.set(__self__, "child_cipher_algos", child_cipher_algos)
        pulumi.set(__self__, "child_lifetime", child_lifetime)
        pulumi.set(__self__, "child_pfs_groups", child_pfs_groups)
        pulumi.set(__self__, "ike_auth_algos", ike_auth_algos)
        pulumi.set(__self__, "ike_cipher_algos", ike_cipher_algos)
        pulumi.set(__self__, "ike_diffie_hellman_groups", ike_diffie_hellman_groups)
        pulumi.set(__self__, "ike_lifetime", ike_lifetime)
        pulumi.set(__self__, "ike_prf_algos", ike_prf_algos)

    @property
    @pulumi.getter(name="childAuthAlgos")
    def child_auth_algos(self) -> Sequence[str]:
        """
        This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
        """
        return pulumi.get(self, "child_auth_algos")

    @property
    @pulumi.getter(name="childCipherAlgos")
    def child_cipher_algos(self) -> Sequence[str]:
        """
        This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
        """
        return pulumi.get(self, "child_cipher_algos")

    @property
    @pulumi.getter(name="childLifetime")
    def child_lifetime(self) -> int:
        """
        The lifetime of the Phase 2 SA in seconds.
        """
        return pulumi.get(self, "child_lifetime")

    @property
    @pulumi.getter(name="childPfsGroups")
    def child_pfs_groups(self) -> Sequence[str]:
        """
        This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
        """
        return pulumi.get(self, "child_pfs_groups")

    @property
    @pulumi.getter(name="ikeAuthAlgos")
    def ike_auth_algos(self) -> Sequence[str]:
        """
        This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
        """
        return pulumi.get(self, "ike_auth_algos")

    @property
    @pulumi.getter(name="ikeCipherAlgos")
    def ike_cipher_algos(self) -> Sequence[str]:
        """
        This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
        """
        return pulumi.get(self, "ike_cipher_algos")

    @property
    @pulumi.getter(name="ikeDiffieHellmanGroups")
    def ike_diffie_hellman_groups(self) -> Sequence[str]:
        """
        This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
        """
        return pulumi.get(self, "ike_diffie_hellman_groups")

    @property
    @pulumi.getter(name="ikeLifetime")
    def ike_lifetime(self) -> int:
        """
        The lifetime of the Phase 1 SA in seconds.
        """
        return pulumi.get(self, "ike_lifetime")

    @property
    @pulumi.getter(name="ikePrfAlgos")
    def ike_prf_algos(self) -> Sequence[str]:
        """
        [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
        """
        return pulumi.get(self, "ike_prf_algos")


@pulumi.output_type
class GetApplianceVpnVpnFirewallRulesItemResult(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.GetApplianceVpnVpnFirewallRulesItemRuleResult']):
        """
        :param Sequence['GetApplianceVpnVpnFirewallRulesItemRuleArgs'] rules: An ordered array of the firewall rules (not including the default rule)
        """
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetApplianceVpnVpnFirewallRulesItemRuleResult']:
        """
        An ordered array of the firewall rules (not including the default rule)
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetApplianceVpnVpnFirewallRulesItemRuleResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 dest_cidr: str,
                 dest_port: str,
                 policy: str,
                 protocol: str,
                 src_cidr: str,
                 src_port: str,
                 syslog_enabled: bool):
        """
        :param str comment: Description of the rule (optional)
        :param str dest_cidr: Comma-separated list of destination IP address(es) (in IP or CIDR notation), fully-qualified domain names (FQDN) or 'any'
        :param str dest_port: Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'
        :param str policy: 'allow' or 'deny' traffic specified by this rule
        :param str protocol: The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
        :param str src_cidr: Comma-separated list of source IP address(es) (in IP or CIDR notation), or 'any' (note: FQDN not supported for source addresses)
        :param str src_port: Comma-separated list of source port(s) (integer in the range 1-65535), or 'any'
        :param bool syslog_enabled: Log this rule to syslog (true or false, boolean value) - only applicable if a syslog has been configured (optional)
        """
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "dest_cidr", dest_cidr)
        pulumi.set(__self__, "dest_port", dest_port)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "src_cidr", src_cidr)
        pulumi.set(__self__, "src_port", src_port)
        pulumi.set(__self__, "syslog_enabled", syslog_enabled)

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Description of the rule (optional)
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="destCidr")
    def dest_cidr(self) -> str:
        """
        Comma-separated list of destination IP address(es) (in IP or CIDR notation), fully-qualified domain names (FQDN) or 'any'
        """
        return pulumi.get(self, "dest_cidr")

    @property
    @pulumi.getter(name="destPort")
    def dest_port(self) -> str:
        """
        Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'
        """
        return pulumi.get(self, "dest_port")

    @property
    @pulumi.getter
    def policy(self) -> str:
        """
        'allow' or 'deny' traffic specified by this rule
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcCidr")
    def src_cidr(self) -> str:
        """
        Comma-separated list of source IP address(es) (in IP or CIDR notation), or 'any' (note: FQDN not supported for source addresses)
        """
        return pulumi.get(self, "src_cidr")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> str:
        """
        Comma-separated list of source port(s) (integer in the range 1-65535), or 'any'
        """
        return pulumi.get(self, "src_port")

    @property
    @pulumi.getter(name="syslogEnabled")
    def syslog_enabled(self) -> bool:
        """
        Log this rule to syslog (true or false, boolean value) - only applicable if a syslog has been configured (optional)
        """
        return pulumi.get(self, "syslog_enabled")


@pulumi.output_type
class GetBrandingPoliciesItemResult(dict):
    def __init__(__self__, *,
                 admin_settings: 'outputs.GetBrandingPoliciesItemAdminSettingsResult',
                 custom_logo: 'outputs.GetBrandingPoliciesItemCustomLogoResult',
                 enabled: bool,
                 help_settings: 'outputs.GetBrandingPoliciesItemHelpSettingsResult',
                 name: str):
        """
        :param 'GetBrandingPoliciesItemAdminSettingsArgs' admin_settings: Settings for describing which kinds of admins this policy applies to.
        :param 'GetBrandingPoliciesItemCustomLogoArgs' custom_logo: Properties describing the custom logo attached to the branding policy.
        :param bool enabled: Boolean indicating whether this policy is enabled.
        :param 'GetBrandingPoliciesItemHelpSettingsArgs' help_settings: Settings for describing the modifications to various Help page features. Each property in this object accepts one of
                 'default or inherit' (do not modify functionality), 'hide' (remove the section from Dashboard), or 'show' (always show
                 the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on
                 Dashboard; see the documentation for each property to see the allowed values.
        :param str name: Name of the Dashboard branding policy.
        """
        pulumi.set(__self__, "admin_settings", admin_settings)
        pulumi.set(__self__, "custom_logo", custom_logo)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "help_settings", help_settings)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="adminSettings")
    def admin_settings(self) -> 'outputs.GetBrandingPoliciesItemAdminSettingsResult':
        """
        Settings for describing which kinds of admins this policy applies to.
        """
        return pulumi.get(self, "admin_settings")

    @property
    @pulumi.getter(name="customLogo")
    def custom_logo(self) -> 'outputs.GetBrandingPoliciesItemCustomLogoResult':
        """
        Properties describing the custom logo attached to the branding policy.
        """
        return pulumi.get(self, "custom_logo")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean indicating whether this policy is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="helpSettings")
    def help_settings(self) -> 'outputs.GetBrandingPoliciesItemHelpSettingsResult':
        """
        Settings for describing the modifications to various Help page features. Each property in this object accepts one of
          'default or inherit' (do not modify functionality), 'hide' (remove the section from Dashboard), or 'show' (always show
          the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on
          Dashboard; see the documentation for each property to see the allowed values.
        """
        return pulumi.get(self, "help_settings")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Dashboard branding policy.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetBrandingPoliciesItemAdminSettingsResult(dict):
    def __init__(__self__, *,
                 applies_to: str,
                 values: Sequence[str]):
        """
        :param str applies_to: Which kinds of admins this policy applies to. Can be one of 'All organization admins', 'All enterprise admins', 'All network admins', 'All admins of networks...', 'All admins of networks tagged...', 'Specific admins...', 'All admins' or 'All SAML admins'.
        :param Sequence[str] values: If 'appliesTo' is set to one of 'Specific admins...', 'All admins of networks...' or 'All admins of networks tagged...', then you must specify this 'values' property to provide the set of
                 entities to apply the branding policy to. For 'Specific admins...', specify an array of admin IDs. For 'All admins of
                 networks...', specify an array of network IDs and/or configuration template IDs. For 'All admins of networks tagged...',
                 specify an array of tag names.
        """
        pulumi.set(__self__, "applies_to", applies_to)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="appliesTo")
    def applies_to(self) -> str:
        """
        Which kinds of admins this policy applies to. Can be one of 'All organization admins', 'All enterprise admins', 'All network admins', 'All admins of networks...', 'All admins of networks tagged...', 'Specific admins...', 'All admins' or 'All SAML admins'.
        """
        return pulumi.get(self, "applies_to")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        If 'appliesTo' is set to one of 'Specific admins...', 'All admins of networks...' or 'All admins of networks tagged...', then you must specify this 'values' property to provide the set of
          entities to apply the branding policy to. For 'Specific admins...', specify an array of admin IDs. For 'All admins of
          networks...', specify an array of network IDs and/or configuration template IDs. For 'All admins of networks tagged...',
          specify an array of tag names.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetBrandingPoliciesItemCustomLogoResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 image: 'outputs.GetBrandingPoliciesItemCustomLogoImageResult'):
        """
        :param bool enabled: Whether or not there is a custom logo enabled.
        :param 'GetBrandingPoliciesItemCustomLogoImageArgs' image: Properties of the image.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether or not there is a custom logo enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def image(self) -> 'outputs.GetBrandingPoliciesItemCustomLogoImageResult':
        """
        Properties of the image.
        """
        return pulumi.get(self, "image")


@pulumi.output_type
class GetBrandingPoliciesItemCustomLogoImageResult(dict):
    def __init__(__self__, *,
                 preview: 'outputs.GetBrandingPoliciesItemCustomLogoImagePreviewResult'):
        """
        :param 'GetBrandingPoliciesItemCustomLogoImagePreviewArgs' preview: Preview of the image
        """
        pulumi.set(__self__, "preview", preview)

    @property
    @pulumi.getter
    def preview(self) -> 'outputs.GetBrandingPoliciesItemCustomLogoImagePreviewResult':
        """
        Preview of the image
        """
        return pulumi.get(self, "preview")


@pulumi.output_type
class GetBrandingPoliciesItemCustomLogoImagePreviewResult(dict):
    def __init__(__self__, *,
                 expires_at: str,
                 url: str):
        """
        :param str expires_at: Timestamp of the preview image
        :param str url: Url of the preview image
        """
        pulumi.set(__self__, "expires_at", expires_at)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> str:
        """
        Timestamp of the preview image
        """
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Url of the preview image
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetBrandingPoliciesItemHelpSettingsResult(dict):
    def __init__(__self__, *,
                 api_docs_subtab: str,
                 cases_subtab: str,
                 cisco_meraki_product_documentation: str,
                 community_subtab: str,
                 data_protection_requests_subtab: str,
                 firewall_info_subtab: str,
                 get_help_subtab: str,
                 get_help_subtab_knowledge_base_search: str,
                 hardware_replacements_subtab: str,
                 help_tab: str,
                 help_widget: str,
                 new_features_subtab: str,
                 sm_forums: str,
                 support_contact_info: str,
                 universal_search_knowledge_base_search: str):
        """
        :param str api_docs_subtab: The 'Help > API docs' subtab where a detailed description of the Dashboard API is listed. Can be one of
                 'default or inherit', 'hide' or 'show'.
        :param str cases_subtab: The 'Help > Cases' Dashboard subtab on which Cisco Meraki support cases for this organization can be managed. Can be one
                 of 'default or inherit', 'hide' or 'show'.
        :param str cisco_meraki_product_documentation: The 'Product Manuals' section of the 'Help > Get Help' subtab. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
        :param str community_subtab: The 'Help > Community' subtab which provides a link to Meraki Community. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str data_protection_requests_subtab: The 'Help > Data protection requests' Dashboard subtab on which requests to delete, restrict, or export end-user data can
                 be audited. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str firewall_info_subtab: The 'Help > Firewall info' subtab where necessary upstream firewall rules for communication to the Cisco Meraki cloud are
                 listed. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str get_help_subtab: The 'Help > Get Help' subtab on which Cisco Meraki KB, Product Manuals, and Support/Case Information are displayed. Note
                 that if this subtab is hidden, branding customizations for the KB on 'Get help', Cisco Meraki product documentation,
                 and support contact info will not be visible. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str get_help_subtab_knowledge_base_search: The KB search box which appears on the Help page. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
        :param str hardware_replacements_subtab: The 'Help > Replacement info' subtab where important information regarding device replacements is detailed. Can be one of
                 'default or inherit', 'hide' or 'show'.
        :param str help_tab: The Help tab, under which all support information resides. If this tab is hidden, no other 'Help' branding
                 customizations will be visible. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str help_widget: The 'Help Widget' is a support widget which provides access to live chat, documentation links, Sales contact info,
                 and other contact avenues to reach Meraki Support. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str new_features_subtab: The 'Help > New features' subtab where new Dashboard features are detailed. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str sm_forums: The 'SM Forums' subtab which links to community-based support for Cisco Meraki Systems Manager. Only configurable for
                 organizations that contain Systems Manager networks. Can be one of 'default or inherit', 'hide' or 'show'.
        :param str support_contact_info: The 'Contact Meraki Support' section of the 'Help > Get Help' subtab. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
        :param str universal_search_knowledge_base_search: The universal search box always visible on Dashboard will, by default, present results from the Meraki KB. This configures
                 whether these Meraki KB results should be returned. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        pulumi.set(__self__, "api_docs_subtab", api_docs_subtab)
        pulumi.set(__self__, "cases_subtab", cases_subtab)
        pulumi.set(__self__, "cisco_meraki_product_documentation", cisco_meraki_product_documentation)
        pulumi.set(__self__, "community_subtab", community_subtab)
        pulumi.set(__self__, "data_protection_requests_subtab", data_protection_requests_subtab)
        pulumi.set(__self__, "firewall_info_subtab", firewall_info_subtab)
        pulumi.set(__self__, "get_help_subtab", get_help_subtab)
        pulumi.set(__self__, "get_help_subtab_knowledge_base_search", get_help_subtab_knowledge_base_search)
        pulumi.set(__self__, "hardware_replacements_subtab", hardware_replacements_subtab)
        pulumi.set(__self__, "help_tab", help_tab)
        pulumi.set(__self__, "help_widget", help_widget)
        pulumi.set(__self__, "new_features_subtab", new_features_subtab)
        pulumi.set(__self__, "sm_forums", sm_forums)
        pulumi.set(__self__, "support_contact_info", support_contact_info)
        pulumi.set(__self__, "universal_search_knowledge_base_search", universal_search_knowledge_base_search)

    @property
    @pulumi.getter(name="apiDocsSubtab")
    def api_docs_subtab(self) -> str:
        """
        The 'Help > API docs' subtab where a detailed description of the Dashboard API is listed. Can be one of
          'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "api_docs_subtab")

    @property
    @pulumi.getter(name="casesSubtab")
    def cases_subtab(self) -> str:
        """
        The 'Help > Cases' Dashboard subtab on which Cisco Meraki support cases for this organization can be managed. Can be one
          of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "cases_subtab")

    @property
    @pulumi.getter(name="ciscoMerakiProductDocumentation")
    def cisco_meraki_product_documentation(self) -> str:
        """
        The 'Product Manuals' section of the 'Help > Get Help' subtab. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
        """
        return pulumi.get(self, "cisco_meraki_product_documentation")

    @property
    @pulumi.getter(name="communitySubtab")
    def community_subtab(self) -> str:
        """
        The 'Help > Community' subtab which provides a link to Meraki Community. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "community_subtab")

    @property
    @pulumi.getter(name="dataProtectionRequestsSubtab")
    def data_protection_requests_subtab(self) -> str:
        """
        The 'Help > Data protection requests' Dashboard subtab on which requests to delete, restrict, or export end-user data can
          be audited. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "data_protection_requests_subtab")

    @property
    @pulumi.getter(name="firewallInfoSubtab")
    def firewall_info_subtab(self) -> str:
        """
        The 'Help > Firewall info' subtab where necessary upstream firewall rules for communication to the Cisco Meraki cloud are
          listed. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "firewall_info_subtab")

    @property
    @pulumi.getter(name="getHelpSubtab")
    def get_help_subtab(self) -> str:
        """
        The 'Help > Get Help' subtab on which Cisco Meraki KB, Product Manuals, and Support/Case Information are displayed. Note
          that if this subtab is hidden, branding customizations for the KB on 'Get help', Cisco Meraki product documentation,
          and support contact info will not be visible. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "get_help_subtab")

    @property
    @pulumi.getter(name="getHelpSubtabKnowledgeBaseSearch")
    def get_help_subtab_knowledge_base_search(self) -> str:
        """
        The KB search box which appears on the Help page. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
        """
        return pulumi.get(self, "get_help_subtab_knowledge_base_search")

    @property
    @pulumi.getter(name="hardwareReplacementsSubtab")
    def hardware_replacements_subtab(self) -> str:
        """
        The 'Help > Replacement info' subtab where important information regarding device replacements is detailed. Can be one of
          'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "hardware_replacements_subtab")

    @property
    @pulumi.getter(name="helpTab")
    def help_tab(self) -> str:
        """
        The Help tab, under which all support information resides. If this tab is hidden, no other 'Help' branding
          customizations will be visible. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "help_tab")

    @property
    @pulumi.getter(name="helpWidget")
    def help_widget(self) -> str:
        """
        The 'Help Widget' is a support widget which provides access to live chat, documentation links, Sales contact info,
          and other contact avenues to reach Meraki Support. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "help_widget")

    @property
    @pulumi.getter(name="newFeaturesSubtab")
    def new_features_subtab(self) -> str:
        """
        The 'Help > New features' subtab where new Dashboard features are detailed. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "new_features_subtab")

    @property
    @pulumi.getter(name="smForums")
    def sm_forums(self) -> str:
        """
        The 'SM Forums' subtab which links to community-based support for Cisco Meraki Systems Manager. Only configurable for
          organizations that contain Systems Manager networks. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "sm_forums")

    @property
    @pulumi.getter(name="supportContactInfo")
    def support_contact_info(self) -> str:
        """
        The 'Contact Meraki Support' section of the 'Help > Get Help' subtab. Can be one of 'default or inherit', 'hide', 'show', or a replacement custom HTML string.
        """
        return pulumi.get(self, "support_contact_info")

    @property
    @pulumi.getter(name="universalSearchKnowledgeBaseSearch")
    def universal_search_knowledge_base_search(self) -> str:
        """
        The universal search box always visible on Dashboard will, by default, present results from the Meraki KB. This configures
          whether these Meraki KB results should be returned. Can be one of 'default or inherit', 'hide' or 'show'.
        """
        return pulumi.get(self, "universal_search_knowledge_base_search")


@pulumi.output_type
class GetBrandingPoliciesPrioritiesItemResult(dict):
    def __init__(__self__, *,
                 branding_policy_ids: Sequence[str]):
        """
        :param Sequence[str] branding_policy_ids: An ordered list of branding policy IDs that determines the priority order of how to apply the policies
        """
        pulumi.set(__self__, "branding_policy_ids", branding_policy_ids)

    @property
    @pulumi.getter(name="brandingPolicyIds")
    def branding_policy_ids(self) -> Sequence[str]:
        """
        An ordered list of branding policy IDs that determines the priority order of how to apply the policies
        """
        return pulumi.get(self, "branding_policy_ids")


@pulumi.output_type
class GetCameraBoundariesAreasByDeviceItemResult(dict):
    def __init__(__self__, *,
                 boundaries: 'outputs.GetCameraBoundariesAreasByDeviceItemBoundariesResult',
                 network_id: str,
                 serial: str):
        """
        :param 'GetCameraBoundariesAreasByDeviceItemBoundariesArgs' boundaries: Configured area boundaries of the camera
        :param str network_id: The network id of the camera
        :param str serial: The serial number of the camera
        """
        pulumi.set(__self__, "boundaries", boundaries)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def boundaries(self) -> 'outputs.GetCameraBoundariesAreasByDeviceItemBoundariesResult':
        """
        Configured area boundaries of the camera
        """
        return pulumi.get(self, "boundaries")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        The network id of the camera
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The serial number of the camera
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetCameraBoundariesAreasByDeviceItemBoundariesResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 type: str,
                 vertices: Sequence['outputs.GetCameraBoundariesAreasByDeviceItemBoundariesVertexResult']):
        """
        :param str id: The area boundary id
        :param str name: The area boundary name
        :param str type: The area boundary type
        :param Sequence['GetCameraBoundariesAreasByDeviceItemBoundariesVertexArgs'] vertices: The area boundary vertices
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vertices", vertices)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The area boundary id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The area boundary name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The area boundary type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vertices(self) -> Sequence['outputs.GetCameraBoundariesAreasByDeviceItemBoundariesVertexResult']:
        """
        The area boundary vertices
        """
        return pulumi.get(self, "vertices")


@pulumi.output_type
class GetCameraBoundariesAreasByDeviceItemBoundariesVertexResult(dict):
    def __init__(__self__, *,
                 x: float,
                 y: float):
        """
        :param float x: The vertex x coordinate
        :param float y: The vertex y coordinate
        """
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def x(self) -> float:
        """
        The vertex x coordinate
        """
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> float:
        """
        The vertex y coordinate
        """
        return pulumi.get(self, "y")


@pulumi.output_type
class GetCameraBoundariesLinesByDeviceItemResult(dict):
    def __init__(__self__, *,
                 boundaries: 'outputs.GetCameraBoundariesLinesByDeviceItemBoundariesResult',
                 network_id: str,
                 serial: str):
        """
        :param 'GetCameraBoundariesLinesByDeviceItemBoundariesArgs' boundaries: Configured line boundaries of the camera
        :param str network_id: The network id of the camera
        :param str serial: The serial number of the camera
        """
        pulumi.set(__self__, "boundaries", boundaries)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def boundaries(self) -> 'outputs.GetCameraBoundariesLinesByDeviceItemBoundariesResult':
        """
        Configured line boundaries of the camera
        """
        return pulumi.get(self, "boundaries")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        The network id of the camera
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The serial number of the camera
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetCameraBoundariesLinesByDeviceItemBoundariesResult(dict):
    def __init__(__self__, *,
                 direction_vertex: 'outputs.GetCameraBoundariesLinesByDeviceItemBoundariesDirectionVertexResult',
                 id: str,
                 name: str,
                 type: str,
                 vertices: Sequence['outputs.GetCameraBoundariesLinesByDeviceItemBoundariesVertexResult']):
        """
        :param 'GetCameraBoundariesLinesByDeviceItemBoundariesDirectionVertexArgs' direction_vertex: The line boundary crossing direction vertex
        :param str id: The line boundary id
        :param str name: The line boundary name
        :param str type: The line boundary type
        :param Sequence['GetCameraBoundariesLinesByDeviceItemBoundariesVertexArgs'] vertices: The line boundary vertices
        """
        pulumi.set(__self__, "direction_vertex", direction_vertex)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vertices", vertices)

    @property
    @pulumi.getter(name="directionVertex")
    def direction_vertex(self) -> 'outputs.GetCameraBoundariesLinesByDeviceItemBoundariesDirectionVertexResult':
        """
        The line boundary crossing direction vertex
        """
        return pulumi.get(self, "direction_vertex")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The line boundary id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The line boundary name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The line boundary type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vertices(self) -> Sequence['outputs.GetCameraBoundariesLinesByDeviceItemBoundariesVertexResult']:
        """
        The line boundary vertices
        """
        return pulumi.get(self, "vertices")


@pulumi.output_type
class GetCameraBoundariesLinesByDeviceItemBoundariesDirectionVertexResult(dict):
    def __init__(__self__, *,
                 x: float,
                 y: float):
        """
        :param float x: The vertex x coordinate
        :param float y: The vertex y coordinate
        """
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def x(self) -> float:
        """
        The vertex x coordinate
        """
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> float:
        """
        The vertex y coordinate
        """
        return pulumi.get(self, "y")


@pulumi.output_type
class GetCameraBoundariesLinesByDeviceItemBoundariesVertexResult(dict):
    def __init__(__self__, *,
                 x: float,
                 y: float):
        """
        :param float x: The vertex x coordinate
        :param float y: The vertex y coordinate
        """
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def x(self) -> float:
        """
        The vertex x coordinate
        """
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> float:
        """
        The vertex y coordinate
        """
        return pulumi.get(self, "y")


@pulumi.output_type
class GetCameraCustomAnalyticsArtifactsItemResult(dict):
    def __init__(__self__, *,
                 artifact_id: str,
                 name: str,
                 organization_id: str,
                 status: 'outputs.GetCameraCustomAnalyticsArtifactsItemStatusResult'):
        """
        :param str artifact_id: Custom analytics artifact ID
        :param str name: Custom analytics artifact name
        :param str organization_id: Organization ID
        :param 'GetCameraCustomAnalyticsArtifactsItemStatusArgs' status: Custom analytics artifact status
        """
        pulumi.set(__self__, "artifact_id", artifact_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> str:
        """
        Custom analytics artifact ID
        """
        return pulumi.get(self, "artifact_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Custom analytics artifact name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        Organization ID
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.GetCameraCustomAnalyticsArtifactsItemStatusResult':
        """
        Custom analytics artifact status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetCameraCustomAnalyticsArtifactsItemStatusResult(dict):
    def __init__(__self__, *,
                 message: str,
                 type: str):
        """
        :param str message: Status message
        :param str type: Status type
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Status message
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Status type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCameraDetectionsHistoryByBoundaryByIntervalItemResult(dict):
    def __init__(__self__, *,
                 boundary_id: str,
                 results: 'outputs.GetCameraDetectionsHistoryByBoundaryByIntervalItemResultsResult',
                 type: str):
        """
        :param str boundary_id: The boundary id
        :param 'GetCameraDetectionsHistoryByBoundaryByIntervalItemResultsArgs' results: The analytics data
        :param str type: The boundary type
        """
        pulumi.set(__self__, "boundary_id", boundary_id)
        pulumi.set(__self__, "results", results)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="boundaryId")
    def boundary_id(self) -> str:
        """
        The boundary id
        """
        return pulumi.get(self, "boundary_id")

    @property
    @pulumi.getter
    def results(self) -> 'outputs.GetCameraDetectionsHistoryByBoundaryByIntervalItemResultsResult':
        """
        The analytics data
        """
        return pulumi.get(self, "results")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The boundary type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCameraDetectionsHistoryByBoundaryByIntervalItemResultsResult(dict):
    def __init__(__self__, *,
                 end_time: str,
                 in_: int,
                 object_type: str,
                 out: int,
                 start_time: str):
        """
        :param str end_time: The period end time
        :param int in_: The number of detections entered
        :param str object_type: The detection type
        :param int out: The number of detections exited
        :param str start_time: The period start time
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "in_", in_)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "out", out)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The period end time
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="in")
    def in_(self) -> int:
        """
        The number of detections entered
        """
        return pulumi.get(self, "in_")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        The detection type
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def out(self) -> int:
        """
        The number of detections exited
        """
        return pulumi.get(self, "out")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The period start time
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetCameraPermissionsItemResult(dict):
    def __init__(__self__, *,
                 id: str,
                 level: str,
                 name: str):
        """
        :param str id: Permission scope id
        :param str level: Permission scope level
        :param str name: Name of permission scope
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Permission scope id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        Permission scope level
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of permission scope
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCameraRolesItemResult(dict):
    def __init__(__self__, *,
                 applied_on_devices: Sequence['outputs.GetCameraRolesItemAppliedOnDeviceResult'],
                 applied_on_networks: Sequence['outputs.GetCameraRolesItemAppliedOnNetworkResult'],
                 applied_org_wides: Sequence['outputs.GetCameraRolesItemAppliedOrgWideResult'],
                 name: str):
        pulumi.set(__self__, "applied_on_devices", applied_on_devices)
        pulumi.set(__self__, "applied_on_networks", applied_on_networks)
        pulumi.set(__self__, "applied_org_wides", applied_org_wides)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="appliedOnDevices")
    def applied_on_devices(self) -> Sequence['outputs.GetCameraRolesItemAppliedOnDeviceResult']:
        return pulumi.get(self, "applied_on_devices")

    @property
    @pulumi.getter(name="appliedOnNetworks")
    def applied_on_networks(self) -> Sequence['outputs.GetCameraRolesItemAppliedOnNetworkResult']:
        return pulumi.get(self, "applied_on_networks")

    @property
    @pulumi.getter(name="appliedOrgWides")
    def applied_org_wides(self) -> Sequence['outputs.GetCameraRolesItemAppliedOrgWideResult']:
        return pulumi.get(self, "applied_org_wides")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCameraRolesItemAppliedOnDeviceResult(dict):
    def __init__(__self__, *,
                 id: str,
                 permission_level: str,
                 permission_scope: str,
                 permission_scope_id: str,
                 tag: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "permission_level", permission_level)
        pulumi.set(__self__, "permission_scope", permission_scope)
        pulumi.set(__self__, "permission_scope_id", permission_scope_id)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> str:
        return pulumi.get(self, "permission_level")

    @property
    @pulumi.getter(name="permissionScope")
    def permission_scope(self) -> str:
        return pulumi.get(self, "permission_scope")

    @property
    @pulumi.getter(name="permissionScopeId")
    def permission_scope_id(self) -> str:
        return pulumi.get(self, "permission_scope_id")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetCameraRolesItemAppliedOnNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 permission_level: str,
                 permission_scope: str,
                 permission_scope_id: str,
                 tag: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "permission_level", permission_level)
        pulumi.set(__self__, "permission_scope", permission_scope)
        pulumi.set(__self__, "permission_scope_id", permission_scope_id)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> str:
        return pulumi.get(self, "permission_level")

    @property
    @pulumi.getter(name="permissionScope")
    def permission_scope(self) -> str:
        return pulumi.get(self, "permission_scope")

    @property
    @pulumi.getter(name="permissionScopeId")
    def permission_scope_id(self) -> str:
        return pulumi.get(self, "permission_scope_id")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetCameraRolesItemAppliedOrgWideResult(dict):
    def __init__(__self__, *,
                 permission_level: str,
                 permission_scope: str,
                 permission_scope_id: str,
                 tag: str):
        pulumi.set(__self__, "permission_level", permission_level)
        pulumi.set(__self__, "permission_scope", permission_scope)
        pulumi.set(__self__, "permission_scope_id", permission_scope_id)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> str:
        return pulumi.get(self, "permission_level")

    @property
    @pulumi.getter(name="permissionScope")
    def permission_scope(self) -> str:
        return pulumi.get(self, "permission_scope")

    @property
    @pulumi.getter(name="permissionScopeId")
    def permission_scope_id(self) -> str:
        return pulumi.get(self, "permission_scope_id")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetCellularGatewayUplinkStatusesItemResult(dict):
    def __init__(__self__, *,
                 last_reported_at: str,
                 model: str,
                 network_id: str,
                 serial: str,
                 uplinks: Sequence['outputs.GetCellularGatewayUplinkStatusesItemUplinkResult']):
        """
        :param str last_reported_at: Last reported time for the device
        :param str model: Device model
        :param str network_id: Network Id
        :param str serial: Serial number of the device
        :param Sequence['GetCellularGatewayUplinkStatusesItemUplinkArgs'] uplinks: Uplinks info
        """
        pulumi.set(__self__, "last_reported_at", last_reported_at)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "uplinks", uplinks)

    @property
    @pulumi.getter(name="lastReportedAt")
    def last_reported_at(self) -> str:
        """
        Last reported time for the device
        """
        return pulumi.get(self, "last_reported_at")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Device model
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        Network Id
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Serial number of the device
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def uplinks(self) -> Sequence['outputs.GetCellularGatewayUplinkStatusesItemUplinkResult']:
        """
        Uplinks info
        """
        return pulumi.get(self, "uplinks")


@pulumi.output_type
class GetCellularGatewayUplinkStatusesItemUplinkResult(dict):
    def __init__(__self__, *,
                 apn: str,
                 connection_type: str,
                 dns1: str,
                 dns2: str,
                 gateway: str,
                 iccid: str,
                 interface: str,
                 ip: str,
                 model: str,
                 provider: str,
                 public_ip: str,
                 signal_stat: 'outputs.GetCellularGatewayUplinkStatusesItemUplinkSignalStatResult',
                 signal_type: str,
                 status: str):
        """
        :param str apn: Access Point Name
        :param str connection_type: Connection Type
        :param str dns1: Primary DNS IP
        :param str dns2: Secondary DNS IP
        :param str gateway: Gateway IP
        :param str iccid: Integrated Circuit Card Identification Number
        :param str interface: Uplink interface
        :param str ip: Uplink IP
        :param str model: Uplink model
        :param str provider: Network Provider
        :param str public_ip: Public IP
        :param 'GetCellularGatewayUplinkStatusesItemUplinkSignalStatArgs' signal_stat: Tower Signal Status
        :param str signal_type: Signal Type
        :param str status: Uplink status
        """
        pulumi.set(__self__, "apn", apn)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "dns1", dns1)
        pulumi.set(__self__, "dns2", dns2)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "iccid", iccid)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "signal_stat", signal_stat)
        pulumi.set(__self__, "signal_type", signal_type)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def apn(self) -> str:
        """
        Access Point Name
        """
        return pulumi.get(self, "apn")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        """
        Connection Type
        """
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def dns1(self) -> str:
        """
        Primary DNS IP
        """
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> str:
        """
        Secondary DNS IP
        """
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        Gateway IP
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def iccid(self) -> str:
        """
        Integrated Circuit Card Identification Number
        """
        return pulumi.get(self, "iccid")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Uplink interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Uplink IP
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Uplink model
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        Network Provider
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        Public IP
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="signalStat")
    def signal_stat(self) -> 'outputs.GetCellularGatewayUplinkStatusesItemUplinkSignalStatResult':
        """
        Tower Signal Status
        """
        return pulumi.get(self, "signal_stat")

    @property
    @pulumi.getter(name="signalType")
    def signal_type(self) -> str:
        """
        Signal Type
        """
        return pulumi.get(self, "signal_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Uplink status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetCellularGatewayUplinkStatusesItemUplinkSignalStatResult(dict):
    def __init__(__self__, *,
                 rsrp: str,
                 rsrq: str):
        """
        :param str rsrp: Reference Signal Received Power
        :param str rsrq: Reference Signal Received Quality
        """
        pulumi.set(__self__, "rsrp", rsrp)
        pulumi.set(__self__, "rsrq", rsrq)

    @property
    @pulumi.getter
    def rsrp(self) -> str:
        """
        Reference Signal Received Power
        """
        return pulumi.get(self, "rsrp")

    @property
    @pulumi.getter
    def rsrq(self) -> str:
        """
        Reference Signal Received Quality
        """
        return pulumi.get(self, "rsrq")


@pulumi.output_type
class GetClientsBandwidthUsageHistoryItemResult(dict):
    def __init__(__self__, *,
                 downstream: int,
                 total: int,
                 ts: str,
                 upstream: int):
        """
        :param int downstream: Downloaded data, in mbps.
        :param int total: Total bandwidth usage, in mbps.
        :param str ts: Timestamp for the bandwidth usage snapshot.
        :param int upstream: Uploaded data, in mbps.
        """
        pulumi.set(__self__, "downstream", downstream)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "ts", ts)
        pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter
    def downstream(self) -> int:
        """
        Downloaded data, in mbps.
        """
        return pulumi.get(self, "downstream")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total bandwidth usage, in mbps.
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def ts(self) -> str:
        """
        Timestamp for the bandwidth usage snapshot.
        """
        return pulumi.get(self, "ts")

    @property
    @pulumi.getter
    def upstream(self) -> int:
        """
        Uploaded data, in mbps.
        """
        return pulumi.get(self, "upstream")


@pulumi.output_type
class GetClientsOverviewItemResult(dict):
    def __init__(__self__, *,
                 counts: 'outputs.GetClientsOverviewItemCountsResult',
                 usage: 'outputs.GetClientsOverviewItemUsageResult'):
        """
        :param 'GetClientsOverviewItemCountsArgs' counts: Client count information
        :param 'GetClientsOverviewItemUsageArgs' usage: Usage information of all clients across organization
        """
        pulumi.set(__self__, "counts", counts)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def counts(self) -> 'outputs.GetClientsOverviewItemCountsResult':
        """
        Client count information
        """
        return pulumi.get(self, "counts")

    @property
    @pulumi.getter
    def usage(self) -> 'outputs.GetClientsOverviewItemUsageResult':
        """
        Usage information of all clients across organization
        """
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetClientsOverviewItemCountsResult(dict):
    def __init__(__self__, *,
                 total: int):
        """
        :param int total: Total number of clients with data usage in organization
        """
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total number of clients with data usage in organization
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetClientsOverviewItemUsageResult(dict):
    def __init__(__self__, *,
                 average: float,
                 overall: 'outputs.GetClientsOverviewItemUsageOverallResult'):
        """
        :param float average: Average data usage (in kb) of each client in organization
        :param 'GetClientsOverviewItemUsageOverallArgs' overall: Overall data usage of all clients across organization
        """
        pulumi.set(__self__, "average", average)
        pulumi.set(__self__, "overall", overall)

    @property
    @pulumi.getter
    def average(self) -> float:
        """
        Average data usage (in kb) of each client in organization
        """
        return pulumi.get(self, "average")

    @property
    @pulumi.getter
    def overall(self) -> 'outputs.GetClientsOverviewItemUsageOverallResult':
        """
        Overall data usage of all clients across organization
        """
        return pulumi.get(self, "overall")


@pulumi.output_type
class GetClientsOverviewItemUsageOverallResult(dict):
    def __init__(__self__, *,
                 downstream: float,
                 total: float,
                 upstream: float):
        """
        :param float downstream: Downstream data usage (in kb) of all clients across organization
        :param float total: Total data usage (in kb) of all clients across organization
        :param float upstream: Upstream data usage (in kb) of all clients across organization
        """
        pulumi.set(__self__, "downstream", downstream)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter
    def downstream(self) -> float:
        """
        Downstream data usage (in kb) of all clients across organization
        """
        return pulumi.get(self, "downstream")

    @property
    @pulumi.getter
    def total(self) -> float:
        """
        Total data usage (in kb) of all clients across organization
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def upstream(self) -> float:
        """
        Upstream data usage (in kb) of all clients across organization
        """
        return pulumi.get(self, "upstream")


@pulumi.output_type
class GetClientsSearchItemResult(dict):
    def __init__(__self__, *,
                 client_id: str,
                 mac: str,
                 manufacturer: str,
                 records: Sequence['outputs.GetClientsSearchItemRecordResult']):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "manufacturer", manufacturer)
        pulumi.set(__self__, "records", records)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def mac(self) -> str:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def manufacturer(self) -> str:
        return pulumi.get(self, "manufacturer")

    @property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetClientsSearchItemRecordResult']:
        return pulumi.get(self, "records")


@pulumi.output_type
class GetClientsSearchItemRecordResult(dict):
    def __init__(__self__, *,
                 cdp: str,
                 client_vpn_connections: Sequence['outputs.GetClientsSearchItemRecordClientVpnConnectionResult'],
                 description: str,
                 first_seen: int,
                 ip: str,
                 ip6: str,
                 last_seen: int,
                 lldps: Sequence[str],
                 network: 'outputs.GetClientsSearchItemRecordNetworkResult',
                 os: str,
                 sm_installed: bool,
                 ssid: str,
                 status: str,
                 switchport: str,
                 user: str,
                 vlan: str,
                 wireless_capabilities: str):
        pulumi.set(__self__, "cdp", cdp)
        pulumi.set(__self__, "client_vpn_connections", client_vpn_connections)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "first_seen", first_seen)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip6", ip6)
        pulumi.set(__self__, "last_seen", last_seen)
        pulumi.set(__self__, "lldps", lldps)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "sm_installed", sm_installed)
        pulumi.set(__self__, "ssid", ssid)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "switchport", switchport)
        pulumi.set(__self__, "user", user)
        pulumi.set(__self__, "vlan", vlan)
        pulumi.set(__self__, "wireless_capabilities", wireless_capabilities)

    @property
    @pulumi.getter
    def cdp(self) -> str:
        return pulumi.get(self, "cdp")

    @property
    @pulumi.getter(name="clientVpnConnections")
    def client_vpn_connections(self) -> Sequence['outputs.GetClientsSearchItemRecordClientVpnConnectionResult']:
        return pulumi.get(self, "client_vpn_connections")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="firstSeen")
    def first_seen(self) -> int:
        return pulumi.get(self, "first_seen")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ip6(self) -> str:
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> int:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter
    def lldps(self) -> Sequence[str]:
        return pulumi.get(self, "lldps")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetClientsSearchItemRecordNetworkResult':
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def os(self) -> str:
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="smInstalled")
    def sm_installed(self) -> bool:
        return pulumi.get(self, "sm_installed")

    @property
    @pulumi.getter
    def ssid(self) -> str:
        return pulumi.get(self, "ssid")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def switchport(self) -> str:
        return pulumi.get(self, "switchport")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def vlan(self) -> str:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="wirelessCapabilities")
    def wireless_capabilities(self) -> str:
        return pulumi.get(self, "wireless_capabilities")


@pulumi.output_type
class GetClientsSearchItemRecordClientVpnConnectionResult(dict):
    def __init__(__self__, *,
                 connected_at: int,
                 disconnected_at: int,
                 remote_ip: str):
        pulumi.set(__self__, "connected_at", connected_at)
        pulumi.set(__self__, "disconnected_at", disconnected_at)
        pulumi.set(__self__, "remote_ip", remote_ip)

    @property
    @pulumi.getter(name="connectedAt")
    def connected_at(self) -> int:
        return pulumi.get(self, "connected_at")

    @property
    @pulumi.getter(name="disconnectedAt")
    def disconnected_at(self) -> int:
        return pulumi.get(self, "disconnected_at")

    @property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> str:
        return pulumi.get(self, "remote_ip")


@pulumi.output_type
class GetClientsSearchItemRecordNetworkResult(dict):
    def __init__(__self__, *,
                 enrollment_string: str,
                 id: str,
                 is_bound_to_config_template: bool,
                 name: str,
                 notes: str,
                 organization_id: str,
                 product_types: Sequence[str],
                 tags: Sequence[str],
                 time_zone: str):
        pulumi.set(__self__, "enrollment_string", enrollment_string)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_bound_to_config_template", is_bound_to_config_template)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "product_types", product_types)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="enrollmentString")
    def enrollment_string(self) -> str:
        return pulumi.get(self, "enrollment_string")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBoundToConfigTemplate")
    def is_bound_to_config_template(self) -> bool:
        return pulumi.get(self, "is_bound_to_config_template")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notes(self) -> str:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="productTypes")
    def product_types(self) -> Sequence[str]:
        return pulumi.get(self, "product_types")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class GetConfigTemplatesItemResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 product_types: Sequence[str],
                 time_zone: str):
        """
        :param str id: The ID of the network or config template to copy configuration from
        :param str name: The name of the configuration template
        :param Sequence[str] product_types: The product types of the configuration template
        :param str time_zone: The timezone of the configuration template. For a list of allowed timezones, please see the 'TZ' column in the table in \\n\\nthis article\\n\\n. Not applicable if copying from existing network or template
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "product_types", product_types)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the network or config template to copy configuration from
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the configuration template
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productTypes")
    def product_types(self) -> Sequence[str]:
        """
        The product types of the configuration template
        """
        return pulumi.get(self, "product_types")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        The timezone of the configuration template. For a list of allowed timezones, please see the 'TZ' column in the table in \\n\\nthis article\\n\\n. Not applicable if copying from existing network or template
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class GetConfigTemplatesSwitchProfilesItemResult(dict):
    def __init__(__self__, *,
                 model: str,
                 name: str,
                 switch_profile_id: str):
        """
        :param str model: Switch model
        :param str name: Switch template name
        :param str switch_profile_id: Switch template id
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "switch_profile_id", switch_profile_id)

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Switch model
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Switch template name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="switchProfileId")
    def switch_profile_id(self) -> str:
        """
        Switch template id
        """
        return pulumi.get(self, "switch_profile_id")


@pulumi.output_type
class GetConfigTemplatesSwitchProfilesPortsItemResult(dict):
    def __init__(__self__, *,
                 access_policy_number: int,
                 access_policy_type: str,
                 allowed_vlans: str,
                 dai_trusted: bool,
                 enabled: bool,
                 flexible_stacking_enabled: bool,
                 isolation_enabled: bool,
                 link_negotiation: str,
                 link_negotiation_capabilities: Sequence[str],
                 mac_allow_lists: Sequence[str],
                 mirror: 'outputs.GetConfigTemplatesSwitchProfilesPortsItemMirrorResult',
                 module: 'outputs.GetConfigTemplatesSwitchProfilesPortsItemModuleResult',
                 name: str,
                 poe_enabled: bool,
                 port_id: str,
                 port_schedule_id: str,
                 profile: 'outputs.GetConfigTemplatesSwitchProfilesPortsItemProfileResult',
                 rstp_enabled: bool,
                 sticky_mac_allow_list_limit: int,
                 sticky_mac_allow_lists: Sequence[str],
                 storm_control_enabled: bool,
                 stp_guard: str,
                 tags: Sequence[str],
                 type: str,
                 udld: str,
                 vlan: int,
                 voice_vlan: int):
        """
        :param int access_policy_number: The number of a custom access policy to configure on the switch template port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
        :param str access_policy_type: The type of the access policy of the switch template port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        :param str allowed_vlans: The VLANs allowed on the switch template port. Only applicable to trunk ports.
        :param bool dai_trusted: If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
        :param bool enabled: The status of the switch template port.
        :param bool flexible_stacking_enabled: For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
        :param bool isolation_enabled: The isolation status of the switch template port.
        :param str link_negotiation: The link speed for the switch template port.
        :param Sequence[str] link_negotiation_capabilities: Available link speeds for the switch template port.
        :param Sequence[str] mac_allow_lists: Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
        :param 'GetConfigTemplatesSwitchProfilesPortsItemMirrorArgs' mirror: Port mirror
        :param 'GetConfigTemplatesSwitchProfilesPortsItemModuleArgs' module: Expansion module
        :param str name: The name of the switch template port.
        :param bool poe_enabled: The PoE status of the switch template port.
        :param str port_id: The identifier of the switch template port.
        :param str port_schedule_id: The ID of the port schedule. A value of null will clear the port schedule.
        :param 'GetConfigTemplatesSwitchProfilesPortsItemProfileArgs' profile: Profile attributes
        :param bool rstp_enabled: The rapid spanning tree protocol status.
        :param int sticky_mac_allow_list_limit: The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        :param Sequence[str] sticky_mac_allow_lists: The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        :param bool storm_control_enabled: The storm control status of the switch template port.
        :param str stp_guard: The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        :param Sequence[str] tags: The list of tags of the switch template port.
        :param str type: The type of the switch template port ('trunk' or 'access').
        :param str udld: The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
        :param int vlan: The VLAN of the switch template port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        :param int voice_vlan: The voice VLAN of the switch template port. Only applicable to access ports.
        """
        pulumi.set(__self__, "access_policy_number", access_policy_number)
        pulumi.set(__self__, "access_policy_type", access_policy_type)
        pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        pulumi.set(__self__, "dai_trusted", dai_trusted)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "flexible_stacking_enabled", flexible_stacking_enabled)
        pulumi.set(__self__, "isolation_enabled", isolation_enabled)
        pulumi.set(__self__, "link_negotiation", link_negotiation)
        pulumi.set(__self__, "link_negotiation_capabilities", link_negotiation_capabilities)
        pulumi.set(__self__, "mac_allow_lists", mac_allow_lists)
        pulumi.set(__self__, "mirror", mirror)
        pulumi.set(__self__, "module", module)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "poe_enabled", poe_enabled)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "port_schedule_id", port_schedule_id)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "rstp_enabled", rstp_enabled)
        pulumi.set(__self__, "sticky_mac_allow_list_limit", sticky_mac_allow_list_limit)
        pulumi.set(__self__, "sticky_mac_allow_lists", sticky_mac_allow_lists)
        pulumi.set(__self__, "storm_control_enabled", storm_control_enabled)
        pulumi.set(__self__, "stp_guard", stp_guard)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "udld", udld)
        pulumi.set(__self__, "vlan", vlan)
        pulumi.set(__self__, "voice_vlan", voice_vlan)

    @property
    @pulumi.getter(name="accessPolicyNumber")
    def access_policy_number(self) -> int:
        """
        The number of a custom access policy to configure on the switch template port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
        """
        return pulumi.get(self, "access_policy_number")

    @property
    @pulumi.getter(name="accessPolicyType")
    def access_policy_type(self) -> str:
        """
        The type of the access policy of the switch template port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        """
        return pulumi.get(self, "access_policy_type")

    @property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> str:
        """
        The VLANs allowed on the switch template port. Only applicable to trunk ports.
        """
        return pulumi.get(self, "allowed_vlans")

    @property
    @pulumi.getter(name="daiTrusted")
    def dai_trusted(self) -> bool:
        """
        If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
        """
        return pulumi.get(self, "dai_trusted")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        The status of the switch template port.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="flexibleStackingEnabled")
    def flexible_stacking_enabled(self) -> bool:
        """
        For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
        """
        return pulumi.get(self, "flexible_stacking_enabled")

    @property
    @pulumi.getter(name="isolationEnabled")
    def isolation_enabled(self) -> bool:
        """
        The isolation status of the switch template port.
        """
        return pulumi.get(self, "isolation_enabled")

    @property
    @pulumi.getter(name="linkNegotiation")
    def link_negotiation(self) -> str:
        """
        The link speed for the switch template port.
        """
        return pulumi.get(self, "link_negotiation")

    @property
    @pulumi.getter(name="linkNegotiationCapabilities")
    def link_negotiation_capabilities(self) -> Sequence[str]:
        """
        Available link speeds for the switch template port.
        """
        return pulumi.get(self, "link_negotiation_capabilities")

    @property
    @pulumi.getter(name="macAllowLists")
    def mac_allow_lists(self) -> Sequence[str]:
        """
        Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
        """
        return pulumi.get(self, "mac_allow_lists")

    @property
    @pulumi.getter
    def mirror(self) -> 'outputs.GetConfigTemplatesSwitchProfilesPortsItemMirrorResult':
        """
        Port mirror
        """
        return pulumi.get(self, "mirror")

    @property
    @pulumi.getter
    def module(self) -> 'outputs.GetConfigTemplatesSwitchProfilesPortsItemModuleResult':
        """
        Expansion module
        """
        return pulumi.get(self, "module")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the switch template port.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="poeEnabled")
    def poe_enabled(self) -> bool:
        """
        The PoE status of the switch template port.
        """
        return pulumi.get(self, "poe_enabled")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        """
        The identifier of the switch template port.
        """
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="portScheduleId")
    def port_schedule_id(self) -> str:
        """
        The ID of the port schedule. A value of null will clear the port schedule.
        """
        return pulumi.get(self, "port_schedule_id")

    @property
    @pulumi.getter
    def profile(self) -> 'outputs.GetConfigTemplatesSwitchProfilesPortsItemProfileResult':
        """
        Profile attributes
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="rstpEnabled")
    def rstp_enabled(self) -> bool:
        """
        The rapid spanning tree protocol status.
        """
        return pulumi.get(self, "rstp_enabled")

    @property
    @pulumi.getter(name="stickyMacAllowListLimit")
    def sticky_mac_allow_list_limit(self) -> int:
        """
        The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        """
        return pulumi.get(self, "sticky_mac_allow_list_limit")

    @property
    @pulumi.getter(name="stickyMacAllowLists")
    def sticky_mac_allow_lists(self) -> Sequence[str]:
        """
        The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        """
        return pulumi.get(self, "sticky_mac_allow_lists")

    @property
    @pulumi.getter(name="stormControlEnabled")
    def storm_control_enabled(self) -> bool:
        """
        The storm control status of the switch template port.
        """
        return pulumi.get(self, "storm_control_enabled")

    @property
    @pulumi.getter(name="stpGuard")
    def stp_guard(self) -> str:
        """
        The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        """
        return pulumi.get(self, "stp_guard")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        The list of tags of the switch template port.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the switch template port ('trunk' or 'access').
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def udld(self) -> str:
        """
        The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
        """
        return pulumi.get(self, "udld")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        The VLAN of the switch template port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> int:
        """
        The voice VLAN of the switch template port. Only applicable to access ports.
        """
        return pulumi.get(self, "voice_vlan")


@pulumi.output_type
class GetConfigTemplatesSwitchProfilesPortsItemMirrorResult(dict):
    def __init__(__self__, *,
                 mode: str):
        """
        :param str mode: The port mirror mode. Can be one of ('Destination port', 'Source port' or 'Not mirroring traffic').
        """
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        The port mirror mode. Can be one of ('Destination port', 'Source port' or 'Not mirroring traffic').
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetConfigTemplatesSwitchProfilesPortsItemModuleResult(dict):
    def __init__(__self__, *,
                 model: str):
        """
        :param str model: The model of the expansion module.
        """
        pulumi.set(__self__, "model", model)

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        The model of the expansion module.
        """
        return pulumi.get(self, "model")


@pulumi.output_type
class GetConfigTemplatesSwitchProfilesPortsItemProfileResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 id: str,
                 iname: str):
        """
        :param bool enabled: When enabled, override this port's configuration with a port profile.
        :param str id: When enabled, the ID of the port profile used to override the port's configuration.
        :param str iname: When enabled, the IName of the profile.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "iname", iname)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        When enabled, override this port's configuration with a port profile.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        When enabled, the ID of the port profile used to override the port's configuration.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def iname(self) -> str:
        """
        When enabled, the IName of the profile.
        """
        return pulumi.get(self, "iname")


@pulumi.output_type
class GetDevicesAvailabilitiesChangeHistoryItemResult(dict):
    def __init__(__self__, *,
                 details: 'outputs.GetDevicesAvailabilitiesChangeHistoryItemDetailsResult',
                 device: 'outputs.GetDevicesAvailabilitiesChangeHistoryItemDeviceResult',
                 network: 'outputs.GetDevicesAvailabilitiesChangeHistoryItemNetworkResult',
                 ts: str):
        """
        :param 'GetDevicesAvailabilitiesChangeHistoryItemDetailsArgs' details: Details about the status changes
        :param 'GetDevicesAvailabilitiesChangeHistoryItemDeviceArgs' device: Device information
        :param 'GetDevicesAvailabilitiesChangeHistoryItemNetworkArgs' network: Network information
        :param str ts: Timestamp, in iso8601 format, at which the event happened
        """
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "ts", ts)

    @property
    @pulumi.getter
    def details(self) -> 'outputs.GetDevicesAvailabilitiesChangeHistoryItemDetailsResult':
        """
        Details about the status changes
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def device(self) -> 'outputs.GetDevicesAvailabilitiesChangeHistoryItemDeviceResult':
        """
        Device information
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetDevicesAvailabilitiesChangeHistoryItemNetworkResult':
        """
        Network information
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def ts(self) -> str:
        """
        Timestamp, in iso8601 format, at which the event happened
        """
        return pulumi.get(self, "ts")


@pulumi.output_type
class GetDevicesAvailabilitiesChangeHistoryItemDetailsResult(dict):
    def __init__(__self__, *,
                 news: Sequence['outputs.GetDevicesAvailabilitiesChangeHistoryItemDetailsNewsResult'],
                 olds: Sequence['outputs.GetDevicesAvailabilitiesChangeHistoryItemDetailsOldResult']):
        """
        :param Sequence['GetDevicesAvailabilitiesChangeHistoryItemDetailsNewsArgs'] news: Details about the new status
        :param Sequence['GetDevicesAvailabilitiesChangeHistoryItemDetailsOldArgs'] olds: Details about the old status
        """
        pulumi.set(__self__, "news", news)
        pulumi.set(__self__, "olds", olds)

    @property
    @pulumi.getter
    def news(self) -> Sequence['outputs.GetDevicesAvailabilitiesChangeHistoryItemDetailsNewsResult']:
        """
        Details about the new status
        """
        return pulumi.get(self, "news")

    @property
    @pulumi.getter
    def olds(self) -> Sequence['outputs.GetDevicesAvailabilitiesChangeHistoryItemDetailsOldResult']:
        """
        Details about the old status
        """
        return pulumi.get(self, "olds")


@pulumi.output_type
class GetDevicesAvailabilitiesChangeHistoryItemDetailsNewsResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Name of the detail
        :param str value: Value of the detail
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the detail
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the detail
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDevicesAvailabilitiesChangeHistoryItemDetailsOldResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Name of the detail
        :param str value: Value of the detail
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the detail
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the detail
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDevicesAvailabilitiesChangeHistoryItemDeviceResult(dict):
    def __init__(__self__, *,
                 model: str,
                 name: str,
                 product_type: str,
                 serial: str):
        """
        :param str model: Device model
        :param str name: Device name
        :param str product_type: Device product type.
        :param str serial: Device serial number
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Device model
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Device name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        Device product type.
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetDevicesAvailabilitiesChangeHistoryItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 tags: Sequence[str],
                 url: str):
        """
        :param str id: Network id
        :param str name: Network name
        :param Sequence[str] tags: Network tags
        :param str url: Network dashboard url
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Network id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Network name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        Network tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Network dashboard url
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDevicesAvailabilitiesItemResult(dict):
    def __init__(__self__, *,
                 mac: str,
                 name: str,
                 network: 'outputs.GetDevicesAvailabilitiesItemNetworkResult',
                 product_type: str,
                 serial: str,
                 status: str,
                 tags: Sequence[str]):
        """
        :param str mac: The device MAC address.
        :param str name: The device name.
        :param 'GetDevicesAvailabilitiesItemNetworkArgs' network: Network info.
        :param str product_type: Device product type.
        :param str serial: The device serial number.
        :param str status: Status of the device. Possible values are: online, alerting, offline, dormant.
        :param Sequence[str] tags: List of custom tags for the device.
        """
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        The device MAC address.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The device name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetDevicesAvailabilitiesItemNetworkResult':
        """
        Network info.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        Device product type.
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The device serial number.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the device. Possible values are: online, alerting, offline, dormant.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        List of custom tags for the device.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetDevicesAvailabilitiesItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: ID for the network containing the device.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID for the network containing the device.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDevicesBootsHistoryItemResult(dict):
    def __init__(__self__, *,
                 network: 'outputs.GetDevicesBootsHistoryItemNetworkResult',
                 serial: str,
                 start: 'outputs.GetDevicesBootsHistoryItemStartResult'):
        """
        :param 'GetDevicesBootsHistoryItemNetworkArgs' network: Device network
        :param str serial: Device serial number
        :param 'GetDevicesBootsHistoryItemStartArgs' start: Device power up
        """
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetDevicesBootsHistoryItemNetworkResult':
        """
        Device network
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Device serial number
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def start(self) -> 'outputs.GetDevicesBootsHistoryItemStartResult':
        """
        Device power up
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetDevicesBootsHistoryItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: API-formatted network ID
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        API-formatted network ID
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDevicesBootsHistoryItemStartResult(dict):
    def __init__(__self__, *,
                 booted_at: str):
        """
        :param str booted_at: Indicates when the device booted
        """
        pulumi.set(__self__, "booted_at", booted_at)

    @property
    @pulumi.getter(name="bootedAt")
    def booted_at(self) -> str:
        """
        Indicates when the device booted
        """
        return pulumi.get(self, "booted_at")


@pulumi.output_type
class GetDevicesItemResult(dict):
    def __init__(__self__, *,
                 address: str,
                 details: Sequence['outputs.GetDevicesItemDetailResult'],
                 firmware: str,
                 imei: float,
                 lan_ip: str,
                 lat: float,
                 lng: float,
                 mac: str,
                 model: str,
                 name: str,
                 network_id: str,
                 notes: str,
                 product_type: str,
                 serial: str,
                 tags: Sequence[str]):
        """
        :param str address: Physical address of the device
        :param Sequence['GetDevicesItemDetailArgs'] details: Additional device information
        :param str firmware: Firmware version of the device
        :param float imei: IMEI of the device, if applicable
        :param str lan_ip: LAN IP address of the device
        :param float lat: Latitude of the device
        :param float lng: Longitude of the device
        :param str mac: MAC address of the device
        :param str model: Model of the device
        :param str name: Name of the device
        :param str network_id: ID of the network the device belongs to
        :param str notes: Notes for the device, limited to 255 characters
        :param str product_type: Product type of the device
        :param str serial: Serial number of the device
        :param Sequence[str] tags: List of tags assigned to the device
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "firmware", firmware)
        pulumi.set(__self__, "imei", imei)
        pulumi.set(__self__, "lan_ip", lan_ip)
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lng", lng)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        Physical address of the device
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetDevicesItemDetailResult']:
        """
        Additional device information
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def firmware(self) -> str:
        """
        Firmware version of the device
        """
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter
    def imei(self) -> float:
        """
        IMEI of the device, if applicable
        """
        return pulumi.get(self, "imei")

    @property
    @pulumi.getter(name="lanIp")
    def lan_ip(self) -> str:
        """
        LAN IP address of the device
        """
        return pulumi.get(self, "lan_ip")

    @property
    @pulumi.getter
    def lat(self) -> float:
        """
        Latitude of the device
        """
        return pulumi.get(self, "lat")

    @property
    @pulumi.getter
    def lng(self) -> float:
        """
        Longitude of the device
        """
        return pulumi.get(self, "lng")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        MAC address of the device
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model of the device
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the device
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        ID of the network the device belongs to
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def notes(self) -> str:
        """
        Notes for the device, limited to 255 characters
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        Product type of the device
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Serial number of the device
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        List of tags assigned to the device
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetDevicesItemDetailResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Additional property name
        :param str value: Additional property value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Additional property name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Additional property value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDevicesPowerModulesStatusesByDeviceItemResult(dict):
    def __init__(__self__, *,
                 mac: str,
                 name: str,
                 network: 'outputs.GetDevicesPowerModulesStatusesByDeviceItemNetworkResult',
                 product_type: str,
                 serial: str,
                 slots: Sequence['outputs.GetDevicesPowerModulesStatusesByDeviceItemSlotResult'],
                 tags: Sequence[str]):
        """
        :param str mac: The device MAC address.
        :param str name: The device name.
        :param 'GetDevicesPowerModulesStatusesByDeviceItemNetworkArgs' network: Network info.
        :param str product_type: Device product type.
        :param str serial: The device serial number.
        :param Sequence['GetDevicesPowerModulesStatusesByDeviceItemSlotArgs'] slots: Information for the device's AC power supplies.
        :param Sequence[str] tags: List of custom tags for the device.
        """
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "slots", slots)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        The device MAC address.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The device name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetDevicesPowerModulesStatusesByDeviceItemNetworkResult':
        """
        Network info.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        Device product type.
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The device serial number.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def slots(self) -> Sequence['outputs.GetDevicesPowerModulesStatusesByDeviceItemSlotResult']:
        """
        Information for the device's AC power supplies.
        """
        return pulumi.get(self, "slots")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        List of custom tags for the device.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetDevicesPowerModulesStatusesByDeviceItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: ID for the network that the device is associated with.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID for the network that the device is associated with.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDevicesPowerModulesStatusesByDeviceItemSlotResult(dict):
    def __init__(__self__, *,
                 model: str,
                 number: int,
                 serial: str,
                 status: str):
        """
        :param str model: The power supply unit model.
        :param int number: Which slot the AC power supply occupies. Possible values are: 0, 1, 2.
        :param str serial: The power supply unit serial number.
        :param str status: Status of the power supply unit. Possible values are: connected, not connected, powering.
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        The power supply unit model.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def number(self) -> int:
        """
        Which slot the AC power supply occupies. Possible values are: 0, 1, 2.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The power supply unit serial number.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the power supply unit. Possible values are: connected, not connected, powering.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDevicesProvisioningStatusesItemResult(dict):
    def __init__(__self__, *,
                 mac: str,
                 name: str,
                 network: 'outputs.GetDevicesProvisioningStatusesItemNetworkResult',
                 product_type: str,
                 serial: str,
                 status: str,
                 tags: Sequence[str]):
        """
        :param str mac: The device MAC address.
        :param str name: The device name.
        :param 'GetDevicesProvisioningStatusesItemNetworkArgs' network: Network info.
        :param str product_type: Device product type.
        :param str serial: The device serial number.
        :param str status: The device provisioning status. Possible statuses: unprovisioned, incomplete, complete.
        :param Sequence[str] tags: List of custom tags for the device.
        """
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        The device MAC address.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The device name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetDevicesProvisioningStatusesItemNetworkResult':
        """
        Network info.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        Device product type.
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The device serial number.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The device provisioning status. Possible statuses: unprovisioned, incomplete, complete.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        List of custom tags for the device.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetDevicesProvisioningStatusesItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: ID for the network containing the device.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID for the network containing the device.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDevicesStatusesItemResult(dict):
    def __init__(__self__, *,
                 components: 'outputs.GetDevicesStatusesItemComponentsResult',
                 gateway: str,
                 ip_type: str,
                 lan_ip: str,
                 last_reported_at: str,
                 mac: str,
                 model: str,
                 name: str,
                 network_id: str,
                 primary_dns: str,
                 product_type: str,
                 public_ip: str,
                 secondary_dns: str,
                 serial: str,
                 status: str,
                 tags: Sequence[str]):
        """
        :param 'GetDevicesStatusesItemComponentsArgs' components: Components
        :param str gateway: IP Gateway
        :param str ip_type: IP Type
        :param str lan_ip: LAN IP Address
        :param str last_reported_at: Device Last Reported Location
        :param str mac: MAC Address
        :param str model: Model
        :param str name: Device Name
        :param str network_id: Network ID
        :param str primary_dns: Primary DNS
        :param str product_type: Product Type
        :param str public_ip: Public IP Address
        :param str secondary_dns: Secondary DNS
        :param str serial: Device Serial Number
        :param str status: Device Status
        :param Sequence[str] tags: Tags
        """
        pulumi.set(__self__, "components", components)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "ip_type", ip_type)
        pulumi.set(__self__, "lan_ip", lan_ip)
        pulumi.set(__self__, "last_reported_at", last_reported_at)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "primary_dns", primary_dns)
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "secondary_dns", secondary_dns)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def components(self) -> 'outputs.GetDevicesStatusesItemComponentsResult':
        """
        Components
        """
        return pulumi.get(self, "components")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        IP Gateway
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> str:
        """
        IP Type
        """
        return pulumi.get(self, "ip_type")

    @property
    @pulumi.getter(name="lanIp")
    def lan_ip(self) -> str:
        """
        LAN IP Address
        """
        return pulumi.get(self, "lan_ip")

    @property
    @pulumi.getter(name="lastReportedAt")
    def last_reported_at(self) -> str:
        """
        Device Last Reported Location
        """
        return pulumi.get(self, "last_reported_at")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        MAC Address
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Device Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        Network ID
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="primaryDns")
    def primary_dns(self) -> str:
        """
        Primary DNS
        """
        return pulumi.get(self, "primary_dns")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        Product Type
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        Public IP Address
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="secondaryDns")
    def secondary_dns(self) -> str:
        """
        Secondary DNS
        """
        return pulumi.get(self, "secondary_dns")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Device Serial Number
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Device Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        Tags
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetDevicesStatusesItemComponentsResult(dict):
    def __init__(__self__, *,
                 power_supplies: Sequence['outputs.GetDevicesStatusesItemComponentsPowerSupplyResult']):
        """
        :param Sequence['GetDevicesStatusesItemComponentsPowerSupplyArgs'] power_supplies: Power Supplies
        """
        pulumi.set(__self__, "power_supplies", power_supplies)

    @property
    @pulumi.getter(name="powerSupplies")
    def power_supplies(self) -> Sequence['outputs.GetDevicesStatusesItemComponentsPowerSupplyResult']:
        """
        Power Supplies
        """
        return pulumi.get(self, "power_supplies")


@pulumi.output_type
class GetDevicesStatusesItemComponentsPowerSupplyResult(dict):
    def __init__(__self__, *,
                 model: str,
                 poe: 'outputs.GetDevicesStatusesItemComponentsPowerSupplyPoeResult',
                 serial: str,
                 slot: int,
                 status: str):
        """
        :param str model: Model of the power supply
        :param 'GetDevicesStatusesItemComponentsPowerSupplyPoeArgs' poe: PoE info of the power supply
        :param str serial: Serial of the power supply
        :param int slot: Slot the power supply is in
        :param str status: Status of the power supply
        """
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "poe", poe)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "slot", slot)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model of the power supply
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def poe(self) -> 'outputs.GetDevicesStatusesItemComponentsPowerSupplyPoeResult':
        """
        PoE info of the power supply
        """
        return pulumi.get(self, "poe")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Serial of the power supply
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def slot(self) -> int:
        """
        Slot the power supply is in
        """
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the power supply
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDevicesStatusesItemComponentsPowerSupplyPoeResult(dict):
    def __init__(__self__, *,
                 maximum: int,
                 unit: str):
        """
        :param int maximum: Maximum PoE this power supply can provide when connected to the current switch model
        :param str unit: Unit of the PoE maximum
        """
        pulumi.set(__self__, "maximum", maximum)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def maximum(self) -> int:
        """
        Maximum PoE this power supply can provide when connected to the current switch model
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Unit of the PoE maximum
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetDevicesStatusesOverviewItemResult(dict):
    def __init__(__self__, *,
                 counts: 'outputs.GetDevicesStatusesOverviewItemCountsResult'):
        """
        :param 'GetDevicesStatusesOverviewItemCountsArgs' counts: counts
        """
        pulumi.set(__self__, "counts", counts)

    @property
    @pulumi.getter
    def counts(self) -> 'outputs.GetDevicesStatusesOverviewItemCountsResult':
        """
        counts
        """
        return pulumi.get(self, "counts")


@pulumi.output_type
class GetDevicesStatusesOverviewItemCountsResult(dict):
    def __init__(__self__, *,
                 by_status: 'outputs.GetDevicesStatusesOverviewItemCountsByStatusResult'):
        """
        :param 'GetDevicesStatusesOverviewItemCountsByStatusArgs' by_status: byStatus
        """
        pulumi.set(__self__, "by_status", by_status)

    @property
    @pulumi.getter(name="byStatus")
    def by_status(self) -> 'outputs.GetDevicesStatusesOverviewItemCountsByStatusResult':
        """
        byStatus
        """
        return pulumi.get(self, "by_status")


@pulumi.output_type
class GetDevicesStatusesOverviewItemCountsByStatusResult(dict):
    def __init__(__self__, *,
                 alerting: int,
                 dormant: int,
                 offline: int,
                 online: int):
        """
        :param int alerting: alerting count
        :param int dormant: dormant count
        :param int offline: offline count
        :param int online: online count
        """
        pulumi.set(__self__, "alerting", alerting)
        pulumi.set(__self__, "dormant", dormant)
        pulumi.set(__self__, "offline", offline)
        pulumi.set(__self__, "online", online)

    @property
    @pulumi.getter
    def alerting(self) -> int:
        """
        alerting count
        """
        return pulumi.get(self, "alerting")

    @property
    @pulumi.getter
    def dormant(self) -> int:
        """
        dormant count
        """
        return pulumi.get(self, "dormant")

    @property
    @pulumi.getter
    def offline(self) -> int:
        """
        offline count
        """
        return pulumi.get(self, "offline")

    @property
    @pulumi.getter
    def online(self) -> int:
        """
        online count
        """
        return pulumi.get(self, "online")


@pulumi.output_type
class GetDevicesUplinksAddressesByDeviceItemResult(dict):
    def __init__(__self__, *,
                 mac: str,
                 name: str,
                 network: 'outputs.GetDevicesUplinksAddressesByDeviceItemNetworkResult',
                 product_type: str,
                 serial: str,
                 tags: Sequence[str],
                 uplinks: Sequence['outputs.GetDevicesUplinksAddressesByDeviceItemUplinkResult']):
        """
        :param str mac: The device MAC address.
        :param str name: The device name.
        :param 'GetDevicesUplinksAddressesByDeviceItemNetworkArgs' network: Network info.
        :param str product_type: Device product type.
        :param str serial: The device serial number.
        :param Sequence[str] tags: List of custom tags for the device.
        :param Sequence['GetDevicesUplinksAddressesByDeviceItemUplinkArgs'] uplinks: List of device uplink addresses information.
        """
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "uplinks", uplinks)

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        The device MAC address.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The device name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetDevicesUplinksAddressesByDeviceItemNetworkResult':
        """
        Network info.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        Device product type.
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The device serial number.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        List of custom tags for the device.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def uplinks(self) -> Sequence['outputs.GetDevicesUplinksAddressesByDeviceItemUplinkResult']:
        """
        List of device uplink addresses information.
        """
        return pulumi.get(self, "uplinks")


@pulumi.output_type
class GetDevicesUplinksAddressesByDeviceItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: ID for the network containing the device.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID for the network containing the device.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDevicesUplinksAddressesByDeviceItemUplinkResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence['outputs.GetDevicesUplinksAddressesByDeviceItemUplinkAddressResult'],
                 interface: str):
        """
        :param Sequence['GetDevicesUplinksAddressesByDeviceItemUplinkAddressArgs'] addresses: Available addresses for the interface.
        :param str interface: Interface for the device uplink. Available options are: cellular, man1, man2, wan1, wan2
        """
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.GetDevicesUplinksAddressesByDeviceItemUplinkAddressResult']:
        """
        Available addresses for the interface.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface for the device uplink. Available options are: cellular, man1, man2, wan1, wan2
        """
        return pulumi.get(self, "interface")


@pulumi.output_type
class GetDevicesUplinksAddressesByDeviceItemUplinkAddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 assignment_mode: str,
                 gateway: str,
                 protocol: str,
                 public: 'outputs.GetDevicesUplinksAddressesByDeviceItemUplinkAddressPublicResult'):
        """
        :param str address: Device uplink address.
        :param str assignment_mode: Indicates how the device uplink address is assigned. Available options are: static, dynamic.
        :param str gateway: Device uplink gateway address.
        :param str protocol: Type of address for the device uplink. Available options are: ipv4, ipv6.
        :param 'GetDevicesUplinksAddressesByDeviceItemUplinkAddressPublicArgs' public: Public interface information.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "assignment_mode", assignment_mode)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "public", public)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        Device uplink address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="assignmentMode")
    def assignment_mode(self) -> str:
        """
        Indicates how the device uplink address is assigned. Available options are: static, dynamic.
        """
        return pulumi.get(self, "assignment_mode")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        Device uplink gateway address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Type of address for the device uplink. Available options are: ipv4, ipv6.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def public(self) -> 'outputs.GetDevicesUplinksAddressesByDeviceItemUplinkAddressPublicResult':
        """
        Public interface information.
        """
        return pulumi.get(self, "public")


@pulumi.output_type
class GetDevicesUplinksAddressesByDeviceItemUplinkAddressPublicResult(dict):
    def __init__(__self__, *,
                 address: str):
        """
        :param str address: The device uplink public IP address.
        """
        pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The device uplink public IP address.
        """
        return pulumi.get(self, "address")


@pulumi.output_type
class GetDevicesUplinksLossAndLatencyItemResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 network_id: str,
                 serial: str,
                 time_series: Sequence['outputs.GetDevicesUplinksLossAndLatencyItemTimeSeriesResult'],
                 uplink: str):
        """
        :param str ip: IP address of uplink
        :param str network_id: Network ID
        :param str serial: Serial of MX device
        :param Sequence['GetDevicesUplinksLossAndLatencyItemTimeSeriesArgs'] time_series: Loss and latency timeseries data
        :param str uplink: Uplink interface (wan1, wan2, or cellular)
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "time_series", time_series)
        pulumi.set(__self__, "uplink", uplink)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP address of uplink
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        Network ID
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Serial of MX device
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="timeSeries")
    def time_series(self) -> Sequence['outputs.GetDevicesUplinksLossAndLatencyItemTimeSeriesResult']:
        """
        Loss and latency timeseries data
        """
        return pulumi.get(self, "time_series")

    @property
    @pulumi.getter
    def uplink(self) -> str:
        """
        Uplink interface (wan1, wan2, or cellular)
        """
        return pulumi.get(self, "uplink")


@pulumi.output_type
class GetDevicesUplinksLossAndLatencyItemTimeSeriesResult(dict):
    def __init__(__self__, *,
                 latency_ms: float,
                 loss_percent: float,
                 ts: str):
        """
        :param float latency_ms: Latency in milliseconds
        :param float loss_percent: Loss percentage
        :param str ts: Timestamp for this data point
        """
        pulumi.set(__self__, "latency_ms", latency_ms)
        pulumi.set(__self__, "loss_percent", loss_percent)
        pulumi.set(__self__, "ts", ts)

    @property
    @pulumi.getter(name="latencyMs")
    def latency_ms(self) -> float:
        """
        Latency in milliseconds
        """
        return pulumi.get(self, "latency_ms")

    @property
    @pulumi.getter(name="lossPercent")
    def loss_percent(self) -> float:
        """
        Loss percentage
        """
        return pulumi.get(self, "loss_percent")

    @property
    @pulumi.getter
    def ts(self) -> str:
        """
        Timestamp for this data point
        """
        return pulumi.get(self, "ts")


@pulumi.output_type
class GetEarlyAccessFeaturesItemResult(dict):
    def __init__(__self__, *,
                 descriptions: 'outputs.GetEarlyAccessFeaturesItemDescriptionsResult',
                 documentation_link: str,
                 is_org_scoped_only: bool,
                 name: str,
                 short_name: str,
                 support_link: str,
                 topic: str):
        """
        :param 'GetEarlyAccessFeaturesItemDescriptionsArgs' descriptions: Descriptions of the early access feature
        :param str documentation_link: Link to the documentation of this early access feature
        :param bool is_org_scoped_only: If this early access feature can only be opted in for the entire organization
        :param str name: Name of the early access feature
        :param str short_name: Short name of the early access feature
        :param str support_link: Link to get support for this early access feature
        :param str topic: Topic of the early access feature
        """
        pulumi.set(__self__, "descriptions", descriptions)
        pulumi.set(__self__, "documentation_link", documentation_link)
        pulumi.set(__self__, "is_org_scoped_only", is_org_scoped_only)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "short_name", short_name)
        pulumi.set(__self__, "support_link", support_link)
        pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter
    def descriptions(self) -> 'outputs.GetEarlyAccessFeaturesItemDescriptionsResult':
        """
        Descriptions of the early access feature
        """
        return pulumi.get(self, "descriptions")

    @property
    @pulumi.getter(name="documentationLink")
    def documentation_link(self) -> str:
        """
        Link to the documentation of this early access feature
        """
        return pulumi.get(self, "documentation_link")

    @property
    @pulumi.getter(name="isOrgScopedOnly")
    def is_org_scoped_only(self) -> bool:
        """
        If this early access feature can only be opted in for the entire organization
        """
        return pulumi.get(self, "is_org_scoped_only")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the early access feature
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shortName")
    def short_name(self) -> str:
        """
        Short name of the early access feature
        """
        return pulumi.get(self, "short_name")

    @property
    @pulumi.getter(name="supportLink")
    def support_link(self) -> str:
        """
        Link to get support for this early access feature
        """
        return pulumi.get(self, "support_link")

    @property
    @pulumi.getter
    def topic(self) -> str:
        """
        Topic of the early access feature
        """
        return pulumi.get(self, "topic")


@pulumi.output_type
class GetEarlyAccessFeaturesItemDescriptionsResult(dict):
    def __init__(__self__, *,
                 long: str,
                 short: str):
        """
        :param str long: Long description
        :param str short: Short description
        """
        pulumi.set(__self__, "long", long)
        pulumi.set(__self__, "short", short)

    @property
    @pulumi.getter
    def long(self) -> str:
        """
        Long description
        """
        return pulumi.get(self, "long")

    @property
    @pulumi.getter
    def short(self) -> str:
        """
        Short description
        """
        return pulumi.get(self, "short")


@pulumi.output_type
class GetEarlyAccessFeaturesOptInsItemResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 id: str,
                 limit_scope_to_networks: Sequence['outputs.GetEarlyAccessFeaturesOptInsItemLimitScopeToNetworkResult'],
                 short_name: str):
        """
        :param str created_at: Time when Early Access Feature was created
        :param str id: ID of Early Access Feature
        :param Sequence['GetEarlyAccessFeaturesOptInsItemLimitScopeToNetworkArgs'] limit_scope_to_networks: Networks assigned to the Early Access Feature
        :param str short_name: Name of Early Access Feature
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "limit_scope_to_networks", limit_scope_to_networks)
        pulumi.set(__self__, "short_name", short_name)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Time when Early Access Feature was created
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of Early Access Feature
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="limitScopeToNetworks")
    def limit_scope_to_networks(self) -> Sequence['outputs.GetEarlyAccessFeaturesOptInsItemLimitScopeToNetworkResult']:
        """
        Networks assigned to the Early Access Feature
        """
        return pulumi.get(self, "limit_scope_to_networks")

    @property
    @pulumi.getter(name="shortName")
    def short_name(self) -> str:
        """
        Name of Early Access Feature
        """
        return pulumi.get(self, "short_name")


@pulumi.output_type
class GetEarlyAccessFeaturesOptInsItemLimitScopeToNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: ID of Network
        :param str name: Name of Network
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of Network
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of Network
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirmwareUpgradesByDeviceItemResult(dict):
    def __init__(__self__, *,
                 device_status: str,
                 name: str,
                 serial: str,
                 upgrade: 'outputs.GetFirmwareUpgradesByDeviceItemUpgradeResult'):
        """
        :param str device_status: Status of the device upgrade
        :param str name: Name assigned to the device
        :param str serial: Serial of the device
        :param 'GetFirmwareUpgradesByDeviceItemUpgradeArgs' upgrade: The devices upgrade details and status
        """
        pulumi.set(__self__, "device_status", device_status)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "upgrade", upgrade)

    @property
    @pulumi.getter(name="deviceStatus")
    def device_status(self) -> str:
        """
        Status of the device upgrade
        """
        return pulumi.get(self, "device_status")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name assigned to the device
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Serial of the device
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def upgrade(self) -> 'outputs.GetFirmwareUpgradesByDeviceItemUpgradeResult':
        """
        The devices upgrade details and status
        """
        return pulumi.get(self, "upgrade")


@pulumi.output_type
class GetFirmwareUpgradesByDeviceItemUpgradeResult(dict):
    def __init__(__self__, *,
                 from_version: 'outputs.GetFirmwareUpgradesByDeviceItemUpgradeFromVersionResult',
                 id: str,
                 staged: 'outputs.GetFirmwareUpgradesByDeviceItemUpgradeStagedResult',
                 status: str,
                 time: str,
                 to_version: 'outputs.GetFirmwareUpgradesByDeviceItemUpgradeToVersionResult',
                 upgrade_batch_id: str):
        """
        :param 'GetFirmwareUpgradesByDeviceItemUpgradeFromVersionArgs' from_version: The initial version of the device
        :param str id: ID of the upgrade
        :param 'GetFirmwareUpgradesByDeviceItemUpgradeStagedArgs' staged: Staged upgrade
        :param str status: Status of the upgrade
        :param str time: Start time of the upgrade
        :param 'GetFirmwareUpgradesByDeviceItemUpgradeToVersionArgs' to_version: Version the device is upgrading to
        :param str upgrade_batch_id: ID of the upgrade batch
        """
        pulumi.set(__self__, "from_version", from_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "staged", staged)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "to_version", to_version)
        pulumi.set(__self__, "upgrade_batch_id", upgrade_batch_id)

    @property
    @pulumi.getter(name="fromVersion")
    def from_version(self) -> 'outputs.GetFirmwareUpgradesByDeviceItemUpgradeFromVersionResult':
        """
        The initial version of the device
        """
        return pulumi.get(self, "from_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the upgrade
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def staged(self) -> 'outputs.GetFirmwareUpgradesByDeviceItemUpgradeStagedResult':
        """
        Staged upgrade
        """
        return pulumi.get(self, "staged")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the upgrade
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        Start time of the upgrade
        """
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="toVersion")
    def to_version(self) -> 'outputs.GetFirmwareUpgradesByDeviceItemUpgradeToVersionResult':
        """
        Version the device is upgrading to
        """
        return pulumi.get(self, "to_version")

    @property
    @pulumi.getter(name="upgradeBatchId")
    def upgrade_batch_id(self) -> str:
        """
        ID of the upgrade batch
        """
        return pulumi.get(self, "upgrade_batch_id")


@pulumi.output_type
class GetFirmwareUpgradesByDeviceItemUpgradeFromVersionResult(dict):
    def __init__(__self__, *,
                 id: str,
                 release_date: str,
                 release_type: str,
                 short_name: str):
        """
        :param str id: ID of the initial firmware version
        :param str release_date: Release date of the firmware version
        :param str release_type: Release type of the firmware version
        :param str short_name: Firmware version short name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "release_date", release_date)
        pulumi.set(__self__, "release_type", release_type)
        pulumi.set(__self__, "short_name", short_name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the initial firmware version
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="releaseDate")
    def release_date(self) -> str:
        """
        Release date of the firmware version
        """
        return pulumi.get(self, "release_date")

    @property
    @pulumi.getter(name="releaseType")
    def release_type(self) -> str:
        """
        Release type of the firmware version
        """
        return pulumi.get(self, "release_type")

    @property
    @pulumi.getter(name="shortName")
    def short_name(self) -> str:
        """
        Firmware version short name
        """
        return pulumi.get(self, "short_name")


@pulumi.output_type
class GetFirmwareUpgradesByDeviceItemUpgradeStagedResult(dict):
    def __init__(__self__, *,
                 group: 'outputs.GetFirmwareUpgradesByDeviceItemUpgradeStagedGroupResult'):
        """
        :param 'GetFirmwareUpgradesByDeviceItemUpgradeStagedGroupArgs' group: The staged upgrade group
        """
        pulumi.set(__self__, "group", group)

    @property
    @pulumi.getter
    def group(self) -> 'outputs.GetFirmwareUpgradesByDeviceItemUpgradeStagedGroupResult':
        """
        The staged upgrade group
        """
        return pulumi.get(self, "group")


@pulumi.output_type
class GetFirmwareUpgradesByDeviceItemUpgradeStagedGroupResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: Id of the staged upgrade group
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of the staged upgrade group
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetFirmwareUpgradesByDeviceItemUpgradeToVersionResult(dict):
    def __init__(__self__, *,
                 id: str,
                 release_date: str,
                 release_type: str,
                 short_name: str):
        """
        :param str id: ID of the initial firmware version
        :param str release_date: Release date of the firmware version
        :param str release_type: Release type of the firmware version
        :param str short_name: Firmware version short name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "release_date", release_date)
        pulumi.set(__self__, "release_type", release_type)
        pulumi.set(__self__, "short_name", short_name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the initial firmware version
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="releaseDate")
    def release_date(self) -> str:
        """
        Release date of the firmware version
        """
        return pulumi.get(self, "release_date")

    @property
    @pulumi.getter(name="releaseType")
    def release_type(self) -> str:
        """
        Release type of the firmware version
        """
        return pulumi.get(self, "release_type")

    @property
    @pulumi.getter(name="shortName")
    def short_name(self) -> str:
        """
        Firmware version short name
        """
        return pulumi.get(self, "short_name")


@pulumi.output_type
class GetFirmwareUpgradesItemResult(dict):
    def __init__(__self__, *,
                 completed_at: str,
                 from_version: 'outputs.GetFirmwareUpgradesItemFromVersionResult',
                 network: 'outputs.GetFirmwareUpgradesItemNetworkResult',
                 product_types: str,
                 status: str,
                 time: str,
                 to_version: 'outputs.GetFirmwareUpgradesItemToVersionResult',
                 upgrade_batch_id: str,
                 upgrade_id: str):
        """
        :param str completed_at: Timestamp when upgrade completed. Null if status pending.
        :param 'GetFirmwareUpgradesItemFromVersionArgs' from_version: ID of the upgrade's starting version
        :param 'GetFirmwareUpgradesItemNetworkArgs' network: Network of the upgrade
        :param str product_types: product upgraded [wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor]
        :param str status: Status of upgrade event: [Cancelled, Completed]
        :param str time: Scheduled start time
        :param 'GetFirmwareUpgradesItemToVersionArgs' to_version: ID of the upgrade's target version
        :param str upgrade_batch_id: The upgrade batch
        :param str upgrade_id: The upgrade
        """
        pulumi.set(__self__, "completed_at", completed_at)
        pulumi.set(__self__, "from_version", from_version)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "product_types", product_types)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "to_version", to_version)
        pulumi.set(__self__, "upgrade_batch_id", upgrade_batch_id)
        pulumi.set(__self__, "upgrade_id", upgrade_id)

    @property
    @pulumi.getter(name="completedAt")
    def completed_at(self) -> str:
        """
        Timestamp when upgrade completed. Null if status pending.
        """
        return pulumi.get(self, "completed_at")

    @property
    @pulumi.getter(name="fromVersion")
    def from_version(self) -> 'outputs.GetFirmwareUpgradesItemFromVersionResult':
        """
        ID of the upgrade's starting version
        """
        return pulumi.get(self, "from_version")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetFirmwareUpgradesItemNetworkResult':
        """
        Network of the upgrade
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="productTypes")
    def product_types(self) -> str:
        """
        product upgraded [wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor]
        """
        return pulumi.get(self, "product_types")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of upgrade event: [Cancelled, Completed]
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        Scheduled start time
        """
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="toVersion")
    def to_version(self) -> 'outputs.GetFirmwareUpgradesItemToVersionResult':
        """
        ID of the upgrade's target version
        """
        return pulumi.get(self, "to_version")

    @property
    @pulumi.getter(name="upgradeBatchId")
    def upgrade_batch_id(self) -> str:
        """
        The upgrade batch
        """
        return pulumi.get(self, "upgrade_batch_id")

    @property
    @pulumi.getter(name="upgradeId")
    def upgrade_id(self) -> str:
        """
        The upgrade
        """
        return pulumi.get(self, "upgrade_id")


@pulumi.output_type
class GetFirmwareUpgradesItemFromVersionResult(dict):
    def __init__(__self__, *,
                 firmware: str,
                 id: str,
                 release_date: str,
                 release_type: str,
                 short_name: str):
        """
        :param str firmware: Firmware name
        :param str id: Firmware version ID
        :param str release_date: Release date of the firmware version
        :param str release_type: Release type of the firmware version
        :param str short_name: Firmware version short name
        """
        pulumi.set(__self__, "firmware", firmware)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "release_date", release_date)
        pulumi.set(__self__, "release_type", release_type)
        pulumi.set(__self__, "short_name", short_name)

    @property
    @pulumi.getter
    def firmware(self) -> str:
        """
        Firmware name
        """
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Firmware version ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="releaseDate")
    def release_date(self) -> str:
        """
        Release date of the firmware version
        """
        return pulumi.get(self, "release_date")

    @property
    @pulumi.getter(name="releaseType")
    def release_type(self) -> str:
        """
        Release type of the firmware version
        """
        return pulumi.get(self, "release_type")

    @property
    @pulumi.getter(name="shortName")
    def short_name(self) -> str:
        """
        Firmware version short name
        """
        return pulumi.get(self, "short_name")


@pulumi.output_type
class GetFirmwareUpgradesItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: ID of network
        :param str name: The network
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of network
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The network
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirmwareUpgradesItemToVersionResult(dict):
    def __init__(__self__, *,
                 firmware: str,
                 id: str,
                 release_date: str,
                 release_type: str,
                 short_name: str):
        """
        :param str firmware: Firmware name
        :param str id: Firmware version ID
        :param str release_date: Release date of the firmware version
        :param str release_type: Release type of the firmware version
        :param str short_name: Firmware version short name
        """
        pulumi.set(__self__, "firmware", firmware)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "release_date", release_date)
        pulumi.set(__self__, "release_type", release_type)
        pulumi.set(__self__, "short_name", short_name)

    @property
    @pulumi.getter
    def firmware(self) -> str:
        """
        Firmware name
        """
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Firmware version ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="releaseDate")
    def release_date(self) -> str:
        """
        Release date of the firmware version
        """
        return pulumi.get(self, "release_date")

    @property
    @pulumi.getter(name="releaseType")
    def release_type(self) -> str:
        """
        Release type of the firmware version
        """
        return pulumi.get(self, "release_type")

    @property
    @pulumi.getter(name="shortName")
    def short_name(self) -> str:
        """
        Firmware version short name
        """
        return pulumi.get(self, "short_name")


@pulumi.output_type
class GetInsightApplicationsItemResult(dict):
    def __init__(__self__, *,
                 application_id: str,
                 name: str,
                 thresholds: 'outputs.GetInsightApplicationsItemThresholdsResult'):
        """
        :param str application_id: Application identifier
        :param str name: Application name
        :param 'GetInsightApplicationsItemThresholdsArgs' thresholds: Thresholds defined by a user or Meraki models for each application
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        """
        Application identifier
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Application name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def thresholds(self) -> 'outputs.GetInsightApplicationsItemThresholdsResult':
        """
        Thresholds defined by a user or Meraki models for each application
        """
        return pulumi.get(self, "thresholds")


@pulumi.output_type
class GetInsightApplicationsItemThresholdsResult(dict):
    def __init__(__self__, *,
                 by_networks: Sequence['outputs.GetInsightApplicationsItemThresholdsByNetworkResult'],
                 type: str):
        """
        :param Sequence['GetInsightApplicationsItemThresholdsByNetworkArgs'] by_networks: Threshold for each network
        :param str type: Threshold type (static or smart)
        """
        pulumi.set(__self__, "by_networks", by_networks)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="byNetworks")
    def by_networks(self) -> Sequence['outputs.GetInsightApplicationsItemThresholdsByNetworkResult']:
        """
        Threshold for each network
        """
        return pulumi.get(self, "by_networks")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Threshold type (static or smart)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInsightApplicationsItemThresholdsByNetworkResult(dict):
    def __init__(__self__, *,
                 goodput: int,
                 network_id: str,
                 response_duration: int):
        """
        :param int goodput: Number of useful information bits delivered over a network per unit of time
        :param str network_id: Network identifier
        :param int response_duration: Duration of the response, in milliseconds
        """
        pulumi.set(__self__, "goodput", goodput)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "response_duration", response_duration)

    @property
    @pulumi.getter
    def goodput(self) -> int:
        """
        Number of useful information bits delivered over a network per unit of time
        """
        return pulumi.get(self, "goodput")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        Network identifier
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="responseDuration")
    def response_duration(self) -> int:
        """
        Duration of the response, in milliseconds
        """
        return pulumi.get(self, "response_duration")


@pulumi.output_type
class GetInsightMonitoredMediaServersItemResult(dict):
    def __init__(__self__, *,
                 address: str,
                 best_effort_monitoring_enabled: bool,
                 id: str,
                 name: str):
        """
        :param str address: The IP address (IPv4 only) or hostname of the media server to monitor
        :param bool best_effort_monitoring_enabled: Indicates that if the media server doesn't respond to ICMP pings, the nearest hop will be used in its stead
        :param str id: Monitored media server id
        :param str name: The name of the VoIP provider
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "best_effort_monitoring_enabled", best_effort_monitoring_enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The IP address (IPv4 only) or hostname of the media server to monitor
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="bestEffortMonitoringEnabled")
    def best_effort_monitoring_enabled(self) -> bool:
        """
        Indicates that if the media server doesn't respond to ICMP pings, the nearest hop will be used in its stead
        """
        return pulumi.get(self, "best_effort_monitoring_enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Monitored media server id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the VoIP provider
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInventoryDevicesItemResult(dict):
    def __init__(__self__, *,
                 claimed_at: str,
                 country_code: str,
                 details: Sequence['outputs.GetInventoryDevicesItemDetailResult'],
                 license_expiration_date: str,
                 mac: str,
                 model: str,
                 name: str,
                 network_id: str,
                 order_number: str,
                 product_type: str,
                 serial: str,
                 tags: Sequence[str]):
        """
        :param str claimed_at: Claimed time of the device
        :param str country_code: Country/region code from device, network, or store order
        :param Sequence['GetInventoryDevicesItemDetailArgs'] details: Additional device information
        :param str license_expiration_date: License expiration date of the device
        :param str mac: MAC address of the device
        :param str model: Model type of the device
        :param str name: Name of the device
        :param str network_id: Network Id of the device
        :param str order_number: Order number of the device
        :param str product_type: Product type of the device
        :param str serial: Serial number of the device
        :param Sequence[str] tags: Device tags
        """
        pulumi.set(__self__, "claimed_at", claimed_at)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "license_expiration_date", license_expiration_date)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "order_number", order_number)
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="claimedAt")
    def claimed_at(self) -> str:
        """
        Claimed time of the device
        """
        return pulumi.get(self, "claimed_at")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        Country/region code from device, network, or store order
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetInventoryDevicesItemDetailResult']:
        """
        Additional device information
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="licenseExpirationDate")
    def license_expiration_date(self) -> str:
        """
        License expiration date of the device
        """
        return pulumi.get(self, "license_expiration_date")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        MAC address of the device
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model type of the device
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the device
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        Network Id of the device
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> str:
        """
        Order number of the device
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        Product type of the device
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Serial number of the device
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        Device tags
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetInventoryDevicesItemDetailResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Additional property name
        :param str value: Additional property value
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Additional property name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Additional property value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInventoryOnboardingCloudMonitoringImportsItemResult(dict):
    def __init__(__self__, *,
                 device: 'outputs.GetInventoryOnboardingCloudMonitoringImportsItemDeviceResult',
                 import_id: str):
        """
        :param 'GetInventoryOnboardingCloudMonitoringImportsItemDeviceArgs' device: Represents the details of an imported device.
        :param str import_id: Database ID for the new entity entry.
        """
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "import_id", import_id)

    @property
    @pulumi.getter
    def device(self) -> 'outputs.GetInventoryOnboardingCloudMonitoringImportsItemDeviceResult':
        """
        Represents the details of an imported device.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="importId")
    def import_id(self) -> str:
        """
        Database ID for the new entity entry.
        """
        return pulumi.get(self, "import_id")


@pulumi.output_type
class GetInventoryOnboardingCloudMonitoringImportsItemDeviceResult(dict):
    def __init__(__self__, *,
                 created: bool,
                 status: str,
                 url: str):
        """
        :param bool created: Whether or not the device was successfully created in dashboard.
        :param str status: Represents the current state of importing the device.
        :param str url: The url to the device details page within dashboard.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def created(self) -> bool:
        """
        Whether or not the device was successfully created in dashboard.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Represents the current state of importing the device.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The url to the device details page within dashboard.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetInventoryOnboardingCloudMonitoringNetworksItemResult(dict):
    def __init__(__self__, *,
                 enrollment_string: str,
                 id: str,
                 is_bound_to_config_template: bool,
                 name: str,
                 notes: str,
                 organization_id: str,
                 product_types: Sequence[str],
                 tags: Sequence[str],
                 time_zone: str,
                 url: str):
        """
        :param str enrollment_string: Enrollment string for the network
        :param str id: Network ID
        :param bool is_bound_to_config_template: If the network is bound to a config template
        :param str name: Network name
        :param str notes: Notes for the network
        :param str organization_id: Organization ID
        :param Sequence[str] product_types: List of the product types that the network supports
        :param Sequence[str] tags: Network tags
        :param str time_zone: Timezone of the network
        :param str url: URL to the network Dashboard UI
        """
        pulumi.set(__self__, "enrollment_string", enrollment_string)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_bound_to_config_template", is_bound_to_config_template)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "product_types", product_types)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="enrollmentString")
    def enrollment_string(self) -> str:
        """
        Enrollment string for the network
        """
        return pulumi.get(self, "enrollment_string")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Network ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBoundToConfigTemplate")
    def is_bound_to_config_template(self) -> bool:
        """
        If the network is bound to a config template
        """
        return pulumi.get(self, "is_bound_to_config_template")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Network name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notes(self) -> str:
        """
        Notes for the network
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        Organization ID
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="productTypes")
    def product_types(self) -> Sequence[str]:
        """
        List of the product types that the network supports
        """
        return pulumi.get(self, "product_types")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        Network tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        Timezone of the network
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL to the network Dashboard UI
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetLicensesItemResult(dict):
    def __init__(__self__, *,
                 activation_date: str,
                 claim_date: str,
                 device_serial: str,
                 duration_in_days: int,
                 expiration_date: str,
                 head_license_id: str,
                 id: str,
                 license_key: str,
                 license_type: str,
                 network_id: str,
                 order_number: str,
                 permanently_queued_licenses: Sequence['outputs.GetLicensesItemPermanentlyQueuedLicenseResult'],
                 seat_count: int,
                 state: str,
                 total_duration_in_days: int):
        """
        :param str activation_date: The date the license started burning
        :param str claim_date: The date the license was claimed into the organization
        :param str device_serial: Serial number of the device the license is assigned to
        :param int duration_in_days: The duration of the individual license
        :param str expiration_date: The date the license will expire
        :param str head_license_id: The id of the head license this license is queued behind. If there is no head license, it returns nil.
        :param str id: License ID
        :param str license_key: License key
        :param str license_type: License type
        :param str network_id: ID of the network the license is assigned to
        :param str order_number: Order number
        :param Sequence['GetLicensesItemPermanentlyQueuedLicenseArgs'] permanently_queued_licenses: DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
        :param int seat_count: The number of seats of the license. Only applicable to SM licenses.
        :param str state: The state of the license. All queued licenses have a status of *recentlyQueued*.
        :param int total_duration_in_days: The duration of the license plus all permanently queued licenses associated with it
        """
        pulumi.set(__self__, "activation_date", activation_date)
        pulumi.set(__self__, "claim_date", claim_date)
        pulumi.set(__self__, "device_serial", device_serial)
        pulumi.set(__self__, "duration_in_days", duration_in_days)
        pulumi.set(__self__, "expiration_date", expiration_date)
        pulumi.set(__self__, "head_license_id", head_license_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "license_key", license_key)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "order_number", order_number)
        pulumi.set(__self__, "permanently_queued_licenses", permanently_queued_licenses)
        pulumi.set(__self__, "seat_count", seat_count)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "total_duration_in_days", total_duration_in_days)

    @property
    @pulumi.getter(name="activationDate")
    def activation_date(self) -> str:
        """
        The date the license started burning
        """
        return pulumi.get(self, "activation_date")

    @property
    @pulumi.getter(name="claimDate")
    def claim_date(self) -> str:
        """
        The date the license was claimed into the organization
        """
        return pulumi.get(self, "claim_date")

    @property
    @pulumi.getter(name="deviceSerial")
    def device_serial(self) -> str:
        """
        Serial number of the device the license is assigned to
        """
        return pulumi.get(self, "device_serial")

    @property
    @pulumi.getter(name="durationInDays")
    def duration_in_days(self) -> int:
        """
        The duration of the individual license
        """
        return pulumi.get(self, "duration_in_days")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> str:
        """
        The date the license will expire
        """
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter(name="headLicenseId")
    def head_license_id(self) -> str:
        """
        The id of the head license this license is queued behind. If there is no head license, it returns nil.
        """
        return pulumi.get(self, "head_license_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        License ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> str:
        """
        License key
        """
        return pulumi.get(self, "license_key")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        License type
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        ID of the network the license is assigned to
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> str:
        """
        Order number
        """
        return pulumi.get(self, "order_number")

    @property
    @pulumi.getter(name="permanentlyQueuedLicenses")
    def permanently_queued_licenses(self) -> Sequence['outputs.GetLicensesItemPermanentlyQueuedLicenseResult']:
        """
        DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
        """
        return pulumi.get(self, "permanently_queued_licenses")

    @property
    @pulumi.getter(name="seatCount")
    def seat_count(self) -> int:
        """
        The number of seats of the license. Only applicable to SM licenses.
        """
        return pulumi.get(self, "seat_count")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the license. All queued licenses have a status of *recentlyQueued*.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="totalDurationInDays")
    def total_duration_in_days(self) -> int:
        """
        The duration of the license plus all permanently queued licenses associated with it
        """
        return pulumi.get(self, "total_duration_in_days")


@pulumi.output_type
class GetLicensesItemPermanentlyQueuedLicenseResult(dict):
    def __init__(__self__, *,
                 duration_in_days: int,
                 id: str,
                 license_key: str,
                 license_type: str,
                 order_number: str):
        """
        :param int duration_in_days: The duration of the individual license
        :param str id: Permanently queued license ID
        :param str license_key: License key
        :param str license_type: License type
        :param str order_number: Order number
        """
        pulumi.set(__self__, "duration_in_days", duration_in_days)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "license_key", license_key)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "order_number", order_number)

    @property
    @pulumi.getter(name="durationInDays")
    def duration_in_days(self) -> int:
        """
        The duration of the individual license
        """
        return pulumi.get(self, "duration_in_days")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Permanently queued license ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="licenseKey")
    def license_key(self) -> str:
        """
        License key
        """
        return pulumi.get(self, "license_key")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        License type
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="orderNumber")
    def order_number(self) -> str:
        """
        Order number
        """
        return pulumi.get(self, "order_number")


@pulumi.output_type
class GetLicensesOverviewItemResult(dict):
    def __init__(__self__, *,
                 expiration_date: str,
                 license_count: int,
                 license_types: Sequence['outputs.GetLicensesOverviewItemLicenseTypeResult'],
                 licensed_device_counts: str,
                 states: 'outputs.GetLicensesOverviewItemStatesResult',
                 status: str,
                 systems_manager: 'outputs.GetLicensesOverviewItemSystemsManagerResult'):
        """
        :param str expiration_date: License expiration date (Co-termination licensing only)
        :param int license_count: Total number of licenses (Per-device licensing only)
        :param Sequence['GetLicensesOverviewItemLicenseTypeArgs'] license_types: Data by license type (Per-device licensing only)
        :param str licensed_device_counts: License counts (Co-termination licensing only)
        :param 'GetLicensesOverviewItemStatesArgs' states: Aggregated data for licenses by state (Per-device licensing only)
        :param str status: License status (Co-termination licensing only)
        :param 'GetLicensesOverviewItemSystemsManagerArgs' systems_manager: Aggregated data for Systems Manager licenses (Per-device licensing only)
        """
        pulumi.set(__self__, "expiration_date", expiration_date)
        pulumi.set(__self__, "license_count", license_count)
        pulumi.set(__self__, "license_types", license_types)
        pulumi.set(__self__, "licensed_device_counts", licensed_device_counts)
        pulumi.set(__self__, "states", states)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "systems_manager", systems_manager)

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> str:
        """
        License expiration date (Co-termination licensing only)
        """
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter(name="licenseCount")
    def license_count(self) -> int:
        """
        Total number of licenses (Per-device licensing only)
        """
        return pulumi.get(self, "license_count")

    @property
    @pulumi.getter(name="licenseTypes")
    def license_types(self) -> Sequence['outputs.GetLicensesOverviewItemLicenseTypeResult']:
        """
        Data by license type (Per-device licensing only)
        """
        return pulumi.get(self, "license_types")

    @property
    @pulumi.getter(name="licensedDeviceCounts")
    def licensed_device_counts(self) -> str:
        """
        License counts (Co-termination licensing only)
        """
        return pulumi.get(self, "licensed_device_counts")

    @property
    @pulumi.getter
    def states(self) -> 'outputs.GetLicensesOverviewItemStatesResult':
        """
        Aggregated data for licenses by state (Per-device licensing only)
        """
        return pulumi.get(self, "states")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        License status (Co-termination licensing only)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemsManager")
    def systems_manager(self) -> 'outputs.GetLicensesOverviewItemSystemsManagerResult':
        """
        Aggregated data for Systems Manager licenses (Per-device licensing only)
        """
        return pulumi.get(self, "systems_manager")


@pulumi.output_type
class GetLicensesOverviewItemLicenseTypeResult(dict):
    def __init__(__self__, *,
                 counts: 'outputs.GetLicensesOverviewItemLicenseTypeCountsResult',
                 license_type: str):
        """
        :param 'GetLicensesOverviewItemLicenseTypeCountsArgs' counts: Aggregated count data for the license type
        :param str license_type: License type
        """
        pulumi.set(__self__, "counts", counts)
        pulumi.set(__self__, "license_type", license_type)

    @property
    @pulumi.getter
    def counts(self) -> 'outputs.GetLicensesOverviewItemLicenseTypeCountsResult':
        """
        Aggregated count data for the license type
        """
        return pulumi.get(self, "counts")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        License type
        """
        return pulumi.get(self, "license_type")


@pulumi.output_type
class GetLicensesOverviewItemLicenseTypeCountsResult(dict):
    def __init__(__self__, *,
                 unassigned: int):
        """
        :param int unassigned: The number of unassigned licenses
        """
        pulumi.set(__self__, "unassigned", unassigned)

    @property
    @pulumi.getter
    def unassigned(self) -> int:
        """
        The number of unassigned licenses
        """
        return pulumi.get(self, "unassigned")


@pulumi.output_type
class GetLicensesOverviewItemStatesResult(dict):
    def __init__(__self__, *,
                 active: 'outputs.GetLicensesOverviewItemStatesActiveResult',
                 expired: 'outputs.GetLicensesOverviewItemStatesExpiredResult',
                 expiring: 'outputs.GetLicensesOverviewItemStatesExpiringResult',
                 recently_queued: 'outputs.GetLicensesOverviewItemStatesRecentlyQueuedResult',
                 unused: 'outputs.GetLicensesOverviewItemStatesUnusedResult',
                 unused_active: 'outputs.GetLicensesOverviewItemStatesUnusedActiveResult'):
        """
        :param 'GetLicensesOverviewItemStatesActiveArgs' active: Data for active licenses
        :param 'GetLicensesOverviewItemStatesExpiredArgs' expired: Data for expired licenses
        :param 'GetLicensesOverviewItemStatesExpiringArgs' expiring: Data for expiring licenses
        :param 'GetLicensesOverviewItemStatesRecentlyQueuedArgs' recently_queued: Data for recently queued licenses
        :param 'GetLicensesOverviewItemStatesUnusedArgs' unused: Data for unused licenses
        :param 'GetLicensesOverviewItemStatesUnusedActiveArgs' unused_active: Data for unused, active licenses
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "expired", expired)
        pulumi.set(__self__, "expiring", expiring)
        pulumi.set(__self__, "recently_queued", recently_queued)
        pulumi.set(__self__, "unused", unused)
        pulumi.set(__self__, "unused_active", unused_active)

    @property
    @pulumi.getter
    def active(self) -> 'outputs.GetLicensesOverviewItemStatesActiveResult':
        """
        Data for active licenses
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def expired(self) -> 'outputs.GetLicensesOverviewItemStatesExpiredResult':
        """
        Data for expired licenses
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter
    def expiring(self) -> 'outputs.GetLicensesOverviewItemStatesExpiringResult':
        """
        Data for expiring licenses
        """
        return pulumi.get(self, "expiring")

    @property
    @pulumi.getter(name="recentlyQueued")
    def recently_queued(self) -> 'outputs.GetLicensesOverviewItemStatesRecentlyQueuedResult':
        """
        Data for recently queued licenses
        """
        return pulumi.get(self, "recently_queued")

    @property
    @pulumi.getter
    def unused(self) -> 'outputs.GetLicensesOverviewItemStatesUnusedResult':
        """
        Data for unused licenses
        """
        return pulumi.get(self, "unused")

    @property
    @pulumi.getter(name="unusedActive")
    def unused_active(self) -> 'outputs.GetLicensesOverviewItemStatesUnusedActiveResult':
        """
        Data for unused, active licenses
        """
        return pulumi.get(self, "unused_active")


@pulumi.output_type
class GetLicensesOverviewItemStatesActiveResult(dict):
    def __init__(__self__, *,
                 count: int):
        """
        :param int count: The number of active licenses
        """
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of active licenses
        """
        return pulumi.get(self, "count")


@pulumi.output_type
class GetLicensesOverviewItemStatesExpiredResult(dict):
    def __init__(__self__, *,
                 count: int):
        """
        :param int count: The number of expired licenses
        """
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of expired licenses
        """
        return pulumi.get(self, "count")


@pulumi.output_type
class GetLicensesOverviewItemStatesExpiringResult(dict):
    def __init__(__self__, *,
                 count: int,
                 critical: 'outputs.GetLicensesOverviewItemStatesExpiringCriticalResult',
                 warning: 'outputs.GetLicensesOverviewItemStatesExpiringWarningResult'):
        """
        :param int count: The number of expiring licenses
        :param 'GetLicensesOverviewItemStatesExpiringCriticalArgs' critical: Data for the critical threshold
        :param 'GetLicensesOverviewItemStatesExpiringWarningArgs' warning: Data for the warning threshold
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "critical", critical)
        pulumi.set(__self__, "warning", warning)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of expiring licenses
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def critical(self) -> 'outputs.GetLicensesOverviewItemStatesExpiringCriticalResult':
        """
        Data for the critical threshold
        """
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def warning(self) -> 'outputs.GetLicensesOverviewItemStatesExpiringWarningResult':
        """
        Data for the warning threshold
        """
        return pulumi.get(self, "warning")


@pulumi.output_type
class GetLicensesOverviewItemStatesExpiringCriticalResult(dict):
    def __init__(__self__, *,
                 expiring_count: int,
                 threshold_in_days: int):
        """
        :param int expiring_count: The number of licenses that will expire in this window
        :param int threshold_in_days: The number of days from now denoting the critical threshold for an expiring license
        """
        pulumi.set(__self__, "expiring_count", expiring_count)
        pulumi.set(__self__, "threshold_in_days", threshold_in_days)

    @property
    @pulumi.getter(name="expiringCount")
    def expiring_count(self) -> int:
        """
        The number of licenses that will expire in this window
        """
        return pulumi.get(self, "expiring_count")

    @property
    @pulumi.getter(name="thresholdInDays")
    def threshold_in_days(self) -> int:
        """
        The number of days from now denoting the critical threshold for an expiring license
        """
        return pulumi.get(self, "threshold_in_days")


@pulumi.output_type
class GetLicensesOverviewItemStatesExpiringWarningResult(dict):
    def __init__(__self__, *,
                 expiring_count: int,
                 threshold_in_days: int):
        """
        :param int expiring_count: The number of licenses that will expire in this window
        :param int threshold_in_days: The number of days from now denoting the warning threshold for an expiring license
        """
        pulumi.set(__self__, "expiring_count", expiring_count)
        pulumi.set(__self__, "threshold_in_days", threshold_in_days)

    @property
    @pulumi.getter(name="expiringCount")
    def expiring_count(self) -> int:
        """
        The number of licenses that will expire in this window
        """
        return pulumi.get(self, "expiring_count")

    @property
    @pulumi.getter(name="thresholdInDays")
    def threshold_in_days(self) -> int:
        """
        The number of days from now denoting the warning threshold for an expiring license
        """
        return pulumi.get(self, "threshold_in_days")


@pulumi.output_type
class GetLicensesOverviewItemStatesRecentlyQueuedResult(dict):
    def __init__(__self__, *,
                 count: int):
        """
        :param int count: The number of recently queued licenses
        """
        pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of recently queued licenses
        """
        return pulumi.get(self, "count")


@pulumi.output_type
class GetLicensesOverviewItemStatesUnusedResult(dict):
    def __init__(__self__, *,
                 count: int,
                 soonest_activation: 'outputs.GetLicensesOverviewItemStatesUnusedSoonestActivationResult'):
        """
        :param int count: The number of unused licenses
        :param 'GetLicensesOverviewItemStatesUnusedSoonestActivationArgs' soonest_activation: Information about the soonest forthcoming license activation
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "soonest_activation", soonest_activation)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of unused licenses
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="soonestActivation")
    def soonest_activation(self) -> 'outputs.GetLicensesOverviewItemStatesUnusedSoonestActivationResult':
        """
        Information about the soonest forthcoming license activation
        """
        return pulumi.get(self, "soonest_activation")


@pulumi.output_type
class GetLicensesOverviewItemStatesUnusedActiveResult(dict):
    def __init__(__self__, *,
                 count: int,
                 oldest_activation: 'outputs.GetLicensesOverviewItemStatesUnusedActiveOldestActivationResult'):
        """
        :param int count: The number of unused, active licenses
        :param 'GetLicensesOverviewItemStatesUnusedActiveOldestActivationArgs' oldest_activation: Information about the oldest historical license activation
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "oldest_activation", oldest_activation)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of unused, active licenses
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="oldestActivation")
    def oldest_activation(self) -> 'outputs.GetLicensesOverviewItemStatesUnusedActiveOldestActivationResult':
        """
        Information about the oldest historical license activation
        """
        return pulumi.get(self, "oldest_activation")


@pulumi.output_type
class GetLicensesOverviewItemStatesUnusedActiveOldestActivationResult(dict):
    def __init__(__self__, *,
                 activation_date: str,
                 active_count: int):
        """
        :param str activation_date: The oldest license activation date
        :param int active_count: The number of licenses that activated on this date
        """
        pulumi.set(__self__, "activation_date", activation_date)
        pulumi.set(__self__, "active_count", active_count)

    @property
    @pulumi.getter(name="activationDate")
    def activation_date(self) -> str:
        """
        The oldest license activation date
        """
        return pulumi.get(self, "activation_date")

    @property
    @pulumi.getter(name="activeCount")
    def active_count(self) -> int:
        """
        The number of licenses that activated on this date
        """
        return pulumi.get(self, "active_count")


@pulumi.output_type
class GetLicensesOverviewItemStatesUnusedSoonestActivationResult(dict):
    def __init__(__self__, *,
                 activation_date: str,
                 to_activate_count: int):
        """
        :param str activation_date: The soonest license activation date
        :param int to_activate_count: The number of licenses that will activate on this date
        """
        pulumi.set(__self__, "activation_date", activation_date)
        pulumi.set(__self__, "to_activate_count", to_activate_count)

    @property
    @pulumi.getter(name="activationDate")
    def activation_date(self) -> str:
        """
        The soonest license activation date
        """
        return pulumi.get(self, "activation_date")

    @property
    @pulumi.getter(name="toActivateCount")
    def to_activate_count(self) -> int:
        """
        The number of licenses that will activate on this date
        """
        return pulumi.get(self, "to_activate_count")


@pulumi.output_type
class GetLicensesOverviewItemSystemsManagerResult(dict):
    def __init__(__self__, *,
                 counts: 'outputs.GetLicensesOverviewItemSystemsManagerCountsResult'):
        """
        :param 'GetLicensesOverviewItemSystemsManagerCountsArgs' counts: Aggregated license count data for Systems Manager
        """
        pulumi.set(__self__, "counts", counts)

    @property
    @pulumi.getter
    def counts(self) -> 'outputs.GetLicensesOverviewItemSystemsManagerCountsResult':
        """
        Aggregated license count data for Systems Manager
        """
        return pulumi.get(self, "counts")


@pulumi.output_type
class GetLicensesOverviewItemSystemsManagerCountsResult(dict):
    def __init__(__self__, *,
                 active_seats: int,
                 orgwide_enrolled_devices: int,
                 total_seats: int,
                 unassigned_seats: int):
        """
        :param int active_seats: The number of Systems Manager seats in use
        :param int orgwide_enrolled_devices: The total number of enrolled Systems Manager devices
        :param int total_seats: The total number of Systems Manager seats
        :param int unassigned_seats: The number of unused Systems Manager seats
        """
        pulumi.set(__self__, "active_seats", active_seats)
        pulumi.set(__self__, "orgwide_enrolled_devices", orgwide_enrolled_devices)
        pulumi.set(__self__, "total_seats", total_seats)
        pulumi.set(__self__, "unassigned_seats", unassigned_seats)

    @property
    @pulumi.getter(name="activeSeats")
    def active_seats(self) -> int:
        """
        The number of Systems Manager seats in use
        """
        return pulumi.get(self, "active_seats")

    @property
    @pulumi.getter(name="orgwideEnrolledDevices")
    def orgwide_enrolled_devices(self) -> int:
        """
        The total number of enrolled Systems Manager devices
        """
        return pulumi.get(self, "orgwide_enrolled_devices")

    @property
    @pulumi.getter(name="totalSeats")
    def total_seats(self) -> int:
        """
        The total number of Systems Manager seats
        """
        return pulumi.get(self, "total_seats")

    @property
    @pulumi.getter(name="unassignedSeats")
    def unassigned_seats(self) -> int:
        """
        The number of unused Systems Manager seats
        """
        return pulumi.get(self, "unassigned_seats")


@pulumi.output_type
class GetLicensingCotermLicensesItemResult(dict):
    def __init__(__self__, *,
                 claimed_at: str,
                 counts: Sequence['outputs.GetLicensingCotermLicensesItemCountResult'],
                 duration: int,
                 editions: Sequence['outputs.GetLicensingCotermLicensesItemEditionResult'],
                 expired: bool,
                 invalidated: bool,
                 invalidated_at: str,
                 key: str,
                 mode: str,
                 organization_id: str,
                 started_at: str):
        """
        :param str claimed_at: When the license was claimed into the organization
        :param Sequence['GetLicensingCotermLicensesItemCountArgs'] counts: The counts of the license by model type
        :param int duration: The duration (term length) of the license, measured in days
        :param Sequence['GetLicensingCotermLicensesItemEditionArgs'] editions: The editions of the license for each relevant product type
        :param bool expired: Flag to indicate if the license is expired
        :param bool invalidated: Flag to indicated that the license is invalidated
        :param str invalidated_at: When the license was invalidated. Will be null for active licenses
        :param str key: The key of the license
        :param str mode: The operation mode of the license when it was claimed
        :param str organization_id: The ID of the organization that the license is claimed in
        :param str started_at: When the license's term began (approximately the date when the license was created)
        """
        pulumi.set(__self__, "claimed_at", claimed_at)
        pulumi.set(__self__, "counts", counts)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "editions", editions)
        pulumi.set(__self__, "expired", expired)
        pulumi.set(__self__, "invalidated", invalidated)
        pulumi.set(__self__, "invalidated_at", invalidated_at)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="claimedAt")
    def claimed_at(self) -> str:
        """
        When the license was claimed into the organization
        """
        return pulumi.get(self, "claimed_at")

    @property
    @pulumi.getter
    def counts(self) -> Sequence['outputs.GetLicensingCotermLicensesItemCountResult']:
        """
        The counts of the license by model type
        """
        return pulumi.get(self, "counts")

    @property
    @pulumi.getter
    def duration(self) -> int:
        """
        The duration (term length) of the license, measured in days
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def editions(self) -> Sequence['outputs.GetLicensingCotermLicensesItemEditionResult']:
        """
        The editions of the license for each relevant product type
        """
        return pulumi.get(self, "editions")

    @property
    @pulumi.getter
    def expired(self) -> bool:
        """
        Flag to indicate if the license is expired
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter
    def invalidated(self) -> bool:
        """
        Flag to indicated that the license is invalidated
        """
        return pulumi.get(self, "invalidated")

    @property
    @pulumi.getter(name="invalidatedAt")
    def invalidated_at(self) -> str:
        """
        When the license was invalidated. Will be null for active licenses
        """
        return pulumi.get(self, "invalidated_at")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the license
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        The operation mode of the license when it was claimed
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        The ID of the organization that the license is claimed in
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> str:
        """
        When the license's term began (approximately the date when the license was created)
        """
        return pulumi.get(self, "started_at")


@pulumi.output_type
class GetLicensingCotermLicensesItemCountResult(dict):
    def __init__(__self__, *,
                 count: int,
                 model: str):
        """
        :param int count: The number of counts the license contains of this model
        :param str model: The license model type
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "model", model)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of counts the license contains of this model
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        The license model type
        """
        return pulumi.get(self, "model")


@pulumi.output_type
class GetLicensingCotermLicensesItemEditionResult(dict):
    def __init__(__self__, *,
                 edition: str,
                 product_type: str):
        """
        :param str edition: The name of the license edition
        :param str product_type: The product type of the license edition
        """
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "product_type", product_type)

    @property
    @pulumi.getter
    def edition(self) -> str:
        """
        The name of the license edition
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        The product type of the license edition
        """
        return pulumi.get(self, "product_type")


@pulumi.output_type
class GetLoginSecurityItemResult(dict):
    def __init__(__self__, *,
                 account_lockout_attempts: int,
                 api_authentication: 'outputs.GetLoginSecurityItemApiAuthenticationResult',
                 enforce_account_lockout: bool,
                 enforce_different_passwords: bool,
                 enforce_idle_timeout: bool,
                 enforce_login_ip_ranges: bool,
                 enforce_password_expiration: bool,
                 enforce_strong_passwords: bool,
                 enforce_two_factor_auth: bool,
                 idle_timeout_minutes: int,
                 login_ip_ranges: Sequence[str],
                 num_different_passwords: int,
                 password_expiration_days: int):
        """
        :param int account_lockout_attempts: Number of consecutive failed login attempts after which users' accounts will be locked.
        :param 'GetLoginSecurityItemApiAuthenticationArgs' api_authentication: Details for indicating whether organization will restrict access to API (but not Dashboard) to certain IP addresses.
        :param bool enforce_account_lockout: Boolean indicating whether users' Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
        :param bool enforce_different_passwords: Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
        :param bool enforce_idle_timeout: Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
        :param bool enforce_login_ip_ranges: Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
        :param bool enforce_password_expiration: Boolean indicating whether users are forced to change their password every X number of days.
        :param bool enforce_strong_passwords: Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
        :param bool enforce_two_factor_auth: Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
        :param int idle_timeout_minutes: Number of minutes users can remain idle before being logged out of their accounts.
        :param Sequence[str] login_ip_ranges: List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
        :param int num_different_passwords: Number of recent passwords that new password must be distinct from.
        :param int password_expiration_days: Number of days after which users will be forced to change their password.
        """
        pulumi.set(__self__, "account_lockout_attempts", account_lockout_attempts)
        pulumi.set(__self__, "api_authentication", api_authentication)
        pulumi.set(__self__, "enforce_account_lockout", enforce_account_lockout)
        pulumi.set(__self__, "enforce_different_passwords", enforce_different_passwords)
        pulumi.set(__self__, "enforce_idle_timeout", enforce_idle_timeout)
        pulumi.set(__self__, "enforce_login_ip_ranges", enforce_login_ip_ranges)
        pulumi.set(__self__, "enforce_password_expiration", enforce_password_expiration)
        pulumi.set(__self__, "enforce_strong_passwords", enforce_strong_passwords)
        pulumi.set(__self__, "enforce_two_factor_auth", enforce_two_factor_auth)
        pulumi.set(__self__, "idle_timeout_minutes", idle_timeout_minutes)
        pulumi.set(__self__, "login_ip_ranges", login_ip_ranges)
        pulumi.set(__self__, "num_different_passwords", num_different_passwords)
        pulumi.set(__self__, "password_expiration_days", password_expiration_days)

    @property
    @pulumi.getter(name="accountLockoutAttempts")
    def account_lockout_attempts(self) -> int:
        """
        Number of consecutive failed login attempts after which users' accounts will be locked.
        """
        return pulumi.get(self, "account_lockout_attempts")

    @property
    @pulumi.getter(name="apiAuthentication")
    def api_authentication(self) -> 'outputs.GetLoginSecurityItemApiAuthenticationResult':
        """
        Details for indicating whether organization will restrict access to API (but not Dashboard) to certain IP addresses.
        """
        return pulumi.get(self, "api_authentication")

    @property
    @pulumi.getter(name="enforceAccountLockout")
    def enforce_account_lockout(self) -> bool:
        """
        Boolean indicating whether users' Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
        """
        return pulumi.get(self, "enforce_account_lockout")

    @property
    @pulumi.getter(name="enforceDifferentPasswords")
    def enforce_different_passwords(self) -> bool:
        """
        Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
        """
        return pulumi.get(self, "enforce_different_passwords")

    @property
    @pulumi.getter(name="enforceIdleTimeout")
    def enforce_idle_timeout(self) -> bool:
        """
        Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
        """
        return pulumi.get(self, "enforce_idle_timeout")

    @property
    @pulumi.getter(name="enforceLoginIpRanges")
    def enforce_login_ip_ranges(self) -> bool:
        """
        Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
        """
        return pulumi.get(self, "enforce_login_ip_ranges")

    @property
    @pulumi.getter(name="enforcePasswordExpiration")
    def enforce_password_expiration(self) -> bool:
        """
        Boolean indicating whether users are forced to change their password every X number of days.
        """
        return pulumi.get(self, "enforce_password_expiration")

    @property
    @pulumi.getter(name="enforceStrongPasswords")
    def enforce_strong_passwords(self) -> bool:
        """
        Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
        """
        return pulumi.get(self, "enforce_strong_passwords")

    @property
    @pulumi.getter(name="enforceTwoFactorAuth")
    def enforce_two_factor_auth(self) -> bool:
        """
        Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
        """
        return pulumi.get(self, "enforce_two_factor_auth")

    @property
    @pulumi.getter(name="idleTimeoutMinutes")
    def idle_timeout_minutes(self) -> int:
        """
        Number of minutes users can remain idle before being logged out of their accounts.
        """
        return pulumi.get(self, "idle_timeout_minutes")

    @property
    @pulumi.getter(name="loginIpRanges")
    def login_ip_ranges(self) -> Sequence[str]:
        """
        List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
        """
        return pulumi.get(self, "login_ip_ranges")

    @property
    @pulumi.getter(name="numDifferentPasswords")
    def num_different_passwords(self) -> int:
        """
        Number of recent passwords that new password must be distinct from.
        """
        return pulumi.get(self, "num_different_passwords")

    @property
    @pulumi.getter(name="passwordExpirationDays")
    def password_expiration_days(self) -> int:
        """
        Number of days after which users will be forced to change their password.
        """
        return pulumi.get(self, "password_expiration_days")


@pulumi.output_type
class GetLoginSecurityItemApiAuthenticationResult(dict):
    def __init__(__self__, *,
                 ip_restrictions_for_keys: 'outputs.GetLoginSecurityItemApiAuthenticationIpRestrictionsForKeysResult'):
        """
        :param 'GetLoginSecurityItemApiAuthenticationIpRestrictionsForKeysArgs' ip_restrictions_for_keys: Details for API-only IP restrictions.
        """
        pulumi.set(__self__, "ip_restrictions_for_keys", ip_restrictions_for_keys)

    @property
    @pulumi.getter(name="ipRestrictionsForKeys")
    def ip_restrictions_for_keys(self) -> 'outputs.GetLoginSecurityItemApiAuthenticationIpRestrictionsForKeysResult':
        """
        Details for API-only IP restrictions.
        """
        return pulumi.get(self, "ip_restrictions_for_keys")


@pulumi.output_type
class GetLoginSecurityItemApiAuthenticationIpRestrictionsForKeysResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 ranges: Sequence[str]):
        """
        :param bool enabled: Boolean indicating whether the organization will restrict API key (not Dashboard GUI) usage to a specific list of IP addresses or CIDR ranges.
        :param Sequence[str] ranges: List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "ranges", ranges)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Boolean indicating whether the organization will restrict API key (not Dashboard GUI) usage to a specific list of IP addresses or CIDR ranges.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ranges(self) -> Sequence[str]:
        """
        List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class GetOpenapiSpecItemResult(dict):
    def __init__(__self__, *,
                 info: 'outputs.GetOpenapiSpecItemInfoResult',
                 openapi: str,
                 paths: 'outputs.GetOpenapiSpecItemPathsResult'):
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "openapi", openapi)
        pulumi.set(__self__, "paths", paths)

    @property
    @pulumi.getter
    def info(self) -> 'outputs.GetOpenapiSpecItemInfoResult':
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def openapi(self) -> str:
        return pulumi.get(self, "openapi")

    @property
    @pulumi.getter
    def paths(self) -> 'outputs.GetOpenapiSpecItemPathsResult':
        return pulumi.get(self, "paths")


@pulumi.output_type
class GetOpenapiSpecItemInfoResult(dict):
    def __init__(__self__, *,
                 description: str,
                 title: str,
                 version: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetOpenapiSpecItemPathsResult(dict):
    def __init__(__self__, *,
                 organizations: 'outputs.GetOpenapiSpecItemPathsOrganizationsResult'):
        pulumi.set(__self__, "organizations", organizations)

    @property
    @pulumi.getter
    def organizations(self) -> 'outputs.GetOpenapiSpecItemPathsOrganizationsResult':
        return pulumi.get(self, "organizations")


@pulumi.output_type
class GetOpenapiSpecItemPathsOrganizationsResult(dict):
    def __init__(__self__, *,
                 get: 'outputs.GetOpenapiSpecItemPathsOrganizationsGetResult'):
        pulumi.set(__self__, "get", get)

    @property
    @pulumi.getter
    def get(self) -> 'outputs.GetOpenapiSpecItemPathsOrganizationsGetResult':
        return pulumi.get(self, "get")


@pulumi.output_type
class GetOpenapiSpecItemPathsOrganizationsGetResult(dict):
    def __init__(__self__, *,
                 description: str,
                 operation_id: str,
                 responses: 'outputs.GetOpenapiSpecItemPathsOrganizationsGetResponsesResult'):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "operation_id", operation_id)
        pulumi.set(__self__, "responses", responses)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> str:
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter
    def responses(self) -> 'outputs.GetOpenapiSpecItemPathsOrganizationsGetResponsesResult':
        return pulumi.get(self, "responses")


@pulumi.output_type
class GetOpenapiSpecItemPathsOrganizationsGetResponsesResult(dict):
    def __init__(__self__, *,
                 status200: 'outputs.GetOpenapiSpecItemPathsOrganizationsGetResponsesStatus200Result'):
        pulumi.set(__self__, "status200", status200)

    @property
    @pulumi.getter
    def status200(self) -> 'outputs.GetOpenapiSpecItemPathsOrganizationsGetResponsesStatus200Result':
        return pulumi.get(self, "status200")


@pulumi.output_type
class GetOpenapiSpecItemPathsOrganizationsGetResponsesStatus200Result(dict):
    def __init__(__self__, *,
                 description: str,
                 examples: 'outputs.GetOpenapiSpecItemPathsOrganizationsGetResponsesStatus200ExamplesResult'):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "examples", examples)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def examples(self) -> 'outputs.GetOpenapiSpecItemPathsOrganizationsGetResponsesStatus200ExamplesResult':
        return pulumi.get(self, "examples")


@pulumi.output_type
class GetOpenapiSpecItemPathsOrganizationsGetResponsesStatus200ExamplesResult(dict):
    def __init__(__self__, *,
                 application_jsons: Sequence['outputs.GetOpenapiSpecItemPathsOrganizationsGetResponsesStatus200ExamplesApplicationJsonResult']):
        pulumi.set(__self__, "application_jsons", application_jsons)

    @property
    @pulumi.getter(name="applicationJsons")
    def application_jsons(self) -> Sequence['outputs.GetOpenapiSpecItemPathsOrganizationsGetResponsesStatus200ExamplesApplicationJsonResult']:
        return pulumi.get(self, "application_jsons")


@pulumi.output_type
class GetOpenapiSpecItemPathsOrganizationsGetResponsesStatus200ExamplesApplicationJsonResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPolicyObjectsGroupsItemResult(dict):
    def __init__(__self__, *,
                 category: str,
                 created_at: str,
                 id: str,
                 name: str,
                 network_ids: Sequence[str],
                 object_ids: Sequence[str],
                 updated_at: str):
        """
        :param str category: Type of object groups. (NetworkObjectGroup, GeoLocationGroup, PortObjectGroup, ApplicationGroup)
        :param str created_at: Time Stamp of policy object creation.
        :param str id: Policy object ID
        :param str name: Name of the Policy object group.
        :param Sequence[str] network_ids: Network ID's associated with the policy objects.
        :param Sequence[str] object_ids: Policy objects associated with Network Object Group or Port Object Group
        :param str updated_at: Time Stamp of policy object updation.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_ids", network_ids)
        pulumi.set(__self__, "object_ids", object_ids)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Type of object groups. (NetworkObjectGroup, GeoLocationGroup, PortObjectGroup, ApplicationGroup)
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Time Stamp of policy object creation.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Policy object ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Policy object group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> Sequence[str]:
        """
        Network ID's associated with the policy objects.
        """
        return pulumi.get(self, "network_ids")

    @property
    @pulumi.getter(name="objectIds")
    def object_ids(self) -> Sequence[str]:
        """
        Policy objects associated with Network Object Group or Port Object Group
        """
        return pulumi.get(self, "object_ids")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Time Stamp of policy object updation.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetPolicyObjectsItemResult(dict):
    def __init__(__self__, *,
                 category: str,
                 cidr: str,
                 created_at: str,
                 group_ids: Sequence[str],
                 id: str,
                 name: str,
                 network_ids: Sequence[str],
                 type: str,
                 updated_at: str):
        """
        :param str category: Category of a policy object (one of: adaptivePolicy, network)
        :param str cidr: CIDR Value of a policy object
        :param str created_at: Time Stamp of policy object creation.
        :param Sequence[str] group_ids: The IDs of policy object groups the policy object belongs to.
        :param str id: Policy object ID
        :param str name: Name of policy object (alphanumeric, space, dash, or underscore characters only).
        :param Sequence[str] network_ids: The IDs of the networks that use the policy object.
        :param str type: Type of a policy object (one of: adaptivePolicyIpv4Cidr, cidr, fqdn, ipAndMask)
        :param str updated_at: Time Stamp of policy object updation.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "group_ids", group_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_ids", network_ids)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Category of a policy object (one of: adaptivePolicy, network)
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        CIDR Value of a policy object
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Time Stamp of policy object creation.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Sequence[str]:
        """
        The IDs of policy object groups the policy object belongs to.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Policy object ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of policy object (alphanumeric, space, dash, or underscore characters only).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkIds")
    def network_ids(self) -> Sequence[str]:
        """
        The IDs of the networks that use the policy object.
        """
        return pulumi.get(self, "network_ids")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of a policy object (one of: adaptivePolicyIpv4Cidr, cidr, fqdn, ipAndMask)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Time Stamp of policy object updation.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetSamlIdpsItemResult(dict):
    def __init__(__self__, *,
                 consumer_url: str,
                 idp_id: str,
                 slo_logout_url: str,
                 x509cert_sha1_fingerprint: str):
        """
        :param str consumer_url: URL that is consuming SAML Identity Provider (IdP)
        :param str idp_id: ID associated with the SAML Identity Provider (IdP)
        :param str slo_logout_url: Dashboard will redirect users to this URL when they sign out.
        :param str x509cert_sha1_fingerprint: Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
        """
        pulumi.set(__self__, "consumer_url", consumer_url)
        pulumi.set(__self__, "idp_id", idp_id)
        pulumi.set(__self__, "slo_logout_url", slo_logout_url)
        pulumi.set(__self__, "x509cert_sha1_fingerprint", x509cert_sha1_fingerprint)

    @property
    @pulumi.getter(name="consumerUrl")
    def consumer_url(self) -> str:
        """
        URL that is consuming SAML Identity Provider (IdP)
        """
        return pulumi.get(self, "consumer_url")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> str:
        """
        ID associated with the SAML Identity Provider (IdP)
        """
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter(name="sloLogoutUrl")
    def slo_logout_url(self) -> str:
        """
        Dashboard will redirect users to this URL when they sign out.
        """
        return pulumi.get(self, "slo_logout_url")

    @property
    @pulumi.getter(name="x509certSha1Fingerprint")
    def x509cert_sha1_fingerprint(self) -> str:
        """
        Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
        """
        return pulumi.get(self, "x509cert_sha1_fingerprint")


@pulumi.output_type
class GetSamlItemResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: Toggle depicting if SAML SSO settings are enabled
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Toggle depicting if SAML SSO settings are enabled
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetSamlRolesItemResult(dict):
    def __init__(__self__, *,
                 cameras: Sequence['outputs.GetSamlRolesItemCameraResult'],
                 id: str,
                 networks: Sequence['outputs.GetSamlRolesItemNetworkResult'],
                 org_access: str,
                 role: str,
                 tags: Sequence['outputs.GetSamlRolesItemTagResult']):
        """
        :param Sequence['GetSamlRolesItemCameraArgs'] cameras: The list of camera access privileges for SAML administrator
        :param str id: ID associated with the SAML role
        :param Sequence['GetSamlRolesItemNetworkArgs'] networks: The list of networks that the SAML administrator has privileges on
        :param str org_access: The privilege of the SAML administrator on the organization
        :param str role: The role of the SAML administrator
        :param Sequence['GetSamlRolesItemTagArgs'] tags: The list of tags that the SAML administrator has privleges on
        """
        pulumi.set(__self__, "cameras", cameras)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "networks", networks)
        pulumi.set(__self__, "org_access", org_access)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def cameras(self) -> Sequence['outputs.GetSamlRolesItemCameraResult']:
        """
        The list of camera access privileges for SAML administrator
        """
        return pulumi.get(self, "cameras")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID associated with the SAML role
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def networks(self) -> Sequence['outputs.GetSamlRolesItemNetworkResult']:
        """
        The list of networks that the SAML administrator has privileges on
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="orgAccess")
    def org_access(self) -> str:
        """
        The privilege of the SAML administrator on the organization
        """
        return pulumi.get(self, "org_access")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role of the SAML administrator
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSamlRolesItemTagResult']:
        """
        The list of tags that the SAML administrator has privleges on
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSamlRolesItemCameraResult(dict):
    def __init__(__self__, *,
                 access: str,
                 org_wide: bool):
        """
        :param str access: Camera access ability
        :param bool org_wide: Whether or not SAML administrator has org-wide access
        """
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "org_wide", org_wide)

    @property
    @pulumi.getter
    def access(self) -> str:
        """
        Camera access ability
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="orgWide")
    def org_wide(self) -> bool:
        """
        Whether or not SAML administrator has org-wide access
        """
        return pulumi.get(self, "org_wide")


@pulumi.output_type
class GetSamlRolesItemNetworkResult(dict):
    def __init__(__self__, *,
                 access: str,
                 id: str):
        """
        :param str access: The privilege of the SAML administrator on the network
        :param str id: The network ID
        """
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def access(self) -> str:
        """
        The privilege of the SAML administrator on the network
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The network ID
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSamlRolesItemTagResult(dict):
    def __init__(__self__, *,
                 access: str,
                 tag: str):
        """
        :param str access: The privilege of the SAML administrator on the tag
        :param str tag: The name of the tag
        """
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def access(self) -> str:
        """
        The privilege of the SAML administrator on the tag
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def tag(self) -> str:
        """
        The name of the tag
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetSensorReadingsHistoryItemResult(dict):
    def __init__(__self__, *,
                 apparent_power: 'outputs.GetSensorReadingsHistoryItemApparentPowerResult',
                 battery: 'outputs.GetSensorReadingsHistoryItemBatteryResult',
                 button: 'outputs.GetSensorReadingsHistoryItemButtonResult',
                 co2: 'outputs.GetSensorReadingsHistoryItemCo2Result',
                 current: 'outputs.GetSensorReadingsHistoryItemCurrentResult',
                 door: 'outputs.GetSensorReadingsHistoryItemDoorResult',
                 downstream_power: 'outputs.GetSensorReadingsHistoryItemDownstreamPowerResult',
                 frequency: 'outputs.GetSensorReadingsHistoryItemFrequencyResult',
                 humidity: 'outputs.GetSensorReadingsHistoryItemHumidityResult',
                 indoor_air_quality: 'outputs.GetSensorReadingsHistoryItemIndoorAirQualityResult',
                 metric: str,
                 network: 'outputs.GetSensorReadingsHistoryItemNetworkResult',
                 noise: 'outputs.GetSensorReadingsHistoryItemNoiseResult',
                 pm25: 'outputs.GetSensorReadingsHistoryItemPm25Result',
                 power_factor: 'outputs.GetSensorReadingsHistoryItemPowerFactorResult',
                 real_power: 'outputs.GetSensorReadingsHistoryItemRealPowerResult',
                 remote_lockout_switch: 'outputs.GetSensorReadingsHistoryItemRemoteLockoutSwitchResult',
                 serial: str,
                 temperature: 'outputs.GetSensorReadingsHistoryItemTemperatureResult',
                 ts: str,
                 tvoc: 'outputs.GetSensorReadingsHistoryItemTvocResult',
                 voltage: 'outputs.GetSensorReadingsHistoryItemVoltageResult',
                 water: 'outputs.GetSensorReadingsHistoryItemWaterResult'):
        """
        :param 'GetSensorReadingsHistoryItemApparentPowerArgs' apparent_power: Reading for the 'apparentPower' metric. This will only be present if the 'metric' property equals 'apparentPower'.
        :param 'GetSensorReadingsHistoryItemBatteryArgs' battery: Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'.
        :param 'GetSensorReadingsHistoryItemButtonArgs' button: Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'.
        :param 'GetSensorReadingsHistoryItemCo2Args' co2: Reading for the 'co2' metric. This will only be present if the 'metric' property equals 'co2'.
        :param 'GetSensorReadingsHistoryItemCurrentArgs' current: Reading for the 'current' metric. This will only be present if the 'metric' property equals 'current'.
        :param 'GetSensorReadingsHistoryItemDoorArgs' door: Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'.
        :param 'GetSensorReadingsHistoryItemDownstreamPowerArgs' downstream_power: Reading for the 'downstreamPower' metric. This will only be present if the 'metric' property equals 'downstreamPower'.
        :param 'GetSensorReadingsHistoryItemFrequencyArgs' frequency: Reading for the 'frequency' metric. This will only be present if the 'metric' property equals 'frequency'.
        :param 'GetSensorReadingsHistoryItemHumidityArgs' humidity: Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'.
        :param 'GetSensorReadingsHistoryItemIndoorAirQualityArgs' indoor_air_quality: Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'.
        :param str metric: Type of sensor reading.
        :param 'GetSensorReadingsHistoryItemNetworkArgs' network: Network to which the sensor belongs.
        :param 'GetSensorReadingsHistoryItemNoiseArgs' noise: Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'.
        :param 'GetSensorReadingsHistoryItemPm25Args' pm25: Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'.
        :param 'GetSensorReadingsHistoryItemPowerFactorArgs' power_factor: Reading for the 'powerFactor' metric. This will only be present if the 'metric' property equals 'powerFactor'.
        :param 'GetSensorReadingsHistoryItemRealPowerArgs' real_power: Reading for the 'realPower' metric. This will only be present if the 'metric' property equals 'realPower'.
        :param 'GetSensorReadingsHistoryItemRemoteLockoutSwitchArgs' remote_lockout_switch: Reading for the 'remoteLockoutSwitch' metric. This will only be present if the 'metric' property equals 'remoteLockoutSwitch'.
        :param str serial: Serial number of the sensor that took the reading.
        :param 'GetSensorReadingsHistoryItemTemperatureArgs' temperature: Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'.
        :param str ts: Time at which the reading occurred, in ISO8601 format.
        :param 'GetSensorReadingsHistoryItemTvocArgs' tvoc: Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'.
        :param 'GetSensorReadingsHistoryItemVoltageArgs' voltage: Reading for the 'voltage' metric. This will only be present if the 'metric' property equals 'voltage'.
        :param 'GetSensorReadingsHistoryItemWaterArgs' water: Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'.
        """
        pulumi.set(__self__, "apparent_power", apparent_power)
        pulumi.set(__self__, "battery", battery)
        pulumi.set(__self__, "button", button)
        pulumi.set(__self__, "co2", co2)
        pulumi.set(__self__, "current", current)
        pulumi.set(__self__, "door", door)
        pulumi.set(__self__, "downstream_power", downstream_power)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "humidity", humidity)
        pulumi.set(__self__, "indoor_air_quality", indoor_air_quality)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "noise", noise)
        pulumi.set(__self__, "pm25", pm25)
        pulumi.set(__self__, "power_factor", power_factor)
        pulumi.set(__self__, "real_power", real_power)
        pulumi.set(__self__, "remote_lockout_switch", remote_lockout_switch)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "temperature", temperature)
        pulumi.set(__self__, "ts", ts)
        pulumi.set(__self__, "tvoc", tvoc)
        pulumi.set(__self__, "voltage", voltage)
        pulumi.set(__self__, "water", water)

    @property
    @pulumi.getter(name="apparentPower")
    def apparent_power(self) -> 'outputs.GetSensorReadingsHistoryItemApparentPowerResult':
        """
        Reading for the 'apparentPower' metric. This will only be present if the 'metric' property equals 'apparentPower'.
        """
        return pulumi.get(self, "apparent_power")

    @property
    @pulumi.getter
    def battery(self) -> 'outputs.GetSensorReadingsHistoryItemBatteryResult':
        """
        Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'.
        """
        return pulumi.get(self, "battery")

    @property
    @pulumi.getter
    def button(self) -> 'outputs.GetSensorReadingsHistoryItemButtonResult':
        """
        Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'.
        """
        return pulumi.get(self, "button")

    @property
    @pulumi.getter
    def co2(self) -> 'outputs.GetSensorReadingsHistoryItemCo2Result':
        """
        Reading for the 'co2' metric. This will only be present if the 'metric' property equals 'co2'.
        """
        return pulumi.get(self, "co2")

    @property
    @pulumi.getter
    def current(self) -> 'outputs.GetSensorReadingsHistoryItemCurrentResult':
        """
        Reading for the 'current' metric. This will only be present if the 'metric' property equals 'current'.
        """
        return pulumi.get(self, "current")

    @property
    @pulumi.getter
    def door(self) -> 'outputs.GetSensorReadingsHistoryItemDoorResult':
        """
        Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'.
        """
        return pulumi.get(self, "door")

    @property
    @pulumi.getter(name="downstreamPower")
    def downstream_power(self) -> 'outputs.GetSensorReadingsHistoryItemDownstreamPowerResult':
        """
        Reading for the 'downstreamPower' metric. This will only be present if the 'metric' property equals 'downstreamPower'.
        """
        return pulumi.get(self, "downstream_power")

    @property
    @pulumi.getter
    def frequency(self) -> 'outputs.GetSensorReadingsHistoryItemFrequencyResult':
        """
        Reading for the 'frequency' metric. This will only be present if the 'metric' property equals 'frequency'.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def humidity(self) -> 'outputs.GetSensorReadingsHistoryItemHumidityResult':
        """
        Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'.
        """
        return pulumi.get(self, "humidity")

    @property
    @pulumi.getter(name="indoorAirQuality")
    def indoor_air_quality(self) -> 'outputs.GetSensorReadingsHistoryItemIndoorAirQualityResult':
        """
        Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'.
        """
        return pulumi.get(self, "indoor_air_quality")

    @property
    @pulumi.getter
    def metric(self) -> str:
        """
        Type of sensor reading.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetSensorReadingsHistoryItemNetworkResult':
        """
        Network to which the sensor belongs.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def noise(self) -> 'outputs.GetSensorReadingsHistoryItemNoiseResult':
        """
        Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'.
        """
        return pulumi.get(self, "noise")

    @property
    @pulumi.getter
    def pm25(self) -> 'outputs.GetSensorReadingsHistoryItemPm25Result':
        """
        Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'.
        """
        return pulumi.get(self, "pm25")

    @property
    @pulumi.getter(name="powerFactor")
    def power_factor(self) -> 'outputs.GetSensorReadingsHistoryItemPowerFactorResult':
        """
        Reading for the 'powerFactor' metric. This will only be present if the 'metric' property equals 'powerFactor'.
        """
        return pulumi.get(self, "power_factor")

    @property
    @pulumi.getter(name="realPower")
    def real_power(self) -> 'outputs.GetSensorReadingsHistoryItemRealPowerResult':
        """
        Reading for the 'realPower' metric. This will only be present if the 'metric' property equals 'realPower'.
        """
        return pulumi.get(self, "real_power")

    @property
    @pulumi.getter(name="remoteLockoutSwitch")
    def remote_lockout_switch(self) -> 'outputs.GetSensorReadingsHistoryItemRemoteLockoutSwitchResult':
        """
        Reading for the 'remoteLockoutSwitch' metric. This will only be present if the 'metric' property equals 'remoteLockoutSwitch'.
        """
        return pulumi.get(self, "remote_lockout_switch")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Serial number of the sensor that took the reading.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def temperature(self) -> 'outputs.GetSensorReadingsHistoryItemTemperatureResult':
        """
        Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'.
        """
        return pulumi.get(self, "temperature")

    @property
    @pulumi.getter
    def ts(self) -> str:
        """
        Time at which the reading occurred, in ISO8601 format.
        """
        return pulumi.get(self, "ts")

    @property
    @pulumi.getter
    def tvoc(self) -> 'outputs.GetSensorReadingsHistoryItemTvocResult':
        """
        Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'.
        """
        return pulumi.get(self, "tvoc")

    @property
    @pulumi.getter
    def voltage(self) -> 'outputs.GetSensorReadingsHistoryItemVoltageResult':
        """
        Reading for the 'voltage' metric. This will only be present if the 'metric' property equals 'voltage'.
        """
        return pulumi.get(self, "voltage")

    @property
    @pulumi.getter
    def water(self) -> 'outputs.GetSensorReadingsHistoryItemWaterResult':
        """
        Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'.
        """
        return pulumi.get(self, "water")


@pulumi.output_type
class GetSensorReadingsHistoryItemApparentPowerResult(dict):
    def __init__(__self__, *,
                 draw: float):
        """
        :param float draw: Apparent power reading in volt-amperes.
        """
        pulumi.set(__self__, "draw", draw)

    @property
    @pulumi.getter
    def draw(self) -> float:
        """
        Apparent power reading in volt-amperes.
        """
        return pulumi.get(self, "draw")


@pulumi.output_type
class GetSensorReadingsHistoryItemBatteryResult(dict):
    def __init__(__self__, *,
                 percentage: int):
        """
        :param int percentage: Remaining battery life.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> int:
        """
        Remaining battery life.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetSensorReadingsHistoryItemButtonResult(dict):
    def __init__(__self__, *,
                 press_type: str):
        """
        :param str press_type: Type of button press that occurred.
        """
        pulumi.set(__self__, "press_type", press_type)

    @property
    @pulumi.getter(name="pressType")
    def press_type(self) -> str:
        """
        Type of button press that occurred.
        """
        return pulumi.get(self, "press_type")


@pulumi.output_type
class GetSensorReadingsHistoryItemCo2Result(dict):
    def __init__(__self__, *,
                 concentration: int):
        """
        :param int concentration: CO2 reading in parts per million.
        """
        pulumi.set(__self__, "concentration", concentration)

    @property
    @pulumi.getter
    def concentration(self) -> int:
        """
        CO2 reading in parts per million.
        """
        return pulumi.get(self, "concentration")


@pulumi.output_type
class GetSensorReadingsHistoryItemCurrentResult(dict):
    def __init__(__self__, *,
                 draw: float):
        """
        :param float draw: Electrical current reading in amperes.
        """
        pulumi.set(__self__, "draw", draw)

    @property
    @pulumi.getter
    def draw(self) -> float:
        """
        Electrical current reading in amperes.
        """
        return pulumi.get(self, "draw")


@pulumi.output_type
class GetSensorReadingsHistoryItemDoorResult(dict):
    def __init__(__self__, *,
                 open: bool):
        """
        :param bool open: True if the door is open.
        """
        pulumi.set(__self__, "open", open)

    @property
    @pulumi.getter
    def open(self) -> bool:
        """
        True if the door is open.
        """
        return pulumi.get(self, "open")


@pulumi.output_type
class GetSensorReadingsHistoryItemDownstreamPowerResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: True if power is turned on to the device that is connected downstream of the MT40 power monitor.
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        True if power is turned on to the device that is connected downstream of the MT40 power monitor.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetSensorReadingsHistoryItemFrequencyResult(dict):
    def __init__(__self__, *,
                 level: float):
        """
        :param float level: Electrical current frequency reading in hertz.
        """
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> float:
        """
        Electrical current frequency reading in hertz.
        """
        return pulumi.get(self, "level")


@pulumi.output_type
class GetSensorReadingsHistoryItemHumidityResult(dict):
    def __init__(__self__, *,
                 relative_percentage: int):
        """
        :param int relative_percentage: Humidity reading in %RH.
        """
        pulumi.set(__self__, "relative_percentage", relative_percentage)

    @property
    @pulumi.getter(name="relativePercentage")
    def relative_percentage(self) -> int:
        """
        Humidity reading in %RH.
        """
        return pulumi.get(self, "relative_percentage")


@pulumi.output_type
class GetSensorReadingsHistoryItemIndoorAirQualityResult(dict):
    def __init__(__self__, *,
                 score: int):
        """
        :param int score: Indoor air quality score between 0 and 100.
        """
        pulumi.set(__self__, "score", score)

    @property
    @pulumi.getter
    def score(self) -> int:
        """
        Indoor air quality score between 0 and 100.
        """
        return pulumi.get(self, "score")


@pulumi.output_type
class GetSensorReadingsHistoryItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: ID of the network.
        :param str name: Name of the network.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the network.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the network.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSensorReadingsHistoryItemNoiseResult(dict):
    def __init__(__self__, *,
                 ambient: 'outputs.GetSensorReadingsHistoryItemNoiseAmbientResult'):
        """
        :param 'GetSensorReadingsHistoryItemNoiseAmbientArgs' ambient: Ambient noise reading.
        """
        pulumi.set(__self__, "ambient", ambient)

    @property
    @pulumi.getter
    def ambient(self) -> 'outputs.GetSensorReadingsHistoryItemNoiseAmbientResult':
        """
        Ambient noise reading.
        """
        return pulumi.get(self, "ambient")


@pulumi.output_type
class GetSensorReadingsHistoryItemNoiseAmbientResult(dict):
    def __init__(__self__, *,
                 level: int):
        """
        :param int level: Ambient noise reading in adjusted decibels.
        """
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> int:
        """
        Ambient noise reading in adjusted decibels.
        """
        return pulumi.get(self, "level")


@pulumi.output_type
class GetSensorReadingsHistoryItemPm25Result(dict):
    def __init__(__self__, *,
                 concentration: int):
        """
        :param int concentration: PM2.5 reading in micrograms per cubic meter.
        """
        pulumi.set(__self__, "concentration", concentration)

    @property
    @pulumi.getter
    def concentration(self) -> int:
        """
        PM2.5 reading in micrograms per cubic meter.
        """
        return pulumi.get(self, "concentration")


@pulumi.output_type
class GetSensorReadingsHistoryItemPowerFactorResult(dict):
    def __init__(__self__, *,
                 percentage: int):
        """
        :param int percentage: Power factor reading as a percentage.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> int:
        """
        Power factor reading as a percentage.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetSensorReadingsHistoryItemRealPowerResult(dict):
    def __init__(__self__, *,
                 draw: float):
        """
        :param float draw: Real power reading in watts.
        """
        pulumi.set(__self__, "draw", draw)

    @property
    @pulumi.getter
    def draw(self) -> float:
        """
        Real power reading in watts.
        """
        return pulumi.get(self, "draw")


@pulumi.output_type
class GetSensorReadingsHistoryItemRemoteLockoutSwitchResult(dict):
    def __init__(__self__, *,
                 locked: bool):
        """
        :param bool locked: True if power controls are disabled via the MT40's physical remote lockout switch.
        """
        pulumi.set(__self__, "locked", locked)

    @property
    @pulumi.getter
    def locked(self) -> bool:
        """
        True if power controls are disabled via the MT40's physical remote lockout switch.
        """
        return pulumi.get(self, "locked")


@pulumi.output_type
class GetSensorReadingsHistoryItemTemperatureResult(dict):
    def __init__(__self__, *,
                 celsius: float,
                 fahrenheit: float):
        """
        :param float celsius: Temperature reading in degrees Celsius.
        :param float fahrenheit: Temperature reading in degrees Fahrenheit.
        """
        pulumi.set(__self__, "celsius", celsius)
        pulumi.set(__self__, "fahrenheit", fahrenheit)

    @property
    @pulumi.getter
    def celsius(self) -> float:
        """
        Temperature reading in degrees Celsius.
        """
        return pulumi.get(self, "celsius")

    @property
    @pulumi.getter
    def fahrenheit(self) -> float:
        """
        Temperature reading in degrees Fahrenheit.
        """
        return pulumi.get(self, "fahrenheit")


@pulumi.output_type
class GetSensorReadingsHistoryItemTvocResult(dict):
    def __init__(__self__, *,
                 concentration: int):
        """
        :param int concentration: TVOC reading in micrograms per cubic meter.
        """
        pulumi.set(__self__, "concentration", concentration)

    @property
    @pulumi.getter
    def concentration(self) -> int:
        """
        TVOC reading in micrograms per cubic meter.
        """
        return pulumi.get(self, "concentration")


@pulumi.output_type
class GetSensorReadingsHistoryItemVoltageResult(dict):
    def __init__(__self__, *,
                 level: float):
        """
        :param float level: Voltage reading in volts.
        """
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> float:
        """
        Voltage reading in volts.
        """
        return pulumi.get(self, "level")


@pulumi.output_type
class GetSensorReadingsHistoryItemWaterResult(dict):
    def __init__(__self__, *,
                 present: bool):
        """
        :param bool present: True if water is detected.
        """
        pulumi.set(__self__, "present", present)

    @property
    @pulumi.getter
    def present(self) -> bool:
        """
        True if water is detected.
        """
        return pulumi.get(self, "present")


@pulumi.output_type
class GetSensorReadingsLatestItemResult(dict):
    def __init__(__self__, *,
                 network: 'outputs.GetSensorReadingsLatestItemNetworkResult',
                 readings: Sequence['outputs.GetSensorReadingsLatestItemReadingResult'],
                 serial: str):
        """
        :param 'GetSensorReadingsLatestItemNetworkArgs' network: Network to which the sensor belongs.
        :param Sequence['GetSensorReadingsLatestItemReadingArgs'] readings: Array of latest readings from the sensor. Each object represents a single reading for a single metric.
        :param str serial: Serial number of the sensor that took the readings.
        """
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "readings", readings)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetSensorReadingsLatestItemNetworkResult':
        """
        Network to which the sensor belongs.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def readings(self) -> Sequence['outputs.GetSensorReadingsLatestItemReadingResult']:
        """
        Array of latest readings from the sensor. Each object represents a single reading for a single metric.
        """
        return pulumi.get(self, "readings")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Serial number of the sensor that took the readings.
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetSensorReadingsLatestItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: ID of the network.
        :param str name: Name of the network.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the network.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the network.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingResult(dict):
    def __init__(__self__, *,
                 apparent_power: 'outputs.GetSensorReadingsLatestItemReadingApparentPowerResult',
                 battery: 'outputs.GetSensorReadingsLatestItemReadingBatteryResult',
                 button: 'outputs.GetSensorReadingsLatestItemReadingButtonResult',
                 co2: 'outputs.GetSensorReadingsLatestItemReadingCo2Result',
                 current: 'outputs.GetSensorReadingsLatestItemReadingCurrentResult',
                 door: 'outputs.GetSensorReadingsLatestItemReadingDoorResult',
                 downstream_power: 'outputs.GetSensorReadingsLatestItemReadingDownstreamPowerResult',
                 frequency: 'outputs.GetSensorReadingsLatestItemReadingFrequencyResult',
                 humidity: 'outputs.GetSensorReadingsLatestItemReadingHumidityResult',
                 indoor_air_quality: 'outputs.GetSensorReadingsLatestItemReadingIndoorAirQualityResult',
                 metric: str,
                 noise: 'outputs.GetSensorReadingsLatestItemReadingNoiseResult',
                 pm25: 'outputs.GetSensorReadingsLatestItemReadingPm25Result',
                 power_factor: 'outputs.GetSensorReadingsLatestItemReadingPowerFactorResult',
                 real_power: 'outputs.GetSensorReadingsLatestItemReadingRealPowerResult',
                 remote_lockout_switch: 'outputs.GetSensorReadingsLatestItemReadingRemoteLockoutSwitchResult',
                 temperature: 'outputs.GetSensorReadingsLatestItemReadingTemperatureResult',
                 ts: str,
                 tvoc: 'outputs.GetSensorReadingsLatestItemReadingTvocResult',
                 voltage: 'outputs.GetSensorReadingsLatestItemReadingVoltageResult',
                 water: 'outputs.GetSensorReadingsLatestItemReadingWaterResult'):
        """
        :param 'GetSensorReadingsLatestItemReadingApparentPowerArgs' apparent_power: Reading for the 'apparentPower' metric. This will only be present if the 'metric' property equals 'apparentPower'.
        :param 'GetSensorReadingsLatestItemReadingBatteryArgs' battery: Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'.
        :param 'GetSensorReadingsLatestItemReadingButtonArgs' button: Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'.
        :param 'GetSensorReadingsLatestItemReadingCo2Args' co2: Reading for the 'co2' metric. This will only be present if the 'metric' property equals 'co2'.
        :param 'GetSensorReadingsLatestItemReadingCurrentArgs' current: Reading for the 'current' metric. This will only be present if the 'metric' property equals 'current'.
        :param 'GetSensorReadingsLatestItemReadingDoorArgs' door: Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'.
        :param 'GetSensorReadingsLatestItemReadingDownstreamPowerArgs' downstream_power: Reading for the 'downstreamPower' metric. This will only be present if the 'metric' property equals 'downstreamPower'.
        :param 'GetSensorReadingsLatestItemReadingFrequencyArgs' frequency: Reading for the 'frequency' metric. This will only be present if the 'metric' property equals 'frequency'.
        :param 'GetSensorReadingsLatestItemReadingHumidityArgs' humidity: Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'.
        :param 'GetSensorReadingsLatestItemReadingIndoorAirQualityArgs' indoor_air_quality: Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'.
        :param str metric: Type of sensor reading.
        :param 'GetSensorReadingsLatestItemReadingNoiseArgs' noise: Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'.
        :param 'GetSensorReadingsLatestItemReadingPm25Args' pm25: Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'.
        :param 'GetSensorReadingsLatestItemReadingPowerFactorArgs' power_factor: Reading for the 'powerFactor' metric. This will only be present if the 'metric' property equals 'powerFactor'.
        :param 'GetSensorReadingsLatestItemReadingRealPowerArgs' real_power: Reading for the 'realPower' metric. This will only be present if the 'metric' property equals 'realPower'.
        :param 'GetSensorReadingsLatestItemReadingRemoteLockoutSwitchArgs' remote_lockout_switch: Reading for the 'remoteLockoutSwitch' metric. This will only be present if the 'metric' property equals 'remoteLockoutSwitch'.
        :param 'GetSensorReadingsLatestItemReadingTemperatureArgs' temperature: Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'.
        :param str ts: Time at which the reading occurred, in ISO8601 format.
        :param 'GetSensorReadingsLatestItemReadingTvocArgs' tvoc: Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'.
        :param 'GetSensorReadingsLatestItemReadingVoltageArgs' voltage: Reading for the 'voltage' metric. This will only be present if the 'metric' property equals 'voltage'.
        :param 'GetSensorReadingsLatestItemReadingWaterArgs' water: Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'.
        """
        pulumi.set(__self__, "apparent_power", apparent_power)
        pulumi.set(__self__, "battery", battery)
        pulumi.set(__self__, "button", button)
        pulumi.set(__self__, "co2", co2)
        pulumi.set(__self__, "current", current)
        pulumi.set(__self__, "door", door)
        pulumi.set(__self__, "downstream_power", downstream_power)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "humidity", humidity)
        pulumi.set(__self__, "indoor_air_quality", indoor_air_quality)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "noise", noise)
        pulumi.set(__self__, "pm25", pm25)
        pulumi.set(__self__, "power_factor", power_factor)
        pulumi.set(__self__, "real_power", real_power)
        pulumi.set(__self__, "remote_lockout_switch", remote_lockout_switch)
        pulumi.set(__self__, "temperature", temperature)
        pulumi.set(__self__, "ts", ts)
        pulumi.set(__self__, "tvoc", tvoc)
        pulumi.set(__self__, "voltage", voltage)
        pulumi.set(__self__, "water", water)

    @property
    @pulumi.getter(name="apparentPower")
    def apparent_power(self) -> 'outputs.GetSensorReadingsLatestItemReadingApparentPowerResult':
        """
        Reading for the 'apparentPower' metric. This will only be present if the 'metric' property equals 'apparentPower'.
        """
        return pulumi.get(self, "apparent_power")

    @property
    @pulumi.getter
    def battery(self) -> 'outputs.GetSensorReadingsLatestItemReadingBatteryResult':
        """
        Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'.
        """
        return pulumi.get(self, "battery")

    @property
    @pulumi.getter
    def button(self) -> 'outputs.GetSensorReadingsLatestItemReadingButtonResult':
        """
        Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'.
        """
        return pulumi.get(self, "button")

    @property
    @pulumi.getter
    def co2(self) -> 'outputs.GetSensorReadingsLatestItemReadingCo2Result':
        """
        Reading for the 'co2' metric. This will only be present if the 'metric' property equals 'co2'.
        """
        return pulumi.get(self, "co2")

    @property
    @pulumi.getter
    def current(self) -> 'outputs.GetSensorReadingsLatestItemReadingCurrentResult':
        """
        Reading for the 'current' metric. This will only be present if the 'metric' property equals 'current'.
        """
        return pulumi.get(self, "current")

    @property
    @pulumi.getter
    def door(self) -> 'outputs.GetSensorReadingsLatestItemReadingDoorResult':
        """
        Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'.
        """
        return pulumi.get(self, "door")

    @property
    @pulumi.getter(name="downstreamPower")
    def downstream_power(self) -> 'outputs.GetSensorReadingsLatestItemReadingDownstreamPowerResult':
        """
        Reading for the 'downstreamPower' metric. This will only be present if the 'metric' property equals 'downstreamPower'.
        """
        return pulumi.get(self, "downstream_power")

    @property
    @pulumi.getter
    def frequency(self) -> 'outputs.GetSensorReadingsLatestItemReadingFrequencyResult':
        """
        Reading for the 'frequency' metric. This will only be present if the 'metric' property equals 'frequency'.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def humidity(self) -> 'outputs.GetSensorReadingsLatestItemReadingHumidityResult':
        """
        Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'.
        """
        return pulumi.get(self, "humidity")

    @property
    @pulumi.getter(name="indoorAirQuality")
    def indoor_air_quality(self) -> 'outputs.GetSensorReadingsLatestItemReadingIndoorAirQualityResult':
        """
        Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'.
        """
        return pulumi.get(self, "indoor_air_quality")

    @property
    @pulumi.getter
    def metric(self) -> str:
        """
        Type of sensor reading.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def noise(self) -> 'outputs.GetSensorReadingsLatestItemReadingNoiseResult':
        """
        Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'.
        """
        return pulumi.get(self, "noise")

    @property
    @pulumi.getter
    def pm25(self) -> 'outputs.GetSensorReadingsLatestItemReadingPm25Result':
        """
        Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'.
        """
        return pulumi.get(self, "pm25")

    @property
    @pulumi.getter(name="powerFactor")
    def power_factor(self) -> 'outputs.GetSensorReadingsLatestItemReadingPowerFactorResult':
        """
        Reading for the 'powerFactor' metric. This will only be present if the 'metric' property equals 'powerFactor'.
        """
        return pulumi.get(self, "power_factor")

    @property
    @pulumi.getter(name="realPower")
    def real_power(self) -> 'outputs.GetSensorReadingsLatestItemReadingRealPowerResult':
        """
        Reading for the 'realPower' metric. This will only be present if the 'metric' property equals 'realPower'.
        """
        return pulumi.get(self, "real_power")

    @property
    @pulumi.getter(name="remoteLockoutSwitch")
    def remote_lockout_switch(self) -> 'outputs.GetSensorReadingsLatestItemReadingRemoteLockoutSwitchResult':
        """
        Reading for the 'remoteLockoutSwitch' metric. This will only be present if the 'metric' property equals 'remoteLockoutSwitch'.
        """
        return pulumi.get(self, "remote_lockout_switch")

    @property
    @pulumi.getter
    def temperature(self) -> 'outputs.GetSensorReadingsLatestItemReadingTemperatureResult':
        """
        Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'.
        """
        return pulumi.get(self, "temperature")

    @property
    @pulumi.getter
    def ts(self) -> str:
        """
        Time at which the reading occurred, in ISO8601 format.
        """
        return pulumi.get(self, "ts")

    @property
    @pulumi.getter
    def tvoc(self) -> 'outputs.GetSensorReadingsLatestItemReadingTvocResult':
        """
        Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'.
        """
        return pulumi.get(self, "tvoc")

    @property
    @pulumi.getter
    def voltage(self) -> 'outputs.GetSensorReadingsLatestItemReadingVoltageResult':
        """
        Reading for the 'voltage' metric. This will only be present if the 'metric' property equals 'voltage'.
        """
        return pulumi.get(self, "voltage")

    @property
    @pulumi.getter
    def water(self) -> 'outputs.GetSensorReadingsLatestItemReadingWaterResult':
        """
        Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'.
        """
        return pulumi.get(self, "water")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingApparentPowerResult(dict):
    def __init__(__self__, *,
                 draw: float):
        """
        :param float draw: Apparent power reading in volt-amperes.
        """
        pulumi.set(__self__, "draw", draw)

    @property
    @pulumi.getter
    def draw(self) -> float:
        """
        Apparent power reading in volt-amperes.
        """
        return pulumi.get(self, "draw")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingBatteryResult(dict):
    def __init__(__self__, *,
                 percentage: int):
        """
        :param int percentage: Remaining battery life.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> int:
        """
        Remaining battery life.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingButtonResult(dict):
    def __init__(__self__, *,
                 press_type: str):
        """
        :param str press_type: Type of button press that occurred.
        """
        pulumi.set(__self__, "press_type", press_type)

    @property
    @pulumi.getter(name="pressType")
    def press_type(self) -> str:
        """
        Type of button press that occurred.
        """
        return pulumi.get(self, "press_type")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingCo2Result(dict):
    def __init__(__self__, *,
                 concentration: int):
        """
        :param int concentration: CO2 reading in parts per million.
        """
        pulumi.set(__self__, "concentration", concentration)

    @property
    @pulumi.getter
    def concentration(self) -> int:
        """
        CO2 reading in parts per million.
        """
        return pulumi.get(self, "concentration")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingCurrentResult(dict):
    def __init__(__self__, *,
                 draw: float):
        """
        :param float draw: Electrical current reading in amperes.
        """
        pulumi.set(__self__, "draw", draw)

    @property
    @pulumi.getter
    def draw(self) -> float:
        """
        Electrical current reading in amperes.
        """
        return pulumi.get(self, "draw")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingDoorResult(dict):
    def __init__(__self__, *,
                 open: bool):
        """
        :param bool open: True if the door is open.
        """
        pulumi.set(__self__, "open", open)

    @property
    @pulumi.getter
    def open(self) -> bool:
        """
        True if the door is open.
        """
        return pulumi.get(self, "open")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingDownstreamPowerResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: True if power is turned on to the device that is connected downstream of the MT40 power monitor.
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        True if power is turned on to the device that is connected downstream of the MT40 power monitor.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingFrequencyResult(dict):
    def __init__(__self__, *,
                 level: float):
        """
        :param float level: Electrical current frequency reading in hertz.
        """
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> float:
        """
        Electrical current frequency reading in hertz.
        """
        return pulumi.get(self, "level")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingHumidityResult(dict):
    def __init__(__self__, *,
                 relative_percentage: int):
        """
        :param int relative_percentage: Humidity reading in %RH.
        """
        pulumi.set(__self__, "relative_percentage", relative_percentage)

    @property
    @pulumi.getter(name="relativePercentage")
    def relative_percentage(self) -> int:
        """
        Humidity reading in %RH.
        """
        return pulumi.get(self, "relative_percentage")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingIndoorAirQualityResult(dict):
    def __init__(__self__, *,
                 score: int):
        """
        :param int score: Indoor air quality score between 0 and 100.
        """
        pulumi.set(__self__, "score", score)

    @property
    @pulumi.getter
    def score(self) -> int:
        """
        Indoor air quality score between 0 and 100.
        """
        return pulumi.get(self, "score")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingNoiseResult(dict):
    def __init__(__self__, *,
                 ambient: 'outputs.GetSensorReadingsLatestItemReadingNoiseAmbientResult'):
        """
        :param 'GetSensorReadingsLatestItemReadingNoiseAmbientArgs' ambient: Ambient noise reading.
        """
        pulumi.set(__self__, "ambient", ambient)

    @property
    @pulumi.getter
    def ambient(self) -> 'outputs.GetSensorReadingsLatestItemReadingNoiseAmbientResult':
        """
        Ambient noise reading.
        """
        return pulumi.get(self, "ambient")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingNoiseAmbientResult(dict):
    def __init__(__self__, *,
                 level: int):
        """
        :param int level: Ambient noise reading in adjusted decibels.
        """
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> int:
        """
        Ambient noise reading in adjusted decibels.
        """
        return pulumi.get(self, "level")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingPm25Result(dict):
    def __init__(__self__, *,
                 concentration: int):
        """
        :param int concentration: PM2.5 reading in micrograms per cubic meter.
        """
        pulumi.set(__self__, "concentration", concentration)

    @property
    @pulumi.getter
    def concentration(self) -> int:
        """
        PM2.5 reading in micrograms per cubic meter.
        """
        return pulumi.get(self, "concentration")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingPowerFactorResult(dict):
    def __init__(__self__, *,
                 percentage: int):
        """
        :param int percentage: Power factor reading as a percentage.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> int:
        """
        Power factor reading as a percentage.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingRealPowerResult(dict):
    def __init__(__self__, *,
                 draw: float):
        """
        :param float draw: Real power reading in watts.
        """
        pulumi.set(__self__, "draw", draw)

    @property
    @pulumi.getter
    def draw(self) -> float:
        """
        Real power reading in watts.
        """
        return pulumi.get(self, "draw")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingRemoteLockoutSwitchResult(dict):
    def __init__(__self__, *,
                 locked: bool):
        """
        :param bool locked: True if power controls are disabled via the MT40's physical remote lockout switch.
        """
        pulumi.set(__self__, "locked", locked)

    @property
    @pulumi.getter
    def locked(self) -> bool:
        """
        True if power controls are disabled via the MT40's physical remote lockout switch.
        """
        return pulumi.get(self, "locked")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingTemperatureResult(dict):
    def __init__(__self__, *,
                 celsius: float,
                 fahrenheit: float):
        """
        :param float celsius: Temperature reading in degrees Celsius.
        :param float fahrenheit: Temperature reading in degrees Fahrenheit.
        """
        pulumi.set(__self__, "celsius", celsius)
        pulumi.set(__self__, "fahrenheit", fahrenheit)

    @property
    @pulumi.getter
    def celsius(self) -> float:
        """
        Temperature reading in degrees Celsius.
        """
        return pulumi.get(self, "celsius")

    @property
    @pulumi.getter
    def fahrenheit(self) -> float:
        """
        Temperature reading in degrees Fahrenheit.
        """
        return pulumi.get(self, "fahrenheit")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingTvocResult(dict):
    def __init__(__self__, *,
                 concentration: int):
        """
        :param int concentration: TVOC reading in micrograms per cubic meter.
        """
        pulumi.set(__self__, "concentration", concentration)

    @property
    @pulumi.getter
    def concentration(self) -> int:
        """
        TVOC reading in micrograms per cubic meter.
        """
        return pulumi.get(self, "concentration")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingVoltageResult(dict):
    def __init__(__self__, *,
                 level: float):
        """
        :param float level: Voltage reading in volts.
        """
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> float:
        """
        Voltage reading in volts.
        """
        return pulumi.get(self, "level")


@pulumi.output_type
class GetSensorReadingsLatestItemReadingWaterResult(dict):
    def __init__(__self__, *,
                 present: bool):
        """
        :param bool present: True if water is detected.
        """
        pulumi.set(__self__, "present", present)

    @property
    @pulumi.getter
    def present(self) -> bool:
        """
        True if water is detected.
        """
        return pulumi.get(self, "present")


@pulumi.output_type
class GetSmAdminsRolesItemResult(dict):
    def __init__(__self__, *,
                 name: str,
                 role_id: str,
                 scope: str,
                 tags: Sequence[str]):
        """
        :param str name: The name of the limited access role
        :param str role_id: The Id of the limited access role
        :param str scope: The scope of the limited access role
        :param Sequence[str] tags: The tags of the limited access role
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the limited access role
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        """
        The Id of the limited access role
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        The scope of the limited access role
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        The tags of the limited access role
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSmApnsCertItemResult(dict):
    def __init__(__self__, *,
                 certificate: str):
        """
        :param str certificate: Organization APNS Certificate used by devices to communication with Apple
        """
        pulumi.set(__self__, "certificate", certificate)

    @property
    @pulumi.getter
    def certificate(self) -> str:
        """
        Organization APNS Certificate used by devices to communication with Apple
        """
        return pulumi.get(self, "certificate")


@pulumi.output_type
class GetSmSentryPoliciesAssignmentsByNetworkItemResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSmSentryPoliciesAssignmentsByNetworkItemItemResult'],
                 meta: 'outputs.GetSmSentryPoliciesAssignmentsByNetworkItemMetaResult'):
        """
        :param Sequence['GetSmSentryPoliciesAssignmentsByNetworkItemItemArgs'] items: Sentry Group Policies for the Organization keyed by the Network or Locale Id the Policy belongs to
        :param 'GetSmSentryPoliciesAssignmentsByNetworkItemMetaArgs' meta: Metadata relevant to the paginated dataset
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "meta", meta)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSmSentryPoliciesAssignmentsByNetworkItemItemResult']:
        """
        Sentry Group Policies for the Organization keyed by the Network or Locale Id the Policy belongs to
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def meta(self) -> 'outputs.GetSmSentryPoliciesAssignmentsByNetworkItemMetaResult':
        """
        Metadata relevant to the paginated dataset
        """
        return pulumi.get(self, "meta")


@pulumi.output_type
class GetSmSentryPoliciesAssignmentsByNetworkItemItemResult(dict):
    def __init__(__self__, *,
                 network_id: str,
                 policies: Sequence['outputs.GetSmSentryPoliciesAssignmentsByNetworkItemItemPolicyResult']):
        """
        :param str network_id: The Id of the Network
        :param Sequence['GetSmSentryPoliciesAssignmentsByNetworkItemItemPolicyArgs'] policies: Array of Sentry Group Policies for the Network
        """
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "policies", policies)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        The Id of the Network
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetSmSentryPoliciesAssignmentsByNetworkItemItemPolicyResult']:
        """
        Array of Sentry Group Policies for the Network
        """
        return pulumi.get(self, "policies")


@pulumi.output_type
class GetSmSentryPoliciesAssignmentsByNetworkItemItemPolicyResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 group_number: str,
                 group_policy_id: str,
                 last_updated_at: str,
                 network_id: str,
                 policy_id: str,
                 priority: str,
                 scope: str,
                 sm_network_id: str,
                 tags: Sequence[str]):
        """
        :param str created_at: The creation time of the Sentry Policy
        :param str group_number: The number of the Group Policy
        :param str group_policy_id: The Id of the Group Policy. This is associated with the network specified by the networkId.
        :param str last_updated_at: The last update time of the Sentry Policy
        :param str network_id: The Id of the Network the Sentry Policy is associated with. In a locale, this should be the Wireless Group if present, otherwise the Wired Group.
        :param str policy_id: The Id of the Sentry Policy
        :param str priority: The priority of the Sentry Policy
        :param str scope: The scope of the Sentry Policy
        :param str sm_network_id: The Id of the Systems Manager Network the Sentry Policy is assigned to
        :param Sequence[str] tags: The tags of the Sentry Policy
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "group_number", group_number)
        pulumi.set(__self__, "group_policy_id", group_policy_id)
        pulumi.set(__self__, "last_updated_at", last_updated_at)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "sm_network_id", sm_network_id)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The creation time of the Sentry Policy
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="groupNumber")
    def group_number(self) -> str:
        """
        The number of the Group Policy
        """
        return pulumi.get(self, "group_number")

    @property
    @pulumi.getter(name="groupPolicyId")
    def group_policy_id(self) -> str:
        """
        The Id of the Group Policy. This is associated with the network specified by the networkId.
        """
        return pulumi.get(self, "group_policy_id")

    @property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> str:
        """
        The last update time of the Sentry Policy
        """
        return pulumi.get(self, "last_updated_at")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        The Id of the Network the Sentry Policy is associated with. In a locale, this should be the Wireless Group if present, otherwise the Wired Group.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        """
        The Id of the Sentry Policy
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        The priority of the Sentry Policy
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        The scope of the Sentry Policy
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="smNetworkId")
    def sm_network_id(self) -> str:
        """
        The Id of the Systems Manager Network the Sentry Policy is assigned to
        """
        return pulumi.get(self, "sm_network_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        The tags of the Sentry Policy
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSmSentryPoliciesAssignmentsByNetworkItemMetaResult(dict):
    def __init__(__self__, *,
                 counts: 'outputs.GetSmSentryPoliciesAssignmentsByNetworkItemMetaCountsResult'):
        """
        :param 'GetSmSentryPoliciesAssignmentsByNetworkItemMetaCountsArgs' counts: Counts relating to the paginated dataset
        """
        pulumi.set(__self__, "counts", counts)

    @property
    @pulumi.getter
    def counts(self) -> 'outputs.GetSmSentryPoliciesAssignmentsByNetworkItemMetaCountsResult':
        """
        Counts relating to the paginated dataset
        """
        return pulumi.get(self, "counts")


@pulumi.output_type
class GetSmSentryPoliciesAssignmentsByNetworkItemMetaCountsResult(dict):
    def __init__(__self__, *,
                 items: 'outputs.GetSmSentryPoliciesAssignmentsByNetworkItemMetaCountsItemsResult'):
        """
        :param 'GetSmSentryPoliciesAssignmentsByNetworkItemMetaCountsItemsArgs' items: Counts relating to the paginated items
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> 'outputs.GetSmSentryPoliciesAssignmentsByNetworkItemMetaCountsItemsResult':
        """
        Counts relating to the paginated items
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSmSentryPoliciesAssignmentsByNetworkItemMetaCountsItemsResult(dict):
    def __init__(__self__, *,
                 remaining: int,
                 total: int):
        """
        :param int remaining: The number of items in the dataset that are available on subsequent pages
        :param int total: The total number of items in the dataset
        """
        pulumi.set(__self__, "remaining", remaining)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def remaining(self) -> int:
        """
        The number of items in the dataset that are available on subsequent pages
        """
        return pulumi.get(self, "remaining")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        The total number of items in the dataset
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetSmVppAccountsItemResult(dict):
    def __init__(__self__, *,
                 allowed_admins: str,
                 assignable_network_ids: Sequence[str],
                 assignable_networks: str,
                 content_token: str,
                 email: str,
                 id: str,
                 last_force_synced_at: str,
                 last_synced_at: str,
                 name: str,
                 network_id_admins: str,
                 parsed_token: 'outputs.GetSmVppAccountsItemParsedTokenResult',
                 vpp_account_id: str,
                 vpp_location_id: str,
                 vpp_location_name: str,
                 vpp_service_token: str):
        """
        :param str allowed_admins: The allowed admins for the VPP account
        :param Sequence[str] assignable_network_ids: The network IDs of the assignable networks for the VPP account
        :param str assignable_networks: The assignable networks for the VPP account
        :param str content_token: The VPP service token
        :param str email: The email address associated with the VPP account
        :param str id: The id of the VPP Account
        :param str last_force_synced_at: The last time the VPP account was force synced
        :param str last_synced_at: The last time the VPP account was synced
        :param str name: The name of the VPP account
        :param str network_id_admins: The network IDs of the admins for the VPP account
        :param 'GetSmVppAccountsItemParsedTokenArgs' parsed_token: The parsed VPP service token
        :param str vpp_account_id: The id of the VPP Account
        :param str vpp_location_id: The VPP location ID
        :param str vpp_location_name: The VPP location name
        :param str vpp_service_token: The VPP Account's Service Token
        """
        pulumi.set(__self__, "allowed_admins", allowed_admins)
        pulumi.set(__self__, "assignable_network_ids", assignable_network_ids)
        pulumi.set(__self__, "assignable_networks", assignable_networks)
        pulumi.set(__self__, "content_token", content_token)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_force_synced_at", last_force_synced_at)
        pulumi.set(__self__, "last_synced_at", last_synced_at)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_id_admins", network_id_admins)
        pulumi.set(__self__, "parsed_token", parsed_token)
        pulumi.set(__self__, "vpp_account_id", vpp_account_id)
        pulumi.set(__self__, "vpp_location_id", vpp_location_id)
        pulumi.set(__self__, "vpp_location_name", vpp_location_name)
        pulumi.set(__self__, "vpp_service_token", vpp_service_token)

    @property
    @pulumi.getter(name="allowedAdmins")
    def allowed_admins(self) -> str:
        """
        The allowed admins for the VPP account
        """
        return pulumi.get(self, "allowed_admins")

    @property
    @pulumi.getter(name="assignableNetworkIds")
    def assignable_network_ids(self) -> Sequence[str]:
        """
        The network IDs of the assignable networks for the VPP account
        """
        return pulumi.get(self, "assignable_network_ids")

    @property
    @pulumi.getter(name="assignableNetworks")
    def assignable_networks(self) -> str:
        """
        The assignable networks for the VPP account
        """
        return pulumi.get(self, "assignable_networks")

    @property
    @pulumi.getter(name="contentToken")
    def content_token(self) -> str:
        """
        The VPP service token
        """
        return pulumi.get(self, "content_token")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email address associated with the VPP account
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the VPP Account
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastForceSyncedAt")
    def last_force_synced_at(self) -> str:
        """
        The last time the VPP account was force synced
        """
        return pulumi.get(self, "last_force_synced_at")

    @property
    @pulumi.getter(name="lastSyncedAt")
    def last_synced_at(self) -> str:
        """
        The last time the VPP account was synced
        """
        return pulumi.get(self, "last_synced_at")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the VPP account
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkIdAdmins")
    def network_id_admins(self) -> str:
        """
        The network IDs of the admins for the VPP account
        """
        return pulumi.get(self, "network_id_admins")

    @property
    @pulumi.getter(name="parsedToken")
    def parsed_token(self) -> 'outputs.GetSmVppAccountsItemParsedTokenResult':
        """
        The parsed VPP service token
        """
        return pulumi.get(self, "parsed_token")

    @property
    @pulumi.getter(name="vppAccountId")
    def vpp_account_id(self) -> str:
        """
        The id of the VPP Account
        """
        return pulumi.get(self, "vpp_account_id")

    @property
    @pulumi.getter(name="vppLocationId")
    def vpp_location_id(self) -> str:
        """
        The VPP location ID
        """
        return pulumi.get(self, "vpp_location_id")

    @property
    @pulumi.getter(name="vppLocationName")
    def vpp_location_name(self) -> str:
        """
        The VPP location name
        """
        return pulumi.get(self, "vpp_location_name")

    @property
    @pulumi.getter(name="vppServiceToken")
    def vpp_service_token(self) -> str:
        """
        The VPP Account's Service Token
        """
        return pulumi.get(self, "vpp_service_token")


@pulumi.output_type
class GetSmVppAccountsItemParsedTokenResult(dict):
    def __init__(__self__, *,
                 expires_at: str,
                 hashed_token: str,
                 org_name: str):
        """
        :param str expires_at: The expiration time of the token
        :param str hashed_token: The hashed token
        :param str org_name: The organization name
        """
        pulumi.set(__self__, "expires_at", expires_at)
        pulumi.set(__self__, "hashed_token", hashed_token)
        pulumi.set(__self__, "org_name", org_name)

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> str:
        """
        The expiration time of the token
        """
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter(name="hashedToken")
    def hashed_token(self) -> str:
        """
        The hashed token
        """
        return pulumi.get(self, "hashed_token")

    @property
    @pulumi.getter(name="orgName")
    def org_name(self) -> str:
        """
        The organization name
        """
        return pulumi.get(self, "org_name")


@pulumi.output_type
class GetSnmpItemResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 peer_ips: Sequence[str],
                 port: int,
                 v2_community_string: str,
                 v2c_enabled: bool,
                 v3_auth_mode: str,
                 v3_enabled: bool,
                 v3_priv_mode: str,
                 v3_user: str):
        """
        :param str hostname: The hostname of the SNMP server.
        :param Sequence[str] peer_ips: The list of IPv4 addresses that are allowed to access the SNMP server.
        :param int port: The port of the SNMP server.
        :param str v2_community_string: The community string for SNMP version 2c, if enabled.
        :param bool v2c_enabled: Boolean indicating whether SNMP version 2c is enabled for the organization.
        :param str v3_auth_mode: The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.
        :param bool v3_enabled: Boolean indicating whether SNMP version 3 is enabled for the organization.
        :param str v3_priv_mode: The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.
        :param str v3_user: The user for SNMP version 3, if enabled.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "peer_ips", peer_ips)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "v2_community_string", v2_community_string)
        pulumi.set(__self__, "v2c_enabled", v2c_enabled)
        pulumi.set(__self__, "v3_auth_mode", v3_auth_mode)
        pulumi.set(__self__, "v3_enabled", v3_enabled)
        pulumi.set(__self__, "v3_priv_mode", v3_priv_mode)
        pulumi.set(__self__, "v3_user", v3_user)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The hostname of the SNMP server.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="peerIps")
    def peer_ips(self) -> Sequence[str]:
        """
        The list of IPv4 addresses that are allowed to access the SNMP server.
        """
        return pulumi.get(self, "peer_ips")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of the SNMP server.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="v2CommunityString")
    def v2_community_string(self) -> str:
        """
        The community string for SNMP version 2c, if enabled.
        """
        return pulumi.get(self, "v2_community_string")

    @property
    @pulumi.getter(name="v2cEnabled")
    def v2c_enabled(self) -> bool:
        """
        Boolean indicating whether SNMP version 2c is enabled for the organization.
        """
        return pulumi.get(self, "v2c_enabled")

    @property
    @pulumi.getter(name="v3AuthMode")
    def v3_auth_mode(self) -> str:
        """
        The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.
        """
        return pulumi.get(self, "v3_auth_mode")

    @property
    @pulumi.getter(name="v3Enabled")
    def v3_enabled(self) -> bool:
        """
        Boolean indicating whether SNMP version 3 is enabled for the organization.
        """
        return pulumi.get(self, "v3_enabled")

    @property
    @pulumi.getter(name="v3PrivMode")
    def v3_priv_mode(self) -> str:
        """
        The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.
        """
        return pulumi.get(self, "v3_priv_mode")

    @property
    @pulumi.getter(name="v3User")
    def v3_user(self) -> str:
        """
        The user for SNMP version 3, if enabled.
        """
        return pulumi.get(self, "v3_user")


@pulumi.output_type
class GetSummaryTopAppliancesByUtilizationItemResult(dict):
    def __init__(__self__, *,
                 mac: str,
                 model: str,
                 name: str,
                 network: 'outputs.GetSummaryTopAppliancesByUtilizationItemNetworkResult',
                 serial: str,
                 utilization: 'outputs.GetSummaryTopAppliancesByUtilizationItemUtilizationResult'):
        """
        :param str mac: Mac address of the appliance
        :param str model: Model of the appliance
        :param str name: Name of the appliance
        :param 'GetSummaryTopAppliancesByUtilizationItemNetworkArgs' network: Network info
        :param str serial: Serial number of the appliance
        :param 'GetSummaryTopAppliancesByUtilizationItemUtilizationArgs' utilization: Utilization of the appliance
        """
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "utilization", utilization)

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        Mac address of the appliance
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model of the appliance
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the appliance
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetSummaryTopAppliancesByUtilizationItemNetworkResult':
        """
        Network info
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Serial number of the appliance
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def utilization(self) -> 'outputs.GetSummaryTopAppliancesByUtilizationItemUtilizationResult':
        """
        Utilization of the appliance
        """
        return pulumi.get(self, "utilization")


@pulumi.output_type
class GetSummaryTopAppliancesByUtilizationItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Network id
        :param str name: Network name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Network id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Network name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSummaryTopAppliancesByUtilizationItemUtilizationResult(dict):
    def __init__(__self__, *,
                 average: 'outputs.GetSummaryTopAppliancesByUtilizationItemUtilizationAverageResult'):
        """
        :param 'GetSummaryTopAppliancesByUtilizationItemUtilizationAverageArgs' average: Average utilization of the appliance
        """
        pulumi.set(__self__, "average", average)

    @property
    @pulumi.getter
    def average(self) -> 'outputs.GetSummaryTopAppliancesByUtilizationItemUtilizationAverageResult':
        """
        Average utilization of the appliance
        """
        return pulumi.get(self, "average")


@pulumi.output_type
class GetSummaryTopAppliancesByUtilizationItemUtilizationAverageResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Average percentage utilization of the appliance
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Average percentage utilization of the appliance
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetSummaryTopClientsByUsageItemResult(dict):
    def __init__(__self__, *,
                 id: str,
                 mac: str,
                 name: str,
                 network: 'outputs.GetSummaryTopClientsByUsageItemNetworkResult',
                 usage: 'outputs.GetSummaryTopClientsByUsageItemUsageResult'):
        """
        :param str id: ID of client
        :param str mac: MAC address of client
        :param str name: Name of client
        :param 'GetSummaryTopClientsByUsageItemUsageArgs' usage: Data usage information
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of client
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        MAC address of client
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of client
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetSummaryTopClientsByUsageItemNetworkResult':
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def usage(self) -> 'outputs.GetSummaryTopClientsByUsageItemUsageResult':
        """
        Data usage information
        """
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetSummaryTopClientsByUsageItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: ID of network
        :param str name: Name of network
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of network
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of network
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSummaryTopClientsByUsageItemUsageResult(dict):
    def __init__(__self__, *,
                 downstream: float,
                 percentage: float,
                 total: float,
                 upstream: float):
        """
        :param float downstream: Downstream data usage by client
        :param float percentage: Percentage of total data usage by client
        :param float total: Total data usage by client
        :param float upstream: Upstream data usage by client
        """
        pulumi.set(__self__, "downstream", downstream)
        pulumi.set(__self__, "percentage", percentage)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter
    def downstream(self) -> float:
        """
        Downstream data usage by client
        """
        return pulumi.get(self, "downstream")

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of total data usage by client
        """
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def total(self) -> float:
        """
        Total data usage by client
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def upstream(self) -> float:
        """
        Upstream data usage by client
        """
        return pulumi.get(self, "upstream")


@pulumi.output_type
class GetSummaryTopClientsManufacturersByUsageItemResult(dict):
    def __init__(__self__, *,
                 clients: 'outputs.GetSummaryTopClientsManufacturersByUsageItemClientsResult',
                 name: str,
                 usage: 'outputs.GetSummaryTopClientsManufacturersByUsageItemUsageResult'):
        """
        :param 'GetSummaryTopClientsManufacturersByUsageItemClientsArgs' clients: Clients info
        :param str name: Name of the manufacturer
        :param 'GetSummaryTopClientsManufacturersByUsageItemUsageArgs' usage: Clients usage
        """
        pulumi.set(__self__, "clients", clients)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def clients(self) -> 'outputs.GetSummaryTopClientsManufacturersByUsageItemClientsResult':
        """
        Clients info
        """
        return pulumi.get(self, "clients")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the manufacturer
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def usage(self) -> 'outputs.GetSummaryTopClientsManufacturersByUsageItemUsageResult':
        """
        Clients usage
        """
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetSummaryTopClientsManufacturersByUsageItemClientsResult(dict):
    def __init__(__self__, *,
                 counts: 'outputs.GetSummaryTopClientsManufacturersByUsageItemClientsCountsResult'):
        """
        :param 'GetSummaryTopClientsManufacturersByUsageItemClientsCountsArgs' counts: Counts of clients
        """
        pulumi.set(__self__, "counts", counts)

    @property
    @pulumi.getter
    def counts(self) -> 'outputs.GetSummaryTopClientsManufacturersByUsageItemClientsCountsResult':
        """
        Counts of clients
        """
        return pulumi.get(self, "counts")


@pulumi.output_type
class GetSummaryTopClientsManufacturersByUsageItemClientsCountsResult(dict):
    def __init__(__self__, *,
                 total: int):
        """
        :param int total: Total counts of clients
        """
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total counts of clients
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetSummaryTopClientsManufacturersByUsageItemUsageResult(dict):
    def __init__(__self__, *,
                 downstream: float,
                 total: float,
                 upstream: float):
        """
        :param float downstream: Downstream data usage by client
        :param float total: Total data usage by client
        :param float upstream: Upstream data usage by client
        """
        pulumi.set(__self__, "downstream", downstream)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter
    def downstream(self) -> float:
        """
        Downstream data usage by client
        """
        return pulumi.get(self, "downstream")

    @property
    @pulumi.getter
    def total(self) -> float:
        """
        Total data usage by client
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def upstream(self) -> float:
        """
        Upstream data usage by client
        """
        return pulumi.get(self, "upstream")


@pulumi.output_type
class GetSummaryTopDevicesByUsageItemResult(dict):
    def __init__(__self__, *,
                 clients: 'outputs.GetSummaryTopDevicesByUsageItemClientsResult',
                 mac: str,
                 model: str,
                 name: str,
                 network: 'outputs.GetSummaryTopDevicesByUsageItemNetworkResult',
                 product_type: str,
                 serial: str,
                 usage: 'outputs.GetSummaryTopDevicesByUsageItemUsageResult'):
        """
        :param 'GetSummaryTopDevicesByUsageItemClientsArgs' clients: Clients
        :param str mac: Mac address of the device
        :param str model: Model of the device
        :param str name: Name of the device
        :param 'GetSummaryTopDevicesByUsageItemNetworkArgs' network: Network info
        :param str product_type: Product type of the device
        :param str serial: Serial number of the device
        :param 'GetSummaryTopDevicesByUsageItemUsageArgs' usage: Data usage of the device
        """
        pulumi.set(__self__, "clients", clients)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def clients(self) -> 'outputs.GetSummaryTopDevicesByUsageItemClientsResult':
        """
        Clients
        """
        return pulumi.get(self, "clients")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        Mac address of the device
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model of the device
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the device
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetSummaryTopDevicesByUsageItemNetworkResult':
        """
        Network info
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        Product type of the device
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Serial number of the device
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def usage(self) -> 'outputs.GetSummaryTopDevicesByUsageItemUsageResult':
        """
        Data usage of the device
        """
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetSummaryTopDevicesByUsageItemClientsResult(dict):
    def __init__(__self__, *,
                 counts: 'outputs.GetSummaryTopDevicesByUsageItemClientsCountsResult'):
        """
        :param 'GetSummaryTopDevicesByUsageItemClientsCountsArgs' counts: Counts of clients
        """
        pulumi.set(__self__, "counts", counts)

    @property
    @pulumi.getter
    def counts(self) -> 'outputs.GetSummaryTopDevicesByUsageItemClientsCountsResult':
        """
        Counts of clients
        """
        return pulumi.get(self, "counts")


@pulumi.output_type
class GetSummaryTopDevicesByUsageItemClientsCountsResult(dict):
    def __init__(__self__, *,
                 total: int):
        """
        :param int total: Total counts of clients
        """
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total counts of clients
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetSummaryTopDevicesByUsageItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Network id
        :param str name: Network name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Network id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Network name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSummaryTopDevicesByUsageItemUsageResult(dict):
    def __init__(__self__, *,
                 percentage: float,
                 total: float):
        """
        :param float percentage: Data usage of the device by percentage
        :param float total: Total data usage of the device
        """
        pulumi.set(__self__, "percentage", percentage)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Data usage of the device by percentage
        """
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def total(self) -> float:
        """
        Total data usage of the device
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetSummaryTopDevicesModelsByUsageItemResult(dict):
    def __init__(__self__, *,
                 count: int,
                 model: str,
                 usage: 'outputs.GetSummaryTopDevicesModelsByUsageItemUsageResult'):
        """
        :param int count: Total number of devices per model
        :param str model: The device model
        :param 'GetSummaryTopDevicesModelsByUsageItemUsageArgs' usage: Usage info in megabytes
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Total number of devices per model
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        The device model
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def usage(self) -> 'outputs.GetSummaryTopDevicesModelsByUsageItemUsageResult':
        """
        Usage info in megabytes
        """
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetSummaryTopDevicesModelsByUsageItemUsageResult(dict):
    def __init__(__self__, *,
                 average: float,
                 total: float):
        """
        :param float average: Average usage in megabytes
        :param float total: Total usage in megabytes
        """
        pulumi.set(__self__, "average", average)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def average(self) -> float:
        """
        Average usage in megabytes
        """
        return pulumi.get(self, "average")

    @property
    @pulumi.getter
    def total(self) -> float:
        """
        Total usage in megabytes
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetSummaryTopNetworksByStatusItemResult(dict):
    def __init__(__self__, *,
                 clients: 'outputs.GetSummaryTopNetworksByStatusItemClientsResult',
                 devices: 'outputs.GetSummaryTopNetworksByStatusItemDevicesResult',
                 name: str,
                 network_id: str,
                 product_types: Sequence[str],
                 statuses: 'outputs.GetSummaryTopNetworksByStatusItemStatusesResult',
                 tags: Sequence[str],
                 url: str):
        """
        :param 'GetSummaryTopNetworksByStatusItemClientsArgs' clients: Network clients data
        :param 'GetSummaryTopNetworksByStatusItemDevicesArgs' devices: Network device information
        :param str name: Network name
        :param str network_id: Network identifier
        :param Sequence[str] product_types: Product types in network
        :param 'GetSummaryTopNetworksByStatusItemStatusesArgs' statuses: Network device statuses
        :param Sequence[str] tags: Network tags
        :param str url: Network clients list URL
        """
        pulumi.set(__self__, "clients", clients)
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "product_types", product_types)
        pulumi.set(__self__, "statuses", statuses)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def clients(self) -> 'outputs.GetSummaryTopNetworksByStatusItemClientsResult':
        """
        Network clients data
        """
        return pulumi.get(self, "clients")

    @property
    @pulumi.getter
    def devices(self) -> 'outputs.GetSummaryTopNetworksByStatusItemDevicesResult':
        """
        Network device information
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Network name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        Network identifier
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="productTypes")
    def product_types(self) -> Sequence[str]:
        """
        Product types in network
        """
        return pulumi.get(self, "product_types")

    @property
    @pulumi.getter
    def statuses(self) -> 'outputs.GetSummaryTopNetworksByStatusItemStatusesResult':
        """
        Network device statuses
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        Network tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Network clients list URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSummaryTopNetworksByStatusItemClientsResult(dict):
    def __init__(__self__, *,
                 counts: 'outputs.GetSummaryTopNetworksByStatusItemClientsCountsResult',
                 usage: 'outputs.GetSummaryTopNetworksByStatusItemClientsUsageResult'):
        """
        :param 'GetSummaryTopNetworksByStatusItemClientsCountsArgs' counts: Network client counts
        :param 'GetSummaryTopNetworksByStatusItemClientsUsageArgs' usage: Network client usage data
        """
        pulumi.set(__self__, "counts", counts)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def counts(self) -> 'outputs.GetSummaryTopNetworksByStatusItemClientsCountsResult':
        """
        Network client counts
        """
        return pulumi.get(self, "counts")

    @property
    @pulumi.getter
    def usage(self) -> 'outputs.GetSummaryTopNetworksByStatusItemClientsUsageResult':
        """
        Network client usage data
        """
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetSummaryTopNetworksByStatusItemClientsCountsResult(dict):
    def __init__(__self__, *,
                 total: int):
        """
        :param int total: Total count of clients in network
        """
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total count of clients in network
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetSummaryTopNetworksByStatusItemClientsUsageResult(dict):
    def __init__(__self__, *,
                 downstream: float,
                 upstream: float):
        """
        :param float downstream: Total downstream usage in network, in KB
        :param float upstream: Total upstream usage in network, in KB
        """
        pulumi.set(__self__, "downstream", downstream)
        pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter
    def downstream(self) -> float:
        """
        Total downstream usage in network, in KB
        """
        return pulumi.get(self, "downstream")

    @property
    @pulumi.getter
    def upstream(self) -> float:
        """
        Total upstream usage in network, in KB
        """
        return pulumi.get(self, "upstream")


@pulumi.output_type
class GetSummaryTopNetworksByStatusItemDevicesResult(dict):
    def __init__(__self__, *,
                 by_product_types: Sequence['outputs.GetSummaryTopNetworksByStatusItemDevicesByProductTypeResult']):
        """
        :param Sequence['GetSummaryTopNetworksByStatusItemDevicesByProductTypeArgs'] by_product_types: URLs by product type
        """
        pulumi.set(__self__, "by_product_types", by_product_types)

    @property
    @pulumi.getter(name="byProductTypes")
    def by_product_types(self) -> Sequence['outputs.GetSummaryTopNetworksByStatusItemDevicesByProductTypeResult']:
        """
        URLs by product type
        """
        return pulumi.get(self, "by_product_types")


@pulumi.output_type
class GetSummaryTopNetworksByStatusItemDevicesByProductTypeResult(dict):
    def __init__(__self__, *,
                 product_type: str,
                 url: str):
        """
        :param str product_type: Product type
        :param str url: URL to clients list for the relevant product type
        """
        pulumi.set(__self__, "product_type", product_type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        Product type
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL to clients list for the relevant product type
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSummaryTopNetworksByStatusItemStatusesResult(dict):
    def __init__(__self__, *,
                 by_product_types: Sequence['outputs.GetSummaryTopNetworksByStatusItemStatusesByProductTypeResult'],
                 overall: str):
        """
        :param Sequence['GetSummaryTopNetworksByStatusItemStatusesByProductTypeArgs'] by_product_types: List of status counts by product type
        :param str overall: Overall status of network
        """
        pulumi.set(__self__, "by_product_types", by_product_types)
        pulumi.set(__self__, "overall", overall)

    @property
    @pulumi.getter(name="byProductTypes")
    def by_product_types(self) -> Sequence['outputs.GetSummaryTopNetworksByStatusItemStatusesByProductTypeResult']:
        """
        List of status counts by product type
        """
        return pulumi.get(self, "by_product_types")

    @property
    @pulumi.getter
    def overall(self) -> str:
        """
        Overall status of network
        """
        return pulumi.get(self, "overall")


@pulumi.output_type
class GetSummaryTopNetworksByStatusItemStatusesByProductTypeResult(dict):
    def __init__(__self__, *,
                 counts: 'outputs.GetSummaryTopNetworksByStatusItemStatusesByProductTypeCountsResult',
                 product_type: str):
        """
        :param 'GetSummaryTopNetworksByStatusItemStatusesByProductTypeCountsArgs' counts: Counts of devices by status
        :param str product_type: Product type
        """
        pulumi.set(__self__, "counts", counts)
        pulumi.set(__self__, "product_type", product_type)

    @property
    @pulumi.getter
    def counts(self) -> 'outputs.GetSummaryTopNetworksByStatusItemStatusesByProductTypeCountsResult':
        """
        Counts of devices by status
        """
        return pulumi.get(self, "counts")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> str:
        """
        Product type
        """
        return pulumi.get(self, "product_type")


@pulumi.output_type
class GetSummaryTopNetworksByStatusItemStatusesByProductTypeCountsResult(dict):
    def __init__(__self__, *,
                 alerting: int,
                 dormant: int,
                 offline: int,
                 online: int):
        """
        :param int alerting: Count of alerting devices
        :param int dormant: Count of dormant devices
        :param int offline: Count of offline devices
        :param int online: Count of online devices
        """
        pulumi.set(__self__, "alerting", alerting)
        pulumi.set(__self__, "dormant", dormant)
        pulumi.set(__self__, "offline", offline)
        pulumi.set(__self__, "online", online)

    @property
    @pulumi.getter
    def alerting(self) -> int:
        """
        Count of alerting devices
        """
        return pulumi.get(self, "alerting")

    @property
    @pulumi.getter
    def dormant(self) -> int:
        """
        Count of dormant devices
        """
        return pulumi.get(self, "dormant")

    @property
    @pulumi.getter
    def offline(self) -> int:
        """
        Count of offline devices
        """
        return pulumi.get(self, "offline")

    @property
    @pulumi.getter
    def online(self) -> int:
        """
        Count of online devices
        """
        return pulumi.get(self, "online")


@pulumi.output_type
class GetSummaryTopSsidsByUsageItemResult(dict):
    def __init__(__self__, *,
                 clients: 'outputs.GetSummaryTopSsidsByUsageItemClientsResult',
                 name: str,
                 usage: 'outputs.GetSummaryTopSsidsByUsageItemUsageResult'):
        """
        :param 'GetSummaryTopSsidsByUsageItemClientsArgs' clients: Clients info of the SSID
        :param str name: Name of the SSID
        :param 'GetSummaryTopSsidsByUsageItemUsageArgs' usage: Date usage of the SSID, in megabytes
        """
        pulumi.set(__self__, "clients", clients)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def clients(self) -> 'outputs.GetSummaryTopSsidsByUsageItemClientsResult':
        """
        Clients info of the SSID
        """
        return pulumi.get(self, "clients")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the SSID
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def usage(self) -> 'outputs.GetSummaryTopSsidsByUsageItemUsageResult':
        """
        Date usage of the SSID, in megabytes
        """
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetSummaryTopSsidsByUsageItemClientsResult(dict):
    def __init__(__self__, *,
                 counts: 'outputs.GetSummaryTopSsidsByUsageItemClientsCountsResult'):
        """
        :param 'GetSummaryTopSsidsByUsageItemClientsCountsArgs' counts: Counts of the clients
        """
        pulumi.set(__self__, "counts", counts)

    @property
    @pulumi.getter
    def counts(self) -> 'outputs.GetSummaryTopSsidsByUsageItemClientsCountsResult':
        """
        Counts of the clients
        """
        return pulumi.get(self, "counts")


@pulumi.output_type
class GetSummaryTopSsidsByUsageItemClientsCountsResult(dict):
    def __init__(__self__, *,
                 total: int):
        """
        :param int total: Total counts of the clients
        """
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total counts of the clients
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetSummaryTopSsidsByUsageItemUsageResult(dict):
    def __init__(__self__, *,
                 downstream: float,
                 percentage: float,
                 total: float,
                 upstream: float):
        """
        :param float downstream: Downstream usage of the SSID
        :param float percentage: Percentage usage of the SSID
        :param float total: Total usage of the SSID
        :param float upstream: Upstream usage of the SSID
        """
        pulumi.set(__self__, "downstream", downstream)
        pulumi.set(__self__, "percentage", percentage)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter
    def downstream(self) -> float:
        """
        Downstream usage of the SSID
        """
        return pulumi.get(self, "downstream")

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage usage of the SSID
        """
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def total(self) -> float:
        """
        Total usage of the SSID
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def upstream(self) -> float:
        """
        Upstream usage of the SSID
        """
        return pulumi.get(self, "upstream")


@pulumi.output_type
class GetSummaryTopSwitchesByEnergyUsageItemResult(dict):
    def __init__(__self__, *,
                 mac: str,
                 model: str,
                 name: str,
                 network: 'outputs.GetSummaryTopSwitchesByEnergyUsageItemNetworkResult',
                 usage: 'outputs.GetSummaryTopSwitchesByEnergyUsageItemUsageResult'):
        """
        :param str mac: Mac address of the switch
        :param str model: Model of the switch
        :param str name: Name of the switch
        :param 'GetSummaryTopSwitchesByEnergyUsageItemNetworkArgs' network: Network info
        :param 'GetSummaryTopSwitchesByEnergyUsageItemUsageArgs' usage: Energy usage of the switch
        """
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        Mac address of the switch
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Model of the switch
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the switch
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetSummaryTopSwitchesByEnergyUsageItemNetworkResult':
        """
        Network info
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def usage(self) -> 'outputs.GetSummaryTopSwitchesByEnergyUsageItemUsageResult':
        """
        Energy usage of the switch
        """
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetSummaryTopSwitchesByEnergyUsageItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Network id
        :param str name: Network name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Network id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Network name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSummaryTopSwitchesByEnergyUsageItemUsageResult(dict):
    def __init__(__self__, *,
                 total: float):
        """
        :param float total: Total energy usage of the switch
        """
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def total(self) -> float:
        """
        Total energy usage of the switch
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetSwitchPortsBySwitchItemResult(dict):
    def __init__(__self__, *,
                 mac: str,
                 model: str,
                 name: str,
                 network: 'outputs.GetSwitchPortsBySwitchItemNetworkResult',
                 ports: Sequence['outputs.GetSwitchPortsBySwitchItemPortResult'],
                 serial: str):
        """
        :param str mac: The MAC address of the switch.
        :param str model: The model of the switch.
        :param str name: The name of the switch.
        :param 'GetSwitchPortsBySwitchItemNetworkArgs' network: Identifying information of the switch's network.
        :param Sequence['GetSwitchPortsBySwitchItemPortArgs'] ports: Ports belonging to the switch
        :param str serial: The serial number of the switch.
        """
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        The MAC address of the switch.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        The model of the switch.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the switch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetSwitchPortsBySwitchItemNetworkResult':
        """
        Identifying information of the switch's network.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetSwitchPortsBySwitchItemPortResult']:
        """
        Ports belonging to the switch
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The serial number of the switch.
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetSwitchPortsBySwitchItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: The ID of the network.
        :param str name: The name of the network.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the network.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the network.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSwitchPortsBySwitchItemPortResult(dict):
    def __init__(__self__, *,
                 access_policy_type: str,
                 allowed_vlans: str,
                 enabled: bool,
                 link_negotiation: str,
                 name: str,
                 poe_enabled: bool,
                 port_id: str,
                 rstp_enabled: bool,
                 sticky_mac_allow_list_limit: int,
                 sticky_mac_allow_lists: Sequence[str],
                 stp_guard: str,
                 tags: Sequence[str],
                 type: str,
                 vlan: int,
                 voice_vlan: int):
        """
        :param str access_policy_type: The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        :param str allowed_vlans: The VLANs allowed on the switch port. Only applicable to trunk ports.
        :param bool enabled: The status of the switch port.
        :param str link_negotiation: The link speed for the switch port.
        :param str name: The name of the switch port.
        :param bool poe_enabled: The PoE status of the switch port.
        :param str port_id: The identifier of the switch port.
        :param bool rstp_enabled: The rapid spanning tree protocol status.
        :param int sticky_mac_allow_list_limit: The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        :param Sequence[str] sticky_mac_allow_lists: The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        :param str stp_guard: The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        :param Sequence[str] tags: The list of tags of the switch port.
        :param str type: The type of the switch port ('trunk' or 'access').
        :param int vlan: The VLAN of the switch port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        :param int voice_vlan: The voice VLAN of the switch port. Only applicable to access ports.
        """
        pulumi.set(__self__, "access_policy_type", access_policy_type)
        pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "link_negotiation", link_negotiation)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "poe_enabled", poe_enabled)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "rstp_enabled", rstp_enabled)
        pulumi.set(__self__, "sticky_mac_allow_list_limit", sticky_mac_allow_list_limit)
        pulumi.set(__self__, "sticky_mac_allow_lists", sticky_mac_allow_lists)
        pulumi.set(__self__, "stp_guard", stp_guard)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vlan", vlan)
        pulumi.set(__self__, "voice_vlan", voice_vlan)

    @property
    @pulumi.getter(name="accessPolicyType")
    def access_policy_type(self) -> str:
        """
        The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        """
        return pulumi.get(self, "access_policy_type")

    @property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> str:
        """
        The VLANs allowed on the switch port. Only applicable to trunk ports.
        """
        return pulumi.get(self, "allowed_vlans")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        The status of the switch port.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="linkNegotiation")
    def link_negotiation(self) -> str:
        """
        The link speed for the switch port.
        """
        return pulumi.get(self, "link_negotiation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the switch port.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="poeEnabled")
    def poe_enabled(self) -> bool:
        """
        The PoE status of the switch port.
        """
        return pulumi.get(self, "poe_enabled")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        """
        The identifier of the switch port.
        """
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="rstpEnabled")
    def rstp_enabled(self) -> bool:
        """
        The rapid spanning tree protocol status.
        """
        return pulumi.get(self, "rstp_enabled")

    @property
    @pulumi.getter(name="stickyMacAllowListLimit")
    def sticky_mac_allow_list_limit(self) -> int:
        """
        The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        """
        return pulumi.get(self, "sticky_mac_allow_list_limit")

    @property
    @pulumi.getter(name="stickyMacAllowLists")
    def sticky_mac_allow_lists(self) -> Sequence[str]:
        """
        The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        """
        return pulumi.get(self, "sticky_mac_allow_lists")

    @property
    @pulumi.getter(name="stpGuard")
    def stp_guard(self) -> str:
        """
        The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        """
        return pulumi.get(self, "stp_guard")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        The list of tags of the switch port.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the switch port ('trunk' or 'access').
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        The VLAN of the switch port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> int:
        """
        The voice VLAN of the switch port. Only applicable to access ports.
        """
        return pulumi.get(self, "voice_vlan")


@pulumi.output_type
class GetUplinksStatusesItemResult(dict):
    def __init__(__self__, *,
                 high_availability: 'outputs.GetUplinksStatusesItemHighAvailabilityResult',
                 last_reported_at: str,
                 model: str,
                 network_id: str,
                 serial: str,
                 uplinks: Sequence['outputs.GetUplinksStatusesItemUplinkResult']):
        """
        :param 'GetUplinksStatusesItemHighAvailabilityArgs' high_availability: Device High Availability Capabilities
        :param str last_reported_at: Last reported time for the device
        :param str model: The uplink model
        :param str network_id: Network identifier
        :param str serial: The uplink serial
        :param Sequence['GetUplinksStatusesItemUplinkArgs'] uplinks: Uplinks
        """
        pulumi.set(__self__, "high_availability", high_availability)
        pulumi.set(__self__, "last_reported_at", last_reported_at)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "uplinks", uplinks)

    @property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> 'outputs.GetUplinksStatusesItemHighAvailabilityResult':
        """
        Device High Availability Capabilities
        """
        return pulumi.get(self, "high_availability")

    @property
    @pulumi.getter(name="lastReportedAt")
    def last_reported_at(self) -> str:
        """
        Last reported time for the device
        """
        return pulumi.get(self, "last_reported_at")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        The uplink model
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        Network identifier
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The uplink serial
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def uplinks(self) -> Sequence['outputs.GetUplinksStatusesItemUplinkResult']:
        """
        Uplinks
        """
        return pulumi.get(self, "uplinks")


@pulumi.output_type
class GetUplinksStatusesItemHighAvailabilityResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 role: str):
        """
        :param bool enabled: Indicates whether High Availability is enabled for the device. For devices that do not support HA, this will be 'false'
        :param str role: The HA role of the device on the network. For devices that do not support HA, this will be 'primary'
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Indicates whether High Availability is enabled for the device. For devices that do not support HA, this will be 'false'
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The HA role of the device on the network. For devices that do not support HA, this will be 'primary'
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetUplinksStatusesItemUplinkResult(dict):
    def __init__(__self__, *,
                 apn: str,
                 connection_type: str,
                 dns1: str,
                 dns2: str,
                 gateway: str,
                 iccid: str,
                 interface: str,
                 ip: str,
                 ip_assigned_by: str,
                 primary_dns: str,
                 provider: str,
                 public_ip: str,
                 secondary_dns: str,
                 signal_stat: 'outputs.GetUplinksStatusesItemUplinkSignalStatResult',
                 signal_type: str,
                 status: str):
        """
        :param str apn: Access Point Name
        :param str connection_type: Connection Type
        :param str dns1: Primary DNS IP
        :param str dns2: Secondary DNS IP
        :param str gateway: Gateway IP
        :param str iccid: Integrated Circuit Card Identification Number
        :param str interface: Uplink interface
        :param str ip: Uplink IP
        :param str ip_assigned_by: The way in which the IP is assigned
        :param str primary_dns: Primary DNS IP
        :param str provider: Network Provider
        :param str public_ip: Public IP
        :param str secondary_dns: Secondary DNS IP
        :param 'GetUplinksStatusesItemUplinkSignalStatArgs' signal_stat: Tower Signal Status
        :param str signal_type: Signal Type
        :param str status: Uplink status
        """
        pulumi.set(__self__, "apn", apn)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "dns1", dns1)
        pulumi.set(__self__, "dns2", dns2)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "iccid", iccid)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip_assigned_by", ip_assigned_by)
        pulumi.set(__self__, "primary_dns", primary_dns)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "secondary_dns", secondary_dns)
        pulumi.set(__self__, "signal_stat", signal_stat)
        pulumi.set(__self__, "signal_type", signal_type)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def apn(self) -> str:
        """
        Access Point Name
        """
        return pulumi.get(self, "apn")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        """
        Connection Type
        """
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def dns1(self) -> str:
        """
        Primary DNS IP
        """
        return pulumi.get(self, "dns1")

    @property
    @pulumi.getter
    def dns2(self) -> str:
        """
        Secondary DNS IP
        """
        return pulumi.get(self, "dns2")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        Gateway IP
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def iccid(self) -> str:
        """
        Integrated Circuit Card Identification Number
        """
        return pulumi.get(self, "iccid")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Uplink interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Uplink IP
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipAssignedBy")
    def ip_assigned_by(self) -> str:
        """
        The way in which the IP is assigned
        """
        return pulumi.get(self, "ip_assigned_by")

    @property
    @pulumi.getter(name="primaryDns")
    def primary_dns(self) -> str:
        """
        Primary DNS IP
        """
        return pulumi.get(self, "primary_dns")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        Network Provider
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        Public IP
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="secondaryDns")
    def secondary_dns(self) -> str:
        """
        Secondary DNS IP
        """
        return pulumi.get(self, "secondary_dns")

    @property
    @pulumi.getter(name="signalStat")
    def signal_stat(self) -> 'outputs.GetUplinksStatusesItemUplinkSignalStatResult':
        """
        Tower Signal Status
        """
        return pulumi.get(self, "signal_stat")

    @property
    @pulumi.getter(name="signalType")
    def signal_type(self) -> str:
        """
        Signal Type
        """
        return pulumi.get(self, "signal_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Uplink status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetUplinksStatusesItemUplinkSignalStatResult(dict):
    def __init__(__self__, *,
                 rsrp: str,
                 rsrq: str):
        """
        :param str rsrp: Reference Signal Received Power
        :param str rsrq: Reference Signal Received Quality
        """
        pulumi.set(__self__, "rsrp", rsrp)
        pulumi.set(__self__, "rsrq", rsrq)

    @property
    @pulumi.getter
    def rsrp(self) -> str:
        """
        Reference Signal Received Power
        """
        return pulumi.get(self, "rsrp")

    @property
    @pulumi.getter
    def rsrq(self) -> str:
        """
        Reference Signal Received Quality
        """
        return pulumi.get(self, "rsrq")


@pulumi.output_type
class GetWebhooksCallbacksStatusesItemResult(dict):
    def __init__(__self__, *,
                 callback_id: str,
                 created_by: 'outputs.GetWebhooksCallbacksStatusesItemCreatedByResult',
                 errors: Sequence[str],
                 status: str,
                 webhook: 'outputs.GetWebhooksCallbacksStatusesItemWebhookResult'):
        """
        :param str callback_id: The ID of the callback
        :param 'GetWebhooksCallbacksStatusesItemCreatedByArgs' created_by: Information around who initiated the callback
        :param Sequence[str] errors: The errors returned by the callback
        :param str status: The status of the callback
        :param 'GetWebhooksCallbacksStatusesItemWebhookArgs' webhook: The webhook receiver used by the callback to send results
        """
        pulumi.set(__self__, "callback_id", callback_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="callbackId")
    def callback_id(self) -> str:
        """
        The ID of the callback
        """
        return pulumi.get(self, "callback_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> 'outputs.GetWebhooksCallbacksStatusesItemCreatedByResult':
        """
        Information around who initiated the callback
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def errors(self) -> Sequence[str]:
        """
        The errors returned by the callback
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the callback
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def webhook(self) -> 'outputs.GetWebhooksCallbacksStatusesItemWebhookResult':
        """
        The webhook receiver used by the callback to send results
        """
        return pulumi.get(self, "webhook")


@pulumi.output_type
class GetWebhooksCallbacksStatusesItemCreatedByResult(dict):
    def __init__(__self__, *,
                 admin_id: str):
        """
        :param str admin_id: The ID of the user who initiated the callback
        """
        pulumi.set(__self__, "admin_id", admin_id)

    @property
    @pulumi.getter(name="adminId")
    def admin_id(self) -> str:
        """
        The ID of the user who initiated the callback
        """
        return pulumi.get(self, "admin_id")


@pulumi.output_type
class GetWebhooksCallbacksStatusesItemWebhookResult(dict):
    def __init__(__self__, *,
                 http_server: 'outputs.GetWebhooksCallbacksStatusesItemWebhookHttpServerResult',
                 payload_template: 'outputs.GetWebhooksCallbacksStatusesItemWebhookPayloadTemplateResult',
                 sent_at: str,
                 url: str):
        """
        :param 'GetWebhooksCallbacksStatusesItemWebhookHttpServerArgs' http_server: The webhook receiver used for the callback webhook
        :param 'GetWebhooksCallbacksStatusesItemWebhookPayloadTemplateArgs' payload_template: The payload template of the webhook used for the callback
        :param str sent_at: The timestamp the callback was sent to the webhook receiver
        :param str url: The webhook receiver URL where the callback will be sent
        """
        pulumi.set(__self__, "http_server", http_server)
        pulumi.set(__self__, "payload_template", payload_template)
        pulumi.set(__self__, "sent_at", sent_at)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="httpServer")
    def http_server(self) -> 'outputs.GetWebhooksCallbacksStatusesItemWebhookHttpServerResult':
        """
        The webhook receiver used for the callback webhook
        """
        return pulumi.get(self, "http_server")

    @property
    @pulumi.getter(name="payloadTemplate")
    def payload_template(self) -> 'outputs.GetWebhooksCallbacksStatusesItemWebhookPayloadTemplateResult':
        """
        The payload template of the webhook used for the callback
        """
        return pulumi.get(self, "payload_template")

    @property
    @pulumi.getter(name="sentAt")
    def sent_at(self) -> str:
        """
        The timestamp the callback was sent to the webhook receiver
        """
        return pulumi.get(self, "sent_at")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The webhook receiver URL where the callback will be sent
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetWebhooksCallbacksStatusesItemWebhookHttpServerResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: The webhook receiver ID that will receive information
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The webhook receiver ID that will receive information
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetWebhooksCallbacksStatusesItemWebhookPayloadTemplateResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: The ID of the payload template
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the payload template
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetWebhooksLogsItemResult(dict):
    def __init__(__self__, *,
                 alert_type: str,
                 logged_at: str,
                 network_id: str,
                 organization_id: str,
                 response_code: int,
                 response_duration: int,
                 sent_at: str,
                 url: str):
        """
        :param str alert_type: Type of alert that the webhook is delivering
        :param str logged_at: When the webhook log was created, in ISO8601 format
        :param str network_id: Network ID for the webhook log
        :param str organization_id: ID for the webhook log's organization
        :param int response_code: Response code from the webhook
        :param int response_duration: Duration of the response, in milliseconds
        :param str sent_at: When the webhook was sent, in ISO8601 format
        :param str url: URL where the webhook was sent
        """
        pulumi.set(__self__, "alert_type", alert_type)
        pulumi.set(__self__, "logged_at", logged_at)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "response_code", response_code)
        pulumi.set(__self__, "response_duration", response_duration)
        pulumi.set(__self__, "sent_at", sent_at)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> str:
        """
        Type of alert that the webhook is delivering
        """
        return pulumi.get(self, "alert_type")

    @property
    @pulumi.getter(name="loggedAt")
    def logged_at(self) -> str:
        """
        When the webhook log was created, in ISO8601 format
        """
        return pulumi.get(self, "logged_at")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        Network ID for the webhook log
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        ID for the webhook log's organization
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> int:
        """
        Response code from the webhook
        """
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responseDuration")
    def response_duration(self) -> int:
        """
        Duration of the response, in milliseconds
        """
        return pulumi.get(self, "response_duration")

    @property
    @pulumi.getter(name="sentAt")
    def sent_at(self) -> str:
        """
        When the webhook was sent, in ISO8601 format
        """
        return pulumi.get(self, "sent_at")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL where the webhook was sent
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationByDeviceItemResult(dict):
    def __init__(__self__, *,
                 by_bands: Sequence['outputs.GetWirelessDevicesChannelUtilizationByDeviceItemByBandResult'],
                 mac: str,
                 network: 'outputs.GetWirelessDevicesChannelUtilizationByDeviceItemNetworkResult',
                 serial: str):
        """
        :param Sequence['GetWirelessDevicesChannelUtilizationByDeviceItemByBandArgs'] by_bands: Channel utilization broken down by band.
        :param str mac: The MAC address of the device.
        :param 'GetWirelessDevicesChannelUtilizationByDeviceItemNetworkArgs' network: Network for the given utilization metrics.
        :param str serial: The serial number for the device.
        """
        pulumi.set(__self__, "by_bands", by_bands)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter(name="byBands")
    def by_bands(self) -> Sequence['outputs.GetWirelessDevicesChannelUtilizationByDeviceItemByBandResult']:
        """
        Channel utilization broken down by band.
        """
        return pulumi.get(self, "by_bands")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        The MAC address of the device.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetWirelessDevicesChannelUtilizationByDeviceItemNetworkResult':
        """
        Network for the given utilization metrics.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The serial number for the device.
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationByDeviceItemByBandResult(dict):
    def __init__(__self__, *,
                 band: str,
                 non_wifi: 'outputs.GetWirelessDevicesChannelUtilizationByDeviceItemByBandNonWifiResult',
                 total: 'outputs.GetWirelessDevicesChannelUtilizationByDeviceItemByBandTotalResult',
                 wifi: 'outputs.GetWirelessDevicesChannelUtilizationByDeviceItemByBandWifiResult'):
        """
        :param str band: The band for the given metrics.
        :param 'GetWirelessDevicesChannelUtilizationByDeviceItemByBandNonWifiArgs' non_wifi: An object containing non-wifi utilization.
        :param 'GetWirelessDevicesChannelUtilizationByDeviceItemByBandTotalArgs' total: An object containing total channel utilization.
        :param 'GetWirelessDevicesChannelUtilizationByDeviceItemByBandWifiArgs' wifi: An object containing wifi utilization.
        """
        pulumi.set(__self__, "band", band)
        pulumi.set(__self__, "non_wifi", non_wifi)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "wifi", wifi)

    @property
    @pulumi.getter
    def band(self) -> str:
        """
        The band for the given metrics.
        """
        return pulumi.get(self, "band")

    @property
    @pulumi.getter(name="nonWifi")
    def non_wifi(self) -> 'outputs.GetWirelessDevicesChannelUtilizationByDeviceItemByBandNonWifiResult':
        """
        An object containing non-wifi utilization.
        """
        return pulumi.get(self, "non_wifi")

    @property
    @pulumi.getter
    def total(self) -> 'outputs.GetWirelessDevicesChannelUtilizationByDeviceItemByBandTotalResult':
        """
        An object containing total channel utilization.
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def wifi(self) -> 'outputs.GetWirelessDevicesChannelUtilizationByDeviceItemByBandWifiResult':
        """
        An object containing wifi utilization.
        """
        return pulumi.get(self, "wifi")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationByDeviceItemByBandNonWifiResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of non-wifi channel utiliation for the given band.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of non-wifi channel utiliation for the given band.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationByDeviceItemByBandTotalResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of total channel utiliation for the given band.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of total channel utiliation for the given band.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationByDeviceItemByBandWifiResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of wifi channel utiliation for the given band.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of wifi channel utiliation for the given band.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationByDeviceItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: Network ID of the given utilization metrics.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Network ID of the given utilization metrics.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationByNetworkItemResult(dict):
    def __init__(__self__, *,
                 by_bands: Sequence['outputs.GetWirelessDevicesChannelUtilizationByNetworkItemByBandResult'],
                 network: 'outputs.GetWirelessDevicesChannelUtilizationByNetworkItemNetworkResult'):
        """
        :param Sequence['GetWirelessDevicesChannelUtilizationByNetworkItemByBandArgs'] by_bands: Channel utilization broken down by band.
        :param 'GetWirelessDevicesChannelUtilizationByNetworkItemNetworkArgs' network: Network for the given utilization metrics.
        """
        pulumi.set(__self__, "by_bands", by_bands)
        pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter(name="byBands")
    def by_bands(self) -> Sequence['outputs.GetWirelessDevicesChannelUtilizationByNetworkItemByBandResult']:
        """
        Channel utilization broken down by band.
        """
        return pulumi.get(self, "by_bands")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetWirelessDevicesChannelUtilizationByNetworkItemNetworkResult':
        """
        Network for the given utilization metrics.
        """
        return pulumi.get(self, "network")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationByNetworkItemByBandResult(dict):
    def __init__(__self__, *,
                 band: str,
                 non_wifi: 'outputs.GetWirelessDevicesChannelUtilizationByNetworkItemByBandNonWifiResult',
                 total: 'outputs.GetWirelessDevicesChannelUtilizationByNetworkItemByBandTotalResult',
                 wifi: 'outputs.GetWirelessDevicesChannelUtilizationByNetworkItemByBandWifiResult'):
        """
        :param str band: The band for the given metrics.
        :param 'GetWirelessDevicesChannelUtilizationByNetworkItemByBandNonWifiArgs' non_wifi: An object containing non-wifi utilization.
        :param 'GetWirelessDevicesChannelUtilizationByNetworkItemByBandTotalArgs' total: An object containing total channel utilization.
        :param 'GetWirelessDevicesChannelUtilizationByNetworkItemByBandWifiArgs' wifi: An object containing wifi utilization.
        """
        pulumi.set(__self__, "band", band)
        pulumi.set(__self__, "non_wifi", non_wifi)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "wifi", wifi)

    @property
    @pulumi.getter
    def band(self) -> str:
        """
        The band for the given metrics.
        """
        return pulumi.get(self, "band")

    @property
    @pulumi.getter(name="nonWifi")
    def non_wifi(self) -> 'outputs.GetWirelessDevicesChannelUtilizationByNetworkItemByBandNonWifiResult':
        """
        An object containing non-wifi utilization.
        """
        return pulumi.get(self, "non_wifi")

    @property
    @pulumi.getter
    def total(self) -> 'outputs.GetWirelessDevicesChannelUtilizationByNetworkItemByBandTotalResult':
        """
        An object containing total channel utilization.
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def wifi(self) -> 'outputs.GetWirelessDevicesChannelUtilizationByNetworkItemByBandWifiResult':
        """
        An object containing wifi utilization.
        """
        return pulumi.get(self, "wifi")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationByNetworkItemByBandNonWifiResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of non-wifi channel utiliation for the given band.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of non-wifi channel utiliation for the given band.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationByNetworkItemByBandTotalResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of total channel utiliation for the given band.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of total channel utiliation for the given band.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationByNetworkItemByBandWifiResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of wifi channel utiliation for the given band.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of wifi channel utiliation for the given band.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationByNetworkItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: Network ID of the given utilization metrics.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Network ID of the given utilization metrics.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemResult(dict):
    def __init__(__self__, *,
                 by_bands: Sequence['outputs.GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandResult'],
                 end_ts: str,
                 mac: str,
                 network: 'outputs.GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemNetworkResult',
                 serial: str,
                 start_ts: str):
        """
        :param Sequence['GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandArgs'] by_bands: Channel utilization broken down by band.
        :param str end_ts: The end time of the channel utilization interval.
        :param str mac: The MAC address of the device.
        :param 'GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemNetworkArgs' network: Network for the given utilization metrics.
        :param str serial: The serial number for the device.
        :param str start_ts: The start time of the channel utilization interval.
        """
        pulumi.set(__self__, "by_bands", by_bands)
        pulumi.set(__self__, "end_ts", end_ts)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "start_ts", start_ts)

    @property
    @pulumi.getter(name="byBands")
    def by_bands(self) -> Sequence['outputs.GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandResult']:
        """
        Channel utilization broken down by band.
        """
        return pulumi.get(self, "by_bands")

    @property
    @pulumi.getter(name="endTs")
    def end_ts(self) -> str:
        """
        The end time of the channel utilization interval.
        """
        return pulumi.get(self, "end_ts")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        The MAC address of the device.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemNetworkResult':
        """
        Network for the given utilization metrics.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The serial number for the device.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="startTs")
    def start_ts(self) -> str:
        """
        The start time of the channel utilization interval.
        """
        return pulumi.get(self, "start_ts")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandResult(dict):
    def __init__(__self__, *,
                 band: str,
                 non_wifi: 'outputs.GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandNonWifiResult',
                 total: 'outputs.GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandTotalResult',
                 wifi: 'outputs.GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandWifiResult'):
        """
        :param str band: The band for the given metrics.
        :param 'GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandNonWifiArgs' non_wifi: An object containing non-wifi utilization.
        :param 'GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandTotalArgs' total: An object containing total channel utilization.
        :param 'GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandWifiArgs' wifi: An object containing wifi utilization.
        """
        pulumi.set(__self__, "band", band)
        pulumi.set(__self__, "non_wifi", non_wifi)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "wifi", wifi)

    @property
    @pulumi.getter
    def band(self) -> str:
        """
        The band for the given metrics.
        """
        return pulumi.get(self, "band")

    @property
    @pulumi.getter(name="nonWifi")
    def non_wifi(self) -> 'outputs.GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandNonWifiResult':
        """
        An object containing non-wifi utilization.
        """
        return pulumi.get(self, "non_wifi")

    @property
    @pulumi.getter
    def total(self) -> 'outputs.GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandTotalResult':
        """
        An object containing total channel utilization.
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def wifi(self) -> 'outputs.GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandWifiResult':
        """
        An object containing wifi utilization.
        """
        return pulumi.get(self, "wifi")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandNonWifiResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of non-wifi channel utiliation for the given band.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of non-wifi channel utiliation for the given band.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandTotalResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of total channel utiliation for the given band.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of total channel utiliation for the given band.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemByBandWifiResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of wifi channel utiliation for the given band.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of wifi channel utiliation for the given band.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: Network ID of the given utilization metrics.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Network ID of the given utilization metrics.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemResult(dict):
    def __init__(__self__, *,
                 by_bands: Sequence['outputs.GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandResult'],
                 end_ts: str,
                 network: 'outputs.GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemNetworkResult',
                 start_ts: str):
        """
        :param Sequence['GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandArgs'] by_bands: Channel utilization broken down by band.
        :param str end_ts: The end time of the channel utilization interval.
        :param 'GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemNetworkArgs' network: Network for the given utilization metrics.
        :param str start_ts: The start time of the channel utilization interval.
        """
        pulumi.set(__self__, "by_bands", by_bands)
        pulumi.set(__self__, "end_ts", end_ts)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "start_ts", start_ts)

    @property
    @pulumi.getter(name="byBands")
    def by_bands(self) -> Sequence['outputs.GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandResult']:
        """
        Channel utilization broken down by band.
        """
        return pulumi.get(self, "by_bands")

    @property
    @pulumi.getter(name="endTs")
    def end_ts(self) -> str:
        """
        The end time of the channel utilization interval.
        """
        return pulumi.get(self, "end_ts")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemNetworkResult':
        """
        Network for the given utilization metrics.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="startTs")
    def start_ts(self) -> str:
        """
        The start time of the channel utilization interval.
        """
        return pulumi.get(self, "start_ts")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandResult(dict):
    def __init__(__self__, *,
                 band: str,
                 non_wifi: 'outputs.GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandNonWifiResult',
                 total: 'outputs.GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandTotalResult',
                 wifi: 'outputs.GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandWifiResult'):
        """
        :param str band: The band for the given metrics.
        :param 'GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandNonWifiArgs' non_wifi: An object containing non-wifi utilization.
        :param 'GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandTotalArgs' total: An object containing total channel utilization.
        :param 'GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandWifiArgs' wifi: An object containing wifi utilization.
        """
        pulumi.set(__self__, "band", band)
        pulumi.set(__self__, "non_wifi", non_wifi)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "wifi", wifi)

    @property
    @pulumi.getter
    def band(self) -> str:
        """
        The band for the given metrics.
        """
        return pulumi.get(self, "band")

    @property
    @pulumi.getter(name="nonWifi")
    def non_wifi(self) -> 'outputs.GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandNonWifiResult':
        """
        An object containing non-wifi utilization.
        """
        return pulumi.get(self, "non_wifi")

    @property
    @pulumi.getter
    def total(self) -> 'outputs.GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandTotalResult':
        """
        An object containing total channel utilization.
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def wifi(self) -> 'outputs.GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandWifiResult':
        """
        An object containing wifi utilization.
        """
        return pulumi.get(self, "wifi")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandNonWifiResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of non-wifi channel utiliation for the given band.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of non-wifi channel utiliation for the given band.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandTotalResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of total channel utiliation for the given band.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of total channel utiliation for the given band.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemByBandWifiResult(dict):
    def __init__(__self__, *,
                 percentage: float):
        """
        :param float percentage: Percentage of wifi channel utiliation for the given band.
        """
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> float:
        """
        Percentage of wifi channel utiliation for the given band.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: Network ID of the given utilization metrics.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Network ID of the given utilization metrics.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetWirelessDevicesEthernetStatusesItemResult(dict):
    def __init__(__self__, *,
                 aggregation: 'outputs.GetWirelessDevicesEthernetStatusesItemAggregationResult',
                 name: str,
                 network: 'outputs.GetWirelessDevicesEthernetStatusesItemNetworkResult',
                 ports: Sequence['outputs.GetWirelessDevicesEthernetStatusesItemPortResult'],
                 power: 'outputs.GetWirelessDevicesEthernetStatusesItemPowerResult',
                 serial: str):
        """
        :param 'GetWirelessDevicesEthernetStatusesItemAggregationArgs' aggregation: Aggregation details object
        :param str name: The name of the AP
        :param 'GetWirelessDevicesEthernetStatusesItemNetworkArgs' network: Network details object
        :param Sequence['GetWirelessDevicesEthernetStatusesItemPortArgs'] ports: List of port details
        :param 'GetWirelessDevicesEthernetStatusesItemPowerArgs' power: Power details object
        :param str serial: The serial number of the AP
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "power", power)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def aggregation(self) -> 'outputs.GetWirelessDevicesEthernetStatusesItemAggregationResult':
        """
        Aggregation details object
        """
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the AP
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetWirelessDevicesEthernetStatusesItemNetworkResult':
        """
        Network details object
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetWirelessDevicesEthernetStatusesItemPortResult']:
        """
        List of port details
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def power(self) -> 'outputs.GetWirelessDevicesEthernetStatusesItemPowerResult':
        """
        Power details object
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        The serial number of the AP
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetWirelessDevicesEthernetStatusesItemAggregationResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 speed: int):
        """
        :param bool enabled: Link Aggregation enabled flag
        :param int speed: Link Aggregation speed
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "speed", speed)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Link Aggregation enabled flag
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def speed(self) -> int:
        """
        Link Aggregation speed
        """
        return pulumi.get(self, "speed")


@pulumi.output_type
class GetWirelessDevicesEthernetStatusesItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: The network ID the AP is associated to
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The network ID the AP is associated to
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetWirelessDevicesEthernetStatusesItemPortResult(dict):
    def __init__(__self__, *,
                 link_negotiation: 'outputs.GetWirelessDevicesEthernetStatusesItemPortLinkNegotiationResult',
                 name: str,
                 poe: 'outputs.GetWirelessDevicesEthernetStatusesItemPortPoeResult'):
        """
        :param 'GetWirelessDevicesEthernetStatusesItemPortLinkNegotiationArgs' link_negotiation: Link negotiation details object for the port
        :param str name: Label of the port
        :param 'GetWirelessDevicesEthernetStatusesItemPortPoeArgs' poe: PoE details object for the port
        """
        pulumi.set(__self__, "link_negotiation", link_negotiation)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "poe", poe)

    @property
    @pulumi.getter(name="linkNegotiation")
    def link_negotiation(self) -> 'outputs.GetWirelessDevicesEthernetStatusesItemPortLinkNegotiationResult':
        """
        Link negotiation details object for the port
        """
        return pulumi.get(self, "link_negotiation")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Label of the port
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def poe(self) -> 'outputs.GetWirelessDevicesEthernetStatusesItemPortPoeResult':
        """
        PoE details object for the port
        """
        return pulumi.get(self, "poe")


@pulumi.output_type
class GetWirelessDevicesEthernetStatusesItemPortLinkNegotiationResult(dict):
    def __init__(__self__, *,
                 duplex: str,
                 speed: int):
        """
        :param str duplex: The duplex mode of the port. Can be 'full' or 'half'
        :param int speed: The speed of the port
        """
        pulumi.set(__self__, "duplex", duplex)
        pulumi.set(__self__, "speed", speed)

    @property
    @pulumi.getter
    def duplex(self) -> str:
        """
        The duplex mode of the port. Can be 'full' or 'half'
        """
        return pulumi.get(self, "duplex")

    @property
    @pulumi.getter
    def speed(self) -> int:
        """
        The speed of the port
        """
        return pulumi.get(self, "speed")


@pulumi.output_type
class GetWirelessDevicesEthernetStatusesItemPortPoeResult(dict):
    def __init__(__self__, *,
                 standard: str):
        """
        :param str standard: The PoE Standard for the port. Can be '802.3at', '802.3af', '802.3bt', or null
        """
        pulumi.set(__self__, "standard", standard)

    @property
    @pulumi.getter
    def standard(self) -> str:
        """
        The PoE Standard for the port. Can be '802.3at', '802.3af', '802.3bt', or null
        """
        return pulumi.get(self, "standard")


@pulumi.output_type
class GetWirelessDevicesEthernetStatusesItemPowerResult(dict):
    def __init__(__self__, *,
                 ac: 'outputs.GetWirelessDevicesEthernetStatusesItemPowerAcResult',
                 mode: str,
                 poe: 'outputs.GetWirelessDevicesEthernetStatusesItemPowerPoeResult'):
        """
        :param 'GetWirelessDevicesEthernetStatusesItemPowerAcArgs' ac: AC power details object
        :param str mode: The PoE power mode for the AP. Can be 'full' or 'low'
        :param 'GetWirelessDevicesEthernetStatusesItemPowerPoeArgs' poe: PoE power details object
        """
        pulumi.set(__self__, "ac", ac)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "poe", poe)

    @property
    @pulumi.getter
    def ac(self) -> 'outputs.GetWirelessDevicesEthernetStatusesItemPowerAcResult':
        """
        AC power details object
        """
        return pulumi.get(self, "ac")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        The PoE power mode for the AP. Can be 'full' or 'low'
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def poe(self) -> 'outputs.GetWirelessDevicesEthernetStatusesItemPowerPoeResult':
        """
        PoE power details object
        """
        return pulumi.get(self, "poe")


@pulumi.output_type
class GetWirelessDevicesEthernetStatusesItemPowerAcResult(dict):
    def __init__(__self__, *,
                 is_connected: bool):
        """
        :param bool is_connected: AC power connected
        """
        pulumi.set(__self__, "is_connected", is_connected)

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> bool:
        """
        AC power connected
        """
        return pulumi.get(self, "is_connected")


@pulumi.output_type
class GetWirelessDevicesEthernetStatusesItemPowerPoeResult(dict):
    def __init__(__self__, *,
                 is_connected: bool):
        """
        :param bool is_connected: PoE power connected
        """
        pulumi.set(__self__, "is_connected", is_connected)

    @property
    @pulumi.getter(name="isConnected")
    def is_connected(self) -> bool:
        """
        PoE power connected
        """
        return pulumi.get(self, "is_connected")


@pulumi.output_type
class GetWirelessDevicesPacketLossByClientItemResult(dict):
    def __init__(__self__, *,
                 client: 'outputs.GetWirelessDevicesPacketLossByClientItemClientResult',
                 downstream: 'outputs.GetWirelessDevicesPacketLossByClientItemDownstreamResult',
                 network: 'outputs.GetWirelessDevicesPacketLossByClientItemNetworkResult',
                 upstream: 'outputs.GetWirelessDevicesPacketLossByClientItemUpstreamResult'):
        """
        :param 'GetWirelessDevicesPacketLossByClientItemClientArgs' client: Client.
        :param 'GetWirelessDevicesPacketLossByClientItemDownstreamArgs' downstream: Packets sent from an AP to a client.
        :param 'GetWirelessDevicesPacketLossByClientItemNetworkArgs' network: Network.
        :param 'GetWirelessDevicesPacketLossByClientItemUpstreamArgs' upstream: Packets sent from a client to an AP.
        """
        pulumi.set(__self__, "client", client)
        pulumi.set(__self__, "downstream", downstream)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter
    def client(self) -> 'outputs.GetWirelessDevicesPacketLossByClientItemClientResult':
        """
        Client.
        """
        return pulumi.get(self, "client")

    @property
    @pulumi.getter
    def downstream(self) -> 'outputs.GetWirelessDevicesPacketLossByClientItemDownstreamResult':
        """
        Packets sent from an AP to a client.
        """
        return pulumi.get(self, "downstream")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetWirelessDevicesPacketLossByClientItemNetworkResult':
        """
        Network.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def upstream(self) -> 'outputs.GetWirelessDevicesPacketLossByClientItemUpstreamResult':
        """
        Packets sent from a client to an AP.
        """
        return pulumi.get(self, "upstream")


@pulumi.output_type
class GetWirelessDevicesPacketLossByClientItemClientResult(dict):
    def __init__(__self__, *,
                 id: str,
                 mac: str):
        """
        :param str id: Client ID.
        :param str mac: MAC address.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mac", mac)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Client ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        MAC address.
        """
        return pulumi.get(self, "mac")


@pulumi.output_type
class GetWirelessDevicesPacketLossByClientItemDownstreamResult(dict):
    def __init__(__self__, *,
                 loss_percentage: float,
                 lost: int,
                 total: int):
        """
        :param float loss_percentage: Percentage of lost packets.
        :param int lost: Total packets sent by an AP that did not reach the client.
        :param int total: Total packets received by a client.
        """
        pulumi.set(__self__, "loss_percentage", loss_percentage)
        pulumi.set(__self__, "lost", lost)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter(name="lossPercentage")
    def loss_percentage(self) -> float:
        """
        Percentage of lost packets.
        """
        return pulumi.get(self, "loss_percentage")

    @property
    @pulumi.getter
    def lost(self) -> int:
        """
        Total packets sent by an AP that did not reach the client.
        """
        return pulumi.get(self, "lost")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total packets received by a client.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetWirelessDevicesPacketLossByClientItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Network ID.
        :param str name: Name of the network.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Network ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the network.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWirelessDevicesPacketLossByClientItemUpstreamResult(dict):
    def __init__(__self__, *,
                 loss_percentage: float,
                 lost: int,
                 total: int):
        """
        :param float loss_percentage: Percentage of lost packets.
        :param int lost: Total packets sent by a client and did not reach the AP.
        :param int total: Total packets sent by a client to an AP.
        """
        pulumi.set(__self__, "loss_percentage", loss_percentage)
        pulumi.set(__self__, "lost", lost)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter(name="lossPercentage")
    def loss_percentage(self) -> float:
        """
        Percentage of lost packets.
        """
        return pulumi.get(self, "loss_percentage")

    @property
    @pulumi.getter
    def lost(self) -> int:
        """
        Total packets sent by a client and did not reach the AP.
        """
        return pulumi.get(self, "lost")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total packets sent by a client to an AP.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetWirelessDevicesPacketLossByDeviceItemResult(dict):
    def __init__(__self__, *,
                 device: 'outputs.GetWirelessDevicesPacketLossByDeviceItemDeviceResult',
                 downstream: 'outputs.GetWirelessDevicesPacketLossByDeviceItemDownstreamResult',
                 network: 'outputs.GetWirelessDevicesPacketLossByDeviceItemNetworkResult',
                 upstream: 'outputs.GetWirelessDevicesPacketLossByDeviceItemUpstreamResult'):
        """
        :param 'GetWirelessDevicesPacketLossByDeviceItemDeviceArgs' device: Device.
        :param 'GetWirelessDevicesPacketLossByDeviceItemDownstreamArgs' downstream: Packets sent from an AP to a client.
        :param 'GetWirelessDevicesPacketLossByDeviceItemNetworkArgs' network: Network.
        :param 'GetWirelessDevicesPacketLossByDeviceItemUpstreamArgs' upstream: Packets sent from a client to an AP.
        """
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "downstream", downstream)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter
    def device(self) -> 'outputs.GetWirelessDevicesPacketLossByDeviceItemDeviceResult':
        """
        Device.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def downstream(self) -> 'outputs.GetWirelessDevicesPacketLossByDeviceItemDownstreamResult':
        """
        Packets sent from an AP to a client.
        """
        return pulumi.get(self, "downstream")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetWirelessDevicesPacketLossByDeviceItemNetworkResult':
        """
        Network.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def upstream(self) -> 'outputs.GetWirelessDevicesPacketLossByDeviceItemUpstreamResult':
        """
        Packets sent from a client to an AP.
        """
        return pulumi.get(self, "upstream")


@pulumi.output_type
class GetWirelessDevicesPacketLossByDeviceItemDeviceResult(dict):
    def __init__(__self__, *,
                 mac: str,
                 name: str,
                 serial: str):
        """
        :param str mac: MAC address
        :param str name: Name
        :param str serial: Serial Number
        """
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        MAC address
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Serial Number
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetWirelessDevicesPacketLossByDeviceItemDownstreamResult(dict):
    def __init__(__self__, *,
                 loss_percentage: float,
                 lost: int,
                 total: int):
        """
        :param float loss_percentage: Percentage of lost packets.
        :param int lost: Total packets sent by an AP that did not reach the client.
        :param int total: Total packets received by a client.
        """
        pulumi.set(__self__, "loss_percentage", loss_percentage)
        pulumi.set(__self__, "lost", lost)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter(name="lossPercentage")
    def loss_percentage(self) -> float:
        """
        Percentage of lost packets.
        """
        return pulumi.get(self, "loss_percentage")

    @property
    @pulumi.getter
    def lost(self) -> int:
        """
        Total packets sent by an AP that did not reach the client.
        """
        return pulumi.get(self, "lost")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total packets received by a client.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetWirelessDevicesPacketLossByDeviceItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Network ID.
        :param str name: Name of the network.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Network ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the network.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWirelessDevicesPacketLossByDeviceItemUpstreamResult(dict):
    def __init__(__self__, *,
                 loss_percentage: float,
                 lost: int,
                 total: int):
        """
        :param float loss_percentage: Percentage of lost packets.
        :param int lost: Total packets sent by a client and did not reach the AP.
        :param int total: Total packets sent by a client to an AP.
        """
        pulumi.set(__self__, "loss_percentage", loss_percentage)
        pulumi.set(__self__, "lost", lost)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter(name="lossPercentage")
    def loss_percentage(self) -> float:
        """
        Percentage of lost packets.
        """
        return pulumi.get(self, "loss_percentage")

    @property
    @pulumi.getter
    def lost(self) -> int:
        """
        Total packets sent by a client and did not reach the AP.
        """
        return pulumi.get(self, "lost")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total packets sent by a client to an AP.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetWirelessDevicesPacketLossByNetworkItemResult(dict):
    def __init__(__self__, *,
                 downstream: 'outputs.GetWirelessDevicesPacketLossByNetworkItemDownstreamResult',
                 network: 'outputs.GetWirelessDevicesPacketLossByNetworkItemNetworkResult',
                 upstream: 'outputs.GetWirelessDevicesPacketLossByNetworkItemUpstreamResult'):
        """
        :param 'GetWirelessDevicesPacketLossByNetworkItemDownstreamArgs' downstream: Packets sent from an AP to a client.
        :param 'GetWirelessDevicesPacketLossByNetworkItemNetworkArgs' network: Network.
        :param 'GetWirelessDevicesPacketLossByNetworkItemUpstreamArgs' upstream: Packets sent from a client to an AP.
        """
        pulumi.set(__self__, "downstream", downstream)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter
    def downstream(self) -> 'outputs.GetWirelessDevicesPacketLossByNetworkItemDownstreamResult':
        """
        Packets sent from an AP to a client.
        """
        return pulumi.get(self, "downstream")

    @property
    @pulumi.getter
    def network(self) -> 'outputs.GetWirelessDevicesPacketLossByNetworkItemNetworkResult':
        """
        Network.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def upstream(self) -> 'outputs.GetWirelessDevicesPacketLossByNetworkItemUpstreamResult':
        """
        Packets sent from a client to an AP.
        """
        return pulumi.get(self, "upstream")


@pulumi.output_type
class GetWirelessDevicesPacketLossByNetworkItemDownstreamResult(dict):
    def __init__(__self__, *,
                 loss_percentage: float,
                 lost: int,
                 total: int):
        """
        :param float loss_percentage: Percentage of lost packets.
        :param int lost: Total packets sent by an AP that did not reach the client.
        :param int total: Total packets received by a client.
        """
        pulumi.set(__self__, "loss_percentage", loss_percentage)
        pulumi.set(__self__, "lost", lost)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter(name="lossPercentage")
    def loss_percentage(self) -> float:
        """
        Percentage of lost packets.
        """
        return pulumi.get(self, "loss_percentage")

    @property
    @pulumi.getter
    def lost(self) -> int:
        """
        Total packets sent by an AP that did not reach the client.
        """
        return pulumi.get(self, "lost")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total packets received by a client.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetWirelessDevicesPacketLossByNetworkItemNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Network ID.
        :param str name: Name of the network.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Network ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the network.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWirelessDevicesPacketLossByNetworkItemUpstreamResult(dict):
    def __init__(__self__, *,
                 loss_percentage: float,
                 lost: int,
                 total: int):
        """
        :param float loss_percentage: Percentage of lost packets.
        :param int lost: Total packets sent by a client and did not reach the AP.
        :param int total: Total packets sent by a client to an AP.
        """
        pulumi.set(__self__, "loss_percentage", loss_percentage)
        pulumi.set(__self__, "lost", lost)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter(name="lossPercentage")
    def loss_percentage(self) -> float:
        """
        Percentage of lost packets.
        """
        return pulumi.get(self, "loss_percentage")

    @property
    @pulumi.getter
    def lost(self) -> int:
        """
        Total packets sent by a client and did not reach the AP.
        """
        return pulumi.get(self, "lost")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total packets sent by a client to an AP.
        """
        return pulumi.get(self, "total")


