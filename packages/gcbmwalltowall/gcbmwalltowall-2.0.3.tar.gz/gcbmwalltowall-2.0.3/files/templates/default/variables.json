{
    "Variables": {
        "default_disturbance_order": {
            "transform": {
                "queryString": "SELECT name FROM disturbance_type ORDER BY code",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "user_disturbance_order": [],
        "enable_peatland": false,
        "enable_moss": false,
        "admin_boundary": "British Columbia",
        "eco_boundary": "Taiga Plains",
        "initial_age": 0,
        "initial_historic_land_class": "FL",
        "initial_current_land_class": "FL",
        "age_class_range": 20,
        "age_maximum": 300,
        "slow_ag_to_bg_mixing_rate": 0.006,
        "disturbance_matrices": {
            "transform": {
                "queryString": "SELECT dm.id AS disturbance_matrix_id, source_pool.name as source_pool_name, dest_pool.name as dest_pool_name, dv.proportion FROM disturbance_matrix dm INNER JOIN disturbance_matrix_value dv ON dm.id = dv.disturbance_matrix_id INNER JOIN pool source_pool ON dv.source_pool_id = source_pool.id INNER JOIN pool dest_pool ON dv.sink_pool_id = dest_pool.id",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "softwood_yield_table": {
            "transform": {
                "queryString": "SELECT gcv.age AS age, SUM(gcv.merchantable_volume) AS merchantable_volume FROM (SELECT CASE WHEN gc.id IS NOT NULL THEN gc.id ELSE -1 END AS growth_curve_component_id FROM growth_curve_component gc INNER JOIN species s ON s.id = gc.species_id INNER JOIN forest_type ft ON ft.id = s.forest_type_id WHERE gc.growth_curve_id = {var:growth_curve_id} AND LOWER(ft.name) LIKE LOWER('Softwood')) AS gc INNER JOIN growth_curve_component_value gcv ON gc.growth_curve_component_id = gcv.growth_curve_component_id GROUP BY gcv.age",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite",
                "allow_empty_var_values": true
            }
        },
        "reporting_classifiers": {
            "transform": {
                "allow_nulls": true,
                "type": "CompositeTransform",
                "library": "internal.flint",
                "vars": [
                    "classifier_set"
                ]
            }
        },
        "land_class_transitions": {
            "transform": {
                "queryString": "SELECT dt.name AS disturbance_type, lc.code AS land_class_transition, lc.is_forest, lc.years_to_permanent FROM disturbance_type dt INNER JOIN land_class lc ON dt.transition_land_class_id = lc.id",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "transition_rules": {
            "transform": {
                "queryString": "SELECT t.id AS id, age, regen_delay, description, tt.name AS reset_type FROM transition t INNER JOIN transition_type tt ON t.transition_type_id = tt.id",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "transition_rule_matches": {
            "transform": {
                "classifier_set_var": "classifier_set",
                "type": "TransitionRuleTransform",
                "library": "moja.modules.cbm",
                "provider": "SQLite"
            }
        },
        "spatial_unit_id": {
            "transform": {
                "queryString": "SELECT spu.id FROM spatial_unit spu INNER JOIN admin_boundary a ON spu.admin_boundary_id = a.id INNER JOIN eco_boundary e ON spu.eco_boundary_id = e.id WHERE a.name = {var:admin_boundary} AND e.name = {var:eco_boundary}",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "hardwood_yield_table": {
            "transform": {
                "queryString": "SELECT gcv.age AS age, SUM(gcv.merchantable_volume) AS merchantable_volume FROM (SELECT CASE WHEN gc.id IS NOT NULL THEN gc.id ELSE -1 END AS growth_curve_component_id FROM growth_curve_component gc INNER JOIN species s ON s.id = gc.species_id INNER JOIN forest_type ft ON ft.id = s.forest_type_id WHERE gc.growth_curve_id = {var:growth_curve_id} AND LOWER(ft.name) LIKE LOWER('Hardwood')) AS gc INNER JOIN growth_curve_component_value gcv ON gc.growth_curve_component_id = gcv.growth_curve_component_id GROUP BY gcv.age",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite",
                "allow_empty_var_values": true
            }
        },
        "turnover_rates": {
            "transform": {
                "queryString": "SELECT COALESCE(sw_turnover.foliage, 0) AS sw_foliage_turnover, COALESCE(hw_turnover.foliage, 0) AS hw_foliage_turnover, COALESCE(sw_turnover.stem, 0) AS sw_stem_turnover, COALESCE(hw_turnover.stem, 0) AS hw_stem_turnover, COALESCE(sw_turnover.branch, 0) AS sw_branch_turnover, COALESCE(hw_turnover.branch, 0) AS hw_branch_turnover, COALESCE(sw_turnover.branch_snag_split, 0) AS sw_other_to_branch_snag_split, COALESCE(hw_turnover.branch_snag_split, 0) AS hw_other_to_branch_snag_split, COALESCE(sw_turnover.stem_snag, 0) AS sw_stem_snag_turnover, COALESCE(hw_turnover.stem_snag, 0) AS hw_stem_snag_turnover, COALESCE(sw_turnover.branch_snag, 0) AS sw_branch_snag_turnover, COALESCE(hw_turnover.branch_snag, 0) AS hw_branch_snag_turnover, COALESCE(sw_turnover.coarse_ag_split, 0) AS sw_coarse_root_split, COALESCE(hw_turnover.coarse_ag_split, 0) AS hw_coarse_root_split, COALESCE(sw_turnover.coarse_root, 0) AS sw_coarse_root_turnover, COALESCE(hw_turnover.coarse_root, 0) AS hw_coarse_root_turnover, COALESCE(sw_turnover.fine_ag_split, 0) AS sw_fine_root_ag_split, COALESCE(hw_turnover.fine_ag_split, 0) AS hw_fine_root_ag_split, COALESCE(sw_turnover.fine_root, 0) AS sw_fine_root_turnover, COALESCE(hw_turnover.fine_root, 0) AS hw_fine_root_turnover FROM ( SELECT {var:softwood_leading_species_id} AS sw_leading_species_id, {var:hardwood_leading_species_id} AS hw_leading_species_id) AS leading_species LEFT JOIN ( SELECT s.id AS species_id, foliage, stem, branch, branch_snag_split, stem_snag, branch_snag, coarse_ag_split, coarse_root, fine_ag_split, fine_root FROM turnover_parameter_association tpa INNER JOIN eco_boundary e ON tpa.eco_boundary_id = e.id INNER JOIN genus g ON tpa.genus_id = g.id INNER JOIN species s ON s.genus_id = g.id INNER JOIN turnover_parameter t ON tpa.turnover_parameter_id = t.id WHERE s.id = {var:softwood_leading_species_id} AND e.name = {var:eco_boundary}) AS sw_turnover ON leading_species.sw_leading_species_id = sw_turnover.species_id LEFT JOIN ( SELECT s.id AS species_id, foliage, stem, branch, branch_snag_split, stem_snag, branch_snag, coarse_ag_split, coarse_root, fine_ag_split, fine_root FROM turnover_parameter_association tpa INNER JOIN eco_boundary e ON tpa.eco_boundary_id = e.id INNER JOIN genus g ON tpa.genus_id = g.id INNER JOIN species s ON s.genus_id = g.id INNER JOIN turnover_parameter t ON tpa.turnover_parameter_id = t.id WHERE s.id = {var:hardwood_leading_species_id} AND e.name = {var:eco_boundary}) AS hw_turnover ON leading_species.hw_leading_species_id = hw_turnover.species_id",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "disturbance_type_codes": {
            "transform": {
                "queryString": "SELECT dt.name AS disturbance_type, dt.code AS disturbance_type_code FROM disturbance_type dt",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "transition_rule_classifiers": {
            "transform": {
                "queryString": "SELECT t.id, c.name AS classifier_name, cv.value AS classifier_value FROM transition t INNER JOIN transition_classifier_value tcv ON t.id = tcv.transition_id INNER JOIN classifier_value cv ON tcv.classifier_value_id = cv.id INNER JOIN classifier c ON cv.classifier_id = c.id",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "initial_classifier_set": {
            "transform": {
                "type": "CompositeTransform",
                "library": "internal.flint",
                "vars": []
            }
        },
        "disturbance_matrix_associations": {
            "transform": {
                "queryString": "SELECT dt.name AS disturbance_type, dma.spatial_unit_id, dma.disturbance_matrix_id FROM disturbance_matrix_association dma INNER JOIN disturbance_type dt ON dma.disturbance_type_id = dt.id",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "other_to_branch_snag_split": {
            "transform": {
                "queryString": "SELECT t.branch_snag_split AS slow_mixing_rate FROM eco_boundary e INNER JOIN turnover_parameter t ON e.turnover_parameter_id = t.id WHERE e.name LIKE {var:eco_boundary}",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "growth_curve_id": {
            "transform": {
                "classifier_set_var": "classifier_set",
                "type": "GrowthCurveTransform",
                "library": "moja.modules.cbm",
                "provider": "SQLite"
            }
        },
        "softwood_leading_species_id": {
            "transform": {
                "queryString": "SELECT COALESCE(species_id, -1) FROM ( SELECT species_id, RANK() OVER ( PARTITION BY species_id ORDER BY total_volume DESC) AS rank FROM ( SELECT species_id, SUM(merchantable_volume) AS total_volume FROM growth_curve_component gcc INNER JOIN growth_curve_component_value gccv ON gcc.id = gccv.growth_curve_component_id INNER JOIN species s ON gcc.species_id = s.id INNER JOIN forest_type f ON s.forest_type_id = f.id WHERE gcc.growth_curve_id = {var:growth_curve_id} AND f.name = 'Softwood' ORDER BY gcc.id )) WHERE RANK = 1",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "hardwood_leading_species_id": {
            "transform": {
                "queryString": "SELECT COALESCE(species_id, -1) FROM ( SELECT species_id, RANK() OVER ( PARTITION BY species_id ORDER BY total_volume DESC) AS rank FROM ( SELECT species_id, SUM(merchantable_volume) AS total_volume FROM growth_curve_component gcc INNER JOIN growth_curve_component_value gccv ON gcc.id = gccv.growth_curve_component_id INNER JOIN species s ON gcc.species_id = s.id INNER JOIN forest_type f ON s.forest_type_id = f.id WHERE gcc.growth_curve_id = {var:growth_curve_id} AND f.name = 'Hardwood' ORDER BY gcc.id )) WHERE RANK = 1",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "volume_to_biomass_parameters": {
            "transform": {
                "queryString": "SELECT ft.name AS forest_type, f.a AS a, f.b AS b, f.a_nonmerch AS a_non_merch, f.b_nonmerch AS b_non_merch, f.k_nonmerch AS k_non_merch, f.cap_nonmerch AS cap_non_merch, f.a_sap AS a_sap, f.b_sap AS b_sap, f.k_sap AS k_sap, f.cap_sap AS cap_sap, f.a1 AS a1, f.a2 AS a2, f.a3 AS a3, f.b1 AS b1, f.b2 AS b2, f.b3 AS b3, f.c1 AS c1, f.c2 AS c2, f.c3 AS c3, f.min_volume AS min_volume, f.max_volume AS max_volume, f.low_stemwood_prop AS low_stemwood_prop, f.high_stemwood_prop AS high_stemwood_prop, f.low_stembark_prop AS low_stembark_prop, f.high_stembark_prop AS high_stembark_prop, f.low_branches_prop AS low_branches_prop, f.high_branches_prop AS high_branches_prop, f.low_foliage_prop AS low_foliage_prop, f.high_foliage_prop AS high_foliage_prop, sp.sw_top_proportion AS softwood_top_prop, sp.sw_stump_proportion AS softwood_stump_prop, sp.hw_top_proportion AS hardwood_top_prop, sp.hw_stump_proportion AS hardwood_stump_prop, rp.hw_a AS hw_a, rp.hw_b AS hw_b, rp.sw_a AS sw_a, rp.frp_a AS frp_a, rp.frp_b AS frp_b, rp.frp_c AS frp_c FROM vol_to_bio_factor_association fa INNER JOIN vol_to_bio_factor f ON f.id = fa.vol_to_bio_factor_id INNER JOIN species s ON fa.species_id = s.id INNER JOIN forest_type ft ON s.forest_type_id = ft.id INNER JOIN spatial_unit spu ON fa.spatial_unit_id = spu.id INNER JOIN admin_boundary a ON spu.admin_boundary_id = a.id INNER JOIN stump_parameter sp ON a.stump_parameter_id = sp.id INNER JOIN root_parameter rp ON rp.id = fa.root_parameter_id WHERE (s.id = {var:softwood_leading_species_id} OR s.id = {var:hardwood_leading_species_id}) AND spu.id = {var:spatial_unit_id}",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite",
                "allow_empty_var_values": true
            }
        },
        "spu": {
            "transform": {
                "queryString": "select s.id AS spu_id from spatial_unit s inner join admin_boundary a on s.admin_boundary_id = a.id inner join eco_boundary e on s.eco_boundary_id = e.id where a.name like {var:admin_boundary} and e.name like {var:eco_boundary}",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "land_class_data": {
            "transform": {
                "queryString": "SELECT code AS land_class, is_forest, years_to_permanent FROM land_class lc",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        },
        "mean_annual_temperature": {
            "transform": {
                "library": "internal.flint",
                "type": "SQLQueryTransform",
                "provider": "SQLite",
                "queryString": "SELECT sp.mean_annual_temperature FROM spatial_unit spu INNER JOIN spinup_parameter sp ON spu.spinup_parameter_id = sp.id WHERE spu.id = {var:spatial_unit_id}"
            }
        },
        "decay_parameters": {
            "transform": {
                "queryString": "SELECT p.name AS pool, dp.base_decay_rate AS organic_matter_decay_rate, dp.prop_to_atmosphere AS prop_to_atmosphere, dp.q10 AS q10, dp.reference_temp AS reference_temp, dp.max_rate AS max_decay_rate_soft FROM decay_parameter dp INNER JOIN dom_pool dom ON dp.dom_pool_id = dom.id INNER JOIN pool p ON p.id = dom.pool_id",
                "type": "SQLQueryTransform",
                "library": "internal.flint",
                "provider": "SQLite"
            }
        }
    }
}