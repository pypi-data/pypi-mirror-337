# coding: utf-8

"""
    WeGlide

    Quantifying airsports

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from weglide_client.models.story_geom_value import StoryGeomValue
from typing import Optional, Set
from typing_extensions import Self

class Story(BaseModel):
    """
    Story
    """ # noqa: E501
    id: StrictInt
    user_id: StrictInt
    flight_id: StrictInt
    image: Optional[StrictStr] = None
    comment: Optional[StrictStr] = None
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None
    distance: Optional[Union[StrictFloat, StrictInt]] = None
    geom: Optional[Dict[str, StoryGeomValue]] = None
    alt: Optional[StrictInt] = None
    ground_speed: Optional[StrictInt] = None
    vario: Optional[Union[StrictFloat, StrictInt]] = None
    bearing: Optional[StrictInt] = None
    time_offset: StrictInt
    youtube_id: Optional[StrictStr] = None
    width: Optional[StrictInt]
    height: Optional[StrictInt]
    video_url: Optional[StrictStr] = None
    video_status: Optional[StrictStr] = None
    video_duration: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["id", "user_id", "flight_id", "image", "comment", "start_time", "end_time", "distance", "geom", "alt", "ground_speed", "vario", "bearing", "time_offset", "youtube_id", "width", "height", "video_url", "video_status", "video_duration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Story from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in geom (dict)
        _field_dict = {}
        if self.geom:
            for _key_geom in self.geom:
                if self.geom[_key_geom]:
                    _field_dict[_key_geom] = self.geom[_key_geom].to_dict()
            _dict['geom'] = _field_dict
        # set to None if image (nullable) is None
        # and model_fields_set contains the field
        if self.image is None and "image" in self.model_fields_set:
            _dict['image'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['start_time'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['end_time'] = None

        # set to None if distance (nullable) is None
        # and model_fields_set contains the field
        if self.distance is None and "distance" in self.model_fields_set:
            _dict['distance'] = None

        # set to None if geom (nullable) is None
        # and model_fields_set contains the field
        if self.geom is None and "geom" in self.model_fields_set:
            _dict['geom'] = None

        # set to None if alt (nullable) is None
        # and model_fields_set contains the field
        if self.alt is None and "alt" in self.model_fields_set:
            _dict['alt'] = None

        # set to None if ground_speed (nullable) is None
        # and model_fields_set contains the field
        if self.ground_speed is None and "ground_speed" in self.model_fields_set:
            _dict['ground_speed'] = None

        # set to None if vario (nullable) is None
        # and model_fields_set contains the field
        if self.vario is None and "vario" in self.model_fields_set:
            _dict['vario'] = None

        # set to None if bearing (nullable) is None
        # and model_fields_set contains the field
        if self.bearing is None and "bearing" in self.model_fields_set:
            _dict['bearing'] = None

        # set to None if youtube_id (nullable) is None
        # and model_fields_set contains the field
        if self.youtube_id is None and "youtube_id" in self.model_fields_set:
            _dict['youtube_id'] = None

        # set to None if width (nullable) is None
        # and model_fields_set contains the field
        if self.width is None and "width" in self.model_fields_set:
            _dict['width'] = None

        # set to None if height (nullable) is None
        # and model_fields_set contains the field
        if self.height is None and "height" in self.model_fields_set:
            _dict['height'] = None

        # set to None if video_url (nullable) is None
        # and model_fields_set contains the field
        if self.video_url is None and "video_url" in self.model_fields_set:
            _dict['video_url'] = None

        # set to None if video_status (nullable) is None
        # and model_fields_set contains the field
        if self.video_status is None and "video_status" in self.model_fields_set:
            _dict['video_status'] = None

        # set to None if video_duration (nullable) is None
        # and model_fields_set contains the field
        if self.video_duration is None and "video_duration" in self.model_fields_set:
            _dict['video_duration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Story from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "user_id": obj.get("user_id"),
            "flight_id": obj.get("flight_id"),
            "image": obj.get("image"),
            "comment": obj.get("comment"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "distance": obj.get("distance"),
            "geom": dict(
                (_k, StoryGeomValue.from_dict(_v))
                for _k, _v in obj["geom"].items()
            )
            if obj.get("geom") is not None
            else None,
            "alt": obj.get("alt"),
            "ground_speed": obj.get("ground_speed"),
            "vario": obj.get("vario"),
            "bearing": obj.get("bearing"),
            "time_offset": obj.get("time_offset"),
            "youtube_id": obj.get("youtube_id"),
            "width": obj.get("width"),
            "height": obj.get("height"),
            "video_url": obj.get("video_url"),
            "video_status": obj.get("video_status"),
            "video_duration": obj.get("video_duration")
        })
        return _obj


