# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetKatelloContentViewResult',
    'AwaitableGetKatelloContentViewResult',
    'get_katello_content_view',
    'get_katello_content_view_output',
]

@pulumi.output_type
class GetKatelloContentViewResult:
    """
    A collection of values returned by getKatelloContentView.
    """
    def __init__(__self__, auto_publish=None, component_ids=None, composite=None, description=None, filtered=None, filters=None, id=None, label=None, latest_version_id=None, name=None, organization_id=None, repository_ids=None, solve_dependencies=None):
        if auto_publish and not isinstance(auto_publish, bool):
            raise TypeError("Expected argument 'auto_publish' to be a bool")
        pulumi.set(__self__, "auto_publish", auto_publish)
        if component_ids and not isinstance(component_ids, list):
            raise TypeError("Expected argument 'component_ids' to be a list")
        pulumi.set(__self__, "component_ids", component_ids)
        if composite and not isinstance(composite, bool):
            raise TypeError("Expected argument 'composite' to be a bool")
        pulumi.set(__self__, "composite", composite)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filtered and not isinstance(filtered, bool):
            raise TypeError("Expected argument 'filtered' to be a bool")
        pulumi.set(__self__, "filtered", filtered)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if latest_version_id and not isinstance(latest_version_id, int):
            raise TypeError("Expected argument 'latest_version_id' to be a int")
        pulumi.set(__self__, "latest_version_id", latest_version_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_id and not isinstance(organization_id, int):
            raise TypeError("Expected argument 'organization_id' to be a int")
        pulumi.set(__self__, "organization_id", organization_id)
        if repository_ids and not isinstance(repository_ids, list):
            raise TypeError("Expected argument 'repository_ids' to be a list")
        pulumi.set(__self__, "repository_ids", repository_ids)
        if solve_dependencies and not isinstance(solve_dependencies, bool):
            raise TypeError("Expected argument 'solve_dependencies' to be a bool")
        pulumi.set(__self__, "solve_dependencies", solve_dependencies)

    @property
    @pulumi.getter(name="autoPublish")
    def auto_publish(self) -> bool:
        return pulumi.get(self, "auto_publish")

    @property
    @pulumi.getter(name="componentIds")
    def component_ids(self) -> Sequence[int]:
        return pulumi.get(self, "component_ids")

    @property
    @pulumi.getter
    def composite(self) -> bool:
        return pulumi.get(self, "composite")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filtered(self) -> bool:
        return pulumi.get(self, "filtered")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetKatelloContentViewFilterResult']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="latestVersionId")
    def latest_version_id(self) -> int:
        return pulumi.get(self, "latest_version_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> int:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="repositoryIds")
    def repository_ids(self) -> Sequence[int]:
        return pulumi.get(self, "repository_ids")

    @property
    @pulumi.getter(name="solveDependencies")
    def solve_dependencies(self) -> bool:
        return pulumi.get(self, "solve_dependencies")


class AwaitableGetKatelloContentViewResult(GetKatelloContentViewResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKatelloContentViewResult(
            auto_publish=self.auto_publish,
            component_ids=self.component_ids,
            composite=self.composite,
            description=self.description,
            filtered=self.filtered,
            filters=self.filters,
            id=self.id,
            label=self.label,
            latest_version_id=self.latest_version_id,
            name=self.name,
            organization_id=self.organization_id,
            repository_ids=self.repository_ids,
            solve_dependencies=self.solve_dependencies)


def get_katello_content_view(name: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKatelloContentViewResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getKatelloContentView:getKatelloContentView', __args__, opts=opts, typ=GetKatelloContentViewResult).value

    return AwaitableGetKatelloContentViewResult(
        auto_publish=pulumi.get(__ret__, 'auto_publish'),
        component_ids=pulumi.get(__ret__, 'component_ids'),
        composite=pulumi.get(__ret__, 'composite'),
        description=pulumi.get(__ret__, 'description'),
        filtered=pulumi.get(__ret__, 'filtered'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        label=pulumi.get(__ret__, 'label'),
        latest_version_id=pulumi.get(__ret__, 'latest_version_id'),
        name=pulumi.get(__ret__, 'name'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        repository_ids=pulumi.get(__ret__, 'repository_ids'),
        solve_dependencies=pulumi.get(__ret__, 'solve_dependencies'))
def get_katello_content_view_output(name: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKatelloContentViewResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getKatelloContentView:getKatelloContentView', __args__, opts=opts, typ=GetKatelloContentViewResult)
    return __ret__.apply(lambda __response__: GetKatelloContentViewResult(
        auto_publish=pulumi.get(__response__, 'auto_publish'),
        component_ids=pulumi.get(__response__, 'component_ids'),
        composite=pulumi.get(__response__, 'composite'),
        description=pulumi.get(__response__, 'description'),
        filtered=pulumi.get(__response__, 'filtered'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        label=pulumi.get(__response__, 'label'),
        latest_version_id=pulumi.get(__response__, 'latest_version_id'),
        name=pulumi.get(__response__, 'name'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        repository_ids=pulumi.get(__response__, 'repository_ids'),
        solve_dependencies=pulumi.get(__response__, 'solve_dependencies')))
