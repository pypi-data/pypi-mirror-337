"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import corvic_generated.chat.v1.service_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class ThreadServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateThread: grpc.UnaryUnaryMultiCallable[
        corvic_generated.chat.v1.service_pb2.CreateThreadRequest,
        corvic_generated.chat.v1.service_pb2.CreateThreadResponse,
    ]
    DeleteThread: grpc.UnaryUnaryMultiCallable[
        corvic_generated.chat.v1.service_pb2.DeleteThreadRequest,
        corvic_generated.chat.v1.service_pb2.DeleteThreadResponse,
    ]
    ListThreads: grpc.UnaryStreamMultiCallable[
        corvic_generated.chat.v1.service_pb2.ListThreadsRequest,
        corvic_generated.chat.v1.service_pb2.ListThreadsResponse,
    ]
    AppendMessage: grpc.UnaryUnaryMultiCallable[
        corvic_generated.chat.v1.service_pb2.AppendMessageRequest,
        corvic_generated.chat.v1.service_pb2.AppendMessageResponse,
    ]
    GetMessages: grpc.UnaryStreamMultiCallable[
        corvic_generated.chat.v1.service_pb2.GetMessagesRequest,
        corvic_generated.chat.v1.service_pb2.GetMessagesResponse,
    ]

class ThreadServiceAsyncStub:
    CreateThread: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.chat.v1.service_pb2.CreateThreadRequest,
        corvic_generated.chat.v1.service_pb2.CreateThreadResponse,
    ]
    DeleteThread: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.chat.v1.service_pb2.DeleteThreadRequest,
        corvic_generated.chat.v1.service_pb2.DeleteThreadResponse,
    ]
    ListThreads: grpc.aio.UnaryStreamMultiCallable[
        corvic_generated.chat.v1.service_pb2.ListThreadsRequest,
        corvic_generated.chat.v1.service_pb2.ListThreadsResponse,
    ]
    AppendMessage: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.chat.v1.service_pb2.AppendMessageRequest,
        corvic_generated.chat.v1.service_pb2.AppendMessageResponse,
    ]
    GetMessages: grpc.aio.UnaryStreamMultiCallable[
        corvic_generated.chat.v1.service_pb2.GetMessagesRequest,
        corvic_generated.chat.v1.service_pb2.GetMessagesResponse,
    ]

class ThreadServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateThread(
        self,
        request: corvic_generated.chat.v1.service_pb2.CreateThreadRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.chat.v1.service_pb2.CreateThreadResponse, collections.abc.Awaitable[corvic_generated.chat.v1.service_pb2.CreateThreadResponse]]: ...
    @abc.abstractmethod
    def DeleteThread(
        self,
        request: corvic_generated.chat.v1.service_pb2.DeleteThreadRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.chat.v1.service_pb2.DeleteThreadResponse, collections.abc.Awaitable[corvic_generated.chat.v1.service_pb2.DeleteThreadResponse]]: ...
    @abc.abstractmethod
    def ListThreads(
        self,
        request: corvic_generated.chat.v1.service_pb2.ListThreadsRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[corvic_generated.chat.v1.service_pb2.ListThreadsResponse], collections.abc.AsyncIterator[corvic_generated.chat.v1.service_pb2.ListThreadsResponse]]: ...
    @abc.abstractmethod
    def AppendMessage(
        self,
        request: corvic_generated.chat.v1.service_pb2.AppendMessageRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.chat.v1.service_pb2.AppendMessageResponse, collections.abc.Awaitable[corvic_generated.chat.v1.service_pb2.AppendMessageResponse]]: ...
    @abc.abstractmethod
    def GetMessages(
        self,
        request: corvic_generated.chat.v1.service_pb2.GetMessagesRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[corvic_generated.chat.v1.service_pb2.GetMessagesResponse], collections.abc.AsyncIterator[corvic_generated.chat.v1.service_pb2.GetMessagesResponse]]: ...

def add_ThreadServiceServicer_to_server(servicer: ThreadServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
