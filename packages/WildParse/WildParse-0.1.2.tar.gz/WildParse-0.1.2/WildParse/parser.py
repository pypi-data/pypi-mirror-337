from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from urllib.parse import urlparse
import time
from webdriver_manager.chrome import ChromeDriverManager
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ Selenium –∏ Chrome
import logging
from selenium.webdriver.remote.remote_connection import LOGGER

LOGGER.setLevel(logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('WDM').setLevel(logging.NOTSET)

print(
    "\033[1;36m"  # –Ø—Ä–∫–∏–π –≥–æ–ª—É–±–æ–π (—Ü–∏–∞–Ω)
    "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
    "‚îÇ   \033[1;34müöÄ\033[1;36m This script is using the \033[1;33m*Wildapies*\033[1;36m library     ‚îÇ\n"
    "‚îÇ   \033[0;36m(free method for Wildberries marketplace data)      ‚îÇ\n"
    "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
    "‚îÇ   \033[1;35müíñ\033[0;36m Support the project:                            ‚îÇ\n"
    "‚îÇ   \033[1;32müîó\033[0;36m unionium.org/donate/wildapies                  ‚îÇ\n"
    "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    "\033[0m"  # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
)

def getinfo(url: str) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —Å Wildberries –ø–æ URL, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–ª–Ω—ã–µ XPath.
    –ò–º–∏—Ç–∏—Ä—É–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (iPhone 12 Pro).
    –û–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    """
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –∏–º–∏—Ç–∞—Ü–∏–∏
    chrome_options = Options()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –∏–º–∏—Ç–∞—Ü–∏–∏
    mobile_emulation = {
        "deviceMetrics": {"width": 390, "height": 844, "pixelRatio": 3.0},
        "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1"
    }
    chrome_options.add_experimental_option("mobileEmulation", mobile_emulation)
    
    # –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è headless-—Ä–µ–∂–∏–º–∞ –∏ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--log-level=3")
    chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
        if not urlparse(url).netloc.endswith('wildberries.ru'):
            return {"error": "Invalid Wildberries URL"}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º –ª–æ–≥–æ–≤
        service = Service(ChromeDriverManager().install())
        service.creationflags = 0x08000000  # CREATE_NO_WINDOW
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        driver.get(url)
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        wait = WebDriverWait(driver, 20)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 20 —Å–µ–∫—É–Ω–¥
        
        # –°–ª–æ–≤–∞—Ä—å —Å XPath –¥–ª—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        elements_xpath = {
            "name": '/html/body/div[1]/main/div[2]/div[2]/div[3]/div/div[3]/div[9]/div[1]/h1',
            "price": '/html/body/div[1]/main/div[2]/div[2]/div[3]/div/div[3]/div[4]/div[1]/div[1]/div/div/div/p/span/ins',
            "brand": '/html/body/div[1]/main/div[2]/div[2]/div[3]/div/div[3]/div[9]/div[1]/div/a',
            "rating": '/html/body/div[1]/main/div[2]/div[2]/div[3]/div/div[3]/div[8]/a[1]/div[1]/div/p[1]'
        }
        
        # –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        for element in elements_xpath.values():
            try:
                wait.until(EC.presence_of_element_located((By.XPATH, element)))
            except Exception as e:
                print(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {element}. –û—à–∏–±–∫–∞: {str(e)}")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data = {
            "name": safe_extract(driver, elements_xpath["name"]),
            "price": clean_price(safe_extract(driver, elements_xpath["price"])),
            "brand": safe_extract(driver, elements_xpath["brand"]),
            "rating": safe_extract(driver, elements_xpath["rating"]),
            "articul": url.split('/')[-2],
            "url": url
        }

        if not any(data.values()):
            return {"error": "No data found (page structure changed)"}

        return data

    except Exception as e:
        return {"error": f"Unexpected error: {str(e)}"}
    finally:
        try:
            driver.quit()
        except:
            pass

def safe_extract(driver, xpath: str, default: str = "") -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ XPath"""
    try:
        element = driver.find_element(By.XPATH, xpath)
        return element.text.strip()
    except:
        return default

def clean_price(price_str: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–Ω–æ–π. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ '0' –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    if not price_str:
        return "0"
    
    cleaned = ''.join(c for c in price_str if c.isdigit() or c in {'.', ','})
    cleaned = cleaned.replace(',', '.')
    
    try:
        price_num = float(cleaned)
        return str(int(round(price_num)))
    except (ValueError, TypeError):
        return "0"