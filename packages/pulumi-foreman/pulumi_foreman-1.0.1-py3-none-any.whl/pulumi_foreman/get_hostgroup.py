# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetHostgroupResult',
    'AwaitableGetHostgroupResult',
    'get_hostgroup',
    'get_hostgroup_output',
]

@pulumi.output_type
class GetHostgroupResult:
    """
    A collection of values returned by getHostgroup.
    """
    def __init__(__self__, architecture_id=None, compute_profile_id=None, compute_resource_id=None, config_group_ids=None, content_source_id=None, content_view_id=None, domain_id=None, environment_id=None, id=None, lifecycle_environment_id=None, medium_id=None, name=None, operatingsystem_id=None, parameters=None, parent_id=None, ptable_id=None, puppet_ca_proxy_id=None, puppet_class_ids=None, puppet_proxy_id=None, pxe_loader=None, realm_id=None, root_password=None, subnet_id=None, title=None):
        if architecture_id and not isinstance(architecture_id, int):
            raise TypeError("Expected argument 'architecture_id' to be a int")
        pulumi.set(__self__, "architecture_id", architecture_id)
        if compute_profile_id and not isinstance(compute_profile_id, int):
            raise TypeError("Expected argument 'compute_profile_id' to be a int")
        pulumi.set(__self__, "compute_profile_id", compute_profile_id)
        if compute_resource_id and not isinstance(compute_resource_id, int):
            raise TypeError("Expected argument 'compute_resource_id' to be a int")
        pulumi.set(__self__, "compute_resource_id", compute_resource_id)
        if config_group_ids and not isinstance(config_group_ids, list):
            raise TypeError("Expected argument 'config_group_ids' to be a list")
        pulumi.set(__self__, "config_group_ids", config_group_ids)
        if content_source_id and not isinstance(content_source_id, int):
            raise TypeError("Expected argument 'content_source_id' to be a int")
        pulumi.set(__self__, "content_source_id", content_source_id)
        if content_view_id and not isinstance(content_view_id, int):
            raise TypeError("Expected argument 'content_view_id' to be a int")
        pulumi.set(__self__, "content_view_id", content_view_id)
        if domain_id and not isinstance(domain_id, int):
            raise TypeError("Expected argument 'domain_id' to be a int")
        pulumi.set(__self__, "domain_id", domain_id)
        if environment_id and not isinstance(environment_id, int):
            raise TypeError("Expected argument 'environment_id' to be a int")
        pulumi.set(__self__, "environment_id", environment_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_environment_id and not isinstance(lifecycle_environment_id, int):
            raise TypeError("Expected argument 'lifecycle_environment_id' to be a int")
        pulumi.set(__self__, "lifecycle_environment_id", lifecycle_environment_id)
        if medium_id and not isinstance(medium_id, int):
            raise TypeError("Expected argument 'medium_id' to be a int")
        pulumi.set(__self__, "medium_id", medium_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operatingsystem_id and not isinstance(operatingsystem_id, int):
            raise TypeError("Expected argument 'operatingsystem_id' to be a int")
        pulumi.set(__self__, "operatingsystem_id", operatingsystem_id)
        if parameters and not isinstance(parameters, dict):
            raise TypeError("Expected argument 'parameters' to be a dict")
        pulumi.set(__self__, "parameters", parameters)
        if parent_id and not isinstance(parent_id, int):
            raise TypeError("Expected argument 'parent_id' to be a int")
        pulumi.set(__self__, "parent_id", parent_id)
        if ptable_id and not isinstance(ptable_id, int):
            raise TypeError("Expected argument 'ptable_id' to be a int")
        pulumi.set(__self__, "ptable_id", ptable_id)
        if puppet_ca_proxy_id and not isinstance(puppet_ca_proxy_id, int):
            raise TypeError("Expected argument 'puppet_ca_proxy_id' to be a int")
        pulumi.set(__self__, "puppet_ca_proxy_id", puppet_ca_proxy_id)
        if puppet_class_ids and not isinstance(puppet_class_ids, list):
            raise TypeError("Expected argument 'puppet_class_ids' to be a list")
        pulumi.set(__self__, "puppet_class_ids", puppet_class_ids)
        if puppet_proxy_id and not isinstance(puppet_proxy_id, int):
            raise TypeError("Expected argument 'puppet_proxy_id' to be a int")
        pulumi.set(__self__, "puppet_proxy_id", puppet_proxy_id)
        if pxe_loader and not isinstance(pxe_loader, str):
            raise TypeError("Expected argument 'pxe_loader' to be a str")
        pulumi.set(__self__, "pxe_loader", pxe_loader)
        if realm_id and not isinstance(realm_id, int):
            raise TypeError("Expected argument 'realm_id' to be a int")
        pulumi.set(__self__, "realm_id", realm_id)
        if root_password and not isinstance(root_password, str):
            raise TypeError("Expected argument 'root_password' to be a str")
        pulumi.set(__self__, "root_password", root_password)
        if subnet_id and not isinstance(subnet_id, int):
            raise TypeError("Expected argument 'subnet_id' to be a int")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="architectureId")
    def architecture_id(self) -> int:
        return pulumi.get(self, "architecture_id")

    @property
    @pulumi.getter(name="computeProfileId")
    def compute_profile_id(self) -> int:
        return pulumi.get(self, "compute_profile_id")

    @property
    @pulumi.getter(name="computeResourceId")
    def compute_resource_id(self) -> int:
        return pulumi.get(self, "compute_resource_id")

    @property
    @pulumi.getter(name="configGroupIds")
    def config_group_ids(self) -> Sequence[int]:
        return pulumi.get(self, "config_group_ids")

    @property
    @pulumi.getter(name="contentSourceId")
    def content_source_id(self) -> int:
        return pulumi.get(self, "content_source_id")

    @property
    @pulumi.getter(name="contentViewId")
    def content_view_id(self) -> int:
        return pulumi.get(self, "content_view_id")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> int:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> int:
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleEnvironmentId")
    def lifecycle_environment_id(self) -> int:
        return pulumi.get(self, "lifecycle_environment_id")

    @property
    @pulumi.getter(name="mediumId")
    def medium_id(self) -> int:
        return pulumi.get(self, "medium_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingsystemId")
    def operatingsystem_id(self) -> int:
        return pulumi.get(self, "operatingsystem_id")

    @property
    @pulumi.getter
    def parameters(self) -> Mapping[str, str]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> int:
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter(name="ptableId")
    def ptable_id(self) -> int:
        return pulumi.get(self, "ptable_id")

    @property
    @pulumi.getter(name="puppetCaProxyId")
    def puppet_ca_proxy_id(self) -> int:
        return pulumi.get(self, "puppet_ca_proxy_id")

    @property
    @pulumi.getter(name="puppetClassIds")
    def puppet_class_ids(self) -> Sequence[int]:
        return pulumi.get(self, "puppet_class_ids")

    @property
    @pulumi.getter(name="puppetProxyId")
    def puppet_proxy_id(self) -> int:
        return pulumi.get(self, "puppet_proxy_id")

    @property
    @pulumi.getter(name="pxeLoader")
    def pxe_loader(self) -> str:
        return pulumi.get(self, "pxe_loader")

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> int:
        return pulumi.get(self, "realm_id")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> str:
        return pulumi.get(self, "root_password")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> int:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")


class AwaitableGetHostgroupResult(GetHostgroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHostgroupResult(
            architecture_id=self.architecture_id,
            compute_profile_id=self.compute_profile_id,
            compute_resource_id=self.compute_resource_id,
            config_group_ids=self.config_group_ids,
            content_source_id=self.content_source_id,
            content_view_id=self.content_view_id,
            domain_id=self.domain_id,
            environment_id=self.environment_id,
            id=self.id,
            lifecycle_environment_id=self.lifecycle_environment_id,
            medium_id=self.medium_id,
            name=self.name,
            operatingsystem_id=self.operatingsystem_id,
            parameters=self.parameters,
            parent_id=self.parent_id,
            ptable_id=self.ptable_id,
            puppet_ca_proxy_id=self.puppet_ca_proxy_id,
            puppet_class_ids=self.puppet_class_ids,
            puppet_proxy_id=self.puppet_proxy_id,
            pxe_loader=self.pxe_loader,
            realm_id=self.realm_id,
            root_password=self.root_password,
            subnet_id=self.subnet_id,
            title=self.title)


def get_hostgroup(title: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHostgroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['title'] = title
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getHostgroup:getHostgroup', __args__, opts=opts, typ=GetHostgroupResult).value

    return AwaitableGetHostgroupResult(
        architecture_id=pulumi.get(__ret__, 'architecture_id'),
        compute_profile_id=pulumi.get(__ret__, 'compute_profile_id'),
        compute_resource_id=pulumi.get(__ret__, 'compute_resource_id'),
        config_group_ids=pulumi.get(__ret__, 'config_group_ids'),
        content_source_id=pulumi.get(__ret__, 'content_source_id'),
        content_view_id=pulumi.get(__ret__, 'content_view_id'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        environment_id=pulumi.get(__ret__, 'environment_id'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_environment_id=pulumi.get(__ret__, 'lifecycle_environment_id'),
        medium_id=pulumi.get(__ret__, 'medium_id'),
        name=pulumi.get(__ret__, 'name'),
        operatingsystem_id=pulumi.get(__ret__, 'operatingsystem_id'),
        parameters=pulumi.get(__ret__, 'parameters'),
        parent_id=pulumi.get(__ret__, 'parent_id'),
        ptable_id=pulumi.get(__ret__, 'ptable_id'),
        puppet_ca_proxy_id=pulumi.get(__ret__, 'puppet_ca_proxy_id'),
        puppet_class_ids=pulumi.get(__ret__, 'puppet_class_ids'),
        puppet_proxy_id=pulumi.get(__ret__, 'puppet_proxy_id'),
        pxe_loader=pulumi.get(__ret__, 'pxe_loader'),
        realm_id=pulumi.get(__ret__, 'realm_id'),
        root_password=pulumi.get(__ret__, 'root_password'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        title=pulumi.get(__ret__, 'title'))
def get_hostgroup_output(title: Optional[pulumi.Input[str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHostgroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['title'] = title
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getHostgroup:getHostgroup', __args__, opts=opts, typ=GetHostgroupResult)
    return __ret__.apply(lambda __response__: GetHostgroupResult(
        architecture_id=pulumi.get(__response__, 'architecture_id'),
        compute_profile_id=pulumi.get(__response__, 'compute_profile_id'),
        compute_resource_id=pulumi.get(__response__, 'compute_resource_id'),
        config_group_ids=pulumi.get(__response__, 'config_group_ids'),
        content_source_id=pulumi.get(__response__, 'content_source_id'),
        content_view_id=pulumi.get(__response__, 'content_view_id'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        environment_id=pulumi.get(__response__, 'environment_id'),
        id=pulumi.get(__response__, 'id'),
        lifecycle_environment_id=pulumi.get(__response__, 'lifecycle_environment_id'),
        medium_id=pulumi.get(__response__, 'medium_id'),
        name=pulumi.get(__response__, 'name'),
        operatingsystem_id=pulumi.get(__response__, 'operatingsystem_id'),
        parameters=pulumi.get(__response__, 'parameters'),
        parent_id=pulumi.get(__response__, 'parent_id'),
        ptable_id=pulumi.get(__response__, 'ptable_id'),
        puppet_ca_proxy_id=pulumi.get(__response__, 'puppet_ca_proxy_id'),
        puppet_class_ids=pulumi.get(__response__, 'puppet_class_ids'),
        puppet_proxy_id=pulumi.get(__response__, 'puppet_proxy_id'),
        pxe_loader=pulumi.get(__response__, 'pxe_loader'),
        realm_id=pulumi.get(__response__, 'realm_id'),
        root_password=pulumi.get(__response__, 'root_password'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        title=pulumi.get(__response__, 'title')))
