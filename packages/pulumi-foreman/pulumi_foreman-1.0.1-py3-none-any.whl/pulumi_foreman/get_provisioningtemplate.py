# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetProvisioningtemplateResult',
    'AwaitableGetProvisioningtemplateResult',
    'get_provisioningtemplate',
    'get_provisioningtemplate_output',
]

@pulumi.output_type
class GetProvisioningtemplateResult:
    """
    A collection of values returned by getProvisioningtemplate.
    """
    def __init__(__self__, audit_comment=None, description=None, id=None, locked=None, name=None, operatingsystem_ids=None, snippet=None, template=None, template_combinations_attributes=None, template_kind_id=None):
        if audit_comment and not isinstance(audit_comment, str):
            raise TypeError("Expected argument 'audit_comment' to be a str")
        pulumi.set(__self__, "audit_comment", audit_comment)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if locked and not isinstance(locked, bool):
            raise TypeError("Expected argument 'locked' to be a bool")
        pulumi.set(__self__, "locked", locked)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operatingsystem_ids and not isinstance(operatingsystem_ids, list):
            raise TypeError("Expected argument 'operatingsystem_ids' to be a list")
        pulumi.set(__self__, "operatingsystem_ids", operatingsystem_ids)
        if snippet and not isinstance(snippet, bool):
            raise TypeError("Expected argument 'snippet' to be a bool")
        pulumi.set(__self__, "snippet", snippet)
        if template and not isinstance(template, str):
            raise TypeError("Expected argument 'template' to be a str")
        pulumi.set(__self__, "template", template)
        if template_combinations_attributes and not isinstance(template_combinations_attributes, list):
            raise TypeError("Expected argument 'template_combinations_attributes' to be a list")
        pulumi.set(__self__, "template_combinations_attributes", template_combinations_attributes)
        if template_kind_id and not isinstance(template_kind_id, int):
            raise TypeError("Expected argument 'template_kind_id' to be a int")
        pulumi.set(__self__, "template_kind_id", template_kind_id)

    @property
    @pulumi.getter(name="auditComment")
    def audit_comment(self) -> str:
        return pulumi.get(self, "audit_comment")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locked(self) -> bool:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingsystemIds")
    def operatingsystem_ids(self) -> Sequence[int]:
        return pulumi.get(self, "operatingsystem_ids")

    @property
    @pulumi.getter
    def snippet(self) -> bool:
        return pulumi.get(self, "snippet")

    @property
    @pulumi.getter
    def template(self) -> str:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="templateCombinationsAttributes")
    def template_combinations_attributes(self) -> Sequence['outputs.GetProvisioningtemplateTemplateCombinationsAttributeResult']:
        return pulumi.get(self, "template_combinations_attributes")

    @property
    @pulumi.getter(name="templateKindId")
    def template_kind_id(self) -> int:
        return pulumi.get(self, "template_kind_id")


class AwaitableGetProvisioningtemplateResult(GetProvisioningtemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProvisioningtemplateResult(
            audit_comment=self.audit_comment,
            description=self.description,
            id=self.id,
            locked=self.locked,
            name=self.name,
            operatingsystem_ids=self.operatingsystem_ids,
            snippet=self.snippet,
            template=self.template,
            template_combinations_attributes=self.template_combinations_attributes,
            template_kind_id=self.template_kind_id)


def get_provisioningtemplate(name: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProvisioningtemplateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('foreman:index/getProvisioningtemplate:getProvisioningtemplate', __args__, opts=opts, typ=GetProvisioningtemplateResult).value

    return AwaitableGetProvisioningtemplateResult(
        audit_comment=pulumi.get(__ret__, 'audit_comment'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        locked=pulumi.get(__ret__, 'locked'),
        name=pulumi.get(__ret__, 'name'),
        operatingsystem_ids=pulumi.get(__ret__, 'operatingsystem_ids'),
        snippet=pulumi.get(__ret__, 'snippet'),
        template=pulumi.get(__ret__, 'template'),
        template_combinations_attributes=pulumi.get(__ret__, 'template_combinations_attributes'),
        template_kind_id=pulumi.get(__ret__, 'template_kind_id'))
def get_provisioningtemplate_output(name: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProvisioningtemplateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('foreman:index/getProvisioningtemplate:getProvisioningtemplate', __args__, opts=opts, typ=GetProvisioningtemplateResult)
    return __ret__.apply(lambda __response__: GetProvisioningtemplateResult(
        audit_comment=pulumi.get(__response__, 'audit_comment'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        locked=pulumi.get(__response__, 'locked'),
        name=pulumi.get(__response__, 'name'),
        operatingsystem_ids=pulumi.get(__response__, 'operatingsystem_ids'),
        snippet=pulumi.get(__response__, 'snippet'),
        template=pulumi.get(__response__, 'template'),
        template_combinations_attributes=pulumi.get(__response__, 'template_combinations_attributes'),
        template_kind_id=pulumi.get(__response__, 'template_kind_id')))
