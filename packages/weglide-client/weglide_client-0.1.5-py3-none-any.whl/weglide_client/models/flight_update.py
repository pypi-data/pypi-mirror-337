# coding: utf-8

"""
    WeGlide

    Quantifying airsports

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FlightUpdate(BaseModel):
    """
    FlightUpdate
    """ # noqa: E501
    aircraft_id: Optional[StrictInt] = None
    co_user_id: Optional[StrictInt] = None
    co_user_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    co_user_date_of_birth: Optional[date] = None
    use_second_club: Optional[StrictBool] = None
    mass: Optional[StrictInt] = None
    comment: Optional[StrictStr] = None
    registration: Optional[Annotated[str, Field(min_length=4, strict=True, max_length=7)]] = None
    competition_id: Optional[Annotated[str, Field(strict=True, max_length=3)]] = None
    scoring_times: Optional[List[datetime]] = None
    engine_scoring_times: Optional[List[datetime]] = None
    fes_scoring_times: Optional[List[datetime]] = None
    score_club_class: Optional[StrictBool] = None
    rescore: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = ["aircraft_id", "co_user_id", "co_user_name", "co_user_date_of_birth", "use_second_club", "mass", "comment", "registration", "competition_id", "scoring_times", "engine_scoring_times", "fes_scoring_times", "score_club_class", "rescore"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FlightUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if aircraft_id (nullable) is None
        # and model_fields_set contains the field
        if self.aircraft_id is None and "aircraft_id" in self.model_fields_set:
            _dict['aircraft_id'] = None

        # set to None if co_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.co_user_id is None and "co_user_id" in self.model_fields_set:
            _dict['co_user_id'] = None

        # set to None if co_user_name (nullable) is None
        # and model_fields_set contains the field
        if self.co_user_name is None and "co_user_name" in self.model_fields_set:
            _dict['co_user_name'] = None

        # set to None if co_user_date_of_birth (nullable) is None
        # and model_fields_set contains the field
        if self.co_user_date_of_birth is None and "co_user_date_of_birth" in self.model_fields_set:
            _dict['co_user_date_of_birth'] = None

        # set to None if use_second_club (nullable) is None
        # and model_fields_set contains the field
        if self.use_second_club is None and "use_second_club" in self.model_fields_set:
            _dict['use_second_club'] = None

        # set to None if mass (nullable) is None
        # and model_fields_set contains the field
        if self.mass is None and "mass" in self.model_fields_set:
            _dict['mass'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if registration (nullable) is None
        # and model_fields_set contains the field
        if self.registration is None and "registration" in self.model_fields_set:
            _dict['registration'] = None

        # set to None if competition_id (nullable) is None
        # and model_fields_set contains the field
        if self.competition_id is None and "competition_id" in self.model_fields_set:
            _dict['competition_id'] = None

        # set to None if scoring_times (nullable) is None
        # and model_fields_set contains the field
        if self.scoring_times is None and "scoring_times" in self.model_fields_set:
            _dict['scoring_times'] = None

        # set to None if engine_scoring_times (nullable) is None
        # and model_fields_set contains the field
        if self.engine_scoring_times is None and "engine_scoring_times" in self.model_fields_set:
            _dict['engine_scoring_times'] = None

        # set to None if fes_scoring_times (nullable) is None
        # and model_fields_set contains the field
        if self.fes_scoring_times is None and "fes_scoring_times" in self.model_fields_set:
            _dict['fes_scoring_times'] = None

        # set to None if score_club_class (nullable) is None
        # and model_fields_set contains the field
        if self.score_club_class is None and "score_club_class" in self.model_fields_set:
            _dict['score_club_class'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FlightUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aircraft_id": obj.get("aircraft_id"),
            "co_user_id": obj.get("co_user_id"),
            "co_user_name": obj.get("co_user_name"),
            "co_user_date_of_birth": obj.get("co_user_date_of_birth"),
            "use_second_club": obj.get("use_second_club"),
            "mass": obj.get("mass"),
            "comment": obj.get("comment"),
            "registration": obj.get("registration"),
            "competition_id": obj.get("competition_id"),
            "scoring_times": obj.get("scoring_times"),
            "engine_scoring_times": obj.get("engine_scoring_times"),
            "fes_scoring_times": obj.get("fes_scoring_times"),
            "score_club_class": obj.get("score_club_class"),
            "rescore": obj.get("rescore") if obj.get("rescore") is not None else False
        })
        return _obj


