# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 3.16.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateUserDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'phone_number': 'str',
        'given_name': 'str',
        'family_name': 'str',
        'name': 'str',
        'nickname': 'str',
        'picture': 'str',
        'password': 'str',
        'username': 'str',
        'verify_email': 'bool',
        'blocked': 'bool'
    }

    attribute_map = {
        'email': 'email',
        'phone_number': 'phone_number',
        'given_name': 'given_name',
        'family_name': 'family_name',
        'name': 'name',
        'nickname': 'nickname',
        'picture': 'picture',
        'password': 'password',
        'username': 'username',
        'verify_email': 'verify_email',
        'blocked': 'blocked'
    }

    def __init__(self, email=None, phone_number=None, given_name=None, family_name=None, name=None, nickname=None, picture=None, password=None, username=None, verify_email=None, blocked=None):  # noqa: E501
        """UpdateUserDto - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._phone_number = None
        self._given_name = None
        self._family_name = None
        self._name = None
        self._nickname = None
        self._picture = None
        self._password = None
        self._username = None
        self._verify_email = None
        self._blocked = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if phone_number is not None:
            self.phone_number = phone_number
        if given_name is not None:
            self.given_name = given_name
        if family_name is not None:
            self.family_name = family_name
        if name is not None:
            self.name = name
        if nickname is not None:
            self.nickname = nickname
        if picture is not None:
            self.picture = picture
        if password is not None:
            self.password = password
        if username is not None:
            self.username = username
        if verify_email is not None:
            self.verify_email = verify_email
        if blocked is not None:
            self.blocked = blocked

    @property
    def email(self):
        """Gets the email of this UpdateUserDto.  # noqa: E501


        :return: The email of this UpdateUserDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UpdateUserDto.


        :param email: The email of this UpdateUserDto.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this UpdateUserDto.  # noqa: E501


        :return: The phone_number of this UpdateUserDto.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UpdateUserDto.


        :param phone_number: The phone_number of this UpdateUserDto.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def given_name(self):
        """Gets the given_name of this UpdateUserDto.  # noqa: E501


        :return: The given_name of this UpdateUserDto.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this UpdateUserDto.


        :param given_name: The given_name of this UpdateUserDto.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def family_name(self):
        """Gets the family_name of this UpdateUserDto.  # noqa: E501


        :return: The family_name of this UpdateUserDto.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this UpdateUserDto.


        :param family_name: The family_name of this UpdateUserDto.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def name(self):
        """Gets the name of this UpdateUserDto.  # noqa: E501


        :return: The name of this UpdateUserDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateUserDto.


        :param name: The name of this UpdateUserDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nickname(self):
        """Gets the nickname of this UpdateUserDto.  # noqa: E501


        :return: The nickname of this UpdateUserDto.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this UpdateUserDto.


        :param nickname: The nickname of this UpdateUserDto.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def picture(self):
        """Gets the picture of this UpdateUserDto.  # noqa: E501


        :return: The picture of this UpdateUserDto.  # noqa: E501
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this UpdateUserDto.


        :param picture: The picture of this UpdateUserDto.  # noqa: E501
        :type: str
        """

        self._picture = picture

    @property
    def password(self):
        """Gets the password of this UpdateUserDto.  # noqa: E501


        :return: The password of this UpdateUserDto.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdateUserDto.


        :param password: The password of this UpdateUserDto.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def username(self):
        """Gets the username of this UpdateUserDto.  # noqa: E501


        :return: The username of this UpdateUserDto.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UpdateUserDto.


        :param username: The username of this UpdateUserDto.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def verify_email(self):
        """Gets the verify_email of this UpdateUserDto.  # noqa: E501


        :return: The verify_email of this UpdateUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._verify_email

    @verify_email.setter
    def verify_email(self, verify_email):
        """Sets the verify_email of this UpdateUserDto.


        :param verify_email: The verify_email of this UpdateUserDto.  # noqa: E501
        :type: bool
        """

        self._verify_email = verify_email

    @property
    def blocked(self):
        """Gets the blocked of this UpdateUserDto.  # noqa: E501


        :return: The blocked of this UpdateUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this UpdateUserDto.


        :param blocked: The blocked of this UpdateUserDto.  # noqa: E501
        :type: bool
        """

        self._blocked = blocked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateUserDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateUserDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
