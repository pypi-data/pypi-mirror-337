# generated by datamodel-codegen:
#   filename:  data_room.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class Kind(Enum):
    BASE = 'BASE'


class AudienceReference1(BaseModel):
    kind: Kind


class Kind4(Enum):
    CUSTOM = 'CUSTOM'


class AudienceReference2(BaseModel):
    id: str
    kind: Kind4


class Kind5(Enum):
    SEED = 'SEED'


class AudienceReference3(BaseModel):
    audienceType: str
    kind: Kind5


class AudienceReference(
    RootModel[Union[AudienceReference1, AudienceReference2, AudienceReference3]]
):
    root: Union[AudienceReference1, AudienceReference2, AudienceReference3]


class BooleanOp(Enum):
    AND = 'AND'
    OR = 'OR'


class CombineOperator(Enum):
    INTERSECT = 'INTERSECT'
    UNION = 'UNION'
    DIFF = 'DIFF'


class Kind6(Enum):
    LOOKALIKE = 'LOOKALIKE'


class CustomAudienceDefinition1(BaseModel):
    excludeSeedAudience: Optional[bool] = None
    kind: Kind6
    reach: conint(ge=0)
    sourceRef: AudienceReference


class Kind7(Enum):
    RULE_BASED = 'RULE_BASED'


class FilterOperator(Enum):
    CONTAINS_ANY_OF = 'CONTAINS_ANY_OF'
    CONTAINS_NONE_OF = 'CONTAINS_NONE_OF'
    CONTAINS_ALL_OF = 'CONTAINS_ALL_OF'
    EMPTY = 'EMPTY'
    NOT_EMPTY = 'NOT_EMPTY'


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class Version(Enum):
    v0 = 'v0'


class ModelEvaluationType(Enum):
    ROC_CURVE = 'ROC_CURVE'
    DISTANCE_TO_EMBEDDING = 'DISTANCE_TO_EMBEDDING'
    JACCARD = 'JACCARD'


class Permission(Enum):
    VIEW_OVERLAP = 'VIEW_OVERLAP'
    VIEW_INSIGHTS = 'VIEW_INSIGHTS'
    PROVIDE_SEED_AUDIENCE = 'PROVIDE_SEED_AUDIENCE'
    PROVIDE_BASE_AUDIENCE = 'PROVIDE_BASE_AUDIENCE'
    CREATE_CUSTOM_AUDIENCE = 'CREATE_CUSTOM_AUDIENCE'
    EXPORT_AUDIENCE = 'EXPORT_AUDIENCE'
    MODEL_QUALITY = 'MODEL_QUALITY'


class AudienceFilter(BaseModel):
    attribute: str
    operator: FilterOperator
    values: Optional[Sequence[str]] = None


class AudienceFilters(BaseModel):
    booleanOp: BooleanOp
    filters: Sequence[AudienceFilter]


class ModelEvaluationConfig(BaseModel):
    postScopeMerge: Sequence[ModelEvaluationType]
    preScopeMerge: Sequence[ModelEvaluationType]


class ParticipantGroup(BaseModel):
    emails: Sequence[str]
    organizationId: Optional[str] = None
    permissions: Sequence[Permission]
    role: str


class AudienceCombinator(BaseModel):
    filters: Optional[AudienceFilters] = None
    operator: CombineOperator
    sourceRef: AudienceReference


class CustomAudienceDefinition2(BaseModel):
    combine: Optional[Sequence[AudienceCombinator]] = None
    filters: Optional[AudienceFilters] = None
    kind: Kind7
    sourceRef: AudienceReference


class CustomAudienceDefinition(
    RootModel[Union[CustomAudienceDefinition1, CustomAudienceDefinition2]]
):
    root: Union[CustomAudienceDefinition1, CustomAudienceDefinition2]


class CustomAudience(BaseModel):
    createdAt: str
    createdBy: str
    definition: CustomAudienceDefinition
    doesAudienceDependOnLookalikeAudience: Optional[bool] = False
    id: str
    isStale: Optional[bool] = Field(
        False,
        description='Whether this audience cannot be generated with the current data provisioned to the MDCR. NOTE: This is added here so that the types we generate are correct. This value can only be set in the Python computation get_audiences that has access to the actual data.',
    )
    name: str
    sharedWith: Optional[Sequence[str]] = []


class MediaDcr1(BaseModel):
    audiencesPolicyId: Optional[str] = None
    audiencesPolicyProvisionedAt: Optional[str] = None
    customAudiences: Sequence[CustomAudience]
    demographicsPolicyId: Optional[str] = None
    embeddingsPolicyId: Optional[str] = None
    features: Sequence[str]
    hashMatchingIdWith: Optional[HashingAlgorithm] = None
    matchingIdFormat: FormatType
    matchingPolicyId: Optional[str] = None
    modelEvaluation: Optional[ModelEvaluationConfig] = None
    name: str
    participantGroups: Sequence[ParticipantGroup]
    segmentsPolicyId: Optional[str] = None
    version: Version


class MediaDcr(RootModel[MediaDcr1]):
    root: MediaDcr1


class DataRoom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    media: MediaDcr


class DataRoom(RootModel[DataRoom1]):
    root: DataRoom1 = Field(..., title='DataRoom')
