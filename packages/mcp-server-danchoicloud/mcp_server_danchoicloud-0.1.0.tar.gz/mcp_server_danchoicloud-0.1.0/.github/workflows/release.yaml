name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-python-package:
    name: Build distribution üì¶
    runs-on: ubuntu-latest
    env:
      UV_CACHE_DIR: /tmp/.uv-cache

    steps:
      - uses: actions/checkout@v4 # v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      - name: Build Python package
        run: |
          uv build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: danchoicloud-package-distributions
          path: dist/
      - name: Minimize uv cache
        run: uv cache prune --ci

  publish-to-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI
    needs:
      - build-python-package
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/mcp-server-danchoicloud
    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: danchoicloud-package-distributions
          path: dist/
      - name: Publish distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-to-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    needs:
      - build-python-package
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/mcp-server-danchoicloud

    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: danchoicloud-package-distributions
          path: dist/
      - name: Publish distribution üì¶ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  build-and-push:
    name: Build and push Docker image üê≥ to Docker Hub
    runs-on: ubuntu-latest
    env:
      CI: true

    steps:
      - uses: actions/checkout@v4 # v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Release Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REGISTRY_PREFIX }}:${{ steps.get_version.outputs.VERSION }}
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          cache-to: type=local,dest=${{ runner.temp }}/.buildx-cache-new,mode=max

      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

  notify:
    name: Notify on Telegram
    needs:
      - publish-to-pypi
      - build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Get Release Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Telegram Notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üöÄ New release of ${{ github.repository }}: ${{ steps.get_version.outputs.VERSION }}
            üê≥ Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REGISTRY_PREFIX }}:${{ steps.get_version.outputs.VERSION }}
            üì¶ PyPI: https://pypi.org/project/mcp-server-danchoicloud
